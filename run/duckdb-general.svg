<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2118" onload="init(evt)" viewBox="0 0 1200 2118" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2118.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2101" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2101" > </text>
<g id="frames">
<g >
<title>duckdb::RowGroup::Append (54,100,165 samples, 0.11%)</title><rect x="229.7" y="1653" width="1.2" height="15.0" fill="rgb(233,95,40)" rx="2" ry="2" />
<text  x="232.70" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1541" width="0.3" height="15.0" fill="rgb(241,116,51)" rx="2" ry="2" />
<text  x="1120.47" y="1551.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TableRef, std::default_delete&lt;duckdb::TableRef&gt; &gt;::release (6,584,798 samples, 0.01%)</title><rect x="535.4" y="1733" width="0.2" height="15.0" fill="rgb(248,43,13)" rx="2" ry="2" />
<text  x="538.45" y="1743.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityData&lt;unsigned long&gt;::~TemplatedValidityData (5,402,715 samples, 0.01%)</title><rect x="374.8" y="1653" width="0.1" height="15.0" fill="rgb(253,163,20)" rx="2" ry="2" />
<text  x="377.78" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalInsert, std::default_delete&lt;duckdb::PhysicalInsert&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PhysicalInsert&gt;, void&gt; (9,791,194 samples, 0.02%)</title><rect x="857.1" y="1797" width="0.2" height="15.0" fill="rgb(217,83,30)" rx="2" ry="2" />
<text  x="860.05" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::EnumComparisonRule, std::default_delete&lt;duckdb::EnumComparisonRule&gt;, void&gt; (16,804,868 samples, 0.03%)</title><rect x="822.8" y="1861" width="0.4" height="15.0" fill="rgb(241,164,18)" rx="2" ry="2" />
<text  x="825.83" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;unsigned long, false&gt;::_Hash_node (6,068,715 samples, 0.01%)</title><rect x="667.6" y="1701" width="0.1" height="15.0" fill="rgb(250,61,9)" rx="2" ry="2" />
<text  x="670.59" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundCastData, std::default_delete&lt;duckdb::BoundCastData&gt; &gt;::unique_ptr (12,225,265 samples, 0.02%)</title><rect x="932.6" y="1637" width="0.3" height="15.0" fill="rgb(210,1,45)" rx="2" ry="2" />
<text  x="935.61" y="1647.5" ></text>
</g>
<g >
<title>std::__weak_ptr&lt;duckdb::InterruptDoneSignalState,  (4,862,735 samples, 0.01%)</title><rect x="335.6" y="1653" width="0.1" height="15.0" fill="rgb(209,80,6)" rx="2" ry="2" />
<text  x="338.63" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::operator= (12,711,857 samples, 0.02%)</title><rect x="597.8" y="1749" width="0.2" height="15.0" fill="rgb(220,127,17)" rx="2" ry="2" />
<text  x="600.76" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ArgMaxFun::GetFunctions (9,593,970 samples, 0.02%)</title><rect x="1112.2" y="1909" width="0.2" height="15.0" fill="rgb(225,65,46)" rx="2" ry="2" />
<text  x="1115.20" y="1919.5" ></text>
</g>
<g >
<title>duckdb::StringUtil::Repeat (5,310,310 samples, 0.01%)</title><rect x="579.5" y="1797" width="0.1" height="15.0" fill="rgb(229,60,0)" rx="2" ry="2" />
<text  x="582.53" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Binder::CreateBinder (72,192,671 samples, 0.14%)</title><rect x="984.6" y="1829" width="1.7" height="15.0" fill="rgb(212,66,23)" rx="2" ry="2" />
<text  x="987.64" y="1839.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::InitialCleanup (28,315,797 samples, 0.06%)</title><rect x="516.5" y="1957" width="0.6" height="15.0" fill="rgb(248,5,17)" rx="2" ry="2" />
<text  x="519.47" y="1967.5" ></text>
</g>
<g >
<title>duckdb::LogicalProjection::GetColumnBindings (5,844,279 samples, 0.01%)</title><rect x="848.1" y="1845" width="0.1" height="15.0" fill="rgb(206,92,21)" rx="2" ry="2" />
<text  x="851.08" y="1855.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::RowGroup, std::default_delete&lt;duckdb::RowGroup&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::RowGroup&gt; &gt; (5,015,717 samples, 0.01%)</title><rect x="458.3" y="1701" width="0.1" height="15.0" fill="rgb(249,34,13)" rx="2" ry="2" />
<text  x="461.31" y="1711.5" ></text>
</g>
<g >
<title>duckdb::CSEReplacementState::CSEReplacementState (8,323,305 samples, 0.02%)</title><rect x="728.2" y="1733" width="0.1" height="15.0" fill="rgb(225,126,31)" rx="2" ry="2" />
<text  x="731.15" y="1743.5" ></text>
</g>
<g >
<title>__lsan::MarkInvalidPCCb (5,622,532 samples, 0.01%)</title><rect x="48.9" y="2021" width="0.1" height="15.0" fill="rgb(209,173,51)" rx="2" ry="2" />
<text  x="51.86" y="2031.5" ></text>
</g>
<g >
<title>duckdb::Vector::ResetFromCache (11,276,568 samples, 0.02%)</title><rect x="464.8" y="1765" width="0.3" height="15.0" fill="rgb(248,218,53)" rx="2" ry="2" />
<text  x="467.81" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (9,916,935 samples, 0.02%)</title><rect x="831.9" y="1477" width="0.2" height="15.0" fill="rgb(230,126,54)" rx="2" ry="2" />
<text  x="834.87" y="1487.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;*&gt; (26,152,165 samples, 0.05%)</title><rect x="483.9" y="1685" width="0.6" height="15.0" fill="rgb(213,131,3)" rx="2" ry="2" />
<text  x="486.91" y="1695.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::~DataChunk (7,977,143 samples, 0.02%)</title><rect x="108.5" y="1765" width="0.2" height="15.0" fill="rgb(244,27,16)" rx="2" ry="2" />
<text  x="111.52" y="1775.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::~LogicalOperator (28,736,037 samples, 0.06%)</title><rect x="1036.2" y="1621" width="0.6" height="15.0" fill="rgb(234,198,1)" rx="2" ry="2" />
<text  x="1039.17" y="1631.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RenderTree, unsigned long&amp;, unsigned long&amp;&gt; (25,147,575 samples, 0.05%)</title><rect x="635.4" y="1749" width="0.6" height="15.0" fill="rgb(207,11,1)" rx="2" ry="2" />
<text  x="638.42" y="1759.5" ></text>
</g>
<g >
<title>duckdb::FilterPushdown::Rewrite (126,721,511 samples, 0.25%)</title><rect x="746.2" y="1781" width="2.9" height="15.0" fill="rgb(214,163,54)" rx="2" ry="2" />
<text  x="749.23" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt; &gt; &gt;::_M_default_append (15,902,886 samples, 0.03%)</title><rect x="480.2" y="1781" width="0.3" height="15.0" fill="rgb(242,196,25)" rx="2" ry="2" />
<text  x="483.18" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;std::lock_guard&lt;std::mutex&gt;, std::default_delete&lt;std::lock_guard&lt;std::mutex&gt; &gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;std::lock_guard&lt;std::mutex&gt; &gt;, void&gt; (10,098,068 samples, 0.02%)</title><rect x="328.8" y="1813" width="0.2" height="15.0" fill="rgb(248,207,28)" rx="2" ry="2" />
<text  x="331.76" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Insert&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::ReferenceEquality&lt;duckdb::SchemaCatalogEntry&gt;, duckdb::ReferenceHashFunction&lt;duckdb::SchemaCatalogEntry&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt;, true&gt;::insert (47,545,684 samples, 0.09%)</title><rect x="1007.0" y="1749" width="1.1" height="15.0" fill="rgb(242,227,27)" rx="2" ry="2" />
<text  x="1010.01" y="1759.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (61,164,204 samples, 0.12%)</title><rect x="498.0" y="1605" width="1.4" height="15.0" fill="rgb(209,180,17)" rx="2" ry="2" />
<text  x="500.99" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (18,097,941 samples, 0.04%)</title><rect x="920.8" y="1797" width="0.4" height="15.0" fill="rgb(210,119,5)" rx="2" ry="2" />
<text  x="923.83" y="1807.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::RowGroupCollection, std::allocator&lt;duckdb::RowGroupCollection&gt;,  (5,370,940 samples, 0.01%)</title><rect x="102.5" y="1477" width="0.1" height="15.0" fill="rgb(237,115,1)" rx="2" ry="2" />
<text  x="105.50" y="1487.5" ></text>
</g>
<g >
<title>__interceptor_strcmp (7,167,838 samples, 0.01%)</title><rect x="522.2" y="1813" width="0.2" height="15.0" fill="rgb(225,26,6)" rx="2" ry="2" />
<text  x="525.22" y="1823.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RenderTreeNode&gt; (9,762,129 samples, 0.02%)</title><rect x="551.5" y="1749" width="0.3" height="15.0" fill="rgb(206,10,15)" rx="2" ry="2" />
<text  x="554.53" y="1759.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (6,218,650 samples, 0.01%)</title><rect x="369.5" y="1813" width="0.1" height="15.0" fill="rgb(251,35,25)" rx="2" ry="2" />
<text  x="372.48" y="1823.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned long&gt; (5,953,968 samples, 0.01%)</title><rect x="661.6" y="1621" width="0.1" height="15.0" fill="rgb(245,202,17)" rx="2" ry="2" />
<text  x="664.57" y="1631.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_node (4,673,029 samples, 0.01%)</title><rect x="788.2" y="1765" width="0.2" height="15.0" fill="rgb(227,51,51)" rx="2" ry="2" />
<text  x="791.24" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (5,535,666 samples, 0.01%)</title><rect x="493.2" y="1461" width="0.1" height="15.0" fill="rgb(229,37,42)" rx="2" ry="2" />
<text  x="496.20" y="1471.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::~unique_ptr (70,056,137 samples, 0.14%)</title><rect x="1035.8" y="1877" width="1.6" height="15.0" fill="rgb(243,166,9)" rx="2" ry="2" />
<text  x="1038.76" y="1887.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DistinctStatistics, std::default_delete&lt;duckdb::DistinctStatistics&gt; &gt;::operator= (6,488,735 samples, 0.01%)</title><rect x="427.1" y="1397" width="0.1" height="15.0" fill="rgb(208,222,24)" rx="2" ry="2" />
<text  x="430.09" y="1407.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::NodeStatistics, std::default_delete&lt;duckdb::NodeStatistics&gt; &gt;::release (6,125,968 samples, 0.01%)</title><rect x="767.2" y="1685" width="0.2" height="15.0" fill="rgb(240,30,44)" rx="2" ry="2" />
<text  x="770.24" y="1695.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;unsigned long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt; &gt; (202,020,637 samples, 0.39%)</title><rect x="676.5" y="1765" width="4.6" height="15.0" fill="rgb(254,137,10)" rx="2" ry="2" />
<text  x="679.49" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCheckpointer::ScanSegments (5,493,377 samples, 0.01%)</title><rect x="1119.2" y="1093" width="0.1" height="15.0" fill="rgb(221,216,31)" rx="2" ry="2" />
<text  x="1122.16" y="1103.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (99,826,702 samples, 0.19%)</title><rect x="842.3" y="1829" width="2.3" height="15.0" fill="rgb(244,14,36)" rx="2" ry="2" />
<text  x="845.27" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (128,759,638 samples, 0.25%)</title><rect x="366.3" y="1701" width="3.0" height="15.0" fill="rgb(237,12,47)" rx="2" ry="2" />
<text  x="369.30" y="1711.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::HTTPState&gt;::shared_ptr&lt;std::allocator&lt;duckdb::HTTPState&gt;&gt; (19,011,694 samples, 0.04%)</title><rect x="359.3" y="1861" width="0.4" height="15.0" fill="rgb(233,140,5)" rx="2" ry="2" />
<text  x="362.25" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (4,379,724 samples, 0.01%)</title><rect x="812.4" y="1797" width="0.1" height="15.0" fill="rgb(240,90,31)" rx="2" ry="2" />
<text  x="815.40" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; &gt;::_M_check_len (4,407,775 samples, 0.01%)</title><rect x="869.3" y="1717" width="0.1" height="15.0" fill="rgb(242,196,3)" rx="2" ry="2" />
<text  x="872.27" y="1727.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBottomLayer (57,529,212 samples, 0.11%)</title><rect x="599.0" y="1797" width="1.3" height="15.0" fill="rgb(221,155,30)" rx="2" ry="2" />
<text  x="602.03" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_allocate_buckets (14,868,504 samples, 0.03%)</title><rect x="691.5" y="1701" width="0.4" height="15.0" fill="rgb(233,106,49)" rx="2" ry="2" />
<text  x="694.53" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (11,019,687 samples, 0.02%)</title><rect x="1025.7" y="1829" width="0.3" height="15.0" fill="rgb(206,163,4)" rx="2" ry="2" />
<text  x="1028.70" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (15,365,013 samples, 0.03%)</title><rect x="438.3" y="1445" width="0.4" height="15.0" fill="rgb(228,96,20)" rx="2" ry="2" />
<text  x="441.34" y="1455.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc (12,119,497 samples, 0.02%)</title><rect x="1123.5" y="1509" width="0.3" height="15.0" fill="rgb(226,170,19)" rx="2" ry="2" />
<text  x="1126.53" y="1519.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned char [], std::default_delete&lt;unsigned char []&gt; &gt;::operator= (4,935,543 samples, 0.01%)</title><rect x="591.1" y="1717" width="0.1" height="15.0" fill="rgb(239,62,26)" rx="2" ry="2" />
<text  x="594.10" y="1727.5" ></text>
</g>
<g >
<title>duckdb::BoundColumnRefExpression::Serialize (83,589,553 samples, 0.16%)</title><rect x="590.4" y="1845" width="1.9" height="15.0" fill="rgb(246,96,39)" rx="2" ry="2" />
<text  x="593.38" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::~vector (5,228,906 samples, 0.01%)</title><rect x="227.6" y="1717" width="0.1" height="15.0" fill="rgb(246,169,0)" rx="2" ry="2" />
<text  x="230.58" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::~vector (26,572,808 samples, 0.05%)</title><rect x="575.6" y="1797" width="0.6" height="15.0" fill="rgb(213,136,21)" rx="2" ry="2" />
<text  x="578.56" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (4,702,942 samples, 0.01%)</title><rect x="735.7" y="1717" width="0.1" height="15.0" fill="rgb(222,143,50)" rx="2" ry="2" />
<text  x="738.73" y="1727.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::PhysicalExpressionScan, std::default_delete&lt;duckdb::PhysicalExpressionScan&gt; &gt;::__uniq_ptr_impl (7,724,137 samples, 0.02%)</title><rect x="914.0" y="1733" width="0.1" height="15.0" fill="rgb(240,197,39)" rx="2" ry="2" />
<text  x="916.95" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ColumnScanState::ColumnScanState (16,671,163 samples, 0.03%)</title><rect x="224.1" y="1685" width="0.4" height="15.0" fill="rgb(225,79,13)" rx="2" ry="2" />
<text  x="227.08" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ValidityMask::Resize (28,248,598 samples, 0.06%)</title><rect x="473.7" y="1717" width="0.6" height="15.0" fill="rgb(235,12,54)" rx="2" ry="2" />
<text  x="476.67" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_default_append (10,413,114 samples, 0.02%)</title><rect x="1020.7" y="1813" width="0.3" height="15.0" fill="rgb(224,42,40)" rx="2" ry="2" />
<text  x="1023.74" y="1823.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (6,803,993 samples, 0.01%)</title><rect x="914.1" y="1765" width="0.2" height="15.0" fill="rgb(226,89,14)" rx="2" ry="2" />
<text  x="917.13" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::HTTPState,  (12,359,892 samples, 0.02%)</title><rect x="1041.4" y="1877" width="0.3" height="15.0" fill="rgb(227,182,13)" rx="2" ry="2" />
<text  x="1044.37" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::CatalogEntryEquality, duckdb::CatalogEntryHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::clear (10,357,092 samples, 0.02%)</title><rect x="924.6" y="1829" width="0.3" height="15.0" fill="rgb(234,146,12)" rx="2" ry="2" />
<text  x="927.64" y="1839.5" ></text>
</g>
<g >
<title>std::map&lt;duckdb::PhysicalType, duckdb::CompressionFunction, std::less&lt;duckdb::PhysicalType&gt;, std::allocator&lt;std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt; &gt; &gt;::find (12,370,670 samples, 0.02%)</title><rect x="435.5" y="1637" width="0.3" height="15.0" fill="rgb(228,173,46)" rx="2" ry="2" />
<text  x="438.50" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (5,198,628 samples, 0.01%)</title><rect x="656.8" y="1669" width="0.2" height="15.0" fill="rgb(242,172,12)" rx="2" ry="2" />
<text  x="659.84" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (7,680,010 samples, 0.01%)</title><rect x="487.8" y="1413" width="0.2" height="15.0" fill="rgb(215,26,30)" rx="2" ry="2" />
<text  x="490.79" y="1423.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (8,227,035 samples, 0.02%)</title><rect x="632.0" y="1733" width="0.2" height="15.0" fill="rgb(219,172,43)" rx="2" ry="2" />
<text  x="634.98" y="1743.5" ></text>
</g>
<g >
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;double, std::ratio&lt;1l, 1l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (10,751,341 samples, 0.02%)</title><rect x="714.6" y="1829" width="0.3" height="15.0" fill="rgb(232,211,52)" rx="2" ry="2" />
<text  x="717.61" y="1839.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (5,504,722 samples, 0.01%)</title><rect x="108.1" y="1541" width="0.1" height="15.0" fill="rgb(219,216,47)" rx="2" ry="2" />
<text  x="111.09" y="1551.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Binder&gt;::construct&lt;duckdb::Binder, bool, duckdb::ClientContext&amp;, std::shared_ptr&lt;duckdb::Binder&gt;, bool&amp;&gt; (52,581,084 samples, 0.10%)</title><rect x="984.9" y="1701" width="1.2" height="15.0" fill="rgb(228,150,26)" rx="2" ry="2" />
<text  x="987.91" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::ColumnData&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::ColumnData&gt; &gt; &gt;::push_back (27,712,239 samples, 0.05%)</title><rect x="456.0" y="1717" width="0.6" height="15.0" fill="rgb(248,154,48)" rx="2" ry="2" />
<text  x="458.96" y="1727.5" ></text>
</g>
<g >
<title>do_futex (41,846,636 samples, 0.08%)</title><rect x="74.6" y="1957" width="1.0" height="15.0" fill="rgb(210,113,1)" rx="2" ry="2" />
<text  x="77.61" y="1967.5" ></text>
</g>
<g >
<title>duckdb::TableStatistics::~TableStatistics (34,483,883 samples, 0.07%)</title><rect x="236.2" y="1541" width="0.8" height="15.0" fill="rgb(245,140,17)" rx="2" ry="2" />
<text  x="239.19" y="1551.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Binder&gt;::construct&lt;duckdb::Binder, bool, duckdb::ClientContext&amp;, std::shared_ptr&lt;duckdb::Binder&gt;, bool&amp;&gt; (49,623,706 samples, 0.10%)</title><rect x="1028.1" y="1749" width="1.1" height="15.0" fill="rgb(233,148,33)" rx="2" ry="2" />
<text  x="1031.10" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::RenderWidth (11,835,851 samples, 0.02%)</title><rect x="837.2" y="1797" width="0.3" height="15.0" fill="rgb(228,44,50)" rx="2" ry="2" />
<text  x="840.21" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::QualifyColumnNames (135,900,791 samples, 0.26%)</title><rect x="958.0" y="1733" width="3.1" height="15.0" fill="rgb(223,2,47)" rx="2" ry="2" />
<text  x="960.98" y="1743.5" ></text>
</g>
<g >
<title>duckdb::VectorBuffer::VectorBuffer (5,154,601 samples, 0.01%)</title><rect x="219.3" y="1525" width="0.1" height="15.0" fill="rgb(219,70,53)" rx="2" ry="2" />
<text  x="222.27" y="1535.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_gc_event_handler (11,158,533 samples, 0.02%)</title><rect x="891.6" y="1397" width="0.2" height="15.0" fill="rgb(218,37,50)" rx="2" ry="2" />
<text  x="894.58" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, unsigned long, true&gt;::_S_equals (5,156,839 samples, 0.01%)</title><rect x="959.9" y="1557" width="0.2" height="15.0" fill="rgb(219,187,39)" rx="2" ry="2" />
<text  x="962.94" y="1567.5" ></text>
</g>
<g >
<title>duckdb::Vector::Resize (77,365,567 samples, 0.15%)</title><rect x="473.5" y="1733" width="1.8" height="15.0" fill="rgb(249,203,15)" rx="2" ry="2" />
<text  x="476.48" y="1743.5" ></text>
</g>
<g >
<title>duckdb::TableStatistics::GetStats (6,078,680 samples, 0.01%)</title><rect x="231.3" y="1653" width="0.2" height="15.0" fill="rgb(206,36,13)" rx="2" ry="2" />
<text  x="234.34" y="1663.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetEntry (271,266,636 samples, 0.53%)</title><rect x="988.6" y="1733" width="6.2" height="15.0" fill="rgb(223,93,0)" rx="2" ry="2" />
<text  x="991.58" y="1743.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (8,261,765 samples, 0.02%)</title><rect x="23.2" y="2005" width="0.2" height="15.0" fill="rgb(211,123,17)" rx="2" ry="2" />
<text  x="26.23" y="2015.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (47,460,334 samples, 0.09%)</title><rect x="734.3" y="1781" width="1.1" height="15.0" fill="rgb(254,191,27)" rx="2" ry="2" />
<text  x="737.26" y="1791.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::BufferedSerializer&gt; (17,133,835 samples, 0.03%)</title><rect x="592.4" y="1829" width="0.4" height="15.0" fill="rgb(213,63,16)" rx="2" ry="2" />
<text  x="595.37" y="1839.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::AppendSegment (5,071,651 samples, 0.01%)</title><rect x="105.0" y="1685" width="0.2" height="15.0" fill="rgb(221,135,13)" rx="2" ry="2" />
<text  x="108.03" y="1695.5" ></text>
</g>
<g >
<title>duckdb::LogicalDummyScan::GetName[abi:cxx11] (7,490,503 samples, 0.01%)</title><rect x="634.7" y="1717" width="0.2" height="15.0" fill="rgb(206,215,24)" rx="2" ry="2" />
<text  x="637.68" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;::~vector (4,353,184 samples, 0.01%)</title><rect x="857.8" y="1813" width="0.1" height="15.0" fill="rgb(210,32,26)" rx="2" ry="2" />
<text  x="860.84" y="1823.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::RowGroupCollection&gt; &gt;::construct&lt;duckdb::RowGroupCollection, std::shared_ptr&lt;duckdb::DataTableInfo&gt;&amp;, duckdb::BlockManager&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, long const&amp;, int&gt; (62,857,338 samples, 0.12%)</title><rect x="428.9" y="1509" width="1.4" height="15.0" fill="rgb(236,158,3)" rx="2" ry="2" />
<text  x="431.89" y="1519.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::StandardColumnData (5,592,102 samples, 0.01%)</title><rect x="104.8" y="1493" width="0.1" height="15.0" fill="rgb(246,227,25)" rx="2" ry="2" />
<text  x="107.77" y="1503.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (6,652,338 samples, 0.01%)</title><rect x="622.8" y="1749" width="0.2" height="15.0" fill="rgb(237,177,17)" rx="2" ry="2" />
<text  x="625.81" y="1759.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (145,973,740 samples, 0.28%)</title><rect x="390.6" y="1685" width="3.4" height="15.0" fill="rgb(229,200,5)" rx="2" ry="2" />
<text  x="393.62" y="1695.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::string_t, duckdb::string_t, std::allocator&lt;duckdb::string_t&gt;, std::__detail::_Identity, duckdb::StringEquality, duckdb::StringHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert&lt;duckdb::string_t const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;duckdb::string_t, true&gt; &gt; &gt; &gt; (5,908,787 samples, 0.01%)</title><rect x="1117.9" y="933" width="0.2" height="15.0" fill="rgb(234,3,3)" rx="2" ry="2" />
<text  x="1120.93" y="943.5" ></text>
</g>
<g >
<title>duckdb::PhysicalPlanGenerator::CreatePlan (2,971,587,952 samples, 5.79%)</title><rect x="851.3" y="1861" width="68.3" height="15.0" fill="rgb(247,181,27)" rx="2" ry="2" />
<text  x="854.27" y="1871.5" >duckdb:..</text>
</g>
<g >
<title>duckdb::vector&lt;std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;, true&gt;::vector (6,710,336 samples, 0.01%)</title><rect x="532.5" y="1717" width="0.2" height="15.0" fill="rgb(239,105,54)" rx="2" ry="2" />
<text  x="535.50" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnDataCopyFunction, std::allocator&lt;duckdb::ColumnDataCopyFunction&gt; &gt;::emplace_back&lt;duckdb::ColumnDataCopyFunction&gt; (7,582,843 samples, 0.01%)</title><rect x="910.6" y="1701" width="0.2" height="15.0" fill="rgb(218,128,50)" rx="2" ry="2" />
<text  x="913.64" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_no_sample (5,256,947 samples, 0.01%)</title><rect x="487.5" y="1445" width="0.1" height="15.0" fill="rgb(237,190,38)" rx="2" ry="2" />
<text  x="490.49" y="1455.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (24,217,539 samples, 0.05%)</title><rect x="102.1" y="1637" width="0.5" height="15.0" fill="rgb(236,72,10)" rx="2" ry="2" />
<text  x="105.09" y="1647.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::~ColumnDataCollection (33,814,572 samples, 0.07%)</title><rect x="338.3" y="1509" width="0.8" height="15.0" fill="rgb(212,94,53)" rx="2" ry="2" />
<text  x="341.28" y="1519.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::ToString[abi:cxx11] (1,562,023,137 samples, 3.05%)</title><rect x="546.4" y="1877" width="35.9" height="15.0" fill="rgb(226,160,42)" rx="2" ry="2" />
<text  x="549.37" y="1887.5" >duc..</text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::SpecificFunctionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt; &gt;, void&gt; (11,011,251 samples, 0.02%)</title><rect x="797.6" y="1845" width="0.3" height="15.0" fill="rgb(234,42,50)" rx="2" ry="2" />
<text  x="800.64" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Vector::~Vector (13,219,391 samples, 0.03%)</title><rect x="481.1" y="1637" width="0.3" height="15.0" fill="rgb(227,155,49)" rx="2" ry="2" />
<text  x="484.12" y="1647.5" ></text>
</g>
<g >
<title>duckdb::Connection::Query (11,184,926 samples, 0.02%)</title><rect x="1109.3" y="1941" width="0.2" height="15.0" fill="rgb(237,69,35)" rx="2" ry="2" />
<text  x="1112.26" y="1951.5" ></text>
</g>
<g >
<title>duckdb::LogicalDummyScan::GetTableIndex (28,154,413 samples, 0.05%)</title><rect x="775.8" y="1781" width="0.7" height="15.0" fill="rgb(241,63,35)" rx="2" ry="2" />
<text  x="778.81" y="1791.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, duckdb::OperatorInformation, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt; &gt;::find (17,637,013 samples, 0.03%)</title><rect x="466.8" y="1781" width="0.4" height="15.0" fill="rgb(221,81,46)" rx="2" ry="2" />
<text  x="469.80" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::ReferenceEquality&lt;duckdb::SchemaCatalogEntry&gt;, duckdb::ReferenceHashFunction&lt;duckdb::SchemaCatalogEntry&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_rehash (9,132,582 samples, 0.02%)</title><rect x="1007.3" y="1701" width="0.2" height="15.0" fill="rgb(215,215,3)" rx="2" ry="2" />
<text  x="1010.27" y="1711.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (6,622,205 samples, 0.01%)</title><rect x="1183.9" y="2021" width="0.2" height="15.0" fill="rgb(205,210,40)" rx="2" ry="2" />
<text  x="1186.93" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (5,976,255 samples, 0.01%)</title><rect x="863.8" y="1685" width="0.1" height="15.0" fill="rgb(217,128,24)" rx="2" ry="2" />
<text  x="866.79" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ComputeHashes (7,917,398 samples, 0.02%)</title><rect x="460.6" y="1685" width="0.1" height="15.0" fill="rgb(225,46,29)" rx="2" ry="2" />
<text  x="463.55" y="1695.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (31,289,183 samples, 0.06%)</title><rect x="270.7" y="1557" width="0.7" height="15.0" fill="rgb(247,34,53)" rx="2" ry="2" />
<text  x="273.70" y="1567.5" ></text>
</g>
<g >
<title>duckdb::BoundColumnRefExpression::~BoundColumnRefExpression (11,240,512 samples, 0.02%)</title><rect x="642.7" y="1797" width="0.3" height="15.0" fill="rgb(212,216,38)" rx="2" ry="2" />
<text  x="645.74" y="1807.5" ></text>
</g>
<g >
<title>duckdb::FilterPullup::Rewrite (38,949,690 samples, 0.08%)</title><rect x="743.9" y="1813" width="0.9" height="15.0" fill="rgb(244,191,44)" rx="2" ry="2" />
<text  x="746.89" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (39,436,012 samples, 0.08%)</title><rect x="1016.6" y="1669" width="0.9" height="15.0" fill="rgb(221,228,43)" rx="2" ry="2" />
<text  x="1019.55" y="1679.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::Pipeline (13,503,666 samples, 0.03%)</title><rect x="1094.0" y="1573" width="0.3" height="15.0" fill="rgb(217,72,46)" rx="2" ry="2" />
<text  x="1096.99" y="1583.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::lock_guard&lt;std::mutex&gt;, std::default_delete&lt;std::lock_guard&lt;std::mutex&gt; &gt; &gt;::_M_deleter (4,590,732 samples, 0.01%)</title><rect x="329.7" y="1781" width="0.1" height="15.0" fill="rgb(240,76,10)" rx="2" ry="2" />
<text  x="332.69" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::ColumnDataCollection (89,530,709 samples, 0.17%)</title><rect x="910.0" y="1765" width="2.1" height="15.0" fill="rgb(241,94,31)" rx="2" ry="2" />
<text  x="913.04" y="1775.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::Rule*, std::default_delete&lt;duckdb::Rule&gt; &gt;::tuple&lt;duckdb::Rule*&amp;, std::default_delete&lt;duckdb::Rule&gt;, true&gt; (10,120,766 samples, 0.02%)</title><rect x="826.2" y="1765" width="0.2" height="15.0" fill="rgb(253,162,23)" rx="2" ry="2" />
<text  x="829.15" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ArithmeticSimplificationRule::~ArithmeticSimplificationRule (33,106,038 samples, 0.06%)</title><rect x="829.5" y="1701" width="0.8" height="15.0" fill="rgb(222,127,50)" rx="2" ry="2" />
<text  x="832.53" y="1711.5" ></text>
</g>
<g >
<title>duckdb::CompressionAppendState::~CompressionAppendState (9,101,152 samples, 0.02%)</title><rect x="233.8" y="1621" width="0.2" height="15.0" fill="rgb(244,11,30)" rx="2" ry="2" />
<text  x="236.76" y="1631.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (4,577,405 samples, 0.01%)</title><rect x="719.7" y="1797" width="0.1" height="15.0" fill="rgb(230,122,47)" rx="2" ry="2" />
<text  x="722.65" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::~unique_ptr (5,785,735 samples, 0.01%)</title><rect x="841.3" y="1765" width="0.1" height="15.0" fill="rgb(249,124,4)" rx="2" ry="2" />
<text  x="844.26" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_dalloc_event (30,123,732 samples, 0.06%)</title><rect x="240.0" y="485" width="0.7" height="15.0" fill="rgb(246,115,38)" rx="2" ry="2" />
<text  x="242.97" y="495.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::unique_ptr (4,957,721 samples, 0.01%)</title><rect x="949.0" y="1733" width="0.1" height="15.0" fill="rgb(231,138,0)" rx="2" ry="2" />
<text  x="951.97" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (684,369,155 samples, 1.33%)</title><rect x="10.5" y="2021" width="15.8" height="15.0" fill="rgb(251,64,1)" rx="2" ry="2" />
<text  x="13.55" y="2031.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (27,065,879 samples, 0.05%)</title><rect x="236.3" y="1381" width="0.6" height="15.0" fill="rgb(236,199,8)" rx="2" ry="2" />
<text  x="239.25" y="1391.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (22,251,549 samples, 0.04%)</title><rect x="1096.2" y="1589" width="0.5" height="15.0" fill="rgb(223,85,33)" rx="2" ry="2" />
<text  x="1099.18" y="1599.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_codepoint (4,461,658 samples, 0.01%)</title><rect x="837.3" y="1781" width="0.1" height="15.0" fill="rgb(240,61,10)" rx="2" ry="2" />
<text  x="840.30" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Planner::Planner (94,574,014 samples, 0.18%)</title><rect x="1027.6" y="1893" width="2.2" height="15.0" fill="rgb(244,118,0)" rx="2" ry="2" />
<text  x="1030.64" y="1903.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt;::operator= (12,343,470 samples, 0.02%)</title><rect x="214.8" y="1605" width="0.3" height="15.0" fill="rgb(244,105,38)" rx="2" ry="2" />
<text  x="217.78" y="1615.5" ></text>
</g>
<g >
<title>duckdb::Vector::ToUnifiedFormat (5,928,400 samples, 0.01%)</title><rect x="315.1" y="1621" width="0.1" height="15.0" fill="rgb(235,187,9)" rx="2" ry="2" />
<text  x="318.10" y="1631.5" ></text>
</g>
<g >
<title>duckdb::CleanupState::CleanupState (14,719,348 samples, 0.03%)</title><rect x="321.1" y="1781" width="0.3" height="15.0" fill="rgb(245,205,6)" rx="2" ry="2" />
<text  x="324.05" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DataChunk, std::default_delete&lt;duckdb::DataChunk&gt;, true&gt;::unique_ptr (6,656,716 samples, 0.01%)</title><rect x="254.0" y="1781" width="0.2" height="15.0" fill="rgb(212,2,16)" rx="2" ry="2" />
<text  x="257.00" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="405" width="0.1" height="15.0" fill="rgb(209,145,51)" rx="2" ry="2" />
<text  x="14.25" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (186,434,319 samples, 0.36%)</title><rect x="655.3" y="1749" width="4.3" height="15.0" fill="rgb(254,168,26)" rx="2" ry="2" />
<text  x="658.33" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DataChunk, std::default_delete&lt;duckdb::DataChunk&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::DataChunk&gt;, void&gt; (6,301,832 samples, 0.01%)</title><rect x="372.2" y="1861" width="0.1" height="15.0" fill="rgb(243,117,4)" rx="2" ry="2" />
<text  x="375.17" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::BeginQueryInternal (105,077,558 samples, 0.20%)</title><rect x="542.6" y="1925" width="2.4" height="15.0" fill="rgb(229,203,17)" rx="2" ry="2" />
<text  x="545.56" y="1935.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt; (8,259,509 samples, 0.02%)</title><rect x="311.5" y="1509" width="0.2" height="15.0" fill="rgb(211,110,41)" rx="2" ry="2" />
<text  x="314.46" y="1519.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::reference_wrapper&lt;duckdb::Expression&gt;, true&gt;::~vector (5,345,088 samples, 0.01%)</title><rect x="742.3" y="1653" width="0.2" height="15.0" fill="rgb(254,156,46)" rx="2" ry="2" />
<text  x="745.33" y="1663.5" ></text>
</g>
<g >
<title>duckdb::StringStats::GetDataUnsafe (4,980,112 samples, 0.01%)</title><rect x="425.2" y="1509" width="0.1" height="15.0" fill="rgb(239,50,2)" rx="2" ry="2" />
<text  x="428.19" y="1519.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocatorData::~ArenaAllocatorData (10,460,100 samples, 0.02%)</title><rect x="324.7" y="1525" width="0.2" height="15.0" fill="rgb(228,37,29)" rx="2" ry="2" />
<text  x="327.70" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt;, std::allocator&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; &gt;::emplace_back&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; (28,371,785 samples, 0.06%)</title><rect x="1001.0" y="1669" width="0.7" height="15.0" fill="rgb(235,144,41)" rx="2" ry="2" />
<text  x="1004.01" y="1679.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, unsigned long const*, unsigned long*&gt; (12,128,479 samples, 0.02%)</title><rect x="661.4" y="1653" width="0.3" height="15.0" fill="rgb(242,223,5)" rx="2" ry="2" />
<text  x="664.45" y="1663.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt; &gt;::__uniq_ptr_impl (4,519,045 samples, 0.01%)</title><rect x="879.4" y="1573" width="0.1" height="15.0" fill="rgb(224,49,53)" rx="2" ry="2" />
<text  x="882.38" y="1583.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::new_allocator (4,353,073 samples, 0.01%)</title><rect x="561.6" y="1717" width="0.1" height="15.0" fill="rgb(228,116,54)" rx="2" ry="2" />
<text  x="564.64" y="1727.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt;::construct&lt;unsigned long, unsigned long const&amp;&gt; (5,327,789 samples, 0.01%)</title><rect x="694.0" y="1717" width="0.1" height="15.0" fill="rgb(249,226,41)" rx="2" ry="2" />
<text  x="696.99" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LikeOptimizationRule::LikeOptimizationRule (112,348,901 samples, 0.22%)</title><rect x="811.1" y="1861" width="2.6" height="15.0" fill="rgb(214,4,8)" rx="2" ry="2" />
<text  x="814.13" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::ComparisonExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (5,477,147 samples, 0.01%)</title><rect x="804.8" y="1845" width="0.1" height="15.0" fill="rgb(231,12,51)" rx="2" ry="2" />
<text  x="807.77" y="1855.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::Verify (917,406,540 samples, 1.79%)</title><rect x="620.6" y="1861" width="21.2" height="15.0" fill="rgb(246,78,23)" rx="2" ry="2" />
<text  x="623.65" y="1871.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::AppendSegment (37,424,804 samples, 0.07%)</title><rect x="456.6" y="1733" width="0.9" height="15.0" fill="rgb(210,62,22)" rx="2" ry="2" />
<text  x="459.61" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ValidityInitAppend (15,705,519 samples, 0.03%)</title><rect x="196.8" y="1669" width="0.3" height="15.0" fill="rgb(212,27,18)" rx="2" ry="2" />
<text  x="199.78" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_S_do_relocate (6,799,360 samples, 0.01%)</title><rect x="578.3" y="1749" width="0.1" height="15.0" fill="rgb(249,99,43)" rx="2" ry="2" />
<text  x="581.29" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnDataCopyFunction*&gt; (4,457,526 samples, 0.01%)</title><rect x="338.3" y="1445" width="0.1" height="15.0" fill="rgb(210,15,19)" rx="2" ry="2" />
<text  x="341.32" y="1455.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringSegmentState::UncompressedStringSegmentState (7,888,192 samples, 0.02%)</title><rect x="444.1" y="1605" width="0.2" height="15.0" fill="rgb(230,94,3)" rx="2" ry="2" />
<text  x="447.12" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; (142,553,254 samples, 0.28%)</title><rect x="825.7" y="1861" width="3.2" height="15.0" fill="rgb(205,195,13)" rx="2" ry="2" />
<text  x="828.65" y="1871.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::~BufferHandle (12,956,395 samples, 0.03%)</title><rect x="288.1" y="1413" width="0.3" height="15.0" fill="rgb(246,41,53)" rx="2" ry="2" />
<text  x="291.08" y="1423.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, true&gt;::~vector (8,003,155 samples, 0.02%)</title><rect x="832.1" y="1589" width="0.2" height="15.0" fill="rgb(245,85,11)" rx="2" ry="2" />
<text  x="835.14" y="1599.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (4,469,705 samples, 0.01%)</title><rect x="616.2" y="1781" width="0.1" height="15.0" fill="rgb(250,70,20)" rx="2" ry="2" />
<text  x="619.24" y="1791.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::ColumnData&gt;*, std::shared_ptr&lt;duckdb::ColumnData&gt; &gt; (275,952,313 samples, 0.54%)</title><rect x="237.9" y="1189" width="6.3" height="15.0" fill="rgb(254,226,49)" rx="2" ry="2" />
<text  x="240.90" y="1199.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::LocalTableStorage&gt;::destroy&lt;duckdb::LocalTableStorage&gt; (440,606,024 samples, 0.86%)</title><rect x="235.6" y="1701" width="10.1" height="15.0" fill="rgb(221,48,35)" rx="2" ry="2" />
<text  x="238.56" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;duckdb::string_t, duckdb::string_t, std::allocator&lt;duckdb::string_t&gt;, std::__detail::_Identity, duckdb::StringEquality, duckdb::StringHash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::insert (7,433,804 samples, 0.01%)</title><rect x="1117.9" y="949" width="0.2" height="15.0" fill="rgb(216,133,1)" rx="2" ry="2" />
<text  x="1120.91" y="959.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::BoundSelectNode*, std::default_delete&lt;duckdb::BoundSelectNode&gt; &gt; (4,380,713 samples, 0.01%)</title><rect x="964.6" y="1701" width="0.1" height="15.0" fill="rgb(213,53,13)" rx="2" ry="2" />
<text  x="967.55" y="1711.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ColumnDataAllocator&gt;::shared_ptr (5,306,862 samples, 0.01%)</title><rect x="378.6" y="1877" width="0.1" height="15.0" fill="rgb(236,17,49)" rx="2" ry="2" />
<text  x="381.61" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::~vector (19,595,724 samples, 0.04%)</title><rect x="603.9" y="1749" width="0.5" height="15.0" fill="rgb(230,78,37)" rx="2" ry="2" />
<text  x="606.93" y="1759.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (6,870,731 samples, 0.01%)</title><rect x="728.7" y="1733" width="0.2" height="15.0" fill="rgb(238,155,50)" rx="2" ry="2" />
<text  x="731.71" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (24,380,745 samples, 0.05%)</title><rect x="1002.7" y="1685" width="0.5" height="15.0" fill="rgb(212,7,9)" rx="2" ry="2" />
<text  x="1005.66" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt; &gt;::operator= (5,035,220 samples, 0.01%)</title><rect x="858.6" y="1813" width="0.1" height="15.0" fill="rgb(250,221,48)" rx="2" ry="2" />
<text  x="861.58" y="1823.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (5,257,390 samples, 0.01%)</title><rect x="26.1" y="2005" width="0.1" height="15.0" fill="rgb(242,42,7)" rx="2" ry="2" />
<text  x="29.13" y="2015.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (14,106,084 samples, 0.03%)</title><rect x="1139.1" y="1877" width="0.3" height="15.0" fill="rgb(246,21,25)" rx="2" ry="2" />
<text  x="1142.05" y="1887.5" ></text>
</g>
<g >
<title>duckdb::LogicalProjection::GetColumnBindings (7,745,012 samples, 0.02%)</title><rect x="845.8" y="1829" width="0.2" height="15.0" fill="rgb(218,226,30)" rx="2" ry="2" />
<text  x="848.84" y="1839.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::UnifiedVectorFormat*&gt; (11,992,911 samples, 0.02%)</title><rect x="374.7" y="1861" width="0.3" height="15.0" fill="rgb(222,161,10)" rx="2" ry="2" />
<text  x="377.69" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1893" width="0.1" height="15.0" fill="rgb(249,77,45)" rx="2" ry="2" />
<text  x="14.25" y="1903.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (4,677,067 samples, 0.01%)</title><rect x="22.0" y="2005" width="0.1" height="15.0" fill="rgb(227,194,10)" rx="2" ry="2" />
<text  x="24.96" y="2015.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (12,476,663 samples, 0.02%)</title><rect x="335.7" y="1637" width="0.3" height="15.0" fill="rgb(231,104,52)" rx="2" ry="2" />
<text  x="338.75" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,273,243 samples, 0.02%)</title><rect x="614.5" y="1749" width="0.2" height="15.0" fill="rgb(221,88,26)" rx="2" ry="2" />
<text  x="617.45" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::push_back (19,904,377 samples, 0.04%)</title><rect x="813.3" y="1845" width="0.4" height="15.0" fill="rgb(239,48,45)" rx="2" ry="2" />
<text  x="816.26" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7,442,063 samples, 0.01%)</title><rect x="431.3" y="1733" width="0.2" height="15.0" fill="rgb(242,47,17)" rx="2" ry="2" />
<text  x="434.34" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::OrderedAggregateOptimizer, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (13,935,985 samples, 0.03%)</title><rect x="824.3" y="1877" width="0.3" height="15.0" fill="rgb(250,13,4)" rx="2" ry="2" />
<text  x="827.30" y="1887.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::~vector (19,647,717 samples, 0.04%)</title><rect x="631.1" y="1765" width="0.4" height="15.0" fill="rgb(248,170,54)" rx="2" ry="2" />
<text  x="634.06" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::eset_first_fit (10,880,686 samples, 0.02%)</title><rect x="876.1" y="1205" width="0.2" height="15.0" fill="rgb(220,56,8)" rx="2" ry="2" />
<text  x="879.06" y="1215.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_allocate (16,140,436 samples, 0.03%)</title><rect x="607.3" y="1733" width="0.4" height="15.0" fill="rgb(242,175,30)" rx="2" ry="2" />
<text  x="610.29" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt;, std::allocator&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; &gt;::emplace_back&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; (17,323,201 samples, 0.03%)</title><rect x="992.2" y="1621" width="0.4" height="15.0" fill="rgb(217,144,47)" rx="2" ry="2" />
<text  x="995.22" y="1631.5" ></text>
</g>
<g >
<title>duckdb::BindContext::~BindContext (65,664,823 samples, 0.13%)</title><rect x="1016.3" y="1701" width="1.5" height="15.0" fill="rgb(210,179,0)" rx="2" ry="2" />
<text  x="1019.28" y="1711.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::allocate (4,658,478 samples, 0.01%)</title><rect x="1073.4" y="1685" width="0.1" height="15.0" fill="rgb(208,58,41)" rx="2" ry="2" />
<text  x="1076.37" y="1695.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::LogicalProjection, unsigned long&amp;, duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt; (16,742,429 samples, 0.03%)</title><rect x="978.2" y="1765" width="0.4" height="15.0" fill="rgb(249,35,42)" rx="2" ry="2" />
<text  x="981.23" y="1775.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, duckdb::ConcurrentQueue*, std::default_delete&lt;duckdb::ConcurrentQueue&gt; &gt; (9,427,425 samples, 0.02%)</title><rect x="507.0" y="1813" width="0.3" height="15.0" fill="rgb(246,47,2)" rx="2" ry="2" />
<text  x="510.04" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (15,423,321 samples, 0.03%)</title><rect x="681.9" y="1765" width="0.4" height="15.0" fill="rgb(231,125,26)" rx="2" ry="2" />
<text  x="684.94" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (27,822,635 samples, 0.05%)</title><rect x="530.0" y="1701" width="0.7" height="15.0" fill="rgb(223,52,33)" rx="2" ry="2" />
<text  x="533.04" y="1711.5" ></text>
</g>
<g >
<title>__interceptor_strlen (5,401,827 samples, 0.01%)</title><rect x="24.7" y="1989" width="0.1" height="15.0" fill="rgb(224,144,27)" rx="2" ry="2" />
<text  x="27.68" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="933" width="0.1" height="15.0" fill="rgb(251,178,40)" rx="2" ry="2" />
<text  x="14.25" y="943.5" ></text>
</g>
<g >
<title>duckdb::Binder::CreatePlan (151,204,207 samples, 0.29%)</title><rect x="974.1" y="1749" width="3.4" height="15.0" fill="rgb(228,213,39)" rx="2" ry="2" />
<text  x="977.06" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (6,136,679 samples, 0.01%)</title><rect x="665.7" y="1717" width="0.1" height="15.0" fill="rgb(234,57,19)" rx="2" ry="2" />
<text  x="668.69" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (4,961,356 samples, 0.01%)</title><rect x="930.2" y="1653" width="0.1" height="15.0" fill="rgb(225,99,17)" rx="2" ry="2" />
<text  x="933.18" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Event&gt; &gt; &gt;::_M_check_len (5,026,512 samples, 0.01%)</title><rect x="1047.6" y="1749" width="0.1" height="15.0" fill="rgb(205,35,15)" rx="2" ry="2" />
<text  x="1050.57" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt; &gt;::unique_ptr (8,224,757 samples, 0.02%)</title><rect x="997.2" y="1573" width="0.2" height="15.0" fill="rgb(236,14,44)" rx="2" ry="2" />
<text  x="1000.21" y="1583.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::StorageCommitState, std::default_delete&lt;duckdb::StorageCommitState&gt;, true&gt;::unique_ptr (6,496,405 samples, 0.01%)</title><rect x="318.1" y="1813" width="0.2" height="15.0" fill="rgb(217,26,39)" rx="2" ry="2" />
<text  x="321.13" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;::~unique_ptr (29,448,939 samples, 0.06%)</title><rect x="1122.2" y="1765" width="0.7" height="15.0" fill="rgb(228,25,37)" rx="2" ry="2" />
<text  x="1125.18" y="1775.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (5,138,319 samples, 0.01%)</title><rect x="11.9" y="1973" width="0.2" height="15.0" fill="rgb(236,218,30)" rx="2" ry="2" />
<text  x="14.95" y="1983.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnDataCollection, std::default_delete&lt;duckdb::ColumnDataCollection&gt;, true&gt;::unique_ptr (13,534,025 samples, 0.03%)</title><rect x="912.6" y="1749" width="0.3" height="15.0" fill="rgb(252,5,25)" rx="2" ry="2" />
<text  x="915.62" y="1759.5" ></text>
</g>
<g >
<title>duckdb::make_uniq_base&lt;duckdb::StandardEntry, duckdb::AggregateFunctionCatalogEntry, duckdb::Catalog&amp;, duckdb::DuckSchemaEntry&amp;, duckdb::CreateAggregateFunctionInfo&amp;&gt; (6,398,298 samples, 0.01%)</title><rect x="1114.4" y="1861" width="0.2" height="15.0" fill="rgb(231,173,33)" rx="2" ry="2" />
<text  x="1117.44" y="1871.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (94,101,031 samples, 0.18%)</title><rect x="736.3" y="1733" width="2.2" height="15.0" fill="rgb(251,117,42)" rx="2" ry="2" />
<text  x="739.32" y="1743.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::Finalize (557,619,810 samples, 1.09%)</title><rect x="406.0" y="1765" width="12.8" height="15.0" fill="rgb(221,8,50)" rx="2" ry="2" />
<text  x="408.95" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ManyFunctionMatcher::~ManyFunctionMatcher (4,512,659 samples, 0.01%)</title><rect x="831.5" y="1541" width="0.1" height="15.0" fill="rgb(243,5,50)" rx="2" ry="2" />
<text  x="834.46" y="1551.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (8,427,890 samples, 0.02%)</title><rect x="356.1" y="1365" width="0.2" height="15.0" fill="rgb(219,94,38)" rx="2" ry="2" />
<text  x="359.14" y="1375.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (16,672,128 samples, 0.03%)</title><rect x="107.3" y="1525" width="0.4" height="15.0" fill="rgb(219,72,4)" rx="2" ry="2" />
<text  x="110.29" y="1535.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;::~pair (38,853,743 samples, 0.08%)</title><rect x="469.8" y="1669" width="0.9" height="15.0" fill="rgb(229,113,34)" rx="2" ry="2" />
<text  x="472.84" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt; &gt; &gt;::_M_check_len (6,734,954 samples, 0.01%)</title><rect x="1082.0" y="1765" width="0.2" height="15.0" fill="rgb(214,205,34)" rx="2" ry="2" />
<text  x="1085.02" y="1775.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (9,311,152 samples, 0.02%)</title><rect x="971.8" y="1509" width="0.3" height="15.0" fill="rgb(235,89,53)" rx="2" ry="2" />
<text  x="974.85" y="1519.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (66,288,456 samples, 0.13%)</title><rect x="1137.3" y="1893" width="1.5" height="15.0" fill="rgb(237,218,20)" rx="2" ry="2" />
<text  x="1140.31" y="1903.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::~FunctionExpressionMatcher (11,407,247 samples, 0.02%)</title><rect x="832.6" y="1605" width="0.2" height="15.0" fill="rgb(233,37,32)" rx="2" ry="2" />
<text  x="835.56" y="1615.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Verify (8,823,658 samples, 0.02%)</title><rect x="361.2" y="1845" width="0.2" height="15.0" fill="rgb(215,169,21)" rx="2" ry="2" />
<text  x="364.19" y="1855.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::unordered_set (5,681,836 samples, 0.01%)</title><rect x="388.1" y="1877" width="0.1" height="15.0" fill="rgb(209,186,20)" rx="2" ry="2" />
<text  x="391.09" y="1887.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::DistinctStatistics&gt;::operator (9,630,213 samples, 0.02%)</title><rect x="236.6" y="1269" width="0.2" height="15.0" fill="rgb(219,101,41)" rx="2" ry="2" />
<text  x="239.57" y="1279.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (6,925,349 samples, 0.01%)</title><rect x="980.7" y="1637" width="0.2" height="15.0" fill="rgb(232,201,54)" rx="2" ry="2" />
<text  x="983.70" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::shared_ptr&lt;duckdb::Task&gt;, true&gt;::~vector (8,416,734 samples, 0.02%)</title><rect x="1059.8" y="1813" width="0.2" height="15.0" fill="rgb(246,109,31)" rx="2" ry="2" />
<text  x="1062.85" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Expression::Expression (5,586,456 samples, 0.01%)</title><rect x="982.7" y="1781" width="0.1" height="15.0" fill="rgb(233,196,27)" rx="2" ry="2" />
<text  x="985.67" y="1791.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::BlockHandle&gt;::shared_ptr&lt;std::allocator&lt;duckdb::BlockHandle&gt;, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (6,497,338 samples, 0.01%)</title><rect x="103.7" y="1573" width="0.2" height="15.0" fill="rgb(216,21,30)" rx="2" ry="2" />
<text  x="106.73" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt; &gt;::unique_ptr (5,024,094 samples, 0.01%)</title><rect x="490.7" y="1653" width="0.1" height="15.0" fill="rgb(242,218,12)" rx="2" ry="2" />
<text  x="493.69" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::ConstantFoldingExpressionMatcher, std::default_delete&lt;duckdb::ConstantFoldingExpressionMatcher&gt;, void&gt; (19,114,131 samples, 0.04%)</title><rect x="795.6" y="1829" width="0.4" height="15.0" fill="rgb(252,140,19)" rx="2" ry="2" />
<text  x="798.59" y="1839.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCheckpointer::WriteToDisk (4,715,471 samples, 0.01%)</title><rect x="1119.2" y="1045" width="0.1" height="15.0" fill="rgb(240,90,7)" rx="2" ry="2" />
<text  x="1122.18" y="1055.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (5,935,289 samples, 0.01%)</title><rect x="90.3" y="1989" width="0.1" height="15.0" fill="rgb(206,20,31)" rx="2" ry="2" />
<text  x="93.29" y="1999.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (11,328,438 samples, 0.02%)</title><rect x="13.2" y="1989" width="0.2" height="15.0" fill="rgb(218,58,5)" rx="2" ry="2" />
<text  x="16.16" y="1999.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (86,288,061 samples, 0.17%)</title><rect x="366.5" y="1637" width="2.0" height="15.0" fill="rgb(213,58,14)" rx="2" ry="2" />
<text  x="369.53" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;bool, true&gt;::get&lt;true&gt; (22,259,364 samples, 0.04%)</title><rect x="1055.3" y="1781" width="0.5" height="15.0" fill="rgb(245,44,18)" rx="2" ry="2" />
<text  x="1058.30" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Executor::GetTypes (12,328,873 samples, 0.02%)</title><rect x="1045.1" y="1893" width="0.3" height="15.0" fill="rgb(242,183,6)" rx="2" ry="2" />
<text  x="1048.10" y="1903.5" ></text>
</g>
<g >
<title>__dynamic_cast (56,603,189 samples, 0.11%)</title><rect x="17.2" y="2005" width="1.3" height="15.0" fill="rgb(207,209,24)" rx="2" ry="2" />
<text  x="20.21" y="2015.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::aligned_usize_get (5,702,029 samples, 0.01%)</title><rect x="487.1" y="1445" width="0.1" height="15.0" fill="rgb(234,34,28)" rx="2" ry="2" />
<text  x="490.11" y="1455.5" ></text>
</g>
<g >
<title>duckdb::BoundExpressionListRef::~BoundExpressionListRef (6,148,335 samples, 0.01%)</title><rect x="980.4" y="1653" width="0.1" height="15.0" fill="rgb(237,196,19)" rx="2" ry="2" />
<text  x="983.35" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::get (9,176,573 samples, 0.02%)</title><rect x="571.6" y="1765" width="0.2" height="15.0" fill="rgb(229,133,34)" rx="2" ry="2" />
<text  x="574.59" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateTree (139,140,850 samples, 0.27%)</title><rect x="620.8" y="1797" width="3.2" height="15.0" fill="rgb(216,137,8)" rx="2" ry="2" />
<text  x="623.77" y="1807.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (14,802,274 samples, 0.03%)</title><rect x="854.9" y="1797" width="0.3" height="15.0" fill="rgb(233,169,42)" rx="2" ry="2" />
<text  x="857.86" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::Pipeline&gt;, duckdb::ReferenceHashFunction&lt;duckdb::Pipeline&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (9,031,759 samples, 0.02%)</title><rect x="1052.5" y="1749" width="0.2" height="15.0" fill="rgb(229,87,51)" rx="2" ry="2" />
<text  x="1055.47" y="1759.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_Tuple_impl (8,817,628 samples, 0.02%)</title><rect x="710.1" y="1749" width="0.2" height="15.0" fill="rgb(246,223,42)" rx="2" ry="2" />
<text  x="713.12" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::ColumnDataCollection (80,047,325 samples, 0.16%)</title><rect x="96.9" y="1765" width="1.8" height="15.0" fill="rgb(219,43,7)" rx="2" ry="2" />
<text  x="99.88" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (5,656,363 samples, 0.01%)</title><rect x="1003.4" y="1637" width="0.2" height="15.0" fill="rgb(231,115,31)" rx="2" ry="2" />
<text  x="1006.44" y="1647.5" ></text>
</g>
<g >
<title>std::_Construct&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;&gt; (5,465,838 samples, 0.01%)</title><rect x="1076.2" y="1669" width="0.1" height="15.0" fill="rgb(247,210,50)" rx="2" ry="2" />
<text  x="1079.18" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCopy&lt;duckdb::string_t&gt; (89,334,398 samples, 0.17%)</title><rect x="862.9" y="1765" width="2.0" height="15.0" fill="rgb(212,79,48)" rx="2" ry="2" />
<text  x="865.85" y="1775.5" ></text>
</g>
<g >
<title>duckdb::BufferAllocator::Get (11,430,966 samples, 0.02%)</title><rect x="998.4" y="1621" width="0.3" height="15.0" fill="rgb(213,17,24)" rx="2" ry="2" />
<text  x="1001.44" y="1631.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (132,938,939 samples, 0.26%)</title><rect x="400.6" y="1813" width="3.1" height="15.0" fill="rgb(240,70,18)" rx="2" ry="2" />
<text  x="403.63" y="1823.5" ></text>
</g>
<g >
<title>do_syscall_64 (93,290,928 samples, 0.18%)</title><rect x="1177.6" y="2021" width="2.1" height="15.0" fill="rgb(209,9,39)" rx="2" ry="2" />
<text  x="1180.60" y="2031.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_decay_impl (5,753,970 samples, 0.01%)</title><rect x="19.4" y="1877" width="0.1" height="15.0" fill="rgb(240,87,41)" rx="2" ry="2" />
<text  x="22.41" y="1887.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (5,370,940 samples, 0.01%)</title><rect x="102.5" y="1493" width="0.1" height="15.0" fill="rgb(211,68,44)" rx="2" ry="2" />
<text  x="105.50" y="1503.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ChunkInfo, std::default_delete&lt;duckdb::ChunkInfo&gt; &gt;::_M_ptr (7,307,023 samples, 0.01%)</title><rect x="244.7" y="1061" width="0.2" height="15.0" fill="rgb(250,71,40)" rx="2" ry="2" />
<text  x="247.69" y="1071.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundQueryNode, std::default_delete&lt;duckdb::BoundQueryNode&gt; &gt;::release (8,110,981 samples, 0.02%)</title><rect x="973.0" y="1749" width="0.2" height="15.0" fill="rgb(218,195,45)" rx="2" ry="2" />
<text  x="975.98" y="1759.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::DuckTransaction&gt;::operator (153,133,729 samples, 0.30%)</title><rect x="324.4" y="1669" width="3.5" height="15.0" fill="rgb(227,67,31)" rx="2" ry="2" />
<text  x="327.38" y="1679.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::MetaPipeline,  (39,321,361 samples, 0.08%)</title><rect x="1080.8" y="1765" width="0.9" height="15.0" fill="rgb(240,51,24)" rx="2" ry="2" />
<text  x="1083.82" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5,854,526 samples, 0.01%)</title><rect x="960.4" y="1573" width="0.1" height="15.0" fill="rgb(221,57,11)" rx="2" ry="2" />
<text  x="963.36" y="1583.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (33,749,783 samples, 0.07%)</title><rect x="51.0" y="2021" width="0.7" height="15.0" fill="rgb(238,227,52)" rx="2" ry="2" />
<text  x="53.96" y="2031.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::SpecificFunctionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt; &gt;, void&gt; (6,239,979 samples, 0.01%)</title><rect x="819.8" y="1845" width="0.1" height="15.0" fill="rgb(252,213,11)" rx="2" ry="2" />
<text  x="822.79" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt; &gt;::_S_relocate (5,908,024 samples, 0.01%)</title><rect x="1054.1" y="1765" width="0.1" height="15.0" fill="rgb(237,91,16)" rx="2" ry="2" />
<text  x="1057.07" y="1775.5" ></text>
</g>
<g >
<title>wp_page_copy (7,178,451 samples, 0.01%)</title><rect x="67.6" y="1893" width="0.2" height="15.0" fill="rgb(253,162,26)" rx="2" ry="2" />
<text  x="70.62" y="1903.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateStatistics (94,074,427 samples, 0.18%)</title><rect x="765.9" y="1797" width="2.1" height="15.0" fill="rgb(209,138,25)" rx="2" ry="2" />
<text  x="768.88" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (13,948,252 samples, 0.03%)</title><rect x="681.9" y="1749" width="0.4" height="15.0" fill="rgb(205,217,33)" rx="2" ry="2" />
<text  x="684.94" y="1759.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (12,465,932 samples, 0.02%)</title><rect x="1067.2" y="1653" width="0.3" height="15.0" fill="rgb(208,81,19)" rx="2" ry="2" />
<text  x="1070.20" y="1663.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::OperatorProfiler (5,403,523 samples, 0.01%)</title><rect x="495.8" y="1813" width="0.2" height="15.0" fill="rgb(212,188,6)" rx="2" ry="2" />
<text  x="498.85" y="1823.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::BlockHandle, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool&amp;, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (45,072,279 samples, 0.09%)</title><rect x="880.7" y="1637" width="1.0" height="15.0" fill="rgb(223,197,7)" rx="2" ry="2" />
<text  x="883.70" y="1647.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::try_dequeue&lt;duckdb::BufferEvictionNode&gt; (5,899,888 samples, 0.01%)</title><rect x="239.4" y="629" width="0.1" height="15.0" fill="rgb(213,174,27)" rx="2" ry="2" />
<text  x="242.41" y="639.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Executor, std::default_delete&lt;duckdb::Executor&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::Executor&gt;, void&gt; (9,165,557 samples, 0.02%)</title><rect x="1099.8" y="1877" width="0.2" height="15.0" fill="rgb(254,2,54)" rx="2" ry="2" />
<text  x="1102.78" y="1887.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::unique_ptr (6,084,850 samples, 0.01%)</title><rect x="755.5" y="1765" width="0.1" height="15.0" fill="rgb(241,27,46)" rx="2" ry="2" />
<text  x="758.46" y="1775.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;*&gt; (5,098,222 samples, 0.01%)</title><rect x="948.4" y="1653" width="0.1" height="15.0" fill="rgb(238,100,46)" rx="2" ry="2" />
<text  x="951.38" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt;::push_back (29,853,126 samples, 0.06%)</title><rect x="974.6" y="1717" width="0.7" height="15.0" fill="rgb(234,186,25)" rx="2" ry="2" />
<text  x="977.65" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ChunkMetaData, std::allocator&lt;duckdb::ChunkMetaData&gt; &gt;::~vector (14,542,593 samples, 0.03%)</title><rect x="341.0" y="1173" width="0.3" height="15.0" fill="rgb(231,165,14)" rx="2" ry="2" />
<text  x="343.95" y="1183.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (8,918,633 samples, 0.02%)</title><rect x="1185.5" y="2037" width="0.3" height="15.0" fill="rgb(241,159,11)" rx="2" ry="2" />
<text  x="1188.55" y="2047.5" ></text>
</g>
<g >
<title>duckdb::ColumnList::GetColumn (7,801,641 samples, 0.02%)</title><rect x="1010.9" y="1813" width="0.2" height="15.0" fill="rgb(245,148,16)" rx="2" ry="2" />
<text  x="1013.93" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BindContext::SetCTEBindings (7,766,463 samples, 0.02%)</title><rect x="985.3" y="1669" width="0.1" height="15.0" fill="rgb(214,169,28)" rx="2" ry="2" />
<text  x="988.26" y="1679.5" ></text>
</g>
<g >
<title>duckdb::AttachedDatabase::~AttachedDatabase (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1333" width="1.9" height="15.0" fill="rgb(215,199,13)" rx="2" ry="2" />
<text  x="1120.81" y="1343.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutorInfo::ExpressionExecutorInfo (93,937,969 samples, 0.18%)</title><rect x="477.4" y="1781" width="2.2" height="15.0" fill="rgb(205,95,39)" rx="2" ry="2" />
<text  x="480.43" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (26,285,094 samples, 0.05%)</title><rect x="1032.6" y="1861" width="0.6" height="15.0" fill="rgb(217,62,48)" rx="2" ry="2" />
<text  x="1035.57" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_realloc_insert&lt;duckdb::LogicalType const&amp;&gt; (5,941,833 samples, 0.01%)</title><rect x="977.4" y="1717" width="0.1" height="15.0" fill="rgb(219,107,39)" rx="2" ry="2" />
<text  x="980.37" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (5,459,755 samples, 0.01%)</title><rect x="1087.7" y="1749" width="0.1" height="15.0" fill="rgb(221,15,18)" rx="2" ry="2" />
<text  x="1090.67" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_update_edata_state (17,271,048 samples, 0.03%)</title><rect x="876.4" y="1205" width="0.4" height="15.0" fill="rgb(232,35,13)" rx="2" ry="2" />
<text  x="879.44" y="1215.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::~vector (15,056,248 samples, 0.03%)</title><rect x="350.5" y="1589" width="0.4" height="15.0" fill="rgb(249,21,27)" rx="2" ry="2" />
<text  x="353.52" y="1599.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::InitializeAppend (781,151,200 samples, 1.52%)</title><rect x="433.1" y="1717" width="18.0" height="15.0" fill="rgb(207,83,32)" rx="2" ry="2" />
<text  x="436.09" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::~vector (5,847,116 samples, 0.01%)</title><rect x="1048.8" y="1797" width="0.1" height="15.0" fill="rgb(214,34,23)" rx="2" ry="2" />
<text  x="1051.77" y="1807.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt; &gt; &gt;::~unordered_map (6,052,440 samples, 0.01%)</title><rect x="352.9" y="1685" width="0.1" height="15.0" fill="rgb(217,161,45)" rx="2" ry="2" />
<text  x="355.89" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_alloc (10,746,165 samples, 0.02%)</title><rect x="218.0" y="1397" width="0.2" height="15.0" fill="rgb(232,13,24)" rx="2" ry="2" />
<text  x="221.00" y="1407.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::~AllocatedData (120,155,518 samples, 0.23%)</title><rect x="390.9" y="1621" width="2.8" height="15.0" fill="rgb(231,5,34)" rx="2" ry="2" />
<text  x="393.91" y="1631.5" ></text>
</g>
<g >
<title>std::chrono::duration_cast&lt;std::chrono::duration&lt;double, std::ratio&lt;1l, 1l&gt; &gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (10,265,500 samples, 0.02%)</title><rect x="702.4" y="1829" width="0.2" height="15.0" fill="rgb(236,109,3)" rx="2" ry="2" />
<text  x="705.38" y="1839.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*, duckdb::Vector&gt; (65,319,458 samples, 0.13%)</title><rect x="497.9" y="1749" width="1.5" height="15.0" fill="rgb(218,168,44)" rx="2" ry="2" />
<text  x="500.94" y="1759.5" ></text>
</g>
<g >
<title>__handle_mm_fault (7,971,376 samples, 0.02%)</title><rect x="67.6" y="1925" width="0.2" height="15.0" fill="rgb(212,81,28)" rx="2" ry="2" />
<text  x="70.61" y="1935.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::AllocateVector (174,331,707 samples, 0.34%)</title><rect x="379.7" y="1893" width="4.0" height="15.0" fill="rgb(241,213,36)" rx="2" ry="2" />
<text  x="382.72" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, true&gt; &gt; &gt;::operator (9,768,475 samples, 0.02%)</title><rect x="1007.6" y="1717" width="0.2" height="15.0" fill="rgb(252,163,10)" rx="2" ry="2" />
<text  x="1010.56" y="1727.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::DatabaseInstance, std::allocator&lt;duckdb::DatabaseInstance&gt;,  (100,574,591 samples, 0.20%)</title><rect x="1117.4" y="1925" width="2.3" height="15.0" fill="rgb(214,7,8)" rx="2" ry="2" />
<text  x="1120.43" y="1935.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::pstrdup (9,289,686 samples, 0.02%)</title><rect x="523.2" y="1829" width="0.2" height="15.0" fill="rgb(243,80,47)" rx="2" ry="2" />
<text  x="526.22" y="1839.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;bool  (162,217,536 samples, 0.32%)</title><rect x="228.4" y="1717" width="3.7" height="15.0" fill="rgb(236,40,30)" rx="2" ry="2" />
<text  x="231.41" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnScanState::Initialize (22,383,003 samples, 0.04%)</title><rect x="223.5" y="1701" width="0.6" height="15.0" fill="rgb(241,138,17)" rx="2" ry="2" />
<text  x="226.54" y="1711.5" ></text>
</g>
<g >
<title>SymbolTable::finalize (5,344,036 samples, 0.01%)</title><rect x="1118.4" y="1029" width="0.1" height="15.0" fill="rgb(247,226,4)" rx="2" ry="2" />
<text  x="1121.36" y="1039.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::ResetFromCache (9,761,727 samples, 0.02%)</title><rect x="894.9" y="1733" width="0.2" height="15.0" fill="rgb(246,219,9)" rx="2" ry="2" />
<text  x="897.91" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::ColumnDataAllocator (9,728,237 samples, 0.02%)</title><rect x="911.7" y="1621" width="0.2" height="15.0" fill="rgb(252,130,40)" rx="2" ry="2" />
<text  x="914.69" y="1631.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (14,734,422 samples, 0.03%)</title><rect x="26.3" y="2021" width="0.4" height="15.0" fill="rgb(248,72,40)" rx="2" ry="2" />
<text  x="29.34" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::~vector (5,116,244 samples, 0.01%)</title><rect x="484.3" y="1477" width="0.1" height="15.0" fill="rgb(252,177,16)" rx="2" ry="2" />
<text  x="487.28" y="1487.5" ></text>
</g>
<g >
<title>duckdb::AddToSingleLogInternal (6,833,132 samples, 0.01%)</title><rect x="228.8" y="1589" width="0.2" height="15.0" fill="rgb(207,55,23)" rx="2" ry="2" />
<text  x="231.83" y="1599.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (13,395,175 samples, 0.03%)</title><rect x="776.9" y="1733" width="0.3" height="15.0" fill="rgb(225,137,7)" rx="2" ry="2" />
<text  x="779.92" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CaseSimplificationRule, std::default_delete&lt;duckdb::CaseSimplificationRule&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::CaseSimplificationRule&gt;, void&gt; (8,189,091 samples, 0.02%)</title><rect x="791.2" y="1845" width="0.2" height="15.0" fill="rgb(241,9,42)" rx="2" ry="2" />
<text  x="794.22" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ChunkMetaData, std::allocator&lt;duckdb::ChunkMetaData&gt; &gt;::~vector (7,926,494 samples, 0.02%)</title><rect x="1122.4" y="1685" width="0.2" height="15.0" fill="rgb(210,99,7)" rx="2" ry="2" />
<text  x="1125.39" y="1695.5" ></text>
</g>
<g >
<title>duckdb::TableCatalogEntry::GetTypes (25,769,363 samples, 0.05%)</title><rect x="855.6" y="1797" width="0.6" height="15.0" fill="rgb(231,70,24)" rx="2" ry="2" />
<text  x="858.63" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1493" width="0.3" height="15.0" fill="rgb(218,25,54)" rx="2" ry="2" />
<text  x="835.82" y="1503.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc_large (9,534,943 samples, 0.02%)</title><rect x="1123.5" y="1493" width="0.3" height="15.0" fill="rgb(247,128,16)" rx="2" ry="2" />
<text  x="1126.55" y="1503.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::ConstructManagedBuffer (316,137,024 samples, 0.62%)</title><rect x="872.5" y="1637" width="7.2" height="15.0" fill="rgb(206,103,11)" rx="2" ry="2" />
<text  x="875.47" y="1647.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (14,010,108 samples, 0.03%)</title><rect x="1060.2" y="1781" width="0.3" height="15.0" fill="rgb(216,50,4)" rx="2" ry="2" />
<text  x="1063.21" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;::unique_ptr (10,255,328 samples, 0.02%)</title><rect x="1088.7" y="1733" width="0.2" height="15.0" fill="rgb(214,97,30)" rx="2" ry="2" />
<text  x="1091.71" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (50,506,172 samples, 0.10%)</title><rect x="296.1" y="1685" width="1.1" height="15.0" fill="rgb(242,191,14)" rx="2" ry="2" />
<text  x="299.09" y="1695.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1317" width="0.3" height="15.0" fill="rgb(226,122,14)" rx="2" ry="2" />
<text  x="1120.47" y="1327.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::~vector (26,824,257 samples, 0.05%)</title><rect x="915.8" y="1589" width="0.6" height="15.0" fill="rgb(243,84,54)" rx="2" ry="2" />
<text  x="918.81" y="1599.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (14,820,100 samples, 0.03%)</title><rect x="211.9" y="1637" width="0.3" height="15.0" fill="rgb(223,196,0)" rx="2" ry="2" />
<text  x="214.87" y="1647.5" ></text>
</g>
<g >
<title>duckdb::LikeOptimizationRule::~LikeOptimizationRule (12,115,192 samples, 0.02%)</title><rect x="832.5" y="1717" width="0.3" height="15.0" fill="rgb(229,202,46)" rx="2" ry="2" />
<text  x="835.54" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::VectorMetaData, true&gt;::~vector (8,002,940 samples, 0.02%)</title><rect x="341.5" y="1189" width="0.1" height="15.0" fill="rgb(247,58,6)" rx="2" ry="2" />
<text  x="344.46" y="1199.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::CompressionAppendState, duckdb::BufferHandle&gt; (4,714,306 samples, 0.01%)</title><rect x="449.9" y="1669" width="0.1" height="15.0" fill="rgb(208,58,25)" rx="2" ry="2" />
<text  x="452.89" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc (110,041,300 samples, 0.21%)</title><rect x="346.1" y="805" width="2.5" height="15.0" fill="rgb(226,119,42)" rx="2" ry="2" />
<text  x="349.06" y="815.5" ></text>
</g>
<g >
<title>duckdb::DatabaseInstance::GetDatabaseManager (5,895,338 samples, 0.01%)</title><rect x="320.7" y="1781" width="0.1" height="15.0" fill="rgb(223,191,13)" rx="2" ry="2" />
<text  x="323.69" y="1791.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;*&gt; (31,490,367 samples, 0.06%)</title><rect x="1122.2" y="1813" width="0.7" height="15.0" fill="rgb(221,196,34)" rx="2" ry="2" />
<text  x="1125.15" y="1823.5" ></text>
</g>
<g >
<title>__asan_memcpy (6,251,462 samples, 0.01%)</title><rect x="701.7" y="1845" width="0.2" height="15.0" fill="rgb(220,215,11)" rx="2" ry="2" />
<text  x="704.74" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; (12,854,843 samples, 0.03%)</title><rect x="828.3" y="1733" width="0.3" height="15.0" fill="rgb(227,39,0)" rx="2" ry="2" />
<text  x="831.28" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (13,781,588 samples, 0.03%)</title><rect x="530.2" y="1685" width="0.3" height="15.0" fill="rgb(228,146,44)" rx="2" ry="2" />
<text  x="533.18" y="1695.5" ></text>
</g>
<g >
<title>duckdb::CoreFunctions::RegisterFunctions (225,197,875 samples, 0.44%)</title><rect x="1111.9" y="1925" width="5.2" height="15.0" fill="rgb(240,82,3)" rx="2" ry="2" />
<text  x="1114.92" y="1935.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::DuckTransaction&gt; &gt; (6,191,971 samples, 0.01%)</title><rect x="322.5" y="1781" width="0.1" height="15.0" fill="rgb(240,111,24)" rx="2" ry="2" />
<text  x="325.50" y="1791.5" ></text>
</g>
<g >
<title>__asan::Allocator::GetAsanChunkByAddrFastLocked (163,492,458 samples, 0.32%)</title><rect x="26.7" y="2021" width="3.7" height="15.0" fill="rgb(220,173,21)" rx="2" ry="2" />
<text  x="29.68" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="725" width="0.1" height="15.0" fill="rgb(206,103,6)" rx="2" ry="2" />
<text  x="14.25" y="735.5" ></text>
</g>
<g >
<title>unmap_single_vma (6,416,794 samples, 0.01%)</title><rect x="1172.9" y="1861" width="0.2" height="15.0" fill="rgb(205,105,39)" rx="2" ry="2" />
<text  x="1175.91" y="1871.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;, true&gt;::~vector (8,202,936 samples, 0.02%)</title><rect x="357.9" y="1637" width="0.2" height="15.0" fill="rgb(246,12,30)" rx="2" ry="2" />
<text  x="360.90" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::PhysicalIndex, true&gt;::~vector (4,987,219 samples, 0.01%)</title><rect x="350.4" y="1605" width="0.1" height="15.0" fill="rgb(240,96,15)" rx="2" ry="2" />
<text  x="353.40" y="1615.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, true&gt;::~vector (15,624,584 samples, 0.03%)</title><rect x="829.9" y="1589" width="0.3" height="15.0" fill="rgb(236,95,50)" rx="2" ry="2" />
<text  x="832.87" y="1599.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorCacheBuffer&gt;::shared_ptr&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (98,255,256 samples, 0.19%)</title><rect x="217.3" y="1637" width="2.2" height="15.0" fill="rgb(240,133,25)" rx="2" ry="2" />
<text  x="220.26" y="1647.5" ></text>
</g>
<g >
<title>duckdb::BlockHandle::~BlockHandle (337,712,561 samples, 0.66%)</title><rect x="342.2" y="997" width="7.7" height="15.0" fill="rgb(237,66,26)" rx="2" ry="2" />
<text  x="345.16" y="1007.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::_M_check_len (5,081,015 samples, 0.01%)</title><rect x="1095.0" y="1669" width="0.2" height="15.0" fill="rgb(245,183,46)" rx="2" ry="2" />
<text  x="1098.04" y="1679.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unordered_set (9,101,823 samples, 0.02%)</title><rect x="1029.8" y="1861" width="0.2" height="15.0" fill="rgb(211,188,14)" rx="2" ry="2" />
<text  x="1032.83" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, unsigned long&amp;, unsigned long&amp;&gt; (4,925,068 samples, 0.01%)</title><rect x="607.9" y="1717" width="0.1" height="15.0" fill="rgb(237,139,18)" rx="2" ry="2" />
<text  x="610.89" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (68,357,796 samples, 0.13%)</title><rect x="437.2" y="1477" width="1.6" height="15.0" fill="rgb(244,131,0)" rx="2" ry="2" />
<text  x="440.19" y="1487.5" ></text>
</g>
<g >
<title>__handle_mm_fault (195,350,689 samples, 0.38%)</title><rect x="1136.4" y="1941" width="4.5" height="15.0" fill="rgb(222,202,24)" rx="2" ry="2" />
<text  x="1139.38" y="1951.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt;, duckdb::LogicalType*&gt; (4,377,088 samples, 0.01%)</title><rect x="930.9" y="1653" width="0.1" height="15.0" fill="rgb(209,77,18)" rx="2" ry="2" />
<text  x="933.85" y="1663.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (25,794,527 samples, 0.05%)</title><rect x="1058.6" y="1733" width="0.6" height="15.0" fill="rgb(238,169,38)" rx="2" ry="2" />
<text  x="1061.56" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, true&gt; &gt; &gt;::_M_deallocate_node (4,406,703 samples, 0.01%)</title><rect x="968.8" y="1685" width="0.1" height="15.0" fill="rgb(217,88,40)" rx="2" ry="2" />
<text  x="971.84" y="1695.5" ></text>
</g>
<g >
<title>duckdb::grapheme_break_simple (4,530,635 samples, 0.01%)</title><rect x="636.9" y="1685" width="0.1" height="15.0" fill="rgb(216,222,35)" rx="2" ry="2" />
<text  x="639.93" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCopyFunction::~ColumnDataCopyFunction (5,457,185 samples, 0.01%)</title><rect x="910.3" y="1717" width="0.1" height="15.0" fill="rgb(209,142,53)" rx="2" ry="2" />
<text  x="913.26" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::ComparisonExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (6,254,157 samples, 0.01%)</title><rect x="815.2" y="1845" width="0.1" height="15.0" fill="rgb(207,191,31)" rx="2" ry="2" />
<text  x="818.18" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (18,841,513 samples, 0.04%)</title><rect x="37.8" y="1989" width="0.5" height="15.0" fill="rgb(227,164,28)" rx="2" ry="2" />
<text  x="40.84" y="1999.5" ></text>
</g>
<g >
<title>duckdb::ScheduleEventData::ScheduleEventData (5,800,254 samples, 0.01%)</title><rect x="1062.2" y="1845" width="0.2" height="15.0" fill="rgb(223,113,2)" rx="2" ry="2" />
<text  x="1065.24" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::CaseExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (7,892,553 samples, 0.02%)</title><rect x="791.0" y="1845" width="0.1" height="15.0" fill="rgb(234,116,11)" rx="2" ry="2" />
<text  x="793.96" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1109" width="0.3" height="15.0" fill="rgb(238,102,39)" rx="2" ry="2" />
<text  x="1120.47" y="1119.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::ResolveOperatorTypes (101,090,609 samples, 0.20%)</title><rect x="846.4" y="1877" width="2.4" height="15.0" fill="rgb(221,117,14)" rx="2" ry="2" />
<text  x="849.44" y="1887.5" ></text>
</g>
<g >
<title>duckdb::LogicalProjection::~LogicalProjection (28,736,037 samples, 0.06%)</title><rect x="1036.2" y="1637" width="0.6" height="15.0" fill="rgb(213,78,24)" rx="2" ry="2" />
<text  x="1039.17" y="1647.5" ></text>
</g>
<g >
<title>copy_page (18,331,460 samples, 0.04%)</title><rect x="72.4" y="1877" width="0.5" height="15.0" fill="rgb(243,121,10)" rx="2" ry="2" />
<text  x="75.44" y="1887.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::Initialize (38,591,117 samples, 0.08%)</title><rect x="362.9" y="1781" width="0.8" height="15.0" fill="rgb(221,83,40)" rx="2" ry="2" />
<text  x="365.86" y="1791.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::EndPhase (118,798,173 samples, 0.23%)</title><rect x="919.8" y="1877" width="2.8" height="15.0" fill="rgb(240,139,49)" rx="2" ry="2" />
<text  x="922.82" y="1887.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; (13,674,650 samples, 0.03%)</title><rect x="1084.2" y="1797" width="0.3" height="15.0" fill="rgb(242,173,51)" rx="2" ry="2" />
<text  x="1087.22" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnAppendState [], std::default_delete&lt;duckdb::ColumnAppendState []&gt; &gt;::~unique_ptr (27,919,700 samples, 0.05%)</title><rect x="339.1" y="1445" width="0.7" height="15.0" fill="rgb(213,150,8)" rx="2" ry="2" />
<text  x="342.13" y="1455.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;, unsigned long&amp;&gt; (487,498,984 samples, 0.95%)</title><rect x="200.4" y="1637" width="11.2" height="15.0" fill="rgb(209,192,0)" rx="2" ry="2" />
<text  x="203.38" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::operator (11,949,000 samples, 0.02%)</title><rect x="817.1" y="1765" width="0.2" height="15.0" fill="rgb(232,219,23)" rx="2" ry="2" />
<text  x="820.07" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt; &gt;::operator= (9,277,098 samples, 0.02%)</title><rect x="439.2" y="1621" width="0.2" height="15.0" fill="rgb(240,198,49)" rx="2" ry="2" />
<text  x="442.22" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (5,260,458 samples, 0.01%)</title><rect x="705.2" y="1797" width="0.1" height="15.0" fill="rgb(232,103,21)" rx="2" ry="2" />
<text  x="708.15" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ColumnDataAllocator,  (85,545,655 samples, 0.17%)</title><rect x="1122.9" y="1845" width="2.0" height="15.0" fill="rgb(220,181,9)" rx="2" ry="2" />
<text  x="1125.95" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (4,465,848 samples, 0.01%)</title><rect x="953.3" y="1541" width="0.1" height="15.0" fill="rgb(218,62,50)" rx="2" ry="2" />
<text  x="956.33" y="1551.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_deallocate (7,445,553 samples, 0.01%)</title><rect x="1073.5" y="1701" width="0.1" height="15.0" fill="rgb(224,169,52)" rx="2" ry="2" />
<text  x="1076.47" y="1711.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (4,705,739 samples, 0.01%)</title><rect x="594.3" y="1717" width="0.1" height="15.0" fill="rgb(228,100,20)" rx="2" ry="2" />
<text  x="597.30" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (24,581,404 samples, 0.05%)</title><rect x="915.8" y="1525" width="0.6" height="15.0" fill="rgb(212,215,50)" rx="2" ry="2" />
<text  x="918.83" y="1535.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ConstantFoldingExpressionMatcher, std::default_delete&lt;duckdb::ConstantFoldingExpressionMatcher&gt; &gt;::get (5,131,748 samples, 0.01%)</title><rect x="795.9" y="1797" width="0.1" height="15.0" fill="rgb(212,165,49)" rx="2" ry="2" />
<text  x="798.91" y="1807.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, true&gt;::~vector (51,755,788 samples, 0.10%)</title><rect x="340.6" y="1349" width="1.2" height="15.0" fill="rgb(231,55,1)" rx="2" ry="2" />
<text  x="343.58" y="1359.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (66,400,935 samples, 0.13%)</title><rect x="671.9" y="1765" width="1.6" height="15.0" fill="rgb(219,205,19)" rx="2" ry="2" />
<text  x="674.93" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (7,046,895 samples, 0.01%)</title><rect x="1003.4" y="1669" width="0.2" height="15.0" fill="rgb(220,157,52)" rx="2" ry="2" />
<text  x="1006.43" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt; &gt; (338,557,840 samples, 0.66%)</title><rect x="237.5" y="1317" width="7.8" height="15.0" fill="rgb(238,97,33)" rx="2" ry="2" />
<text  x="240.49" y="1327.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::ColumnData&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::ColumnData&gt; &gt; &gt;::~vector (280,526,130 samples, 0.55%)</title><rect x="237.9" y="1205" width="6.4" height="15.0" fill="rgb(234,36,26)" rx="2" ry="2" />
<text  x="240.89" y="1215.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::Verify (48,020,856 samples, 0.09%)</title><rect x="416.5" y="1685" width="1.1" height="15.0" fill="rgb(231,13,29)" rx="2" ry="2" />
<text  x="419.50" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryNode, std::default_delete&lt;duckdb::QueryNode&gt; &gt;::release (5,889,689 samples, 0.01%)</title><rect x="534.2" y="1733" width="0.1" height="15.0" fill="rgb(250,59,49)" rx="2" ry="2" />
<text  x="537.21" y="1743.5" ></text>
</g>
<g >
<title>duckdb::CommonSubExpressionOptimizer::VisitOperator (88,205,599 samples, 0.17%)</title><rect x="728.0" y="1765" width="2.1" height="15.0" fill="rgb(211,132,40)" rx="2" ry="2" />
<text  x="731.05" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PipelineRenderNode, std::default_delete&lt;duckdb::PipelineRenderNode&gt; &gt;::operator= (8,141,759 samples, 0.02%)</title><rect x="1069.4" y="1749" width="0.2" height="15.0" fill="rgb(229,99,7)" rx="2" ry="2" />
<text  x="1072.37" y="1759.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::ResetFromCache (17,622,713 samples, 0.03%)</title><rect x="370.2" y="1733" width="0.4" height="15.0" fill="rgb(253,210,25)" rx="2" ry="2" />
<text  x="373.18" y="1743.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateChildren (9,696,304 samples, 0.02%)</title><rect x="766.8" y="1685" width="0.2" height="15.0" fill="rgb(216,196,37)" rx="2" ry="2" />
<text  x="769.80" y="1695.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt;, std::__detail::_Identity, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert&lt;duckdb::ColumnBinding const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;duckdb::ColumnBinding, true&gt; &gt; &gt; &gt; (25,733,727 samples, 0.05%)</title><rect x="725.3" y="1605" width="0.6" height="15.0" fill="rgb(228,131,6)" rx="2" ry="2" />
<text  x="728.28" y="1615.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::FetchFromSource (37,195,798 samples, 0.07%)</title><rect x="105.7" y="1797" width="0.8" height="15.0" fill="rgb(226,100,29)" rx="2" ry="2" />
<text  x="108.68" y="1807.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*&gt; (155,067,420 samples, 0.30%)</title><rect x="390.4" y="1813" width="3.6" height="15.0" fill="rgb(221,106,30)" rx="2" ry="2" />
<text  x="393.43" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::Elapsed (12,104,894 samples, 0.02%)</title><rect x="920.0" y="1861" width="0.2" height="15.0" fill="rgb(208,56,28)" rx="2" ry="2" />
<text  x="922.96" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CompressionAppendState, std::default_delete&lt;duckdb::CompressionAppendState&gt;, true&gt;::operator= (7,679,159 samples, 0.01%)</title><rect x="197.1" y="1669" width="0.2" height="15.0" fill="rgb(219,80,38)" rx="2" ry="2" />
<text  x="200.14" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::SegmentScanState&gt;, void&gt; (6,586,671 samples, 0.01%)</title><rect x="224.1" y="1653" width="0.2" height="15.0" fill="rgb(237,218,26)" rx="2" ry="2" />
<text  x="227.12" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Binding&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Binding&gt; &gt; &gt;::_M_realloc_insert&lt;std::reference_wrapper&lt;duckdb::Binding&gt; &gt; (17,803,456 samples, 0.03%)</title><rect x="928.5" y="1669" width="0.4" height="15.0" fill="rgb(221,166,34)" rx="2" ry="2" />
<text  x="931.53" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (31,679,149 samples, 0.06%)</title><rect x="829.5" y="1669" width="0.8" height="15.0" fill="rgb(251,131,52)" rx="2" ry="2" />
<text  x="832.53" y="1679.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt; (46,553,231 samples, 0.09%)</title><rect x="861.6" y="1669" width="1.1" height="15.0" fill="rgb(238,117,3)" rx="2" ry="2" />
<text  x="864.59" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ThreadExecuteTasks (2,354,839,056 samples, 4.59%)</title><rect x="91.1" y="1893" width="54.2" height="15.0" fill="rgb(244,21,37)" rx="2" ry="2" />
<text  x="94.10" y="1903.5" >duckd..</text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (77,543,044 samples, 0.15%)</title><rect x="400.7" y="1781" width="1.8" height="15.0" fill="rgb(252,154,16)" rx="2" ry="2" />
<text  x="403.74" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, std::shared_ptr&lt;duckdb::BoundParameterData&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, std::shared_ptr&lt;duckdb::BoundParameterData&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_move_assign (4,504,164 samples, 0.01%)</title><rect x="1041.8" y="1861" width="0.1" height="15.0" fill="rgb(243,220,13)" rx="2" ry="2" />
<text  x="1044.77" y="1871.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (23,637,570 samples, 0.05%)</title><rect x="103.0" y="1461" width="0.6" height="15.0" fill="rgb(218,8,1)" rx="2" ry="2" />
<text  x="106.04" y="1471.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::QueryProfiler, std::allocator&lt;duckdb::QueryProfiler&gt;,  (27,196,832 samples, 0.05%)</title><rect x="353.4" y="1797" width="0.6" height="15.0" fill="rgb(253,164,31)" rx="2" ry="2" />
<text  x="356.39" y="1807.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::PipelineRenderNode&gt; (19,620,437 samples, 0.04%)</title><rect x="1067.1" y="1669" width="0.5" height="15.0" fill="rgb(229,30,44)" rx="2" ry="2" />
<text  x="1070.12" y="1679.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocate (55,222,098 samples, 0.11%)</title><rect x="401.1" y="1621" width="1.3" height="15.0" fill="rgb(208,226,39)" rx="2" ry="2" />
<text  x="404.12" y="1631.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::ResetFromCache (13,926,958 samples, 0.03%)</title><rect x="291.0" y="1589" width="0.3" height="15.0" fill="rgb(225,20,34)" rx="2" ry="2" />
<text  x="294.01" y="1599.5" ></text>
</g>
<g >
<title>duckdb::JoinRelationSetManager::JoinRelationSetManager (7,647,251 samples, 0.01%)</title><rect x="752.2" y="1797" width="0.2" height="15.0" fill="rgb(215,98,50)" rx="2" ry="2" />
<text  x="755.20" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt; &gt; &gt;::push_back (35,419,938 samples, 0.07%)</title><rect x="539.4" y="1909" width="0.8" height="15.0" fill="rgb(230,158,25)" rx="2" ry="2" />
<text  x="542.43" y="1919.5" ></text>
</g>
<g >
<title>vma_merge (15,390,636 samples, 0.03%)</title><rect x="1173.6" y="1909" width="0.3" height="15.0" fill="rgb(242,114,52)" rx="2" ry="2" />
<text  x="1176.55" y="1919.5" ></text>
</g>
<g >
<title>std::copy&lt;unsigned long const*, unsigned long*&gt; (16,446,091 samples, 0.03%)</title><rect x="661.4" y="1669" width="0.4" height="15.0" fill="rgb(207,27,21)" rx="2" ry="2" />
<text  x="664.45" y="1679.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::Iterate&lt;duckdb::LogicalOperator&gt; (12,240,777 samples, 0.02%)</title><rect x="594.2" y="1765" width="0.3" height="15.0" fill="rgb(234,25,34)" rx="2" ry="2" />
<text  x="597.18" y="1775.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::UpdateStringStats (4,784,957 samples, 0.01%)</title><rect x="230.3" y="1525" width="0.1" height="15.0" fill="rgb(208,198,41)" rx="2" ry="2" />
<text  x="233.27" y="1535.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_trigger (22,672,115 samples, 0.04%)</title><rect x="891.5" y="1413" width="0.5" height="15.0" fill="rgb(212,149,35)" rx="2" ry="2" />
<text  x="894.46" y="1423.5" ></text>
</g>
<g >
<title>duckdb::Binder::PlanSubqueries (16,517,654 samples, 0.03%)</title><rect x="974.2" y="1733" width="0.4" height="15.0" fill="rgb(223,104,7)" rx="2" ry="2" />
<text  x="977.18" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::vector (23,153,599 samples, 0.05%)</title><rect x="842.7" y="1733" width="0.6" height="15.0" fill="rgb(219,10,6)" rx="2" ry="2" />
<text  x="845.74" y="1743.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::unordered_map (8,016,404 samples, 0.02%)</title><rect x="967.1" y="1749" width="0.2" height="15.0" fill="rgb(237,202,2)" rx="2" ry="2" />
<text  x="970.13" y="1759.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::~unordered_set (5,363,971 samples, 0.01%)</title><rect x="778.5" y="1797" width="0.1" height="15.0" fill="rgb(206,61,16)" rx="2" ry="2" />
<text  x="781.47" y="1807.5" ></text>
</g>
<g >
<title>blk_mq_sched_dispatch_requests (39,113,542 samples, 0.08%)</title><rect x="249.7" y="1461" width="0.9" height="15.0" fill="rgb(251,71,16)" rx="2" ry="2" />
<text  x="252.70" y="1471.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::CatalogLookup, std::allocator&lt;duckdb::CatalogLookup&gt; &gt;::reserve (11,721,816 samples, 0.02%)</title><rect x="1010.3" y="1781" width="0.2" height="15.0" fill="rgb(212,144,28)" rx="2" ry="2" />
<text  x="1013.26" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::ExpressionBinder&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::ExpressionBinder&gt; &gt; &gt;::push_back (23,815,275 samples, 0.05%)</title><rect x="936.3" y="1685" width="0.5" height="15.0" fill="rgb(214,48,33)" rx="2" ry="2" />
<text  x="939.27" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::_M_initialize (9,233,120 samples, 0.02%)</title><rect x="1056.8" y="1781" width="0.2" height="15.0" fill="rgb(213,191,51)" rx="2" ry="2" />
<text  x="1059.78" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt;, std::allocator&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; &gt;::_S_do_relocate (5,566,937 samples, 0.01%)</title><rect x="1001.5" y="1621" width="0.1" height="15.0" fill="rgb(244,102,48)" rx="2" ry="2" />
<text  x="1004.51" y="1631.5" ></text>
</g>
<g >
<title>std::function&lt;void  (4,498,357 samples, 0.01%)</title><rect x="583.9" y="1813" width="0.1" height="15.0" fill="rgb(231,212,28)" rx="2" ry="2" />
<text  x="586.87" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (85,664,447 samples, 0.17%)</title><rect x="366.5" y="1621" width="2.0" height="15.0" fill="rgb(209,169,20)" rx="2" ry="2" />
<text  x="369.54" y="1631.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::extent_recycle (4,789,628 samples, 0.01%)</title><rect x="103.2" y="1221" width="0.1" height="15.0" fill="rgb(254,68,53)" rx="2" ry="2" />
<text  x="106.22" y="1231.5" ></text>
</g>
<g >
<title>duckdb::ParsedExpression::Hash (7,345,639 samples, 0.01%)</title><rect x="967.9" y="1669" width="0.2" height="15.0" fill="rgb(221,129,40)" rx="2" ry="2" />
<text  x="970.91" y="1679.5" ></text>
</g>
<g >
<title>duckdb::Event::Finish (45,694,913 samples, 0.09%)</title><rect x="100.7" y="1813" width="1.0" height="15.0" fill="rgb(229,15,17)" rx="2" ry="2" />
<text  x="103.67" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic, __sanitizer::LocalAddressSpaceView&gt;::EnsureSortedChunks (9,680,832 samples, 0.02%)</title><rect x="52.1" y="2021" width="0.3" height="15.0" fill="rgb(248,69,36)" rx="2" ry="2" />
<text  x="55.14" y="2031.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned long [], std::default_delete&lt;unsigned long&gt;, false&gt;::~unique_ptr (4,717,698 samples, 0.01%)</title><rect x="374.8" y="1637" width="0.1" height="15.0" fill="rgb(242,206,27)" rx="2" ry="2" />
<text  x="377.78" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;::~vector (12,434,877 samples, 0.02%)</title><rect x="948.3" y="1717" width="0.3" height="15.0" fill="rgb(223,176,40)" rx="2" ry="2" />
<text  x="951.30" y="1727.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (9,931,588 samples, 0.02%)</title><rect x="724.5" y="1669" width="0.2" height="15.0" fill="rgb(208,200,37)" rx="2" ry="2" />
<text  x="727.50" y="1679.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt; &gt;::__uniq_ptr_impl (5,051,856 samples, 0.01%)</title><rect x="758.1" y="1733" width="0.1" height="15.0" fill="rgb(234,157,52)" rx="2" ry="2" />
<text  x="761.06" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; &gt;::~vector (14,140,820 samples, 0.03%)</title><rect x="915.4" y="1669" width="0.3" height="15.0" fill="rgb(205,62,41)" rx="2" ry="2" />
<text  x="918.39" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorMetaData, std::allocator&lt;duckdb::VectorMetaData&gt; &gt;::_S_relocate (8,760,194 samples, 0.02%)</title><rect x="864.3" y="1669" width="0.2" height="15.0" fill="rgb(242,124,22)" rx="2" ry="2" />
<text  x="867.26" y="1679.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::~vector (4,374,273 samples, 0.01%)</title><rect x="955.4" y="1573" width="0.1" height="15.0" fill="rgb(214,90,47)" rx="2" ry="2" />
<text  x="958.41" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorMetaData, std::allocator&lt;duckdb::VectorMetaData&gt; &gt;::~vector (8,002,940 samples, 0.02%)</title><rect x="341.5" y="1173" width="0.1" height="15.0" fill="rgb(242,11,31)" rx="2" ry="2" />
<text  x="344.46" y="1183.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;duckdb::Event&gt;*&gt; (97,807,628 samples, 0.19%)</title><rect x="355.1" y="1797" width="2.3" height="15.0" fill="rgb(241,184,35)" rx="2" ry="2" />
<text  x="358.12" y="1807.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Pin (10,203,627 samples, 0.02%)</title><rect x="212.8" y="1589" width="0.2" height="15.0" fill="rgb(215,194,0)" rx="2" ry="2" />
<text  x="215.80" y="1599.5" ></text>
</g>
<g >
<title>duckdb::FieldReader::ReadRequired&lt;duckdb::LogicalTypeId&gt; (4,505,352 samples, 0.01%)</title><rect x="586.7" y="1797" width="0.1" height="15.0" fill="rgb(238,150,48)" rx="2" ry="2" />
<text  x="589.72" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::allocate (4,476,839 samples, 0.01%)</title><rect x="628.3" y="1685" width="0.1" height="15.0" fill="rgb(215,162,17)" rx="2" ry="2" />
<text  x="631.25" y="1695.5" ></text>
</g>
<g >
<title>duckdb::VectorBuffer::CreateConstantVector (40,633,069 samples, 0.08%)</title><rect x="901.3" y="1653" width="0.9" height="15.0" fill="rgb(211,21,49)" rx="2" ry="2" />
<text  x="904.25" y="1663.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Task,  (6,290,448 samples, 0.01%)</title><rect x="511.9" y="1909" width="0.1" height="15.0" fill="rgb(252,44,7)" rx="2" ry="2" />
<text  x="514.86" y="1919.5" ></text>
</g>
<g >
<title>duckdb::AddFun::RegisterFunction (5,592,576 samples, 0.01%)</title><rect x="1110.1" y="1877" width="0.1" height="15.0" fill="rgb(249,46,19)" rx="2" ry="2" />
<text  x="1113.05" y="1887.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_trigger (18,312,953 samples, 0.04%)</title><rect x="878.5" y="1413" width="0.4" height="15.0" fill="rgb(211,187,35)" rx="2" ry="2" />
<text  x="881.47" y="1423.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, duckdb::ReferenceHashFunction&lt;duckdb::SchemaCatalogEntry&gt;, duckdb::ReferenceEquality&lt;duckdb::SchemaCatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt; &gt; &gt;::insert (48,965,610 samples, 0.10%)</title><rect x="1007.0" y="1765" width="1.1" height="15.0" fill="rgb(247,60,16)" rx="2" ry="2" />
<text  x="1009.98" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (6,410,276 samples, 0.01%)</title><rect x="1119.9" y="1845" width="0.2" height="15.0" fill="rgb(250,176,9)" rx="2" ry="2" />
<text  x="1122.91" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt;::deallocate (5,192,071 samples, 0.01%)</title><rect x="45.8" y="2021" width="0.1" height="15.0" fill="rgb(222,156,28)" rx="2" ry="2" />
<text  x="48.77" y="2031.5" ></text>
</g>
<g >
<title>handle_mm_fault (14,867,060 samples, 0.03%)</title><rect x="56.0" y="1941" width="0.4" height="15.0" fill="rgb(217,109,52)" rx="2" ry="2" />
<text  x="59.01" y="1951.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::operator* (6,032,869 samples, 0.01%)</title><rect x="742.0" y="1653" width="0.1" height="15.0" fill="rgb(244,33,32)" rx="2" ry="2" />
<text  x="744.97" y="1663.5" ></text>
</g>
<g >
<title>mem_cgroup_charge_statistics (6,912,162 samples, 0.01%)</title><rect x="1139.5" y="1893" width="0.2" height="15.0" fill="rgb(243,16,2)" rx="2" ry="2" />
<text  x="1142.52" y="1903.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::Event&gt;*&gt; (98,459,337 samples, 0.19%)</title><rect x="355.1" y="1813" width="2.3" height="15.0" fill="rgb(247,115,13)" rx="2" ry="2" />
<text  x="358.12" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt; &gt;::~unique_ptr (28,199,207 samples, 0.05%)</title><rect x="1122.2" y="1749" width="0.7" height="15.0" fill="rgb(247,170,13)" rx="2" ry="2" />
<text  x="1125.21" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::AppendTransientSegment (688,295,659 samples, 1.34%)</title><rect x="433.2" y="1701" width="15.9" height="15.0" fill="rgb(253,194,52)" rx="2" ry="2" />
<text  x="436.22" y="1711.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1509" width="0.3" height="15.0" fill="rgb(220,175,46)" rx="2" ry="2" />
<text  x="835.82" y="1519.5" ></text>
</g>
<g >
<title>__vma_link_rb (4,418,089 samples, 0.01%)</title><rect x="1171.4" y="1861" width="0.1" height="15.0" fill="rgb(226,20,28)" rx="2" ry="2" />
<text  x="1174.41" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::unique_ptr&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;duckdb::BoundColumnRefExpression&gt;, void&gt; (13,144,662 samples, 0.03%)</title><rect x="587.6" y="1813" width="0.3" height="15.0" fill="rgb(240,37,24)" rx="2" ry="2" />
<text  x="590.58" y="1823.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ColumnRefExpression, std::default_delete&lt;duckdb::ColumnRefExpression&gt; &gt;::__uniq_ptr_impl (5,166,781 samples, 0.01%)</title><rect x="944.2" y="1653" width="0.2" height="15.0" fill="rgb(215,101,12)" rx="2" ry="2" />
<text  x="947.24" y="1663.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (128,500,027 samples, 0.25%)</title><rect x="289.0" y="1717" width="2.9" height="15.0" fill="rgb(223,27,34)" rx="2" ry="2" />
<text  x="291.96" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="421" width="0.1" height="15.0" fill="rgb(217,171,39)" rx="2" ry="2" />
<text  x="14.25" y="431.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (13,575,635 samples, 0.03%)</title><rect x="1139.9" y="1893" width="0.3" height="15.0" fill="rgb(215,208,52)" rx="2" ry="2" />
<text  x="1142.90" y="1903.5" ></text>
</g>
<g >
<title>__do_page_fault (83,836,890 samples, 0.16%)</title><rect x="72.2" y="1941" width="2.0" height="15.0" fill="rgb(211,157,9)" rx="2" ry="2" />
<text  x="75.23" y="1951.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt; (46,553,231 samples, 0.09%)</title><rect x="861.6" y="1653" width="1.1" height="15.0" fill="rgb(237,210,49)" rx="2" ry="2" />
<text  x="864.59" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CompressedSegmentState, std::default_delete&lt;duckdb::CompressedSegmentState&gt;, true&gt;::operator= (22,450,278 samples, 0.04%)</title><rect x="445.3" y="1637" width="0.5" height="15.0" fill="rgb(225,13,42)" rx="2" ry="2" />
<text  x="448.33" y="1647.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (29,069,354 samples, 0.06%)</title><rect x="363.0" y="1685" width="0.6" height="15.0" fill="rgb(250,222,42)" rx="2" ry="2" />
<text  x="365.97" y="1695.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::LightweightSemaphore::signal (20,148,466 samples, 0.04%)</title><rect x="93.4" y="1685" width="0.5" height="15.0" fill="rgb(223,59,16)" rx="2" ry="2" />
<text  x="96.43" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1669" width="0.3" height="15.0" fill="rgb(217,104,53)" rx="2" ry="2" />
<text  x="835.82" y="1679.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (9,798,890 samples, 0.02%)</title><rect x="726.5" y="1685" width="0.2" height="15.0" fill="rgb(237,52,41)" rx="2" ry="2" />
<text  x="729.52" y="1695.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::LocalTableStorage, duckdb::DataTable&amp;&gt; (370,739,811 samples, 0.72%)</title><rect x="422.6" y="1749" width="8.5" height="15.0" fill="rgb(229,129,6)" rx="2" ry="2" />
<text  x="425.61" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1589" width="0.1" height="15.0" fill="rgb(227,35,42)" rx="2" ry="2" />
<text  x="14.25" y="1599.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::BlockHandle,  (4,566,276 samples, 0.01%)</title><rect x="288.2" y="1381" width="0.1" height="15.0" fill="rgb(228,86,53)" rx="2" ry="2" />
<text  x="291.24" y="1391.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (13,991,499 samples, 0.03%)</title><rect x="16.5" y="2005" width="0.3" height="15.0" fill="rgb(232,127,52)" rx="2" ry="2" />
<text  x="19.53" y="2015.5" ></text>
</g>
<g >
<title>duckdb::SingleFileStorageCommitState::SingleFileStorageCommitState (10,631,575 samples, 0.02%)</title><rect x="252.9" y="1781" width="0.2" height="15.0" fill="rgb(213,33,50)" rx="2" ry="2" />
<text  x="255.90" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (38,201,982 samples, 0.07%)</title><rect x="707.0" y="1813" width="0.8" height="15.0" fill="rgb(228,167,14)" rx="2" ry="2" />
<text  x="709.96" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (8,435,240 samples, 0.02%)</title><rect x="968.3" y="1685" width="0.2" height="15.0" fill="rgb(247,65,26)" rx="2" ry="2" />
<text  x="971.31" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ProgressBar, std::default_delete&lt;duckdb::ProgressBar&gt;, true&gt;::unique_ptr (4,726,891 samples, 0.01%)</title><rect x="544.0" y="1861" width="0.1" height="15.0" fill="rgb(230,146,16)" rx="2" ry="2" />
<text  x="547.00" y="1871.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionMatcher&gt; (6,076,983 samples, 0.01%)</title><rect x="818.8" y="1845" width="0.1" height="15.0" fill="rgb(224,21,31)" rx="2" ry="2" />
<text  x="821.80" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (34,745,648 samples, 0.07%)</title><rect x="754.0" y="1733" width="0.8" height="15.0" fill="rgb(217,65,49)" rx="2" ry="2" />
<text  x="756.97" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::BlockHandle&gt; &gt;::destroy&lt;duckdb::BlockHandle&gt; (87,200,440 samples, 0.17%)</title><rect x="239.2" y="693" width="2.0" height="15.0" fill="rgb(218,87,21)" rx="2" ry="2" />
<text  x="242.22" y="703.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (11,341,804 samples, 0.02%)</title><rect x="350.5" y="1573" width="0.3" height="15.0" fill="rgb(231,38,43)" rx="2" ry="2" />
<text  x="353.52" y="1583.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_initialize_map (5,841,739 samples, 0.01%)</title><rect x="496.9" y="1781" width="0.2" height="15.0" fill="rgb(222,126,54)" rx="2" ry="2" />
<text  x="499.92" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (5,179,211 samples, 0.01%)</title><rect x="929.8" y="1637" width="0.1" height="15.0" fill="rgb(212,45,25)" rx="2" ry="2" />
<text  x="932.79" y="1647.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (86,856,399 samples, 0.17%)</title><rect x="481.7" y="1525" width="2.0" height="15.0" fill="rgb(211,172,30)" rx="2" ry="2" />
<text  x="484.70" y="1535.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::operator= (5,307,967 samples, 0.01%)</title><rect x="729.7" y="1589" width="0.1" height="15.0" fill="rgb(241,33,17)" rx="2" ry="2" />
<text  x="732.65" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (11,531,195 samples, 0.02%)</title><rect x="84.2" y="2005" width="0.3" height="15.0" fill="rgb(248,147,26)" rx="2" ry="2" />
<text  x="87.19" y="2015.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::GlobalSourceState, std::default_delete&lt;duckdb::GlobalSourceState&gt; &gt;::operator= (7,930,807 samples, 0.02%)</title><rect x="92.6" y="1701" width="0.2" height="15.0" fill="rgb(211,26,42)" rx="2" ry="2" />
<text  x="95.62" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::~vector (16,326,665 samples, 0.03%)</title><rect x="481.1" y="1717" width="0.4" height="15.0" fill="rgb(205,158,17)" rx="2" ry="2" />
<text  x="484.08" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::emplace_back&lt;duckdb::VectorCache&gt; (11,946,796 samples, 0.02%)</title><rect x="495.4" y="1765" width="0.2" height="15.0" fill="rgb(212,119,26)" rx="2" ry="2" />
<text  x="498.35" y="1775.5" ></text>
</g>
<g >
<title>duckdb::PhysicalPlanGenerator::PhysicalPlanGenerator (6,788,839 samples, 0.01%)</title><rect x="924.3" y="1893" width="0.2" height="15.0" fill="rgb(228,82,1)" rx="2" ry="2" />
<text  x="927.35" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt; &gt;::operator= (7,232,057 samples, 0.01%)</title><rect x="479.7" y="1781" width="0.2" height="15.0" fill="rgb(246,12,38)" rx="2" ry="2" />
<text  x="482.71" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CatalogEntry, std::default_delete&lt;duckdb::CatalogEntry&gt;, true&gt;::~unique_ptr (9,284,106 samples, 0.02%)</title><rect x="1117.6" y="773" width="0.2" height="15.0" fill="rgb(245,157,12)" rx="2" ry="2" />
<text  x="1120.55" y="783.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt;::unique_ptr (11,557,521 samples, 0.02%)</title><rect x="755.0" y="1669" width="0.3" height="15.0" fill="rgb(241,135,35)" rx="2" ry="2" />
<text  x="758.01" y="1679.5" ></text>
</g>
<g >
<title>duckdb::Catalog::CreatePragmaFunction (6,389,653 samples, 0.01%)</title><rect x="1110.4" y="1845" width="0.2" height="15.0" fill="rgb(249,193,52)" rx="2" ry="2" />
<text  x="1113.44" y="1855.5" ></text>
</g>
<g >
<title>duckdb::UnnestRewriter::FindCandidates (12,492,078 samples, 0.02%)</title><rect x="768.9" y="1797" width="0.3" height="15.0" fill="rgb(229,175,17)" rx="2" ry="2" />
<text  x="771.90" y="1807.5" ></text>
</g>
<g >
<title>duckdb::VectorMetaData::VectorMetaData (5,214,898 samples, 0.01%)</title><rect x="864.0" y="1637" width="0.2" height="15.0" fill="rgb(234,155,7)" rx="2" ry="2" />
<text  x="867.04" y="1647.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::CreateTransientSegment (595,794,261 samples, 1.16%)</title><rect x="433.3" y="1685" width="13.7" height="15.0" fill="rgb(215,132,51)" rx="2" ry="2" />
<text  x="436.34" y="1695.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::Vector*&gt; (74,694,188 samples, 0.15%)</title><rect x="221.2" y="1653" width="1.8" height="15.0" fill="rgb(212,58,13)" rx="2" ry="2" />
<text  x="224.25" y="1663.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetMapping (30,222,352 samples, 0.06%)</title><rect x="993.2" y="1701" width="0.7" height="15.0" fill="rgb(234,219,18)" rx="2" ry="2" />
<text  x="996.21" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ProducerToken::~ProducerToken (4,944,534 samples, 0.01%)</title><rect x="336.5" y="1701" width="0.1" height="15.0" fill="rgb(242,138,52)" rx="2" ry="2" />
<text  x="339.52" y="1711.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_get_property (4,587,499 samples, 0.01%)</title><rect x="626.6" y="1733" width="0.1" height="15.0" fill="rgb(229,58,31)" rx="2" ry="2" />
<text  x="629.61" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::ColumnData (66,819,482 samples, 0.13%)</title><rect x="453.4" y="1525" width="1.5" height="15.0" fill="rgb(248,176,46)" rx="2" ry="2" />
<text  x="456.40" y="1535.5" ></text>
</g>
<g >
<title>duckdb::CommitState::CommitState (7,930,085 samples, 0.02%)</title><rect x="254.0" y="1797" width="0.2" height="15.0" fill="rgb(221,45,16)" rx="2" ry="2" />
<text  x="256.97" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_gc_dalloc_event_handler (5,969,224 samples, 0.01%)</title><rect x="334.6" y="1269" width="0.2" height="15.0" fill="rgb(221,72,40)" rx="2" ry="2" />
<text  x="337.62" y="1279.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (21,886,724 samples, 0.04%)</title><rect x="983.8" y="1797" width="0.5" height="15.0" fill="rgb(208,109,39)" rx="2" ry="2" />
<text  x="986.78" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (9,177,479 samples, 0.02%)</title><rect x="83.6" y="2005" width="0.2" height="15.0" fill="rgb(231,27,21)" rx="2" ry="2" />
<text  x="86.62" y="2015.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::DictionaryBuffer&gt;::destroy&lt;duckdb::DictionaryBuffer&gt; (12,255,699 samples, 0.02%)</title><rect x="292.3" y="1541" width="0.2" height="15.0" fill="rgb(206,37,18)" rx="2" ry="2" />
<text  x="295.26" y="1551.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::~shared_ptr (71,691,651 samples, 0.14%)</title><rect x="221.3" y="1605" width="1.7" height="15.0" fill="rgb(209,55,41)" rx="2" ry="2" />
<text  x="224.32" y="1615.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (6,699,843 samples, 0.01%)</title><rect x="921.2" y="1829" width="0.2" height="15.0" fill="rgb(215,110,32)" rx="2" ry="2" />
<text  x="924.24" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;char [], std::default_delete&lt;char []&gt; &gt;::unique_ptr&lt;char*, std::default_delete&lt;char []&gt;, void, bool&gt; (5,747,425 samples, 0.01%)</title><rect x="522.6" y="1813" width="0.1" height="15.0" fill="rgb(208,154,54)" rx="2" ry="2" />
<text  x="525.60" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::operator (5,209,610 samples, 0.01%)</title><rect x="551.8" y="1749" width="0.1" height="15.0" fill="rgb(230,62,4)" rx="2" ry="2" />
<text  x="554.75" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::AppendTransientSegment (69,419,083 samples, 0.14%)</title><rect x="102.8" y="1653" width="1.6" height="15.0" fill="rgb(248,159,4)" rx="2" ry="2" />
<text  x="105.82" y="1663.5" ></text>
</g>
<g >
<title>duckdb::ValidityMask::operator= (5,139,293 samples, 0.01%)</title><rect x="375.9" y="1893" width="0.1" height="15.0" fill="rgb(233,190,22)" rx="2" ry="2" />
<text  x="378.90" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ConjunctionExpressionMatcher, std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt;, void&gt; (7,608,951 samples, 0.01%)</title><rect x="792.7" y="1813" width="0.2" height="15.0" fill="rgb(232,17,17)" rx="2" ry="2" />
<text  x="795.75" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt; &gt;::~unique_ptr (157,601,795 samples, 0.31%)</title><rect x="324.3" y="1685" width="3.6" height="15.0" fill="rgb(208,220,10)" rx="2" ry="2" />
<text  x="327.27" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::~unique_ptr (5,742,586 samples, 0.01%)</title><rect x="949.1" y="1733" width="0.1" height="15.0" fill="rgb(248,197,31)" rx="2" ry="2" />
<text  x="952.09" y="1743.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ConjunctionExpressionMatcher, std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt; &gt;::_M_ptr (5,623,194 samples, 0.01%)</title><rect x="807.9" y="1813" width="0.1" height="15.0" fill="rgb(235,128,0)" rx="2" ry="2" />
<text  x="810.92" y="1823.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt; &gt;::__uniq_ptr_impl (9,630,455 samples, 0.02%)</title><rect x="446.1" y="1621" width="0.2" height="15.0" fill="rgb(214,8,32)" rx="2" ry="2" />
<text  x="449.11" y="1631.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::CommonTableExpressionInfo, std::default_delete&lt;duckdb::CommonTableExpressionInfo&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::CommonTableExpressionInfo, std::default_delete&lt;duckdb::CommonTableExpressionInfo&gt;, true&gt; &gt; &gt; &gt;::~unordered_map (4,958,078 samples, 0.01%)</title><rect x="1038.1" y="1797" width="0.1" height="15.0" fill="rgb(232,163,38)" rx="2" ry="2" />
<text  x="1041.06" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Event::CompleteDependency (588,903,156 samples, 1.15%)</title><rect x="405.5" y="1829" width="13.6" height="15.0" fill="rgb(215,71,38)" rx="2" ry="2" />
<text  x="408.53" y="1839.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::BoundReferenceExpression&gt; &gt; (4,670,763 samples, 0.01%)</title><rect x="845.2" y="1685" width="0.1" height="15.0" fill="rgb(241,7,21)" rx="2" ry="2" />
<text  x="848.22" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt; &gt;::~unique_ptr (20,290,534 samples, 0.04%)</title><rect x="906.7" y="1637" width="0.4" height="15.0" fill="rgb(230,170,10)" rx="2" ry="2" />
<text  x="909.67" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_fetch_slow (9,161,984 samples, 0.02%)</title><rect x="107.4" y="1397" width="0.2" height="15.0" fill="rgb(239,173,8)" rx="2" ry="2" />
<text  x="110.43" y="1407.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;*&gt; (22,251,549 samples, 0.04%)</title><rect x="1096.2" y="1669" width="0.5" height="15.0" fill="rgb(236,46,2)" rx="2" ry="2" />
<text  x="1099.18" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::~vector (93,367,021 samples, 0.18%)</title><rect x="895.9" y="1749" width="2.1" height="15.0" fill="rgb(231,151,50)" rx="2" ry="2" />
<text  x="898.87" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Binder::HasMatchingBinding (40,811,349 samples, 0.08%)</title><rect x="959.8" y="1685" width="0.9" height="15.0" fill="rgb(243,59,35)" rx="2" ry="2" />
<text  x="962.77" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BufferedSerializer, std::default_delete&lt;duckdb::BufferedSerializer&gt;, true&gt;::reset (10,508,293 samples, 0.02%)</title><rect x="314.0" y="1605" width="0.3" height="15.0" fill="rgb(205,69,15)" rx="2" ry="2" />
<text  x="317.04" y="1615.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::iallocztm (4,449,799 samples, 0.01%)</title><rect x="193.1" y="1525" width="0.1" height="15.0" fill="rgb(239,110,39)" rx="2" ry="2" />
<text  x="196.06" y="1535.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (17,737,855 samples, 0.03%)</title><rect x="1172.4" y="1845" width="0.4" height="15.0" fill="rgb(231,17,39)" rx="2" ry="2" />
<text  x="1175.41" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (8,361,838 samples, 0.02%)</title><rect x="20.1" y="2005" width="0.1" height="15.0" fill="rgb(218,97,22)" rx="2" ry="2" />
<text  x="23.05" y="2015.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::ChunkMetaData&gt; &gt;::construct&lt;duckdb::ChunkMetaData, duckdb::ChunkMetaData&gt; (18,289,562 samples, 0.04%)</title><rect x="885.3" y="1701" width="0.5" height="15.0" fill="rgb(205,172,31)" rx="2" ry="2" />
<text  x="888.33" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::GlobalSourceState, std::default_delete&lt;duckdb::GlobalSourceState&gt; &gt;::unique_ptr&lt;duckdb::InsertSourceState, std::default_delete&lt;duckdb::InsertSourceState&gt;, void&gt; (7,405,641 samples, 0.01%)</title><rect x="399.8" y="1813" width="0.1" height="15.0" fill="rgb(211,174,12)" rx="2" ry="2" />
<text  x="402.76" y="1823.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (213,549,953 samples, 0.42%)</title><rect x="736.3" y="1765" width="4.9" height="15.0" fill="rgb(212,52,54)" rx="2" ry="2" />
<text  x="739.28" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ClientConfig::~ClientConfig (5,897,419 samples, 0.01%)</title><rect x="374.0" y="1909" width="0.1" height="15.0" fill="rgb(222,32,3)" rx="2" ry="2" />
<text  x="376.96" y="1919.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorCacheBuffer&gt;::shared_ptr&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (18,788,291 samples, 0.04%)</title><rect x="107.3" y="1653" width="0.4" height="15.0" fill="rgb(206,118,22)" rx="2" ry="2" />
<text  x="110.28" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;*, std::weak_ptr&lt;duckdb::Pipeline&gt; &gt; (5,095,671 samples, 0.01%)</title><rect x="356.4" y="1461" width="0.2" height="15.0" fill="rgb(235,132,42)" rx="2" ry="2" />
<text  x="359.45" y="1471.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::swap (5,739,003 samples, 0.01%)</title><rect x="192.2" y="1749" width="0.2" height="15.0" fill="rgb(241,50,10)" rx="2" ry="2" />
<text  x="195.23" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;duckdb::DataTable&amp;, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt; (35,446,238 samples, 0.07%)</title><rect x="431.6" y="1717" width="0.8" height="15.0" fill="rgb(249,76,10)" rx="2" ry="2" />
<text  x="434.56" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt;, true&gt;::operator= (5,323,934 samples, 0.01%)</title><rect x="816.1" y="1845" width="0.2" height="15.0" fill="rgb(220,128,45)" rx="2" ry="2" />
<text  x="819.14" y="1855.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (15,871,986 samples, 0.03%)</title><rect x="107.3" y="1509" width="0.4" height="15.0" fill="rgb(213,34,21)" rx="2" ry="2" />
<text  x="110.29" y="1519.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;, true&gt;::operator[] (6,778,307 samples, 0.01%)</title><rect x="1078.3" y="1829" width="0.2" height="15.0" fill="rgb(238,189,14)" rx="2" ry="2" />
<text  x="1081.34" y="1839.5" ></text>
</g>
<g >
<title>alloc_pages_vma (73,421,282 samples, 0.14%)</title><rect x="1137.2" y="1909" width="1.7" height="15.0" fill="rgb(234,126,53)" rx="2" ry="2" />
<text  x="1140.24" y="1919.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::pair&lt;unsigned long, unsigned long&gt;*, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (79,321,956 samples, 0.15%)</title><rect x="568.6" y="1717" width="1.8" height="15.0" fill="rgb(219,81,39)" rx="2" ry="2" />
<text  x="571.59" y="1727.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::~AllocatedData (68,624,384 samples, 0.13%)</title><rect x="1123.1" y="1637" width="1.6" height="15.0" fill="rgb(236,111,46)" rx="2" ry="2" />
<text  x="1126.14" y="1647.5" ></text>
</g>
<g >
<title>duckdb::BoundColumnRefExpression::BoundColumnRefExpression (7,475,265 samples, 0.01%)</title><rect x="951.7" y="1605" width="0.2" height="15.0" fill="rgb(217,81,38)" rx="2" ry="2" />
<text  x="954.72" y="1615.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (28,457,265 samples, 0.06%)</title><rect x="1032.5" y="1877" width="0.7" height="15.0" fill="rgb(241,187,7)" rx="2" ry="2" />
<text  x="1035.52" y="1887.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (12,768,022 samples, 0.02%)</title><rect x="401.9" y="1461" width="0.3" height="15.0" fill="rgb(237,89,29)" rx="2" ry="2" />
<text  x="404.88" y="1471.5" ></text>
</g>
<g >
<title>duckdb::RemoveUnusedColumns::VisitOperator (27,683,313 samples, 0.05%)</title><rect x="764.8" y="1781" width="0.6" height="15.0" fill="rgb(238,214,31)" rx="2" ry="2" />
<text  x="767.79" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::eset_fit (15,655,050 samples, 0.03%)</title><rect x="876.0" y="1221" width="0.4" height="15.0" fill="rgb(234,171,23)" rx="2" ry="2" />
<text  x="879.00" y="1231.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::emplace_back&lt;unsigned long&amp;, unsigned long&amp;&gt; (99,049,723 samples, 0.19%)</title><rect x="1072.6" y="1733" width="2.3" height="15.0" fill="rgb(234,142,3)" rx="2" ry="2" />
<text  x="1075.65" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_range_initialize&lt;unsigned long const*&gt; (5,401,349 samples, 0.01%)</title><rect x="777.7" y="1749" width="0.1" height="15.0" fill="rgb(224,34,0)" rx="2" ry="2" />
<text  x="780.69" y="1759.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (307,300,826 samples, 0.60%)</title><rect x="704.6" y="1845" width="7.1" height="15.0" fill="rgb(220,170,34)" rx="2" ry="2" />
<text  x="707.64" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt; &gt;::unique_ptr (7,987,610 samples, 0.02%)</title><rect x="867.2" y="1653" width="0.1" height="15.0" fill="rgb(215,44,38)" rx="2" ry="2" />
<text  x="870.16" y="1663.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (130,195,487 samples, 0.25%)</title><rect x="594.6" y="1781" width="3.0" height="15.0" fill="rgb(220,55,37)" rx="2" ry="2" />
<text  x="597.61" y="1791.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (5,123,478 samples, 0.01%)</title><rect x="579.8" y="1797" width="0.1" height="15.0" fill="rgb(211,207,7)" rx="2" ry="2" />
<text  x="582.82" y="1807.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (18,120,938 samples, 0.04%)</title><rect x="107.3" y="1589" width="0.4" height="15.0" fill="rgb(228,28,21)" rx="2" ry="2" />
<text  x="110.29" y="1599.5" ></text>
</g>
<g >
<title>__wake_up_common (4,525,113 samples, 0.01%)</title><rect x="252.2" y="1557" width="0.1" height="15.0" fill="rgb(245,130,49)" rx="2" ry="2" />
<text  x="255.16" y="1567.5" ></text>
</g>
<g >
<title>ext4_filemap_fault (10,247,081 samples, 0.02%)</title><rect x="72.9" y="1845" width="0.2" height="15.0" fill="rgb(236,42,15)" rx="2" ry="2" />
<text  x="75.88" y="1855.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (18,590,654 samples, 0.04%)</title><rect x="1067.6" y="1717" width="0.4" height="15.0" fill="rgb(216,98,33)" rx="2" ry="2" />
<text  x="1070.62" y="1727.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned int*, false&gt;::_M_head (15,917,157 samples, 0.03%)</title><rect x="210.2" y="1413" width="0.4" height="15.0" fill="rgb(243,66,41)" rx="2" ry="2" />
<text  x="213.20" y="1423.5" ></text>
</g>
<g >
<title>duckdb::BoundColumnRefExpression::~BoundColumnRefExpression (12,777,491 samples, 0.02%)</title><rect x="642.7" y="1813" width="0.3" height="15.0" fill="rgb(245,66,13)" rx="2" ry="2" />
<text  x="645.72" y="1823.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::BoundSelectNode&gt; (38,134,398 samples, 0.07%)</title><rect x="963.3" y="1749" width="0.9" height="15.0" fill="rgb(241,49,0)" rx="2" ry="2" />
<text  x="966.28" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt;::reset (5,084,280 samples, 0.01%)</title><rect x="300.8" y="1637" width="0.2" height="15.0" fill="rgb(225,213,37)" rx="2" ry="2" />
<text  x="303.84" y="1647.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt; (39,567,126 samples, 0.08%)</title><rect x="469.8" y="1685" width="0.9" height="15.0" fill="rgb(220,168,22)" rx="2" ry="2" />
<text  x="472.82" y="1695.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Vector&gt;::allocate (11,882,545 samples, 0.02%)</title><rect x="34.9" y="2021" width="0.3" height="15.0" fill="rgb(214,144,33)" rx="2" ry="2" />
<text  x="37.92" y="2031.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;::vector (4,667,880 samples, 0.01%)</title><rect x="537.6" y="1797" width="0.1" height="15.0" fill="rgb(209,84,50)" rx="2" ry="2" />
<text  x="540.61" y="1807.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_next_grapheme (5,629,268 samples, 0.01%)</title><rect x="561.4" y="1781" width="0.1" height="15.0" fill="rgb(243,228,4)" rx="2" ry="2" />
<text  x="564.36" y="1791.5" ></text>
</g>
<g >
<title>wait_on_page_writeback (14,448,407 samples, 0.03%)</title><rect x="249.2" y="1605" width="0.4" height="15.0" fill="rgb(226,107,48)" rx="2" ry="2" />
<text  x="252.24" y="1615.5" ></text>
</g>
<g >
<title>duckdb::PendingQueryResult::~PendingQueryResult (22,132,292 samples, 0.04%)</title><rect x="1106.9" y="1925" width="0.5" height="15.0" fill="rgb(237,161,42)" rx="2" ry="2" />
<text  x="1109.86" y="1935.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::FinalizeAppend (550,903,733 samples, 1.07%)</title><rect x="406.0" y="1733" width="12.7" height="15.0" fill="rgb(244,151,33)" rx="2" ry="2" />
<text  x="409.02" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::ColumnBinding, std::pair&lt;duckdb::ColumnBinding const, unsigned long&gt;, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6,194,866 samples, 0.01%)</title><rect x="728.4" y="1701" width="0.1" height="15.0" fill="rgb(218,172,43)" rx="2" ry="2" />
<text  x="731.38" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (12,079,459 samples, 0.02%)</title><rect x="968.2" y="1717" width="0.3" height="15.0" fill="rgb(209,84,50)" rx="2" ry="2" />
<text  x="971.23" y="1727.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (19,835,938 samples, 0.04%)</title><rect x="41.9" y="1989" width="0.5" height="15.0" fill="rgb(247,170,10)" rx="2" ry="2" />
<text  x="44.91" y="1999.5" ></text>
</g>
<g >
<title>all (51,291,417,442 samples, 100%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(252,178,46)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (37,190,503 samples, 0.07%)</title><rect x="353.3" y="1813" width="0.9" height="15.0" fill="rgb(226,131,11)" rx="2" ry="2" />
<text  x="356.34" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt;::unique_ptr&lt;duckdb::ManyFunctionMatcher, std::default_delete&lt;duckdb::ManyFunctionMatcher&gt;, void&gt; (4,804,337 samples, 0.01%)</title><rect x="801.2" y="1829" width="0.1" height="15.0" fill="rgb(224,209,8)" rx="2" ry="2" />
<text  x="804.21" y="1839.5" ></text>
</g>
<g >
<title>sem_post@@GLIBC_2.2.5 (17,460,022 samples, 0.03%)</title><rect x="93.5" y="1669" width="0.4" height="15.0" fill="rgb(224,68,53)" rx="2" ry="2" />
<text  x="96.49" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ChunkMetaData, std::allocator&lt;duckdb::ChunkMetaData&gt; &gt;::emplace_back&lt;duckdb::ChunkMetaData&gt; (33,009,919 samples, 0.06%)</title><rect x="885.1" y="1733" width="0.8" height="15.0" fill="rgb(215,127,17)" rx="2" ry="2" />
<text  x="888.14" y="1743.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::SetNode (6,559,622 samples, 0.01%)</title><rect x="1066.9" y="1733" width="0.2" height="15.0" fill="rgb(223,133,28)" rx="2" ry="2" />
<text  x="1069.92" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::ColumnAppendState&gt; &gt;::construct&lt;duckdb::ColumnAppendState, duckdb::ColumnAppendState&gt; (27,178,702 samples, 0.05%)</title><rect x="451.3" y="1669" width="0.6" height="15.0" fill="rgb(229,152,4)" rx="2" ry="2" />
<text  x="454.32" y="1679.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::QueueProducerToken, duckdb::ConcurrentQueue&amp;&gt; (17,527,026 samples, 0.03%)</title><rect x="1091.0" y="1845" width="0.4" height="15.0" fill="rgb(249,137,20)" rx="2" ry="2" />
<text  x="1094.00" y="1855.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionExecutorState&gt; (9,873,077 samples, 0.02%)</title><rect x="904.4" y="1733" width="0.2" height="15.0" fill="rgb(208,28,9)" rx="2" ry="2" />
<text  x="907.35" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Expression::IsWindow (10,189,325 samples, 0.02%)</title><rect x="860.2" y="1813" width="0.2" height="15.0" fill="rgb(218,86,20)" rx="2" ry="2" />
<text  x="863.20" y="1823.5" ></text>
</g>
<g >
<title>duckdb_hll::hllSparseToDense (6,156,903 samples, 0.01%)</title><rect x="426.5" y="1349" width="0.1" height="15.0" fill="rgb(236,149,45)" rx="2" ry="2" />
<text  x="429.51" y="1359.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::RegisterSmallMemory (39,274,015 samples, 0.08%)</title><rect x="103.0" y="1621" width="0.9" height="15.0" fill="rgb(249,20,26)" rx="2" ry="2" />
<text  x="105.97" y="1631.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::BlockMetaData, true&gt;::~vector (355,547,109 samples, 0.69%)</title><rect x="342.0" y="1221" width="8.1" height="15.0" fill="rgb(245,16,44)" rx="2" ry="2" />
<text  x="344.97" y="1231.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple&lt;void, true&gt; (6,004,955 samples, 0.01%)</title><rect x="711.6" y="1829" width="0.1" height="15.0" fill="rgb(233,100,48)" rx="2" ry="2" />
<text  x="714.57" y="1839.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorCacheBuffer&gt;::shared_ptr&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (6,842,132 samples, 0.01%)</title><rect x="108.1" y="1685" width="0.2" height="15.0" fill="rgb(235,158,2)" rx="2" ry="2" />
<text  x="111.09" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (10,880,579 samples, 0.02%)</title><rect x="552.0" y="1781" width="0.3" height="15.0" fill="rgb(217,49,49)" rx="2" ry="2" />
<text  x="555.03" y="1791.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (66,812,290 samples, 0.13%)</title><rect x="741.3" y="1717" width="1.5" height="15.0" fill="rgb(245,195,28)" rx="2" ry="2" />
<text  x="744.29" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnBinding, true&gt;::operator= (4,660,125 samples, 0.01%)</title><rect x="846.2" y="1861" width="0.1" height="15.0" fill="rgb(246,22,36)" rx="2" ry="2" />
<text  x="849.23" y="1871.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::PreparedStatementData, std::allocator&lt;duckdb::PreparedStatementData&gt;, duckdb::StatementType&amp;&gt; (34,579,741 samples, 0.07%)</title><rect x="1040.5" y="1877" width="0.8" height="15.0" fill="rgb(233,49,6)" rx="2" ry="2" />
<text  x="1043.52" y="1887.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::Pipeline*, duckdb::Pipeline*, std::hash&lt;duckdb::Pipeline*&gt;, std::equal_to&lt;duckdb::Pipeline*&gt;, std::allocator&lt;std::pair&lt;duckdb::Pipeline* const, duckdb::Pipeline*&gt; &gt; &gt;::~unordered_map (5,941,709 samples, 0.01%)</title><rect x="1096.8" y="1733" width="0.1" height="15.0" fill="rgb(211,129,41)" rx="2" ry="2" />
<text  x="1099.76" y="1743.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;std::shared_ptr&lt;duckdb::Task&gt;, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::ExplicitProducer::dequeue&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; (36,536,972 samples, 0.07%)</title><rect x="504.5" y="1845" width="0.8" height="15.0" fill="rgb(211,88,36)" rx="2" ry="2" />
<text  x="507.49" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Binder::~Binder (54,971,620 samples, 0.11%)</title><rect x="1030.7" y="1765" width="1.3" height="15.0" fill="rgb(231,85,23)" rx="2" ry="2" />
<text  x="1033.72" y="1775.5" ></text>
</g>
<g >
<title>std::default_delete&lt;std::lock_guard&lt;std::mutex&gt; &gt;::operator (5,337,099 samples, 0.01%)</title><rect x="329.5" y="1797" width="0.1" height="15.0" fill="rgb(214,211,11)" rx="2" ry="2" />
<text  x="332.52" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ChunkInfo, std::default_delete&lt;duckdb::ChunkInfo&gt;, true&gt;::unique_ptr (13,886,709 samples, 0.03%)</title><rect x="415.6" y="1541" width="0.3" height="15.0" fill="rgb(248,71,25)" rx="2" ry="2" />
<text  x="418.63" y="1551.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::PipelineTask, duckdb::Pipeline&amp;, std::shared_ptr&lt;duckdb::Event&gt;&amp;&gt; (20,471,606 samples, 0.04%)</title><rect x="94.5" y="1733" width="0.5" height="15.0" fill="rgb(249,198,35)" rx="2" ry="2" />
<text  x="97.52" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned long [], std::default_delete&lt;unsigned long&gt;, false&gt;::~unique_ptr (4,999,447 samples, 0.01%)</title><rect x="481.2" y="1461" width="0.1" height="15.0" fill="rgb(238,183,39)" rx="2" ry="2" />
<text  x="484.19" y="1471.5" ></text>
</g>
<g >
<title>duckdb::Connection::Commit (11,184,926 samples, 0.02%)</title><rect x="1109.3" y="1957" width="0.2" height="15.0" fill="rgb(234,223,43)" rx="2" ry="2" />
<text  x="1112.26" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_deallocate_node (12,477,336 samples, 0.02%)</title><rect x="1090.0" y="1797" width="0.3" height="15.0" fill="rgb(225,158,3)" rx="2" ry="2" />
<text  x="1093.02" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::Append (53,901,018 samples, 0.11%)</title><rect x="461.4" y="1717" width="1.2" height="15.0" fill="rgb(236,129,48)" rx="2" ry="2" />
<text  x="464.35" y="1727.5" ></text>
</g>
<g >
<title>duckdb::CreateColumnInternal&lt;std::shared_ptr&lt;duckdb::ColumnData&gt;, duckdb::SharedConstructor&gt; (112,141,680 samples, 0.22%)</title><rect x="453.0" y="1701" width="2.6" height="15.0" fill="rgb(214,124,36)" rx="2" ry="2" />
<text  x="456.00" y="1711.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::JoinRelationSet*, duckdb::unique_ptr&lt;duckdb::JoinNode, std::default_delete&lt;duckdb::JoinNode&gt;, true&gt;, std::hash&lt;duckdb::JoinRelationSet*&gt;, std::equal_to&lt;duckdb::JoinRelationSet*&gt;, std::allocator&lt;std::pair&lt;duckdb::JoinRelationSet* const, duckdb::unique_ptr&lt;duckdb::JoinNode, std::default_delete&lt;duckdb::JoinNode&gt;, true&gt; &gt; &gt; &gt;::~unordered_map (6,300,357 samples, 0.01%)</title><rect x="757.2" y="1765" width="0.1" height="15.0" fill="rgb(242,108,21)" rx="2" ry="2" />
<text  x="760.17" y="1775.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt; &gt;::__uniq_ptr_impl (5,384,324 samples, 0.01%)</title><rect x="553.4" y="1749" width="0.1" height="15.0" fill="rgb(215,163,22)" rx="2" ry="2" />
<text  x="556.41" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SelectStatement, std::default_delete&lt;duckdb::SelectStatement&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::SelectStatement&gt;, void&gt; (8,000,141 samples, 0.02%)</title><rect x="536.6" y="1765" width="0.2" height="15.0" fill="rgb(215,107,44)" rx="2" ry="2" />
<text  x="539.63" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (8,235,541 samples, 0.02%)</title><rect x="1123.5" y="1429" width="0.2" height="15.0" fill="rgb(245,38,47)" rx="2" ry="2" />
<text  x="1126.55" y="1439.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::GlobalSinkState, std::default_delete&lt;duckdb::GlobalSinkState&gt; &gt;::unique_ptr&lt;duckdb::InsertGlobalState, std::default_delete&lt;duckdb::InsertGlobalState&gt;, void&gt; (9,569,858 samples, 0.02%)</title><rect x="99.6" y="1781" width="0.2" height="15.0" fill="rgb(241,22,13)" rx="2" ry="2" />
<text  x="102.58" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SpecificExpressionTypeMatcher, std::default_delete&lt;duckdb::SpecificExpressionTypeMatcher&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::SpecificExpressionTypeMatcher&gt;, void&gt; (4,578,479 samples, 0.01%)</title><rect x="803.7" y="1813" width="0.1" height="15.0" fill="rgb(233,100,37)" rx="2" ry="2" />
<text  x="806.67" y="1823.5" ></text>
</g>
<g >
<title>do_user_addr_fault (7,971,376 samples, 0.02%)</title><rect x="67.6" y="1957" width="0.2" height="15.0" fill="rgb(218,144,44)" rx="2" ry="2" />
<text  x="70.61" y="1967.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (70,792,088 samples, 0.14%)</title><rect x="705.3" y="1813" width="1.7" height="15.0" fill="rgb(243,90,19)" rx="2" ry="2" />
<text  x="708.33" y="1823.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (4,656,424 samples, 0.01%)</title><rect x="778.7" y="1797" width="0.1" height="15.0" fill="rgb(214,62,7)" rx="2" ry="2" />
<text  x="781.66" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="389" width="0.1" height="15.0" fill="rgb(213,16,52)" rx="2" ry="2" />
<text  x="14.25" y="399.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (7,961,839 samples, 0.02%)</title><rect x="476.1" y="1749" width="0.2" height="15.0" fill="rgb(246,55,39)" rx="2" ry="2" />
<text  x="479.09" y="1759.5" ></text>
</g>
<g >
<title>duckdb::LogicalType::operator= (4,377,677 samples, 0.01%)</title><rect x="424.9" y="1477" width="0.1" height="15.0" fill="rgb(235,148,48)" rx="2" ry="2" />
<text  x="427.88" y="1487.5" ></text>
</g>
<g >
<title>duckdb::ColumnAppendState::~ColumnAppendState (8,180,374 samples, 0.02%)</title><rect x="234.1" y="1589" width="0.2" height="15.0" fill="rgb(247,158,5)" rx="2" ry="2" />
<text  x="237.07" y="1599.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::_M_ptr (4,566,581 samples, 0.01%)</title><rect x="771.6" y="1749" width="0.1" height="15.0" fill="rgb(253,192,6)" rx="2" ry="2" />
<text  x="774.57" y="1759.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::InitializeAppend (1,608,038,447 samples, 3.14%)</title><rect x="422.3" y="1781" width="37.0" height="15.0" fill="rgb(226,43,53)" rx="2" ry="2" />
<text  x="425.29" y="1791.5" >duc..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt; &gt;::destroy&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt; (6,560,161 samples, 0.01%)</title><rect x="481.2" y="1509" width="0.1" height="15.0" fill="rgb(233,135,39)" rx="2" ry="2" />
<text  x="484.19" y="1519.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::BufferHandle, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt; &gt;::find (10,506,058 samples, 0.02%)</title><rect x="472.9" y="1717" width="0.2" height="15.0" fill="rgb(206,191,20)" rx="2" ry="2" />
<text  x="475.91" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::MoveConstantsRule, std::default_delete&lt;duckdb::MoveConstantsRule&gt;, void&gt; (14,732,897 samples, 0.03%)</title><rect x="824.0" y="1861" width="0.3" height="15.0" fill="rgb(214,171,43)" rx="2" ry="2" />
<text  x="826.96" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (44,456,187 samples, 0.09%)</title><rect x="289.3" y="1493" width="1.0" height="15.0" fill="rgb(240,192,34)" rx="2" ry="2" />
<text  x="292.31" y="1503.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::QueryNode&gt;::operator (22,367,282 samples, 0.04%)</title><rect x="1038.5" y="1701" width="0.5" height="15.0" fill="rgb(214,178,12)" rx="2" ry="2" />
<text  x="1041.47" y="1711.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::ToString[abi:cxx11] (1,151,102,578 samples, 2.24%)</title><rect x="594.0" y="1845" width="26.5" height="15.0" fill="rgb(207,90,13)" rx="2" ry="2" />
<text  x="597.04" y="1855.5" >d..</text>
</g>
<g >
<title>duckdb::VectorMetaData::~VectorMetaData (4,420,848 samples, 0.01%)</title><rect x="883.0" y="1717" width="0.1" height="15.0" fill="rgb(216,215,47)" rx="2" ry="2" />
<text  x="886.03" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (40,858,724 samples, 0.08%)</title><rect x="289.4" y="1461" width="0.9" height="15.0" fill="rgb(221,218,16)" rx="2" ry="2" />
<text  x="292.36" y="1471.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorToString[abi:cxx11] (5,052,063 samples, 0.01%)</title><rect x="622.3" y="1701" width="0.1" height="15.0" fill="rgb(243,2,51)" rx="2" ry="2" />
<text  x="625.33" y="1711.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::DataChunk (6,967,305 samples, 0.01%)</title><rect x="321.1" y="1765" width="0.1" height="15.0" fill="rgb(231,195,3)" rx="2" ry="2" />
<text  x="324.07" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;::~unique_ptr (8,895,623 samples, 0.02%)</title><rect x="1089.4" y="1669" width="0.2" height="15.0" fill="rgb(213,23,3)" rx="2" ry="2" />
<text  x="1092.44" y="1679.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Verify (30,303,896 samples, 0.06%)</title><rect x="315.3" y="1653" width="0.7" height="15.0" fill="rgb(227,113,34)" rx="2" ry="2" />
<text  x="318.29" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (4,465,848 samples, 0.01%)</title><rect x="953.3" y="1525" width="0.1" height="15.0" fill="rgb(246,11,52)" rx="2" ry="2" />
<text  x="956.33" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::operator= (6,046,013 samples, 0.01%)</title><rect x="986.8" y="1797" width="0.1" height="15.0" fill="rgb(223,164,22)" rx="2" ry="2" />
<text  x="989.78" y="1807.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;duckdb::UnifiedVectorFormat*, unsigned long&gt; (4,415,801 samples, 0.01%)</title><rect x="385.1" y="1861" width="0.1" height="15.0" fill="rgb(225,218,51)" rx="2" ry="2" />
<text  x="388.15" y="1871.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnBinding, true&gt;::vector (6,456,889 samples, 0.01%)</title><rect x="847.4" y="1797" width="0.1" height="15.0" fill="rgb(221,210,49)" rx="2" ry="2" />
<text  x="850.38" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocator::ArenaAllocator (74,590,421 samples, 0.15%)</title><rect x="996.7" y="1621" width="1.7" height="15.0" fill="rgb(240,145,29)" rx="2" ry="2" />
<text  x="999.72" y="1631.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::AttachedDatabase*, duckdb::Transaction*, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt; &gt;::find (11,079,531 samples, 0.02%)</title><rect x="1043.0" y="1781" width="0.2" height="15.0" fill="rgb(244,111,39)" rx="2" ry="2" />
<text  x="1045.97" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1253" width="0.1" height="15.0" fill="rgb(253,215,13)" rx="2" ry="2" />
<text  x="14.25" y="1263.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;::_Vector_base (6,049,925 samples, 0.01%)</title><rect x="532.5" y="1685" width="0.2" height="15.0" fill="rgb(215,103,28)" rx="2" ry="2" />
<text  x="535.51" y="1695.5" ></text>
</g>
<g >
<title>scsi_queue_rq (32,871,595 samples, 0.06%)</title><rect x="249.8" y="1397" width="0.7" height="15.0" fill="rgb(236,109,48)" rx="2" ry="2" />
<text  x="252.76" y="1407.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt;, true&gt;::operator= (6,099,223 samples, 0.01%)</title><rect x="812.1" y="1845" width="0.2" height="15.0" fill="rgb(225,165,51)" rx="2" ry="2" />
<text  x="815.12" y="1855.5" ></text>
</g>
<g >
<title>duckdb::DuckCatalog::Initialize (328,878,641 samples, 0.64%)</title><rect x="1109.6" y="1941" width="7.6" height="15.0" fill="rgb(254,119,13)" rx="2" ry="2" />
<text  x="1112.63" y="1951.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::ReadChunk (17,946,830 samples, 0.03%)</title><rect x="106.0" y="1733" width="0.4" height="15.0" fill="rgb(210,42,9)" rx="2" ry="2" />
<text  x="109.03" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::operator= (6,635,427 samples, 0.01%)</title><rect x="957.3" y="1701" width="0.1" height="15.0" fill="rgb(212,128,26)" rx="2" ry="2" />
<text  x="960.29" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::ConjunctionExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (6,122,313 samples, 0.01%)</title><rect x="808.2" y="1845" width="0.1" height="15.0" fill="rgb(211,131,40)" rx="2" ry="2" />
<text  x="811.20" y="1855.5" ></text>
</g>
<g >
<title>duckdb::StarExpression::Copy (40,191,032 samples, 0.08%)</title><rect x="947.1" y="1717" width="0.9" height="15.0" fill="rgb(251,46,27)" rx="2" ry="2" />
<text  x="950.11" y="1727.5" ></text>
</g>
<g >
<title>duckdb::PhysicalDummyScan::PhysicalDummyScan (31,894,222 samples, 0.06%)</title><rect x="907.9" y="1733" width="0.7" height="15.0" fill="rgb(246,118,23)" rx="2" ry="2" />
<text  x="910.88" y="1743.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::~AllocatedData (47,550,188 samples, 0.09%)</title><rect x="297.5" y="1461" width="1.1" height="15.0" fill="rgb(214,187,7)" rx="2" ry="2" />
<text  x="300.48" y="1471.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::pair&lt;unsigned long, unsigned long&gt;*, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (71,256,279 samples, 0.14%)</title><rect x="568.7" y="1701" width="1.6" height="15.0" fill="rgb(224,74,4)" rx="2" ry="2" />
<text  x="571.67" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RenderTreeNode&gt;, void&gt; (6,778,156 samples, 0.01%)</title><rect x="623.2" y="1717" width="0.2" height="15.0" fill="rgb(215,68,2)" rx="2" ry="2" />
<text  x="626.21" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::push_back (11,731,703 samples, 0.02%)</title><rect x="848.3" y="1829" width="0.3" height="15.0" fill="rgb(236,193,6)" rx="2" ry="2" />
<text  x="851.33" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::ConstantExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (6,362,379 samples, 0.01%)</title><rect x="797.1" y="1845" width="0.2" height="15.0" fill="rgb(235,195,45)" rx="2" ry="2" />
<text  x="800.11" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::unique_ptr&lt;duckdb::ColumnRefExpression, std::default_delete&lt;duckdb::ColumnRefExpression&gt;, void&gt; (6,615,888 samples, 0.01%)</title><rect x="959.1" y="1637" width="0.1" height="15.0" fill="rgb(233,43,39)" rx="2" ry="2" />
<text  x="962.07" y="1647.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt;::_M_head (4,694,973 samples, 0.01%)</title><rect x="309.1" y="1477" width="0.1" height="15.0" fill="rgb(208,30,8)" rx="2" ry="2" />
<text  x="312.11" y="1487.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (68,937,516 samples, 0.13%)</title><rect x="548.3" y="1669" width="1.6" height="15.0" fill="rgb(222,126,10)" rx="2" ry="2" />
<text  x="551.27" y="1679.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::allocate (13,123,956 samples, 0.03%)</title><rect x="607.4" y="1717" width="0.3" height="15.0" fill="rgb(227,73,16)" rx="2" ry="2" />
<text  x="610.36" y="1727.5" ></text>
</g>
<g >
<title>do_fsync (147,962,425 samples, 0.29%)</title><rect x="249.1" y="1685" width="3.4" height="15.0" fill="rgb(220,153,31)" rx="2" ry="2" />
<text  x="252.12" y="1695.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperator (8,993,415 samples, 0.02%)</title><rect x="726.5" y="1653" width="0.2" height="15.0" fill="rgb(211,85,12)" rx="2" ry="2" />
<text  x="729.52" y="1663.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::RowGroupCollection,  (79,693,963 samples, 0.16%)</title><rect x="428.6" y="1557" width="1.8" height="15.0" fill="rgb(221,197,37)" rx="2" ry="2" />
<text  x="431.61" y="1567.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ParsedExpression&gt;::operator (5,045,465 samples, 0.01%)</title><rect x="949.1" y="1701" width="0.1" height="15.0" fill="rgb(240,104,31)" rx="2" ry="2" />
<text  x="952.10" y="1711.5" ></text>
</g>
<g >
<title>std::numeric_limits&lt;unsigned int&gt;::max (6,680,572 samples, 0.01%)</title><rect x="266.4" y="1509" width="0.2" height="15.0" fill="rgb(236,41,5)" rx="2" ry="2" />
<text  x="269.42" y="1519.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt;, true&gt;::unique_ptr&lt;duckdb::ArenaAllocatorData, std::default_delete&lt;std::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt; &gt; &gt;, void&gt; (4,828,112 samples, 0.01%)</title><rect x="990.2" y="1557" width="0.1" height="15.0" fill="rgb(229,9,31)" rx="2" ry="2" />
<text  x="993.17" y="1567.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (76,875,686 samples, 0.15%)</title><rect x="896.2" y="1557" width="1.7" height="15.0" fill="rgb(247,222,48)" rx="2" ry="2" />
<text  x="899.16" y="1567.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (6,516,403 samples, 0.01%)</title><rect x="832.1" y="1557" width="0.2" height="15.0" fill="rgb(224,132,14)" rx="2" ry="2" />
<text  x="835.14" y="1567.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt;, true&gt;::~unique_ptr (14,933,348 samples, 0.03%)</title><rect x="641.0" y="1781" width="0.3" height="15.0" fill="rgb(210,11,49)" rx="2" ry="2" />
<text  x="643.99" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Transformer::SetParamCount (5,385,138 samples, 0.01%)</title><rect x="525.2" y="1893" width="0.1" height="15.0" fill="rgb(246,104,7)" rx="2" ry="2" />
<text  x="528.15" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr (7,479,914 samples, 0.01%)</title><rect x="809.4" y="1749" width="0.2" height="15.0" fill="rgb(216,157,26)" rx="2" ry="2" />
<text  x="812.41" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (19,299,474 samples, 0.04%)</title><rect x="732.1" y="1717" width="0.4" height="15.0" fill="rgb(222,141,33)" rx="2" ry="2" />
<text  x="735.09" y="1727.5" ></text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (8,108,007 samples, 0.02%)</title><rect x="703.2" y="1813" width="0.2" height="15.0" fill="rgb(229,2,20)" rx="2" ry="2" />
<text  x="706.20" y="1823.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (16,487,609 samples, 0.03%)</title><rect x="765.0" y="1749" width="0.4" height="15.0" fill="rgb(214,29,53)" rx="2" ry="2" />
<text  x="768.04" y="1759.5" ></text>
</g>
<g >
<title>duckdb::PhysicalColumnDataScan::GetData (347,023,951 samples, 0.68%)</title><rect x="468.5" y="1813" width="8.0" height="15.0" fill="rgb(231,216,43)" rx="2" ry="2" />
<text  x="471.50" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;unsigned long, false&gt;, std::allocator&lt;duckdb::vector&lt;unsigned long, false&gt; &gt; &gt;::~vector (8,175,640 samples, 0.02%)</title><rect x="980.9" y="1701" width="0.2" height="15.0" fill="rgb(246,178,32)" rx="2" ry="2" />
<text  x="983.92" y="1711.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector&gt; (7,242,694 samples, 0.01%)</title><rect x="108.5" y="1669" width="0.2" height="15.0" fill="rgb(253,28,31)" rx="2" ry="2" />
<text  x="111.52" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::push_back (22,866,752 samples, 0.04%)</title><rect x="1065.9" y="1749" width="0.5" height="15.0" fill="rgb(206,187,50)" rx="2" ry="2" />
<text  x="1068.87" y="1759.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::_Vector_base (5,026,654 samples, 0.01%)</title><rect x="940.0" y="1621" width="0.1" height="15.0" fill="rgb(218,161,45)" rx="2" ry="2" />
<text  x="942.95" y="1631.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (59,650,790 samples, 0.12%)</title><rect x="486.9" y="1557" width="1.4" height="15.0" fill="rgb(238,167,32)" rx="2" ry="2" />
<text  x="489.90" y="1567.5" ></text>
</g>
<g >
<title>duckdb::PragmaQueries::RegisterFunction (7,182,260 samples, 0.01%)</title><rect x="1110.7" y="1877" width="0.1" height="15.0" fill="rgb(216,63,20)" rx="2" ry="2" />
<text  x="1113.66" y="1887.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ConjunctionExpressionMatcher, std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt;, true&gt;::operator (8,811,470 samples, 0.02%)</title><rect x="807.9" y="1845" width="0.2" height="15.0" fill="rgb(236,79,15)" rx="2" ry="2" />
<text  x="810.92" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (6,335,949 samples, 0.01%)</title><rect x="380.6" y="1669" width="0.2" height="15.0" fill="rgb(207,146,19)" rx="2" ry="2" />
<text  x="383.62" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt; &gt; (99,210,826 samples, 0.19%)</title><rect x="241.6" y="853" width="2.3" height="15.0" fill="rgb(241,116,44)" rx="2" ry="2" />
<text  x="244.64" y="863.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BlockMetaData, std::allocator&lt;duckdb::BlockMetaData&gt; &gt;::_M_realloc_insert&lt;duckdb::BlockMetaData&gt; (14,959,507 samples, 0.03%)</title><rect x="882.1" y="1637" width="0.4" height="15.0" fill="rgb(237,136,12)" rx="2" ry="2" />
<text  x="885.14" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt; &gt; &gt;::_S_do_relocate (10,293,878 samples, 0.02%)</title><rect x="1064.9" y="1749" width="0.2" height="15.0" fill="rgb(215,134,47)" rx="2" ry="2" />
<text  x="1067.86" y="1759.5" ></text>
</g>
<g >
<title>duckdb::BufferPool::AddToEvictionQueue (26,251,945 samples, 0.05%)</title><rect x="861.8" y="1573" width="0.6" height="15.0" fill="rgb(238,176,46)" rx="2" ry="2" />
<text  x="864.79" y="1583.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::RowGroupCollection&gt;::construct&lt;duckdb::RowGroupCollection, std::shared_ptr&lt;duckdb::DataTableInfo&gt;&amp;, duckdb::BlockManager&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, long const&amp;, int&gt; (61,560,300 samples, 0.12%)</title><rect x="428.9" y="1493" width="1.4" height="15.0" fill="rgb(220,194,28)" rx="2" ry="2" />
<text  x="431.89" y="1503.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnAppendState, true&gt;::vector (5,066,149 samples, 0.01%)</title><rect x="451.8" y="1621" width="0.1" height="15.0" fill="rgb(246,153,13)" rx="2" ry="2" />
<text  x="454.78" y="1631.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BufferedSerializer, std::default_delete&lt;duckdb::BufferedSerializer&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BufferedSerializer&gt;, void&gt; (4,451,645 samples, 0.01%)</title><rect x="313.7" y="1589" width="0.1" height="15.0" fill="rgb(253,226,36)" rx="2" ry="2" />
<text  x="316.67" y="1599.5" ></text>
</g>
<g >
<title>dd_bio_merge (4,584,538 samples, 0.01%)</title><rect x="250.9" y="1493" width="0.1" height="15.0" fill="rgb(248,113,43)" rx="2" ry="2" />
<text  x="253.86" y="1503.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::unique_ptr&lt;duckdb::LogicalInsert, std::default_delete&lt;std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt; &gt;, void&gt; (8,570,842 samples, 0.02%)</title><rect x="1014.0" y="1829" width="0.2" height="15.0" fill="rgb(208,165,53)" rx="2" ry="2" />
<text  x="1017.02" y="1839.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetMapping (4,784,132 samples, 0.01%)</title><rect x="1115.2" y="1845" width="0.1" height="15.0" fill="rgb(223,125,10)" rx="2" ry="2" />
<text  x="1118.16" y="1855.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionMatcher&gt;::operator (14,363,645 samples, 0.03%)</title><rect x="831.8" y="1637" width="0.3" height="15.0" fill="rgb(221,134,4)" rx="2" ry="2" />
<text  x="834.77" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (6,436,538 samples, 0.01%)</title><rect x="896.6" y="1333" width="0.2" height="15.0" fill="rgb(240,165,12)" rx="2" ry="2" />
<text  x="899.63" y="1343.5" ></text>
</g>
<g >
<title>duckdb::Optimizer::Verify (2,375,584,998 samples, 4.63%)</title><rect x="645.8" y="1861" width="54.6" height="15.0" fill="rgb(246,81,42)" rx="2" ry="2" />
<text  x="648.78" y="1871.5" >duckd..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::CatalogEntryEquality, duckdb::CatalogEntryHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, true&gt; &gt; &gt; &gt; (46,241,762 samples, 0.09%)</title><rect x="851.5" y="1797" width="1.1" height="15.0" fill="rgb(206,155,12)" rx="2" ry="2" />
<text  x="854.53" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (20,835,765 samples, 0.04%)</title><rect x="921.6" y="1829" width="0.5" height="15.0" fill="rgb(247,142,24)" rx="2" ry="2" />
<text  x="924.65" y="1839.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::VectorCache (74,722,218 samples, 0.15%)</title><rect x="289.1" y="1685" width="1.8" height="15.0" fill="rgb(229,100,24)" rx="2" ry="2" />
<text  x="292.13" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_fetch (9,785,452 samples, 0.02%)</title><rect x="107.4" y="1429" width="0.3" height="15.0" fill="rgb(225,85,47)" rx="2" ry="2" />
<text  x="110.43" y="1439.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::HTTPState,  (8,769,087 samples, 0.02%)</title><rect x="516.6" y="1877" width="0.2" height="15.0" fill="rgb(210,192,25)" rx="2" ry="2" />
<text  x="519.56" y="1887.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorCacheBuffer&gt;::shared_ptr&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (150,176,171 samples, 0.29%)</title><rect x="365.9" y="1781" width="3.5" height="15.0" fill="rgb(249,2,19)" rx="2" ry="2" />
<text  x="368.94" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (5,180,165 samples, 0.01%)</title><rect x="975.7" y="1701" width="0.1" height="15.0" fill="rgb(247,228,0)" rx="2" ry="2" />
<text  x="978.72" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (12,115,192 samples, 0.02%)</title><rect x="832.5" y="1669" width="0.3" height="15.0" fill="rgb(218,117,49)" rx="2" ry="2" />
<text  x="835.54" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt; &gt; (4,381,970 samples, 0.01%)</title><rect x="981.7" y="1765" width="0.1" height="15.0" fill="rgb(210,154,52)" rx="2" ry="2" />
<text  x="984.67" y="1775.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::unordered_set (34,738,219 samples, 0.07%)</title><rect x="812.4" y="1845" width="0.8" height="15.0" fill="rgb(206,38,18)" rx="2" ry="2" />
<text  x="815.40" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::get (8,865,908 samples, 0.02%)</title><rect x="552.9" y="1717" width="0.2" height="15.0" fill="rgb(239,184,3)" rx="2" ry="2" />
<text  x="555.86" y="1727.5" ></text>
</g>
<g >
<title>__asan_memcpy (8,645,431 samples, 0.02%)</title><rect x="278.4" y="1509" width="0.2" height="15.0" fill="rgb(254,157,7)" rx="2" ry="2" />
<text  x="281.41" y="1519.5" ></text>
</g>
<g >
<title>duckdb::AssignSharedPointer&lt;duckdb::VectorBuffer&gt; (6,676,264 samples, 0.01%)</title><rect x="291.0" y="1557" width="0.2" height="15.0" fill="rgb(210,120,54)" rx="2" ry="2" />
<text  x="294.04" y="1567.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;::~vector (26,824,257 samples, 0.05%)</title><rect x="915.8" y="1605" width="0.6" height="15.0" fill="rgb(243,24,17)" rx="2" ry="2" />
<text  x="918.81" y="1615.5" ></text>
</g>
<g >
<title>std::_Construct&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;&gt; (14,785,357 samples, 0.03%)</title><rect x="577.7" y="1717" width="0.3" height="15.0" fill="rgb(221,59,23)" rx="2" ry="2" />
<text  x="580.69" y="1727.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::operator[] (10,629,426 samples, 0.02%)</title><rect x="759.1" y="1781" width="0.3" height="15.0" fill="rgb(235,228,35)" rx="2" ry="2" />
<text  x="762.13" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (229,605,194 samples, 0.45%)</title><rect x="676.3" y="1781" width="5.3" height="15.0" fill="rgb(245,9,23)" rx="2" ry="2" />
<text  x="679.32" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_realloc_insert&lt;duckdb::LogicalType const&amp;&gt; (6,311,654 samples, 0.01%)</title><rect x="232.2" y="1717" width="0.2" height="15.0" fill="rgb(237,73,26)" rx="2" ry="2" />
<text  x="235.21" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_node_ptr (10,815,440 samples, 0.02%)</title><rect x="682.6" y="1717" width="0.2" height="15.0" fill="rgb(212,163,0)" rx="2" ry="2" />
<text  x="685.55" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::Pin (25,505,865 samples, 0.05%)</title><rect x="470.9" y="1733" width="0.6" height="15.0" fill="rgb(251,154,3)" rx="2" ry="2" />
<text  x="473.90" y="1743.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::BlockHandle, std::allocator&lt;duckdb::BlockHandle&gt;, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool&amp;, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (42,898,801 samples, 0.08%)</title><rect x="880.7" y="1621" width="1.0" height="15.0" fill="rgb(248,61,20)" rx="2" ry="2" />
<text  x="883.75" y="1631.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, void&gt; (5,079,236 samples, 0.01%)</title><rect x="490.3" y="1717" width="0.2" height="15.0" fill="rgb(232,172,24)" rx="2" ry="2" />
<text  x="493.34" y="1727.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::LogicalType&gt;::construct&lt;duckdb::LogicalType, duckdb::LogicalType const&amp;&gt; (6,383,313 samples, 0.01%)</title><rect x="865.1" y="1701" width="0.2" height="15.0" fill="rgb(238,117,25)" rx="2" ry="2" />
<text  x="868.12" y="1711.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::MetaTransaction, std::default_delete&lt;duckdb::MetaTransaction&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::MetaTransaction&gt; &gt; (4,543,738 samples, 0.01%)</title><rect x="331.7" y="1829" width="0.1" height="15.0" fill="rgb(233,116,46)" rx="2" ry="2" />
<text  x="334.70" y="1839.5" ></text>
</g>
<g >
<title>duckdb::Binder::BindNode (4,441,561 samples, 0.01%)</title><rect x="982.1" y="1797" width="0.1" height="15.0" fill="rgb(223,33,13)" rx="2" ry="2" />
<text  x="985.11" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PipelineRenderNode, std::default_delete&lt;duckdb::PipelineRenderNode&gt;, true&gt;::operator= (10,369,549 samples, 0.02%)</title><rect x="1069.4" y="1765" width="0.2" height="15.0" fill="rgb(225,0,11)" rx="2" ry="2" />
<text  x="1072.37" y="1775.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::Finalize (24,715,218 samples, 0.05%)</title><rect x="591.4" y="1797" width="0.5" height="15.0" fill="rgb(205,201,3)" rx="2" ry="2" />
<text  x="594.37" y="1807.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;duckdb::Optimizer::Optimize (14,721,184 samples, 0.03%)</title><rect x="781.8" y="1861" width="0.3" height="15.0" fill="rgb(254,4,27)" rx="2" ry="2" />
<text  x="784.77" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::operator[] (6,304,567 samples, 0.01%)</title><rect x="312.0" y="1557" width="0.2" height="15.0" fill="rgb(223,220,46)" rx="2" ry="2" />
<text  x="315.02" y="1567.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, unsigned long&amp;, unsigned long&amp;&gt; (11,063,800 samples, 0.02%)</title><rect x="564.2" y="1749" width="0.3" height="15.0" fill="rgb(248,1,1)" rx="2" ry="2" />
<text  x="567.20" y="1759.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (6,193,032 samples, 0.01%)</title><rect x="594.3" y="1733" width="0.1" height="15.0" fill="rgb(252,3,46)" rx="2" ry="2" />
<text  x="597.30" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::operator= (5,104,462 samples, 0.01%)</title><rect x="1066.9" y="1717" width="0.1" height="15.0" fill="rgb(253,215,32)" rx="2" ry="2" />
<text  x="1069.93" y="1727.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::insert (28,776,365 samples, 0.06%)</title><rect x="779.9" y="1829" width="0.6" height="15.0" fill="rgb(248,150,37)" rx="2" ry="2" />
<text  x="782.89" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::idalloctm (12,080,170 samples, 0.02%)</title><rect x="221.8" y="1365" width="0.3" height="15.0" fill="rgb(246,129,8)" rx="2" ry="2" />
<text  x="224.85" y="1375.5" ></text>
</g>
<g >
<title>duckdb::RowGroupAppendState::~RowGroupAppendState (32,862,735 samples, 0.06%)</title><rect x="233.6" y="1765" width="0.7" height="15.0" fill="rgb(229,182,52)" rx="2" ry="2" />
<text  x="236.58" y="1775.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::CompressionAppendState, duckdb::BufferHandle&gt; (7,167,115 samples, 0.01%)</title><rect x="449.4" y="1669" width="0.2" height="15.0" fill="rgb(250,36,14)" rx="2" ry="2" />
<text  x="452.41" y="1679.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;unsigned int, std::default_delete&lt;unsigned int []&gt; &gt;::_M_ptr (209,067,587 samples, 0.41%)</title><rect x="261.0" y="1461" width="4.8" height="15.0" fill="rgb(216,85,36)" rx="2" ry="2" />
<text  x="263.98" y="1471.5" ></text>
</g>
<g >
<title>duckdb::Rule::~Rule (4,746,421 samples, 0.01%)</title><rect x="830.4" y="1685" width="0.1" height="15.0" fill="rgb(252,212,44)" rx="2" ry="2" />
<text  x="833.43" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (5,825,649 samples, 0.01%)</title><rect x="493.4" y="1445" width="0.1" height="15.0" fill="rgb(247,20,52)" rx="2" ry="2" />
<text  x="496.38" y="1455.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::AllocateVectorInternal (650,950,641 samples, 1.27%)</title><rect x="869.9" y="1733" width="15.0" height="15.0" fill="rgb(231,106,53)" rx="2" ry="2" />
<text  x="872.92" y="1743.5" ></text>
</g>
<g >
<title>duckdb::FilterCombiner::~FilterCombiner (6,912,224 samples, 0.01%)</title><rect x="748.5" y="1733" width="0.1" height="15.0" fill="rgb(221,94,13)" rx="2" ry="2" />
<text  x="751.46" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unsafe_get_property (19,264,741 samples, 0.04%)</title><rect x="602.4" y="1717" width="0.4" height="15.0" fill="rgb(238,52,25)" rx="2" ry="2" />
<text  x="605.35" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::~vector (91,622,519 samples, 0.18%)</title><rect x="333.4" y="1653" width="2.1" height="15.0" fill="rgb(228,194,8)" rx="2" ry="2" />
<text  x="336.37" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt;*&gt; (9,163,862 samples, 0.02%)</title><rect x="758.6" y="1733" width="0.2" height="15.0" fill="rgb(221,131,24)" rx="2" ry="2" />
<text  x="761.57" y="1743.5" ></text>
</g>
<g >
<title>duckdb::BufferedSerializer::~BufferedSerializer (4,601,875 samples, 0.01%)</title><rect x="591.7" y="1717" width="0.1" height="15.0" fill="rgb(213,154,42)" rx="2" ry="2" />
<text  x="594.70" y="1727.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (4,742,784 samples, 0.01%)</title><rect x="73.8" y="1829" width="0.1" height="15.0" fill="rgb(227,112,0)" rx="2" ry="2" />
<text  x="76.79" y="1839.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Free (48,698,544 samples, 0.09%)</title><rect x="221.5" y="1429" width="1.2" height="15.0" fill="rgb(214,15,52)" rx="2" ry="2" />
<text  x="224.54" y="1439.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutorInfo::ExpressionExecutorInfo (7,446,471 samples, 0.01%)</title><rect x="106.6" y="1733" width="0.1" height="15.0" fill="rgb(251,84,15)" rx="2" ry="2" />
<text  x="109.55" y="1743.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (5,383,164 samples, 0.01%)</title><rect x="920.1" y="1845" width="0.1" height="15.0" fill="rgb(243,157,45)" rx="2" ry="2" />
<text  x="923.11" y="1855.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ConjunctionExpressionMatcher&gt; (9,224,459 samples, 0.02%)</title><rect x="792.7" y="1845" width="0.2" height="15.0" fill="rgb(210,172,51)" rx="2" ry="2" />
<text  x="795.71" y="1855.5" ></text>
</g>
<g >
<title>duckdb::DistinctStatistics::Update (38,951,263 samples, 0.08%)</title><rect x="460.3" y="1733" width="0.9" height="15.0" fill="rgb(253,217,28)" rx="2" ry="2" />
<text  x="463.29" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;::get (4,543,959 samples, 0.01%)</title><rect x="1086.9" y="1813" width="0.1" height="15.0" fill="rgb(220,13,40)" rx="2" ry="2" />
<text  x="1089.86" y="1823.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (9,311,152 samples, 0.02%)</title><rect x="971.8" y="1557" width="0.3" height="15.0" fill="rgb(205,207,38)" rx="2" ry="2" />
<text  x="974.85" y="1567.5" ></text>
</g>
<g >
<title>duckdb::DatabaseInstance::GetBufferManager (8,553,535 samples, 0.02%)</title><rect x="998.5" y="1573" width="0.2" height="15.0" fill="rgb(236,61,33)" rx="2" ry="2" />
<text  x="1001.45" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (6,865,883 samples, 0.01%)</title><rect x="890.9" y="1413" width="0.2" height="15.0" fill="rgb(249,88,42)" rx="2" ry="2" />
<text  x="893.90" y="1423.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::QueryProfiler&gt;::shared_ptr&lt;std::allocator&lt;duckdb::QueryProfiler&gt;, duckdb::ClientContext&amp;&gt; (43,671,473 samples, 0.09%)</title><rect x="353.2" y="1845" width="1.0" height="15.0" fill="rgb(249,14,45)" rx="2" ry="2" />
<text  x="356.21" y="1855.5" ></text>
</g>
<g >
<title>duckdb::LogicalInsert::GetTableIndex (83,748,248 samples, 0.16%)</title><rect x="683.5" y="1813" width="2.0" height="15.0" fill="rgb(240,179,34)" rx="2" ry="2" />
<text  x="686.55" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::~unique_ptr (23,917,846 samples, 0.05%)</title><rect x="915.8" y="1509" width="0.6" height="15.0" fill="rgb(222,137,0)" rx="2" ry="2" />
<text  x="918.83" y="1519.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ClientContextLock, std::mutex&amp;&gt; (5,713,531 samples, 0.01%)</title><rect x="516.3" y="1957" width="0.1" height="15.0" fill="rgb(230,3,51)" rx="2" ry="2" />
<text  x="519.26" y="1967.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::ResetFromCache (13,192,348 samples, 0.03%)</title><rect x="419.5" y="1813" width="0.3" height="15.0" fill="rgb(223,18,20)" rx="2" ry="2" />
<text  x="422.46" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindImpl (9,805,433 samples, 0.02%)</title><rect x="20.2" y="2005" width="0.3" height="15.0" fill="rgb(244,63,12)" rx="2" ry="2" />
<text  x="23.24" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, std::__detail::_Select1st, duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (15,870,908 samples, 0.03%)</title><rect x="967.8" y="1717" width="0.4" height="15.0" fill="rgb(237,74,46)" rx="2" ry="2" />
<text  x="970.85" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;, true&gt;::~vector (21,093,675 samples, 0.04%)</title><rect x="971.8" y="1685" width="0.5" height="15.0" fill="rgb(210,67,10)" rx="2" ry="2" />
<text  x="974.78" y="1695.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::RenderTreeNode&gt;::operator (10,022,942 samples, 0.02%)</title><rect x="89.4" y="2021" width="0.2" height="15.0" fill="rgb(205,65,7)" rx="2" ry="2" />
<text  x="92.38" y="2031.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (6,126,945 samples, 0.01%)</title><rect x="754.2" y="1701" width="0.2" height="15.0" fill="rgb(225,95,33)" rx="2" ry="2" />
<text  x="757.22" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::operator= (6,752,159 samples, 0.01%)</title><rect x="734.6" y="1621" width="0.2" height="15.0" fill="rgb(245,163,16)" rx="2" ry="2" />
<text  x="737.65" y="1631.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Vector&gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (19,979,802 samples, 0.04%)</title><rect x="291.0" y="1637" width="0.5" height="15.0" fill="rgb(208,30,17)" rx="2" ry="2" />
<text  x="294.01" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt; &gt; &gt;::~vector (4,577,677 samples, 0.01%)</title><rect x="227.3" y="1621" width="0.1" height="15.0" fill="rgb(233,144,8)" rx="2" ry="2" />
<text  x="230.30" y="1631.5" ></text>
</g>
<g >
<title>blk_flush_plug_list (44,916,696 samples, 0.09%)</title><rect x="249.7" y="1557" width="1.0" height="15.0" fill="rgb(207,220,38)" rx="2" ry="2" />
<text  x="252.67" y="1567.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (4,378,740 samples, 0.01%)</title><rect x="315.8" y="1557" width="0.1" height="15.0" fill="rgb(245,29,13)" rx="2" ry="2" />
<text  x="318.76" y="1567.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::BlockHandle, std::allocator&lt;duckdb::BlockHandle&gt;,  (5,798,335 samples, 0.01%)</title><rect x="103.7" y="1525" width="0.2" height="15.0" fill="rgb(249,148,31)" rx="2" ry="2" />
<text  x="106.74" y="1535.5" ></text>
</g>
<g >
<title>duckdb::DistinctStatistics::Update (32,646,671 samples, 0.06%)</title><rect x="228.7" y="1637" width="0.7" height="15.0" fill="rgb(235,219,4)" rx="2" ry="2" />
<text  x="231.67" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::size (11,645,907 samples, 0.02%)</title><rect x="1055.5" y="1765" width="0.3" height="15.0" fill="rgb(207,36,4)" rx="2" ry="2" />
<text  x="1058.54" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_alloc_small (6,046,291 samples, 0.01%)</title><rect x="103.4" y="1365" width="0.2" height="15.0" fill="rgb(229,185,39)" rx="2" ry="2" />
<text  x="106.41" y="1375.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::LogicalType&gt;::allocate (14,778,982 samples, 0.03%)</title><rect x="34.3" y="2021" width="0.3" height="15.0" fill="rgb(240,172,35)" rx="2" ry="2" />
<text  x="37.25" y="2031.5" ></text>
</g>
<g >
<title>duckdb::PhysicalColumnDataScan::~PhysicalColumnDataScan (442,698,678 samples, 0.86%)</title><rect x="340.0" y="1429" width="10.2" height="15.0" fill="rgb(216,108,41)" rx="2" ry="2" />
<text  x="343.00" y="1439.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_check_len (4,671,871 samples, 0.01%)</title><rect x="818.1" y="1797" width="0.1" height="15.0" fill="rgb(220,140,13)" rx="2" ry="2" />
<text  x="821.10" y="1807.5" ></text>
</g>
<g >
<title>duckdb::DuckTransactionManager::StartTransaction (162,902,370 samples, 0.32%)</title><rect x="996.2" y="1685" width="3.8" height="15.0" fill="rgb(241,126,35)" rx="2" ry="2" />
<text  x="999.22" y="1695.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::enqueue (11,562,600 samples, 0.02%)</title><rect x="862.0" y="1557" width="0.3" height="15.0" fill="rgb(231,172,53)" rx="2" ry="2" />
<text  x="865.01" y="1567.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::ManyFunctionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt; &gt;, void&gt; (10,602,689 samples, 0.02%)</title><rect x="786.3" y="1845" width="0.3" height="15.0" fill="rgb(250,157,46)" rx="2" ry="2" />
<text  x="789.31" y="1855.5" ></text>
</g>
<g >
<title>__handle_mm_fault (11,261,786 samples, 0.02%)</title><rect x="413.5" y="1557" width="0.3" height="15.0" fill="rgb(243,44,23)" rx="2" ry="2" />
<text  x="416.51" y="1567.5" ></text>
</g>
<g >
<title>duckdb::ChunkManagementState::~ChunkManagementState (8,427,890 samples, 0.02%)</title><rect x="356.1" y="1397" width="0.2" height="15.0" fill="rgb(231,65,13)" rx="2" ry="2" />
<text  x="359.14" y="1407.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::operator[] (6,901,475 samples, 0.01%)</title><rect x="555.2" y="1781" width="0.2" height="15.0" fill="rgb(225,64,21)" rx="2" ry="2" />
<text  x="558.21" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::PipelineEvent&gt;::construct&lt;duckdb::PipelineEvent, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (7,304,074 samples, 0.01%)</title><rect x="1050.1" y="1701" width="0.2" height="15.0" fill="rgb(237,15,19)" rx="2" ry="2" />
<text  x="1053.13" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ecache_alloc (4,789,628 samples, 0.01%)</title><rect x="103.2" y="1237" width="0.1" height="15.0" fill="rgb(223,79,12)" rx="2" ry="2" />
<text  x="106.22" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (5,716,444 samples, 0.01%)</title><rect x="332.4" y="1749" width="0.1" height="15.0" fill="rgb(223,160,33)" rx="2" ry="2" />
<text  x="335.37" y="1759.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::base_yylex (154,587,175 samples, 0.30%)</title><rect x="520.2" y="1861" width="3.5" height="15.0" fill="rgb(230,120,37)" rx="2" ry="2" />
<text  x="523.18" y="1871.5" ></text>
</g>
<g >
<title>native_flush_tlb_one_user (8,977,102 samples, 0.02%)</title><rect x="167.4" y="1845" width="0.3" height="15.0" fill="rgb(244,90,49)" rx="2" ry="2" />
<text  x="170.44" y="1855.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::PhysicalDummyScan&gt; &gt; (5,135,100 samples, 0.01%)</title><rect x="909.2" y="1717" width="0.1" height="15.0" fill="rgb(227,85,6)" rx="2" ry="2" />
<text  x="912.16" y="1727.5" ></text>
</g>
<g >
<title>duckdb::FilterPushdown::FinishPushdown (56,198,907 samples, 0.11%)</title><rect x="747.1" y="1733" width="1.3" height="15.0" fill="rgb(225,51,27)" rx="2" ry="2" />
<text  x="750.12" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt; &gt;::get (4,402,037 samples, 0.01%)</title><rect x="448.9" y="1637" width="0.1" height="15.0" fill="rgb(237,18,10)" rx="2" ry="2" />
<text  x="451.92" y="1647.5" ></text>
</g>
<g >
<title>duckdb::BufferEvictionNode::TryGetBlockHandle (8,068,151 samples, 0.02%)</title><rect x="342.5" y="965" width="0.2" height="15.0" fill="rgb(242,130,41)" rx="2" ry="2" />
<text  x="345.53" y="975.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::PhysicalOperator&gt;::operator (444,164,458 samples, 0.87%)</title><rect x="340.0" y="1461" width="10.2" height="15.0" fill="rgb(207,29,40)" rx="2" ry="2" />
<text  x="342.98" y="1471.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::FileBuffer&gt;, void&gt; (5,209,806 samples, 0.01%)</title><rect x="440.6" y="1653" width="0.1" height="15.0" fill="rgb(248,39,22)" rx="2" ry="2" />
<text  x="443.59" y="1663.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (5,300,909 samples, 0.01%)</title><rect x="806.4" y="1781" width="0.1" height="15.0" fill="rgb(226,211,40)" rx="2" ry="2" />
<text  x="809.38" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (11,667,291 samples, 0.02%)</title><rect x="359.4" y="1829" width="0.2" height="15.0" fill="rgb(221,183,41)" rx="2" ry="2" />
<text  x="362.37" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1509" width="0.1" height="15.0" fill="rgb(211,33,10)" rx="2" ry="2" />
<text  x="14.25" y="1519.5" ></text>
</g>
<g >
<title>duckdb::EnumComparisonRule::~EnumComparisonRule (16,654,598 samples, 0.03%)</title><rect x="831.7" y="1717" width="0.4" height="15.0" fill="rgb(210,93,0)" rx="2" ry="2" />
<text  x="834.72" y="1727.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (96,319,571 samples, 0.19%)</title><rect x="481.5" y="1573" width="2.2" height="15.0" fill="rgb(240,213,32)" rx="2" ry="2" />
<text  x="484.53" y="1583.5" ></text>
</g>
<g >
<title>std::function&lt;void  (61,420,981 samples, 0.12%)</title><rect x="595.0" y="1749" width="1.4" height="15.0" fill="rgb(233,179,0)" rx="2" ry="2" />
<text  x="598.02" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::end (11,060,373 samples, 0.02%)</title><rect x="571.0" y="1765" width="0.3" height="15.0" fill="rgb(235,155,9)" rx="2" ry="2" />
<text  x="574.00" y="1775.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (67,079,247 samples, 0.13%)</title><rect x="247.4" y="1701" width="1.5" height="15.0" fill="rgb(245,72,24)" rx="2" ry="2" />
<text  x="250.39" y="1711.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::PhysicalOperator&gt; (13,427,444 samples, 0.03%)</title><rect x="834.6" y="1733" width="0.3" height="15.0" fill="rgb(238,227,26)" rx="2" ry="2" />
<text  x="837.58" y="1743.5" ></text>
</g>
<g >
<title>duckdb::StatementProperties::StatementProperties (6,425,873 samples, 0.01%)</title><rect x="388.1" y="1893" width="0.1" height="15.0" fill="rgb(221,29,15)" rx="2" ry="2" />
<text  x="391.08" y="1903.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::GlobalSourceState, std::default_delete&lt;duckdb::GlobalSourceState&gt;, true&gt;::unique_ptr&lt;duckdb::InsertSourceState, std::default_delete&lt;std::unique_ptr&lt;duckdb::GlobalSourceState, std::default_delete&lt;duckdb::GlobalSourceState&gt; &gt; &gt;, void&gt; (9,719,966 samples, 0.02%)</title><rect x="399.7" y="1829" width="0.2" height="15.0" fill="rgb(223,72,32)" rx="2" ry="2" />
<text  x="402.72" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (6,734,747 samples, 0.01%)</title><rect x="39.1" y="1989" width="0.2" height="15.0" fill="rgb(254,44,54)" rx="2" ry="2" />
<text  x="42.11" y="1999.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionMatcher&gt;::operator (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1461" width="0.3" height="15.0" fill="rgb(249,225,30)" rx="2" ry="2" />
<text  x="835.82" y="1471.5" ></text>
</g>
<g >
<title>duckdb::RemoveUnusedColumns::~RemoveUnusedColumns (11,448,665 samples, 0.02%)</title><rect x="765.4" y="1781" width="0.3" height="15.0" fill="rgb(247,14,11)" rx="2" ry="2" />
<text  x="768.43" y="1791.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (5,925,802 samples, 0.01%)</title><rect x="949.6" y="1685" width="0.2" height="15.0" fill="rgb(254,217,49)" rx="2" ry="2" />
<text  x="952.63" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ComparisonExpressionMatcher::~ComparisonExpressionMatcher (14,363,645 samples, 0.03%)</title><rect x="831.8" y="1621" width="0.3" height="15.0" fill="rgb(249,95,16)" rx="2" ry="2" />
<text  x="834.77" y="1631.5" ></text>
</g>
<g >
<title>duckdb::Expression::Expression (5,885,788 samples, 0.01%)</title><rect x="587.1" y="1797" width="0.1" height="15.0" fill="rgb(205,201,31)" rx="2" ry="2" />
<text  x="590.08" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Executor::VerifyPipelines (699,779,979 samples, 1.36%)</title><rect x="1063.0" y="1861" width="16.1" height="15.0" fill="rgb(222,120,46)" rx="2" ry="2" />
<text  x="1066.01" y="1871.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::BaseStatistics (8,664,543 samples, 0.02%)</title><rect x="426.2" y="1413" width="0.2" height="15.0" fill="rgb(241,203,39)" rx="2" ry="2" />
<text  x="429.24" y="1423.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::emplace_back&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; (20,099,728 samples, 0.04%)</title><rect x="1065.9" y="1733" width="0.5" height="15.0" fill="rgb(215,19,32)" rx="2" ry="2" />
<text  x="1068.94" y="1743.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::find (27,168,146 samples, 0.05%)</title><rect x="654.4" y="1765" width="0.6" height="15.0" fill="rgb(206,110,29)" rx="2" ry="2" />
<text  x="657.41" y="1775.5" ></text>
</g>
<g >
<title>duckdb::FilterCombiner::GenerateFilters (19,600,169 samples, 0.04%)</title><rect x="745.4" y="1781" width="0.4" height="15.0" fill="rgb(214,116,33)" rx="2" ry="2" />
<text  x="748.36" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::~ColumnDataCollectionSegment (46,085,318 samples, 0.09%)</title><rect x="340.6" y="1205" width="1.1" height="15.0" fill="rgb(253,25,31)" rx="2" ry="2" />
<text  x="343.65" y="1215.5" ></text>
</g>
<g >
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;double, std::ratio&lt;1l, 1l&gt; &gt;, std::ratio&lt;1l, 1000000000l&gt;, double, true, false&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (6,501,039 samples, 0.01%)</title><rect x="702.4" y="1813" width="0.2" height="15.0" fill="rgb(232,33,11)" rx="2" ry="2" />
<text  x="705.43" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_allocate_node&lt;unsigned long const&amp;&gt; (45,289,694 samples, 0.09%)</title><rect x="679.1" y="1733" width="1.0" height="15.0" fill="rgb(220,142,26)" rx="2" ry="2" />
<text  x="682.09" y="1743.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::GetSegment (21,258,903 samples, 0.04%)</title><rect x="301.1" y="1685" width="0.5" height="15.0" fill="rgb(225,45,3)" rx="2" ry="2" />
<text  x="304.11" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (4,352,124 samples, 0.01%)</title><rect x="239.8" y="389" width="0.1" height="15.0" fill="rgb(219,81,29)" rx="2" ry="2" />
<text  x="242.84" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (6,049,936 samples, 0.01%)</title><rect x="800.7" y="1781" width="0.1" height="15.0" fill="rgb(216,198,19)" rx="2" ry="2" />
<text  x="803.67" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::emplace_back&lt;duckdb::VectorCache&amp;&gt; (24,386,986 samples, 0.05%)</title><rect x="494.7" y="1781" width="0.6" height="15.0" fill="rgb(228,147,7)" rx="2" ry="2" />
<text  x="497.69" y="1791.5" ></text>
</g>
<g >
<title>duckdb::StringUtil::Repeat (7,522,898 samples, 0.01%)</title><rect x="555.6" y="1797" width="0.2" height="15.0" fill="rgb(251,166,38)" rx="2" ry="2" />
<text  x="558.64" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (8,369,650 samples, 0.02%)</title><rect x="615.5" y="1669" width="0.2" height="15.0" fill="rgb(208,120,19)" rx="2" ry="2" />
<text  x="618.51" y="1679.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, unsigned long const*, unsigned long*&gt; (5,069,513 samples, 0.01%)</title><rect x="652.1" y="1621" width="0.2" height="15.0" fill="rgb(237,91,37)" rx="2" ry="2" />
<text  x="655.14" y="1631.5" ></text>
</g>
<g >
<title>duckdb::GetDefaultView (20,999,815 samples, 0.04%)</title><rect x="1004.7" y="1685" width="0.5" height="15.0" fill="rgb(222,179,22)" rx="2" ry="2" />
<text  x="1007.68" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;::_M_move_assign (11,656,408 samples, 0.02%)</title><rect x="966.3" y="1717" width="0.3" height="15.0" fill="rgb(228,86,7)" rx="2" ry="2" />
<text  x="969.31" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (14,828,096 samples, 0.03%)</title><rect x="734.6" y="1637" width="0.3" height="15.0" fill="rgb(254,173,42)" rx="2" ry="2" />
<text  x="737.56" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::pop_back (16,819,148 samples, 0.03%)</title><rect x="712.3" y="1845" width="0.4" height="15.0" fill="rgb(228,216,35)" rx="2" ry="2" />
<text  x="715.32" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Catalog::GetSystemCatalog (4,742,252 samples, 0.01%)</title><rect x="988.1" y="1733" width="0.1" height="15.0" fill="rgb(221,93,41)" rx="2" ry="2" />
<text  x="991.10" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ArithmeticSimplificationRule, std::default_delete&lt;duckdb::ArithmeticSimplificationRule&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ArithmeticSimplificationRule&gt;, void&gt; (8,603,023 samples, 0.02%)</title><rect x="790.1" y="1861" width="0.2" height="15.0" fill="rgb(212,217,0)" rx="2" ry="2" />
<text  x="793.11" y="1871.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::OrderByNode, std::allocator&lt;duckdb::OrderByNode&gt; &gt;::_Vector_base (5,490,606 samples, 0.01%)</title><rect x="527.1" y="1717" width="0.1" height="15.0" fill="rgb(237,177,40)" rx="2" ry="2" />
<text  x="530.08" y="1727.5" ></text>
</g>
<g >
<title>duckdb::VectorBuffer::~VectorBuffer (7,625,832 samples, 0.01%)</title><rect x="393.7" y="1621" width="0.2" height="15.0" fill="rgb(212,124,8)" rx="2" ry="2" />
<text  x="396.70" y="1631.5" ></text>
</g>
<g >
<title>psi_task_change (4,819,193 samples, 0.01%)</title><rect x="75.2" y="1861" width="0.1" height="15.0" fill="rgb(242,154,30)" rx="2" ry="2" />
<text  x="78.15" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; &gt;::push_back (12,341,742 samples, 0.02%)</title><rect x="859.2" y="1829" width="0.3" height="15.0" fill="rgb(212,156,54)" rx="2" ry="2" />
<text  x="862.24" y="1839.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::enqueue (9,452,359 samples, 0.02%)</title><rect x="470.2" y="1589" width="0.2" height="15.0" fill="rgb(249,135,24)" rx="2" ry="2" />
<text  x="473.19" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BoundColumnReferenceInfo, std::allocator&lt;duckdb::BoundColumnReferenceInfo&gt; &gt;::_M_realloc_insert&lt;duckdb::BoundColumnReferenceInfo&gt; (11,576,911 samples, 0.02%)</title><rect x="955.8" y="1621" width="0.2" height="15.0" fill="rgb(242,196,43)" rx="2" ry="2" />
<text  x="958.77" y="1631.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (13,548,577 samples, 0.03%)</title><rect x="367.8" y="1509" width="0.3" height="15.0" fill="rgb(228,74,45)" rx="2" ry="2" />
<text  x="370.82" y="1519.5" ></text>
</g>
<g >
<title>duckdb::InClauseSimplificationRule::~InClauseSimplificationRule (7,280,099 samples, 0.01%)</title><rect x="832.4" y="1717" width="0.1" height="15.0" fill="rgb(218,26,14)" rx="2" ry="2" />
<text  x="835.35" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnScanState*, duckdb::ColumnScanState&gt; (19,774,355 samples, 0.04%)</title><rect x="226.8" y="1605" width="0.4" height="15.0" fill="rgb(205,33,35)" rx="2" ry="2" />
<text  x="229.78" y="1615.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::reference_wrapper&lt;duckdb::CommonTableExpressionInfo&gt;, duckdb::ReferenceHashFunction&lt;duckdb::CommonTableExpressionInfo&gt;, duckdb::ReferenceEquality&lt;duckdb::CommonTableExpressionInfo&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::CommonTableExpressionInfo&gt; &gt; &gt;::~unordered_set (5,349,480 samples, 0.01%)</title><rect x="1018.3" y="1701" width="0.1" height="15.0" fill="rgb(208,36,19)" rx="2" ry="2" />
<text  x="1021.31" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="277" width="0.1" height="15.0" fill="rgb(229,57,22)" rx="2" ry="2" />
<text  x="14.25" y="287.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnDataCollection, std::default_delete&lt;duckdb::ColumnDataCollection&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ColumnDataCollection&gt;, void&gt; (5,144,978 samples, 0.01%)</title><rect x="387.2" y="1909" width="0.1" height="15.0" fill="rgb(233,119,12)" rx="2" ry="2" />
<text  x="390.19" y="1919.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::unique_ptr&lt;duckdb::BoundExpression, std::default_delete&lt;std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt; &gt;, void&gt; (13,490,684 samples, 0.03%)</title><rect x="935.3" y="1701" width="0.3" height="15.0" fill="rgb(211,78,14)" rx="2" ry="2" />
<text  x="938.30" y="1711.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateTree (322,719,250 samples, 0.63%)</title><rect x="546.5" y="1829" width="7.4" height="15.0" fill="rgb(241,21,45)" rx="2" ry="2" />
<text  x="549.50" y="1839.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ColumnSegment, duckdb::DatabaseInstance&amp;, std::shared_ptr&lt;duckdb::BlockHandle&gt;, duckdb::LogicalType const&amp;, duckdb::ColumnSegmentType, unsigned long&amp;, int, duckdb::CompressionFunction&amp;, duckdb::BaseStatistics, int, int, unsigned long&amp;&gt; (14,850,699 samples, 0.03%)</title><rect x="103.9" y="1621" width="0.3" height="15.0" fill="rgb(218,34,38)" rx="2" ry="2" />
<text  x="106.88" y="1631.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::Pipeline*, std::pair&lt;duckdb::Pipeline* const, duckdb::vector&lt;duckdb::Pipeline*, true&gt; &gt;, std::allocator&lt;std::pair&lt;duckdb::Pipeline* const, duckdb::vector&lt;duckdb::Pipeline*, true&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::Pipeline*&gt;, std::hash&lt;duckdb::Pipeline*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (8,178,628 samples, 0.02%)</title><rect x="1048.1" y="1781" width="0.2" height="15.0" fill="rgb(221,167,2)" rx="2" ry="2" />
<text  x="1051.11" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::PreparedStatementData&gt;::construct&lt;duckdb::PreparedStatementData, duckdb::StatementType&amp;&gt; (15,515,950 samples, 0.03%)</title><rect x="1040.8" y="1781" width="0.4" height="15.0" fill="rgb(248,39,30)" rx="2" ry="2" />
<text  x="1043.83" y="1791.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;, true&gt;::~vector (132,899,551 samples, 0.26%)</title><rect x="238.2" y="949" width="3.1" height="15.0" fill="rgb(208,207,40)" rx="2" ry="2" />
<text  x="241.24" y="959.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::CreateEmpty (65,932,900 samples, 0.13%)</title><rect x="423.9" y="1557" width="1.6" height="15.0" fill="rgb(208,171,13)" rx="2" ry="2" />
<text  x="426.93" y="1567.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::Resize (25,060,435 samples, 0.05%)</title><rect x="103.0" y="1557" width="0.6" height="15.0" fill="rgb(207,113,8)" rx="2" ry="2" />
<text  x="106.02" y="1567.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (7,857,655 samples, 0.02%)</title><rect x="921.8" y="1781" width="0.2" height="15.0" fill="rgb(212,201,40)" rx="2" ry="2" />
<text  x="924.81" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::ChunkMetaData&gt; &gt;::construct&lt;duckdb::ChunkMetaData, duckdb::ChunkMetaData&gt; (11,355,270 samples, 0.02%)</title><rect x="383.9" y="1845" width="0.2" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="386.88" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::GetFromAllocator (7,114,432 samples, 0.01%)</title><rect x="1147.3" y="2037" width="0.1" height="15.0" fill="rgb(220,118,35)" rx="2" ry="2" />
<text  x="1150.26" y="2047.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;duckdb::BoundColumnRefExpression&gt; &gt;::get (4,457,681 samples, 0.01%)</title><rect x="587.8" y="1781" width="0.1" height="15.0" fill="rgb(218,93,50)" rx="2" ry="2" />
<text  x="590.78" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; (7,672,817 samples, 0.01%)</title><rect x="759.5" y="1749" width="0.2" height="15.0" fill="rgb(217,162,6)" rx="2" ry="2" />
<text  x="762.52" y="1759.5" ></text>
</g>
<g >
<title>std::set&lt;duckdb::OptimizerType, std::less&lt;duckdb::OptimizerType&gt;, std::allocator&lt;duckdb::OptimizerType&gt; &gt;::end (9,040,431 samples, 0.02%)</title><rect x="773.0" y="1861" width="0.2" height="15.0" fill="rgb(241,113,49)" rx="2" ry="2" />
<text  x="775.98" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::push_back (15,200,004 samples, 0.03%)</title><rect x="850.2" y="1845" width="0.3" height="15.0" fill="rgb(230,120,5)" rx="2" ry="2" />
<text  x="853.20" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::AttachedDatabase, std::default_delete&lt;duckdb::AttachedDatabase&gt;, true&gt;::~unique_ptr (15,089,061 samples, 0.03%)</title><rect x="1117.5" y="1797" width="0.3" height="15.0" fill="rgb(234,179,2)" rx="2" ry="2" />
<text  x="1120.47" y="1807.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;*&gt; (99,861,463 samples, 0.19%)</title><rect x="241.6" y="869" width="2.3" height="15.0" fill="rgb(220,59,26)" rx="2" ry="2" />
<text  x="244.62" y="879.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::BoundExpression, duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (13,977,270 samples, 0.03%)</title><rect x="934.7" y="1701" width="0.3" height="15.0" fill="rgb(218,133,35)" rx="2" ry="2" />
<text  x="937.71" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1717" width="0.1" height="15.0" fill="rgb(207,133,48)" rx="2" ry="2" />
<text  x="14.25" y="1727.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;,  (449,652,113 samples, 0.88%)</title><rect x="256.3" y="1557" width="10.3" height="15.0" fill="rgb(220,220,32)" rx="2" ry="2" />
<text  x="259.28" y="1567.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (22,950,934 samples, 0.04%)</title><rect x="1100.7" y="1829" width="0.5" height="15.0" fill="rgb(229,52,14)" rx="2" ry="2" />
<text  x="1103.69" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (265,023,015 samples, 0.52%)</title><rect x="872.9" y="1477" width="6.1" height="15.0" fill="rgb(210,190,32)" rx="2" ry="2" />
<text  x="875.89" y="1487.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;::unique_ptr (6,590,586 samples, 0.01%)</title><rect x="917.7" y="1701" width="0.2" height="15.0" fill="rgb(244,215,28)" rx="2" ry="2" />
<text  x="920.75" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&gt; (9,204,059 samples, 0.02%)</title><rect x="489.5" y="1717" width="0.2" height="15.0" fill="rgb(247,195,22)" rx="2" ry="2" />
<text  x="492.53" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7,561,446 samples, 0.01%)</title><rect x="234.9" y="1749" width="0.2" height="15.0" fill="rgb(215,165,20)" rx="2" ry="2" />
<text  x="237.90" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PipelineExecutor, std::default_delete&lt;duckdb::PipelineExecutor&gt;, true&gt;::operator= (4,879,072 samples, 0.01%)</title><rect x="405.0" y="1877" width="0.1" height="15.0" fill="rgb(222,57,48)" rx="2" ry="2" />
<text  x="407.95" y="1887.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::release (13,701,699 samples, 0.03%)</title><rect x="827.5" y="1765" width="0.3" height="15.0" fill="rgb(252,109,54)" rx="2" ry="2" />
<text  x="830.50" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ProducerToken, std::default_delete&lt;duckdb::ProducerToken&gt;, true&gt;::operator= (11,006,079 samples, 0.02%)</title><rect x="1091.8" y="1861" width="0.2" height="15.0" fill="rgb(235,224,1)" rx="2" ry="2" />
<text  x="1094.77" y="1871.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (20,112,531 samples, 0.04%)</title><rect x="729.4" y="1669" width="0.4" height="15.0" fill="rgb(244,89,18)" rx="2" ry="2" />
<text  x="732.38" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::operator= (5,275,187 samples, 0.01%)</title><rect x="846.0" y="1813" width="0.1" height="15.0" fill="rgb(206,13,24)" rx="2" ry="2" />
<text  x="849.01" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;::unique_ptr (9,212,316 samples, 0.02%)</title><rect x="441.5" y="1525" width="0.3" height="15.0" fill="rgb(206,104,31)" rx="2" ry="2" />
<text  x="444.55" y="1535.5" ></text>
</g>
<g >
<title>blk_mq_run_hw_queue (41,232,781 samples, 0.08%)</title><rect x="249.7" y="1509" width="0.9" height="15.0" fill="rgb(207,153,52)" rx="2" ry="2" />
<text  x="252.67" y="1519.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1621" width="0.1" height="15.0" fill="rgb(251,124,21)" rx="2" ry="2" />
<text  x="14.25" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1077" width="0.3" height="15.0" fill="rgb(244,151,24)" rx="2" ry="2" />
<text  x="1120.47" y="1087.5" ></text>
</g>
<g >
<title>__filemap_fdatawrite_range (109,707,211 samples, 0.21%)</title><rect x="249.6" y="1621" width="2.5" height="15.0" fill="rgb(212,44,9)" rx="2" ry="2" />
<text  x="252.57" y="1631.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutorInfo::~ExpressionExecutorInfo (22,056,679 samples, 0.04%)</title><rect x="500.0" y="1477" width="0.5" height="15.0" fill="rgb(221,155,2)" rx="2" ry="2" />
<text  x="502.96" y="1487.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (4,385,860 samples, 0.01%)</title><rect x="619.2" y="1797" width="0.1" height="15.0" fill="rgb(211,157,39)" rx="2" ry="2" />
<text  x="622.25" y="1807.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;bool, true&gt;::~vector (7,458,025 samples, 0.01%)</title><rect x="1057.0" y="1813" width="0.2" height="15.0" fill="rgb(246,201,27)" rx="2" ry="2" />
<text  x="1059.99" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (27,266,605 samples, 0.05%)</title><rect x="682.3" y="1765" width="0.6" height="15.0" fill="rgb(249,187,34)" rx="2" ry="2" />
<text  x="685.29" y="1775.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Free (96,466,698 samples, 0.19%)</title><rect x="391.0" y="1573" width="2.2" height="15.0" fill="rgb(207,219,48)" rx="2" ry="2" />
<text  x="394.01" y="1583.5" ></text>
</g>
<g >
<title>duckdb::LogicalExpressionGet::GetTableIndex (90,994,775 samples, 0.18%)</title><rect x="660.1" y="1781" width="2.1" height="15.0" fill="rgb(218,111,36)" rx="2" ry="2" />
<text  x="663.15" y="1791.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (40,472,268 samples, 0.08%)</title><rect x="725.2" y="1685" width="0.9" height="15.0" fill="rgb(210,200,20)" rx="2" ry="2" />
<text  x="728.18" y="1695.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (56,870,444 samples, 0.11%)</title><rect x="289.2" y="1573" width="1.3" height="15.0" fill="rgb(206,108,18)" rx="2" ry="2" />
<text  x="292.21" y="1583.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (64,918,204 samples, 0.13%)</title><rect x="68.3" y="1989" width="1.5" height="15.0" fill="rgb(237,208,12)" rx="2" ry="2" />
<text  x="71.32" y="1999.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (7,694,681 samples, 0.02%)</title><rect x="1101.5" y="1829" width="0.1" height="15.0" fill="rgb(227,81,32)" rx="2" ry="2" />
<text  x="1104.45" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::CatalogSearchEntry, std::allocator&lt;duckdb::CatalogSearchEntry&gt; &gt;::~vector (7,802,924 samples, 0.02%)</title><rect x="1009.7" y="1765" width="0.2" height="15.0" fill="rgb(224,134,39)" rx="2" ry="2" />
<text  x="1012.74" y="1775.5" ></text>
</g>
<g >
<title>duckdb::FilterPullup::PullupProjection (19,180,331 samples, 0.04%)</title><rect x="744.0" y="1765" width="0.5" height="15.0" fill="rgb(207,178,32)" rx="2" ry="2" />
<text  x="747.02" y="1775.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::LocalStorage, duckdb::ClientContext&amp;, duckdb::DuckTransaction&amp;&gt; (10,464,824 samples, 0.02%)</title><rect x="998.8" y="1637" width="0.2" height="15.0" fill="rgb(208,175,7)" rx="2" ry="2" />
<text  x="1001.79" y="1647.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocator::ArenaAllocator (40,960,002 samples, 0.08%)</title><rect x="989.4" y="1573" width="0.9" height="15.0" fill="rgb(243,12,54)" rx="2" ry="2" />
<text  x="992.36" y="1583.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1541" width="0.1" height="15.0" fill="rgb(216,140,53)" rx="2" ry="2" />
<text  x="14.25" y="1551.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::InitializeScan (115,526,985 samples, 0.23%)</title><rect x="212.5" y="1621" width="2.7" height="15.0" fill="rgb(208,114,7)" rx="2" ry="2" />
<text  x="215.51" y="1631.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::Combine (12,399,493 samples, 0.02%)</title><rect x="106.6" y="1781" width="0.2" height="15.0" fill="rgb(217,212,19)" rx="2" ry="2" />
<text  x="109.55" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, false&gt; &gt; &gt;::_M_deallocate_node (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1301" width="0.3" height="15.0" fill="rgb(221,2,52)" rx="2" ry="2" />
<text  x="1120.47" y="1311.5" ></text>
</g>
<g >
<title>duckdb::StringHeap::StringHeap (58,654,843 samples, 0.11%)</title><rect x="376.8" y="1861" width="1.3" height="15.0" fill="rgb(222,59,14)" rx="2" ry="2" />
<text  x="379.76" y="1871.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*&gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;*&gt; (5,092,574 samples, 0.01%)</title><rect x="1084.6" y="1749" width="0.2" height="15.0" fill="rgb(227,130,52)" rx="2" ry="2" />
<text  x="1087.64" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt; &gt; &gt;::~vector (11,329,134 samples, 0.02%)</title><rect x="1092.2" y="1845" width="0.2" height="15.0" fill="rgb(224,228,27)" rx="2" ry="2" />
<text  x="1095.16" y="1855.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::BufferAllocatorAllocate (59,371,978 samples, 0.12%)</title><rect x="192.7" y="1669" width="1.4" height="15.0" fill="rgb(241,112,38)" rx="2" ry="2" />
<text  x="195.73" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::Event&gt;*, std::shared_ptr&lt;duckdb::Event&gt; &gt; (98,459,337 samples, 0.19%)</title><rect x="355.1" y="1829" width="2.3" height="15.0" fill="rgb(219,130,39)" rx="2" ry="2" />
<text  x="358.12" y="1839.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::DictionaryBuffer, duckdb::SelectionVector const&amp;&gt; (23,669,437 samples, 0.05%)</title><rect x="293.8" y="1653" width="0.6" height="15.0" fill="rgb(234,43,27)" rx="2" ry="2" />
<text  x="296.81" y="1663.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Pipeline&gt;::~shared_ptr (25,978,764 samples, 0.05%)</title><rect x="356.0" y="1621" width="0.6" height="15.0" fill="rgb(247,135,18)" rx="2" ry="2" />
<text  x="359.04" y="1631.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (4,770,158 samples, 0.01%)</title><rect x="398.3" y="1877" width="0.1" height="15.0" fill="rgb(224,101,7)" rx="2" ry="2" />
<text  x="401.28" y="1887.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::QualifyColumnName (94,191,606 samples, 0.18%)</title><rect x="953.2" y="1653" width="2.1" height="15.0" fill="rgb(216,57,2)" rx="2" ry="2" />
<text  x="956.16" y="1663.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (10,321,148 samples, 0.02%)</title><rect x="37.6" y="1989" width="0.2" height="15.0" fill="rgb(205,33,28)" rx="2" ry="2" />
<text  x="40.61" y="1999.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::EnumComparisonRule, std::default_delete&lt;duckdb::EnumComparisonRule&gt; &gt;::__uniq_ptr_impl (6,852,574 samples, 0.01%)</title><rect x="806.8" y="1829" width="0.2" height="15.0" fill="rgb(207,23,23)" rx="2" ry="2" />
<text  x="809.81" y="1839.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionExecutorState&gt;::operator (20,290,534 samples, 0.04%)</title><rect x="906.7" y="1621" width="0.4" height="15.0" fill="rgb(253,170,42)" rx="2" ry="2" />
<text  x="909.67" y="1631.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (7,068,470 samples, 0.01%)</title><rect x="780.0" y="1781" width="0.2" height="15.0" fill="rgb(227,209,41)" rx="2" ry="2" />
<text  x="783.01" y="1791.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ColumnRefExpression, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (13,950,774 samples, 0.03%)</title><rect x="958.7" y="1653" width="0.3" height="15.0" fill="rgb(239,47,52)" rx="2" ry="2" />
<text  x="961.72" y="1663.5" ></text>
</g>
<g >
<title>std::function&lt;void  (10,581,939 samples, 0.02%)</title><rect x="765.1" y="1733" width="0.3" height="15.0" fill="rgb(216,71,48)" rx="2" ry="2" />
<text  x="768.14" y="1743.5" ></text>
</g>
<g >
<title>duckdb::FunctionEntry::FunctionEntry (7,178,396 samples, 0.01%)</title><rect x="1114.6" y="1829" width="0.2" height="15.0" fill="rgb(246,25,46)" rx="2" ry="2" />
<text  x="1117.61" y="1839.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::Iterate&lt;duckdb::LogicalOperator&gt; (20,457,934 samples, 0.04%)</title><rect x="546.7" y="1781" width="0.5" height="15.0" fill="rgb(231,53,16)" rx="2" ry="2" />
<text  x="549.71" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ExpressionRewriter::VisitOperator (85,964,125 samples, 0.17%)</title><rect x="736.4" y="1717" width="2.0" height="15.0" fill="rgb(209,43,45)" rx="2" ry="2" />
<text  x="739.42" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ConjunctionSimplificationRule::ConjunctionSimplificationRule (63,551,938 samples, 0.12%)</title><rect x="792.6" y="1861" width="1.5" height="15.0" fill="rgb(233,134,5)" rx="2" ry="2" />
<text  x="795.59" y="1871.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::RowGroup (25,521,515 samples, 0.05%)</title><rect x="457.5" y="1717" width="0.6" height="15.0" fill="rgb(218,209,7)" rx="2" ry="2" />
<text  x="460.47" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="677" width="0.1" height="15.0" fill="rgb(224,153,30)" rx="2" ry="2" />
<text  x="14.25" y="687.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_alloc_event (39,520,677 samples, 0.08%)</title><rect x="891.1" y="1445" width="0.9" height="15.0" fill="rgb(222,47,3)" rx="2" ry="2" />
<text  x="894.07" y="1455.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::QueryProfiler,  (6,543,060 samples, 0.01%)</title><rect x="354.2" y="1861" width="0.2" height="15.0" fill="rgb(246,5,31)" rx="2" ry="2" />
<text  x="357.23" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::SwizzleMetaData, std::allocator&lt;duckdb::SwizzleMetaData&gt; &gt;::vector (5,301,881 samples, 0.01%)</title><rect x="383.4" y="1765" width="0.1" height="15.0" fill="rgb(221,120,5)" rx="2" ry="2" />
<text  x="386.39" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (4,879,115 samples, 0.01%)</title><rect x="930.0" y="1605" width="0.1" height="15.0" fill="rgb(225,128,33)" rx="2" ry="2" />
<text  x="933.01" y="1615.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;duckdb::Binding&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;duckdb::Binding&gt; &gt; &gt; &gt;::~unordered_map (4,398,424 samples, 0.01%)</title><rect x="1030.9" y="1733" width="0.1" height="15.0" fill="rgb(247,206,21)" rx="2" ry="2" />
<text  x="1033.94" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ConstantFoldingExpressionMatcher, std::default_delete&lt;duckdb::ConstantFoldingExpressionMatcher&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConstantFoldingExpressionMatcher&gt;, void&gt; (10,796,143 samples, 0.02%)</title><rect x="794.8" y="1813" width="0.3" height="15.0" fill="rgb(250,75,19)" rx="2" ry="2" />
<text  x="797.84" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LocalSourceState, std::default_delete&lt;duckdb::LocalSourceState&gt; &gt;::operator= (7,892,602 samples, 0.02%)</title><rect x="496.6" y="1813" width="0.2" height="15.0" fill="rgb(206,168,30)" rx="2" ry="2" />
<text  x="499.57" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_bucket_begin (4,358,672 samples, 0.01%)</title><rect x="655.9" y="1701" width="0.1" height="15.0" fill="rgb(242,214,18)" rx="2" ry="2" />
<text  x="658.87" y="1711.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::~vector (6,335,378 samples, 0.01%)</title><rect x="1107.1" y="1877" width="0.2" height="15.0" fill="rgb(214,43,7)" rx="2" ry="2" />
<text  x="1110.11" y="1887.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned char [], std::default_delete&lt;unsigned char []&gt; &gt;::unique_ptr (5,912,073 samples, 0.01%)</title><rect x="585.2" y="1813" width="0.1" height="15.0" fill="rgb(251,43,39)" rx="2" ry="2" />
<text  x="588.21" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt;::operator* (5,127,435 samples, 0.01%)</title><rect x="927.2" y="1701" width="0.1" height="15.0" fill="rgb(226,97,48)" rx="2" ry="2" />
<text  x="930.16" y="1711.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::ScalarFunction const*, std::vector&lt;duckdb::ScalarFunction, std::allocator&lt;duckdb::ScalarFunction&gt; &gt; &gt;, duckdb::ScalarFunction*&gt; (4,797,583 samples, 0.01%)</title><rect x="1116.8" y="1829" width="0.1" height="15.0" fill="rgb(213,12,26)" rx="2" ry="2" />
<text  x="1119.78" y="1839.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (12,551,523 samples, 0.02%)</title><rect x="1117.9" y="1045" width="0.3" height="15.0" fill="rgb(233,135,1)" rx="2" ry="2" />
<text  x="1120.90" y="1055.5" ></text>
</g>
<g >
<title>duckdb::BoundExpressionListRef::~BoundExpressionListRef (7,511,274 samples, 0.01%)</title><rect x="980.3" y="1669" width="0.2" height="15.0" fill="rgb(230,46,45)" rx="2" ry="2" />
<text  x="983.34" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::resize (33,865,485 samples, 0.07%)</title><rect x="1075.9" y="1749" width="0.8" height="15.0" fill="rgb(235,144,7)" rx="2" ry="2" />
<text  x="1078.92" y="1759.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (30,215,935 samples, 0.06%)</title><rect x="357.5" y="1717" width="0.7" height="15.0" fill="rgb(239,206,20)" rx="2" ry="2" />
<text  x="360.52" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (89,790,866 samples, 0.18%)</title><rect x="728.0" y="1781" width="2.1" height="15.0" fill="rgb(252,109,21)" rx="2" ry="2" />
<text  x="731.03" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::~unique_ptr (19,996,073 samples, 0.04%)</title><rect x="620.0" y="1749" width="0.4" height="15.0" fill="rgb(233,120,52)" rx="2" ry="2" />
<text  x="622.97" y="1759.5" ></text>
</g>
<g >
<title>duckdb::SelectionVector::SelectionVector (459,356,352 samples, 0.90%)</title><rect x="256.2" y="1669" width="10.6" height="15.0" fill="rgb(234,13,18)" rx="2" ry="2" />
<text  x="259.23" y="1679.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::Iterate&lt;duckdb::LogicalOperator&gt; (8,341,065 samples, 0.02%)</title><rect x="620.9" y="1749" width="0.2" height="15.0" fill="rgb(231,47,9)" rx="2" ry="2" />
<text  x="623.93" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::unique_ptr (4,412,202 samples, 0.01%)</title><rect x="549.0" y="1525" width="0.1" height="15.0" fill="rgb(248,136,34)" rx="2" ry="2" />
<text  x="552.01" y="1535.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Pin (8,583,928 samples, 0.02%)</title><rect x="445.0" y="1621" width="0.2" height="15.0" fill="rgb(236,178,5)" rx="2" ry="2" />
<text  x="448.02" y="1631.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_try_lookup_fast (6,689,440 samples, 0.01%)</title><rect x="334.9" y="1333" width="0.1" height="15.0" fill="rgb(216,121,4)" rx="2" ry="2" />
<text  x="337.87" y="1343.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt;, true&gt;::operator= (8,273,413 samples, 0.02%)</title><rect x="786.1" y="1845" width="0.2" height="15.0" fill="rgb(243,104,44)" rx="2" ry="2" />
<text  x="789.12" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Vector::Slice (107,780,067 samples, 0.21%)</title><rect x="293.5" y="1701" width="2.4" height="15.0" fill="rgb(243,78,13)" rx="2" ry="2" />
<text  x="296.47" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::operator= (8,723,944 samples, 0.02%)</title><rect x="965.6" y="1733" width="0.2" height="15.0" fill="rgb(251,217,19)" rx="2" ry="2" />
<text  x="968.64" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::LogicalType&gt;::deallocate (9,228,683 samples, 0.02%)</title><rect x="34.6" y="2021" width="0.2" height="15.0" fill="rgb(237,52,28)" rx="2" ry="2" />
<text  x="37.59" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::~vector (4,469,442 samples, 0.01%)</title><rect x="321.4" y="1733" width="0.1" height="15.0" fill="rgb(207,174,20)" rx="2" ry="2" />
<text  x="324.44" y="1743.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::_M_ptr (4,627,553 samples, 0.01%)</title><rect x="795.3" y="1797" width="0.1" height="15.0" fill="rgb(213,205,1)" rx="2" ry="2" />
<text  x="798.29" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*&gt; &gt;::~vector (5,743,434 samples, 0.01%)</title><rect x="730.7" y="1781" width="0.1" height="15.0" fill="rgb(239,47,31)" rx="2" ry="2" />
<text  x="733.67" y="1791.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::vector (4,347,381 samples, 0.01%)</title><rect x="1075.3" y="1749" width="0.1" height="15.0" fill="rgb(216,94,37)" rx="2" ry="2" />
<text  x="1078.34" y="1759.5" ></text>
</g>
<g >
<title>duckdb::FilterPushdown::~FilterPushdown (10,048,155 samples, 0.02%)</title><rect x="748.5" y="1749" width="0.2" height="15.0" fill="rgb(214,124,15)" rx="2" ry="2" />
<text  x="751.46" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnScanState, true&gt;::~vector (31,125,967 samples, 0.06%)</title><rect x="287.8" y="1605" width="0.7" height="15.0" fill="rgb(213,39,28)" rx="2" ry="2" />
<text  x="290.81" y="1615.5" ></text>
</g>
<g >
<title>duckdb::PhysicalExpressionScan::EvaluateExpression (401,731,701 samples, 0.78%)</title><rect x="898.2" y="1781" width="9.2" height="15.0" fill="rgb(233,211,41)" rx="2" ry="2" />
<text  x="901.16" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LocalSourceState, std::default_delete&lt;duckdb::LocalSourceState&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::LocalSourceState&gt;, void&gt; (6,674,149 samples, 0.01%)</title><rect x="491.9" y="1781" width="0.1" height="15.0" fill="rgb(242,205,44)" rx="2" ry="2" />
<text  x="494.88" y="1791.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, duckdb::CatalogEntryHashFunction, duckdb::CatalogEntryEquality, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt; &gt;, duckdb::CatalogEntryHashFunction, duckdb::CatalogEntryEquality, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; const, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, duckdb::CatalogEntryHashFunction, duckdb::CatalogEntryEquality, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt; &gt; &gt; &gt; &gt;::operator[] (5,581,724 samples, 0.01%)</title><rect x="1113.9" y="1797" width="0.2" height="15.0" fill="rgb(221,189,8)" rx="2" ry="2" />
<text  x="1116.95" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt;, true&gt;::unique_ptr&lt;duckdb::ArenaAllocatorData, std::default_delete&lt;std::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt; &gt; &gt;, void&gt; (10,943,819 samples, 0.02%)</title><rect x="377.8" y="1829" width="0.3" height="15.0" fill="rgb(216,161,0)" rx="2" ry="2" />
<text  x="380.81" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_read (5,946,911 samples, 0.01%)</title><rect x="346.8" y="629" width="0.1" height="15.0" fill="rgb(225,172,15)" rx="2" ry="2" />
<text  x="349.79" y="639.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::AddExpression (44,878,721 samples, 0.09%)</title><rect x="489.9" y="1765" width="1.0" height="15.0" fill="rgb(232,188,19)" rx="2" ry="2" />
<text  x="492.86" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::IsActiveResult (5,470,649 samples, 0.01%)</title><rect x="513.4" y="1925" width="0.1" height="15.0" fill="rgb(242,168,18)" rx="2" ry="2" />
<text  x="516.37" y="1935.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceHashFunction&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceEquality&lt;duckdb::UsingColumnSet&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceHashFunction&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceEquality&lt;duckdb::UsingColumnSet&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4,489,824 samples, 0.01%)</title><rect x="1017.6" y="1669" width="0.1" height="15.0" fill="rgb(219,180,13)" rx="2" ry="2" />
<text  x="1020.64" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_write (4,359,101 samples, 0.01%)</title><rect x="875.5" y="1301" width="0.1" height="15.0" fill="rgb(220,211,42)" rx="2" ry="2" />
<text  x="878.49" y="1311.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (22,943,230 samples, 0.04%)</title><rect x="103.0" y="1429" width="0.6" height="15.0" fill="rgb(226,44,28)" rx="2" ry="2" />
<text  x="106.04" y="1439.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::MetaPipeline&gt; &gt;::construct&lt;duckdb::MetaPipeline, duckdb::Executor&amp;, duckdb::PipelineBuildState&amp;, duckdb::PhysicalOperator*&gt; (29,738,729 samples, 0.06%)</title><rect x="1081.0" y="1717" width="0.7" height="15.0" fill="rgb(247,28,4)" rx="2" ry="2" />
<text  x="1083.97" y="1727.5" ></text>
</g>
<g >
<title>duckdb::MaterializedQueryResult::ToString[abi:cxx11] (65,121,681 samples, 0.13%)</title><rect x="1119.7" y="2005" width="1.5" height="15.0" fill="rgb(214,92,31)" rx="2" ry="2" />
<text  x="1122.75" y="2015.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (19,889,675 samples, 0.04%)</title><rect x="734.5" y="1669" width="0.5" height="15.0" fill="rgb(218,127,46)" rx="2" ry="2" />
<text  x="737.53" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&gt; (8,108,066 samples, 0.02%)</title><rect x="291.7" y="1653" width="0.2" height="15.0" fill="rgb(214,8,33)" rx="2" ry="2" />
<text  x="294.68" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::push_back (12,517,695 samples, 0.02%)</title><rect x="291.6" y="1685" width="0.3" height="15.0" fill="rgb(216,73,18)" rx="2" ry="2" />
<text  x="294.59" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DatabaseManager, std::default_delete&lt;duckdb::DatabaseManager&gt; &gt;::get (5,153,893 samples, 0.01%)</title><rect x="1042.5" y="1829" width="0.1" height="15.0" fill="rgb(254,97,38)" rx="2" ry="2" />
<text  x="1045.50" y="1839.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::unordered_set (32,137,513 samples, 0.06%)</title><rect x="801.5" y="1845" width="0.7" height="15.0" fill="rgb(220,116,18)" rx="2" ry="2" />
<text  x="804.45" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceHashFunction&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceEquality&lt;duckdb::UsingColumnSet&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceHashFunction&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceEquality&lt;duckdb::UsingColumnSet&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7,146,868 samples, 0.01%)</title><rect x="943.6" y="1669" width="0.1" height="15.0" fill="rgb(247,104,44)" rx="2" ry="2" />
<text  x="946.56" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataScanState::ColumnDataScanState (5,206,026 samples, 0.01%)</title><rect x="91.9" y="1669" width="0.1" height="15.0" fill="rgb(251,139,34)" rx="2" ry="2" />
<text  x="94.92" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::_M_insert_dispatch&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt; &gt; (45,832,398 samples, 0.09%)</title><rect x="1083.9" y="1829" width="1.0" height="15.0" fill="rgb(207,4,6)" rx="2" ry="2" />
<text  x="1086.88" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnDataCopyFunction, std::allocator&lt;duckdb::ColumnDataCopyFunction&gt; &gt;::push_back (8,324,031 samples, 0.02%)</title><rect x="910.6" y="1717" width="0.2" height="15.0" fill="rgb(243,151,5)" rx="2" ry="2" />
<text  x="913.62" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::_M_range_insert&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt; &gt; (14,122,891 samples, 0.03%)</title><rect x="1083.3" y="1797" width="0.3" height="15.0" fill="rgb(232,150,32)" rx="2" ry="2" />
<text  x="1086.31" y="1807.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, duckdb::OperatorInformation, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt; &gt;::operator[] (12,745,898 samples, 0.02%)</title><rect x="420.6" y="1781" width="0.3" height="15.0" fill="rgb(231,199,42)" rx="2" ry="2" />
<text  x="423.59" y="1791.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetEntry (71,599,373 samples, 0.14%)</title><rect x="993.0" y="1717" width="1.6" height="15.0" fill="rgb(247,17,18)" rx="2" ry="2" />
<text  x="995.97" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt;, true&gt;::operator= (16,140,223 samples, 0.03%)</title><rect x="805.2" y="1845" width="0.3" height="15.0" fill="rgb(233,225,18)" rx="2" ry="2" />
<text  x="808.17" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::StorageLockKey, std::default_delete&lt;duckdb::StorageLockKey&gt; &gt;::unique_ptr (5,382,264 samples, 0.01%)</title><rect x="198.1" y="1589" width="0.1" height="15.0" fill="rgb(227,137,22)" rx="2" ry="2" />
<text  x="201.05" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;duckdb::AttachedDatabase*&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (7,690,263 samples, 0.01%)</title><rect x="1000.6" y="1653" width="0.2" height="15.0" fill="rgb(250,119,14)" rx="2" ry="2" />
<text  x="1003.61" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (16,465,778 samples, 0.03%)</title><rect x="388.9" y="1877" width="0.3" height="15.0" fill="rgb(213,222,52)" rx="2" ry="2" />
<text  x="391.85" y="1887.5" ></text>
</g>
<g >
<title>duckdb::Vector::Reference (148,350,726 samples, 0.29%)</title><rect x="898.9" y="1685" width="3.4" height="15.0" fill="rgb(223,68,11)" rx="2" ry="2" />
<text  x="901.92" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ColumnLifetimeAnalyzer::VisitReplace (30,159,408 samples, 0.06%)</title><rect x="725.2" y="1653" width="0.7" height="15.0" fill="rgb(248,65,3)" rx="2" ry="2" />
<text  x="728.23" y="1663.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (8,745,113 samples, 0.02%)</title><rect x="481.2" y="1541" width="0.2" height="15.0" fill="rgb(250,130,20)" rx="2" ry="2" />
<text  x="484.15" y="1551.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_dalloc_event (8,052,670 samples, 0.02%)</title><rect x="498.7" y="1429" width="0.2" height="15.0" fill="rgb(244,162,19)" rx="2" ry="2" />
<text  x="501.68" y="1439.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Binder&gt;::shared_ptr&lt;std::allocator&lt;duckdb::Binder&gt;, bool, duckdb::ClientContext&amp;, std::shared_ptr&lt;duckdb::Binder&gt;, bool&amp;&gt; (79,654,836 samples, 0.16%)</title><rect x="1027.7" y="1829" width="1.9" height="15.0" fill="rgb(207,54,37)" rx="2" ry="2" />
<text  x="1030.73" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (13,575,260 samples, 0.03%)</title><rect x="800.6" y="1813" width="0.3" height="15.0" fill="rgb(224,183,31)" rx="2" ry="2" />
<text  x="803.62" y="1823.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::QueryProfiler (15,077,770 samples, 0.03%)</title><rect x="353.6" y="1749" width="0.3" height="15.0" fill="rgb(238,33,38)" rx="2" ry="2" />
<text  x="356.55" y="1759.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt;::allocate (15,484,424 samples, 0.03%)</title><rect x="693.4" y="1717" width="0.3" height="15.0" fill="rgb(231,165,13)" rx="2" ry="2" />
<text  x="696.39" y="1727.5" ></text>
</g>
<g >
<title>duckdb::BindContext::BindContext (16,728,785 samples, 0.03%)</title><rect x="1028.2" y="1717" width="0.4" height="15.0" fill="rgb(228,181,9)" rx="2" ry="2" />
<text  x="1031.24" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::FetchResultInternal (9,060,347,141 samples, 17.66%)</title><rect x="187.5" y="1941" width="208.5" height="15.0" fill="rgb(251,4,7)" rx="2" ry="2" />
<text  x="190.52" y="1951.5" >duckdb::ClientContext::Fetc..</text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;,  (6,898,111 samples, 0.01%)</title><rect x="292.3" y="1429" width="0.1" height="15.0" fill="rgb(219,159,16)" rx="2" ry="2" />
<text  x="295.27" y="1439.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_get_Tp_allocator (7,910,609 samples, 0.02%)</title><rect x="563.9" y="1765" width="0.2" height="15.0" fill="rgb(237,75,6)" rx="2" ry="2" />
<text  x="566.93" y="1775.5" ></text>
</g>
<g >
<title>__interceptor_strlen (7,344,870 samples, 0.01%)</title><rect x="47.2" y="2021" width="0.2" height="15.0" fill="rgb(242,192,53)" rx="2" ry="2" />
<text  x="50.23" y="2031.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt;::allocate (4,405,740 samples, 0.01%)</title><rect x="657.9" y="1669" width="0.1" height="15.0" fill="rgb(238,149,38)" rx="2" ry="2" />
<text  x="660.87" y="1679.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::MetaPipeline&gt;::shared_ptr&lt;std::allocator&lt;duckdb::MetaPipeline&gt;, duckdb::Executor&amp;, duckdb::PipelineBuildState&amp;, duckdb::PhysicalOperator*&gt; (40,120,879 samples, 0.08%)</title><rect x="1080.8" y="1781" width="0.9" height="15.0" fill="rgb(253,147,49)" rx="2" ry="2" />
<text  x="1083.80" y="1791.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionMatcher&gt; (6,249,760 samples, 0.01%)</title><rect x="803.5" y="1845" width="0.2" height="15.0" fill="rgb(249,166,54)" rx="2" ry="2" />
<text  x="806.51" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (4,504,625 samples, 0.01%)</title><rect x="874.8" y="1429" width="0.1" height="15.0" fill="rgb(219,95,11)" rx="2" ry="2" />
<text  x="877.84" y="1439.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; (8,939,247 samples, 0.02%)</title><rect x="1036.5" y="1381" width="0.2" height="15.0" fill="rgb(220,204,17)" rx="2" ry="2" />
<text  x="1039.47" y="1391.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ColumnDataCollectionSegment, std::shared_ptr&lt;duckdb::ColumnDataAllocator&gt;&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;&gt; (89,994,321 samples, 0.18%)</title><rect x="376.7" y="1893" width="2.1" height="15.0" fill="rgb(241,94,39)" rx="2" ry="2" />
<text  x="379.70" y="1903.5" ></text>
</g>
<g >
<title>duckdb::EqualOrNullSimplification::EqualOrNullSimplification (116,708,959 samples, 0.23%)</title><rect x="807.1" y="1861" width="2.7" height="15.0" fill="rgb(213,3,1)" rx="2" ry="2" />
<text  x="810.15" y="1871.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;unsigned long, std::default_delete&lt;unsigned long []&gt; &gt;::_M_ptr (4,707,058 samples, 0.01%)</title><rect x="363.4" y="1573" width="0.1" height="15.0" fill="rgb(252,0,34)" rx="2" ry="2" />
<text  x="366.35" y="1583.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::yy_get_previous_state (5,919,076 samples, 0.01%)</title><rect x="523.6" y="1829" width="0.1" height="15.0" fill="rgb(219,59,50)" rx="2" ry="2" />
<text  x="526.56" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BufferPool::PurgeQueue (9,655,191 samples, 0.02%)</title><rect x="239.3" y="645" width="0.2" height="15.0" fill="rgb(205,11,21)" rx="2" ry="2" />
<text  x="242.32" y="655.5" ></text>
</g>
<g >
<title>duckdb::Vector::Resize (9,894,870 samples, 0.02%)</title><rect x="106.2" y="1685" width="0.2" height="15.0" fill="rgb(236,24,27)" rx="2" ry="2" />
<text  x="109.16" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (17,391,684 samples, 0.03%)</title><rect x="820.0" y="1813" width="0.4" height="15.0" fill="rgb(247,195,0)" rx="2" ry="2" />
<text  x="823.04" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt;, true&gt;::~unique_ptr (20,351,448 samples, 0.04%)</title><rect x="633.5" y="1797" width="0.5" height="15.0" fill="rgb(252,11,50)" rx="2" ry="2" />
<text  x="636.48" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (86,488,741 samples, 0.17%)</title><rect x="890.1" y="1493" width="2.0" height="15.0" fill="rgb(235,114,47)" rx="2" ry="2" />
<text  x="893.13" y="1503.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (27,166,951 samples, 0.05%)</title><rect x="192.9" y="1557" width="0.6" height="15.0" fill="rgb(254,102,39)" rx="2" ry="2" />
<text  x="195.87" y="1567.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::Verify (10,890,493 samples, 0.02%)</title><rect x="417.9" y="1669" width="0.3" height="15.0" fill="rgb(246,114,45)" rx="2" ry="2" />
<text  x="420.91" y="1679.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (11,811,247 samples, 0.02%)</title><rect x="108.1" y="1765" width="0.2" height="15.0" fill="rgb(231,205,45)" rx="2" ry="2" />
<text  x="111.06" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::~unique_ptr (10,108,919 samples, 0.02%)</title><rect x="1077.8" y="1701" width="0.3" height="15.0" fill="rgb(205,43,9)" rx="2" ry="2" />
<text  x="1080.84" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalColumnDataScanState, std::default_delete&lt;duckdb::PhysicalColumnDataScanState&gt; &gt;::release (6,170,994 samples, 0.01%)</title><rect x="92.4" y="1669" width="0.1" height="15.0" fill="rgb(219,103,49)" rx="2" ry="2" />
<text  x="95.37" y="1679.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (71,394,898 samples, 0.14%)</title><rect x="325.2" y="1493" width="1.7" height="15.0" fill="rgb(247,151,37)" rx="2" ry="2" />
<text  x="328.24" y="1503.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (13,892,358 samples, 0.03%)</title><rect x="724.4" y="1701" width="0.3" height="15.0" fill="rgb(228,208,52)" rx="2" ry="2" />
<text  x="727.43" y="1711.5" ></text>
</g>
<g >
<title>__do_fault (10,621,394 samples, 0.02%)</title><rect x="72.9" y="1861" width="0.2" height="15.0" fill="rgb(247,219,20)" rx="2" ry="2" />
<text  x="75.88" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ConcurrentQueue::DequeueFromProducer (8,300,818 samples, 0.02%)</title><rect x="397.5" y="1893" width="0.2" height="15.0" fill="rgb(212,223,6)" rx="2" ry="2" />
<text  x="400.53" y="1903.5" ></text>
</g>
<g >
<title>duckdb::DatabaseInstance::GetDatabase (6,849,527 samples, 0.01%)</title><rect x="502.0" y="1877" width="0.2" height="15.0" fill="rgb(209,223,22)" rx="2" ry="2" />
<text  x="505.00" y="1887.5" ></text>
</g>
<g >
<title>do_syscall_64 (25,138,398 samples, 0.05%)</title><rect x="1058.6" y="1717" width="0.6" height="15.0" fill="rgb(237,123,44)" rx="2" ry="2" />
<text  x="1061.58" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (4,493,722 samples, 0.01%)</title><rect x="832.6" y="1493" width="0.1" height="15.0" fill="rgb(227,26,44)" rx="2" ry="2" />
<text  x="835.63" y="1503.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::InClauseExpressionMatcher, std::default_delete&lt;duckdb::InClauseExpressionMatcher&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::InClauseExpressionMatcher&gt;, void&gt; (10,800,376 samples, 0.02%)</title><rect x="810.2" y="1829" width="0.3" height="15.0" fill="rgb(209,98,38)" rx="2" ry="2" />
<text  x="813.23" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::lock_guard&lt;std::mutex&gt;, std::default_delete&lt;std::lock_guard&lt;std::mutex&gt; &gt; &gt;::unique_ptr&lt;std::default_delete&lt;std::lock_guard&lt;std::mutex&gt; &gt;, void&gt; (9,307,541 samples, 0.02%)</title><rect x="328.8" y="1797" width="0.2" height="15.0" fill="rgb(216,138,2)" rx="2" ry="2" />
<text  x="331.78" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::Execute (155,953,636 samples, 0.30%)</title><rect x="898.9" y="1701" width="3.6" height="15.0" fill="rgb(229,95,0)" rx="2" ry="2" />
<text  x="901.88" y="1711.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::PipelineInitializeEvent,  (7,093,359 samples, 0.01%)</title><rect x="1051.9" y="1749" width="0.2" height="15.0" fill="rgb(228,54,44)" rx="2" ry="2" />
<text  x="1054.94" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LocalSinkState, std::default_delete&lt;duckdb::LocalSinkState&gt;, true&gt;::reset (11,191,624 samples, 0.02%)</title><rect x="106.8" y="1781" width="0.3" height="15.0" fill="rgb(206,185,9)" rx="2" ry="2" />
<text  x="109.84" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (62,272,713 samples, 0.12%)</title><rect x="717.8" y="1813" width="1.4" height="15.0" fill="rgb(213,134,53)" rx="2" ry="2" />
<text  x="720.78" y="1823.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderNode (4,857,264 samples, 0.01%)</title><rect x="1067.9" y="1701" width="0.1" height="15.0" fill="rgb(238,139,33)" rx="2" ry="2" />
<text  x="1070.92" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (6,472,199 samples, 0.01%)</title><rect x="37.2" y="2005" width="0.1" height="15.0" fill="rgb(244,15,20)" rx="2" ry="2" />
<text  x="40.17" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, unsigned long, true&gt;::_S_equals (5,338,712 samples, 0.01%)</title><rect x="993.6" y="1605" width="0.2" height="15.0" fill="rgb(244,225,16)" rx="2" ry="2" />
<text  x="996.64" y="1615.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::BufferedSerializer&gt;::operator (6,770,853 samples, 0.01%)</title><rect x="591.6" y="1749" width="0.2" height="15.0" fill="rgb(209,78,19)" rx="2" ry="2" />
<text  x="594.65" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt;*, std::shared_ptr&lt;duckdb::ColumnStatistics&gt; &gt; (29,295,516 samples, 0.06%)</title><rect x="236.2" y="1493" width="0.7" height="15.0" fill="rgb(223,9,50)" rx="2" ry="2" />
<text  x="239.24" y="1503.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unordered_set (7,498,363 samples, 0.01%)</title><rect x="802.2" y="1845" width="0.2" height="15.0" fill="rgb(254,162,20)" rx="2" ry="2" />
<text  x="805.19" y="1855.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::ColumnStatistics, std::allocator&lt;duckdb::ColumnStatistics&gt;,  (25,625,459 samples, 0.05%)</title><rect x="236.3" y="1365" width="0.5" height="15.0" fill="rgb(250,130,49)" rx="2" ry="2" />
<text  x="239.25" y="1375.5" ></text>
</g>
<g >
<title>duckdb::Parser::StripUnicodeSpaces (23,988,015 samples, 0.05%)</title><rect x="517.3" y="1925" width="0.6" height="15.0" fill="rgb(239,66,8)" rx="2" ry="2" />
<text  x="520.35" y="1935.5" ></text>
</g>
<g >
<title>duckdb::CommonAggregateOptimizer::VisitReplace (7,854,544 samples, 0.02%)</title><rect x="727.5" y="1637" width="0.2" height="15.0" fill="rgb(226,128,15)" rx="2" ry="2" />
<text  x="730.49" y="1647.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::EvictBlocksOrThrow&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (5,046,684 samples, 0.01%)</title><rect x="193.8" y="1653" width="0.1" height="15.0" fill="rgb(234,35,30)" rx="2" ry="2" />
<text  x="196.78" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::unique_ptr&lt;duckdb::BoundConstantExpression, std::default_delete&lt;duckdb::BoundConstantExpression&gt;, void&gt; (5,677,981 samples, 0.01%)</title><rect x="934.5" y="1637" width="0.1" height="15.0" fill="rgb(205,81,8)" rx="2" ry="2" />
<text  x="937.52" y="1647.5" ></text>
</g>
<g >
<title>duckdb::OptimisticDataWriter::Rollback (5,399,968 samples, 0.01%)</title><rect x="233.3" y="1765" width="0.1" height="15.0" fill="rgb(217,39,31)" rx="2" ry="2" />
<text  x="236.27" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::InitializeAppend (76,544,825 samples, 0.15%)</title><rect x="102.8" y="1669" width="1.8" height="15.0" fill="rgb(246,136,36)" rx="2" ry="2" />
<text  x="105.82" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::operator= (14,796,776 samples, 0.03%)</title><rect x="843.4" y="1749" width="0.4" height="15.0" fill="rgb(221,14,43)" rx="2" ry="2" />
<text  x="846.41" y="1759.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Binder,  (62,935,797 samples, 0.12%)</title><rect x="984.8" y="1765" width="1.5" height="15.0" fill="rgb(238,48,47)" rx="2" ry="2" />
<text  x="987.82" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (6,658,738 samples, 0.01%)</title><rect x="1032.7" y="1797" width="0.2" height="15.0" fill="rgb(238,67,4)" rx="2" ry="2" />
<text  x="1035.71" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::GlobalSourceState, std::default_delete&lt;duckdb::GlobalSourceState&gt;, true&gt;::~unique_ptr (15,781,214 samples, 0.03%)</title><rect x="356.1" y="1493" width="0.3" height="15.0" fill="rgb(252,155,51)" rx="2" ry="2" />
<text  x="359.09" y="1503.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (76,252,310 samples, 0.15%)</title><rect x="437.1" y="1509" width="1.7" height="15.0" fill="rgb(242,152,24)" rx="2" ry="2" />
<text  x="440.07" y="1519.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SelectStatement, std::default_delete&lt;duckdb::SelectStatement&gt;, true&gt;::operator= (8,177,911 samples, 0.02%)</title><rect x="538.3" y="1829" width="0.2" height="15.0" fill="rgb(244,112,51)" rx="2" ry="2" />
<text  x="541.29" y="1839.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::CatalogEntry&gt;::operator (7,692,713 samples, 0.01%)</title><rect x="1117.6" y="741" width="0.2" height="15.0" fill="rgb(246,91,29)" rx="2" ry="2" />
<text  x="1120.57" y="751.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::~vector (13,774,389 samples, 0.03%)</title><rect x="839.6" y="1813" width="0.3" height="15.0" fill="rgb(218,211,11)" rx="2" ry="2" />
<text  x="842.56" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_dalloc_large (8,703,925 samples, 0.02%)</title><rect x="482.1" y="1333" width="0.2" height="15.0" fill="rgb(254,179,36)" rx="2" ry="2" />
<text  x="485.14" y="1343.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::BoundColumnRefExpression, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::LogicalType&amp;, duckdb::ColumnBinding&amp;, unsigned long&amp;&gt; (18,213,861 samples, 0.04%)</title><rect x="951.7" y="1621" width="0.4" height="15.0" fill="rgb(207,49,48)" rx="2" ry="2" />
<text  x="954.67" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&amp;&gt; (23,130,141 samples, 0.05%)</title><rect x="291.0" y="1669" width="0.5" height="15.0" fill="rgb(242,151,28)" rx="2" ry="2" />
<text  x="293.99" y="1679.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (12,501,953 samples, 0.02%)</title><rect x="834.9" y="1797" width="0.3" height="15.0" fill="rgb(237,106,49)" rx="2" ry="2" />
<text  x="837.93" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (10,828,367 samples, 0.02%)</title><rect x="573.2" y="1765" width="0.3" height="15.0" fill="rgb(243,170,8)" rx="2" ry="2" />
<text  x="576.24" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::LikeOptimizationRule, std::default_delete&lt;duckdb::LikeOptimizationRule&gt;, void&gt; (10,155,247 samples, 0.02%)</title><rect x="823.7" y="1861" width="0.2" height="15.0" fill="rgb(210,2,23)" rx="2" ry="2" />
<text  x="826.68" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::ScanVector (855,699,774 samples, 1.67%)</title><rect x="267.2" y="1621" width="19.6" height="15.0" fill="rgb(226,201,13)" rx="2" ry="2" />
<text  x="270.16" y="1631.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_free (4,886,285 samples, 0.01%)</title><rect x="221.7" y="1365" width="0.1" height="15.0" fill="rgb(221,31,38)" rx="2" ry="2" />
<text  x="224.71" y="1375.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::ColumnBinding, duckdb::unique_ptr&lt;duckdb::BaseStatistics, std::default_delete&lt;duckdb::BaseStatistics&gt;, true&gt;, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::unique_ptr&lt;duckdb::BaseStatistics, std::default_delete&lt;duckdb::BaseStatistics&gt;, true&gt; &gt; &gt; &gt;::~unordered_map (5,068,204 samples, 0.01%)</title><rect x="768.2" y="1797" width="0.2" height="15.0" fill="rgb(215,79,15)" rx="2" ry="2" />
<text  x="771.23" y="1807.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::CatalogSearchEntry const*, std::vector&lt;duckdb::CatalogSearchEntry, std::allocator&lt;duckdb::CatalogSearchEntry&gt; &gt; &gt;, duckdb::CatalogSearchEntry*&gt; (8,226,941 samples, 0.02%)</title><rect x="1009.0" y="1685" width="0.2" height="15.0" fill="rgb(240,190,24)" rx="2" ry="2" />
<text  x="1011.96" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionInfo, std::default_delete&lt;duckdb::ExpressionInfo&gt; &gt;::operator= (5,158,283 samples, 0.01%)</title><rect x="478.2" y="1717" width="0.1" height="15.0" fill="rgb(220,63,14)" rx="2" ry="2" />
<text  x="481.17" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::operator= (6,046,013 samples, 0.01%)</title><rect x="986.8" y="1813" width="0.1" height="15.0" fill="rgb(232,89,3)" rx="2" ry="2" />
<text  x="989.78" y="1823.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_Vector_impl::_Vector_impl (10,257,104 samples, 0.02%)</title><rect x="561.6" y="1733" width="0.2" height="15.0" fill="rgb(233,46,5)" rx="2" ry="2" />
<text  x="564.57" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; &gt;::~vector (28,371,574 samples, 0.06%)</title><rect x="906.6" y="1733" width="0.6" height="15.0" fill="rgb(254,118,12)" rx="2" ry="2" />
<text  x="909.60" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::idalloctm (12,117,724 samples, 0.02%)</title><rect x="325.7" y="1381" width="0.2" height="15.0" fill="rgb(207,6,13)" rx="2" ry="2" />
<text  x="328.66" y="1391.5" ></text>
</g>
<g >
<title>duckdb::DatabaseInstance::GetDatabaseManager (5,670,486 samples, 0.01%)</title><rect x="988.3" y="1717" width="0.2" height="15.0" fill="rgb(212,76,45)" rx="2" ry="2" />
<text  x="991.33" y="1727.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateStatistics (11,836,848 samples, 0.02%)</title><rect x="766.8" y="1717" width="0.3" height="15.0" fill="rgb(220,128,24)" rx="2" ry="2" />
<text  x="769.80" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (15,138,883 samples, 0.03%)</title><rect x="887.3" y="1701" width="0.4" height="15.0" fill="rgb(213,47,23)" rx="2" ry="2" />
<text  x="890.35" y="1711.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt;::deallocate (5,545,550 samples, 0.01%)</title><rect x="38.9" y="2021" width="0.2" height="15.0" fill="rgb(253,133,11)" rx="2" ry="2" />
<text  x="41.93" y="2031.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_impl (5,685,958 samples, 0.01%)</title><rect x="243.1" y="405" width="0.2" height="15.0" fill="rgb(214,100,42)" rx="2" ry="2" />
<text  x="246.15" y="415.5" ></text>
</g>
<g >
<title>duckdb::FilterPushdown::~FilterPushdown (7,791,364 samples, 0.02%)</title><rect x="749.5" y="1813" width="0.2" height="15.0" fill="rgb(250,113,24)" rx="2" ry="2" />
<text  x="752.52" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueueProducerToken, std::default_delete&lt;duckdb::QueueProducerToken&gt; &gt;::release (4,676,160 samples, 0.01%)</title><rect x="1090.9" y="1797" width="0.1" height="15.0" fill="rgb(225,142,44)" rx="2" ry="2" />
<text  x="1093.86" y="1807.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorMetaData&gt; &gt;::construct&lt;duckdb::VectorMetaData, duckdb::VectorMetaData&gt; (4,393,378 samples, 0.01%)</title><rect x="864.3" y="1589" width="0.1" height="15.0" fill="rgb(221,160,34)" rx="2" ry="2" />
<text  x="867.31" y="1599.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::GenerateColumnBindings (13,984,521 samples, 0.03%)</title><rect x="842.3" y="1781" width="0.3" height="15.0" fill="rgb(226,14,9)" rx="2" ry="2" />
<text  x="845.27" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert_unique_node (8,155,276 samples, 0.02%)</title><rect x="788.4" y="1765" width="0.2" height="15.0" fill="rgb(233,121,44)" rx="2" ry="2" />
<text  x="791.39" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (5,050,749 samples, 0.01%)</title><rect x="242.9" y="389" width="0.1" height="15.0" fill="rgb(212,108,52)" rx="2" ry="2" />
<text  x="245.91" y="399.5" ></text>
</g>
<g >
<title>duckdb::ConcurrentQueue::DequeueFromProducer (132,964,969 samples, 0.26%)</title><rect x="503.5" y="1877" width="3.1" height="15.0" fill="rgb(207,176,7)" rx="2" ry="2" />
<text  x="506.53" y="1887.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt; &gt;::~unordered_map (41,664,687 samples, 0.08%)</title><rect x="1016.5" y="1685" width="1.0" height="15.0" fill="rgb(216,13,10)" rx="2" ry="2" />
<text  x="1019.52" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (5,398,013 samples, 0.01%)</title><rect x="547.2" y="1621" width="0.1" height="15.0" fill="rgb(221,90,13)" rx="2" ry="2" />
<text  x="550.20" y="1631.5" ></text>
</g>
<g >
<title>std::operator&amp; (44,087,423 samples, 0.09%)</title><rect x="143.2" y="1845" width="1.1" height="15.0" fill="rgb(214,17,27)" rx="2" ry="2" />
<text  x="146.24" y="1855.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ConstantExpression, std::default_delete&lt;duckdb::ConstantExpression&gt; &gt;::__uniq_ptr_impl (8,294,779 samples, 0.02%)</title><rect x="529.0" y="1637" width="0.2" height="15.0" fill="rgb(254,178,45)" rx="2" ry="2" />
<text  x="531.97" y="1647.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unordered_set (4,628,200 samples, 0.01%)</title><rect x="1031.2" y="1733" width="0.1" height="15.0" fill="rgb(216,226,20)" rx="2" ry="2" />
<text  x="1034.19" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (9,156,307 samples, 0.02%)</title><rect x="945.5" y="1669" width="0.2" height="15.0" fill="rgb(214,202,47)" rx="2" ry="2" />
<text  x="948.49" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;*&gt; (447,892,946 samples, 0.87%)</title><rect x="339.9" y="1541" width="10.3" height="15.0" fill="rgb(219,197,36)" rx="2" ry="2" />
<text  x="342.89" y="1551.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryResult, std::default_delete&lt;duckdb::QueryResult&gt;, true&gt;::unique_ptr (6,200,491 samples, 0.01%)</title><rect x="1107.4" y="1973" width="0.2" height="15.0" fill="rgb(232,64,31)" rx="2" ry="2" />
<text  x="1110.43" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (19,420,805 samples, 0.04%)</title><rect x="806.2" y="1813" width="0.5" height="15.0" fill="rgb(222,88,41)" rx="2" ry="2" />
<text  x="809.22" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorMetaData, std::allocator&lt;duckdb::VectorMetaData&gt; &gt;::push_back (24,093,136 samples, 0.05%)</title><rect x="383.1" y="1861" width="0.6" height="15.0" fill="rgb(232,145,3)" rx="2" ry="2" />
<text  x="386.14" y="1871.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::RenderTreeNode*, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt; (5,309,280 samples, 0.01%)</title><rect x="571.9" y="1749" width="0.1" height="15.0" fill="rgb(207,28,50)" rx="2" ry="2" />
<text  x="574.87" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (118,550,523 samples, 0.23%)</title><rect x="689.8" y="1765" width="2.7" height="15.0" fill="rgb(253,149,10)" rx="2" ry="2" />
<text  x="692.82" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::insert (21,133,604 samples, 0.04%)</title><rect x="812.6" y="1797" width="0.5" height="15.0" fill="rgb(242,5,43)" rx="2" ry="2" />
<text  x="815.62" y="1807.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::BlockHandle, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (6,497,338 samples, 0.01%)</title><rect x="103.7" y="1605" width="0.2" height="15.0" fill="rgb(224,97,0)" rx="2" ry="2" />
<text  x="106.73" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::Iterate&lt;duckdb::PhysicalOperator&gt; (6,029,178 samples, 0.01%)</title><rect x="834.0" y="1797" width="0.2" height="15.0" fill="rgb(222,119,14)" rx="2" ry="2" />
<text  x="837.02" y="1807.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::InsertLocalState, duckdb::ClientContext&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt; const&amp;, duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; const&amp;&gt; (236,439,773 samples, 0.46%)</title><rect x="486.2" y="1813" width="5.5" height="15.0" fill="rgb(237,145,8)" rx="2" ry="2" />
<text  x="489.23" y="1823.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (8,380,777 samples, 0.02%)</title><rect x="83.6" y="1989" width="0.2" height="15.0" fill="rgb(240,118,52)" rx="2" ry="2" />
<text  x="86.64" y="1999.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;, std::allocator&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt; &gt; (22,907,976 samples, 0.04%)</title><rect x="447.8" y="1621" width="0.5" height="15.0" fill="rgb(207,157,14)" rx="2" ry="2" />
<text  x="450.77" y="1631.5" ></text>
</g>
<g >
<title>duckdb::RemoveUnusedColumns::VisitOperator (152,093,732 samples, 0.30%)</title><rect x="762.3" y="1797" width="3.5" height="15.0" fill="rgb(236,51,22)" rx="2" ry="2" />
<text  x="765.28" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Event&gt; &gt; &gt;::emplace_back&lt;std::weak_ptr&lt;duckdb::Event&gt; &gt; (29,209,166 samples, 0.06%)</title><rect x="1047.2" y="1781" width="0.7" height="15.0" fill="rgb(227,206,18)" rx="2" ry="2" />
<text  x="1050.22" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;duckdb::AttachedDatabase*&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (5,408,400 samples, 0.01%)</title><rect x="991.9" y="1589" width="0.1" height="15.0" fill="rgb(215,45,35)" rx="2" ry="2" />
<text  x="994.86" y="1599.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_next_grapheme (17,427,451 samples, 0.03%)</title><rect x="836.8" y="1781" width="0.4" height="15.0" fill="rgb(215,214,44)" rx="2" ry="2" />
<text  x="839.81" y="1791.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorCacheBuffer&gt;::shared_ptr&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (97,859,304 samples, 0.19%)</title><rect x="492.3" y="1717" width="2.3" height="15.0" fill="rgb(221,208,28)" rx="2" ry="2" />
<text  x="495.32" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::EmptyNeedleRemovalRule, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (9,355,040 samples, 0.02%)</title><rect x="822.6" y="1877" width="0.2" height="15.0" fill="rgb(210,143,15)" rx="2" ry="2" />
<text  x="825.56" y="1887.5" ></text>
</g>
<g >
<title>std::function&lt;void  (4,496,550 samples, 0.01%)</title><rect x="974.4" y="1717" width="0.1" height="15.0" fill="rgb(225,130,23)" rx="2" ry="2" />
<text  x="977.39" y="1727.5" ></text>
</g>
<g >
<title>std::mutex::unlock (19,973,043 samples, 0.04%)</title><rect x="93.9" y="1669" width="0.5" height="15.0" fill="rgb(206,212,12)" rx="2" ry="2" />
<text  x="96.94" y="1679.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::InitializeScan (24,452,482 samples, 0.05%)</title><rect x="225.3" y="1701" width="0.6" height="15.0" fill="rgb(224,102,50)" rx="2" ry="2" />
<text  x="228.35" y="1711.5" ></text>
</g>
<g >
<title>wp_page_copy (166,364,948 samples, 0.32%)</title><rect x="164.0" y="1909" width="3.8" height="15.0" fill="rgb(229,175,48)" rx="2" ry="2" />
<text  x="167.02" y="1919.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::operator= (9,036,671 samples, 0.02%)</title><rect x="770.3" y="1797" width="0.3" height="15.0" fill="rgb(220,198,12)" rx="2" ry="2" />
<text  x="773.35" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;::~unique_ptr (48,261,202 samples, 0.09%)</title><rect x="340.6" y="1253" width="1.1" height="15.0" fill="rgb(243,193,5)" rx="2" ry="2" />
<text  x="343.63" y="1263.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::BlockHandle,  (93,797,993 samples, 0.18%)</title><rect x="239.1" y="757" width="2.1" height="15.0" fill="rgb(224,46,18)" rx="2" ry="2" />
<text  x="242.08" y="767.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::DictionaryBuffer&gt;::shared_ptr&lt;std::allocator&lt;duckdb::DictionaryBuffer&gt;, duckdb::SelectionVector const&amp;&gt; (21,694,471 samples, 0.04%)</title><rect x="293.9" y="1621" width="0.5" height="15.0" fill="rgb(206,55,28)" rx="2" ry="2" />
<text  x="296.85" y="1631.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::AppendData (30,448,768 samples, 0.06%)</title><rect x="229.8" y="1589" width="0.7" height="15.0" fill="rgb(223,180,24)" rx="2" ry="2" />
<text  x="232.81" y="1599.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; (5,237,177 samples, 0.01%)</title><rect x="570.1" y="1685" width="0.1" height="15.0" fill="rgb(219,221,21)" rx="2" ry="2" />
<text  x="573.10" y="1695.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (35,451,507 samples, 0.07%)</title><rect x="505.4" y="1861" width="0.8" height="15.0" fill="rgb(243,211,9)" rx="2" ry="2" />
<text  x="508.43" y="1871.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::ExtraInfoSeparator[abi:cxx11] (4,419,388 samples, 0.01%)</title><rect x="613.3" y="1765" width="0.1" height="15.0" fill="rgb(231,79,48)" rx="2" ry="2" />
<text  x="616.29" y="1775.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperator (6,623,033 samples, 0.01%)</title><rect x="848.8" y="1781" width="0.2" height="15.0" fill="rgb(226,150,41)" rx="2" ry="2" />
<text  x="851.84" y="1791.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::PhysicalInsert, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, duckdb::TableCatalogEntry&amp;, duckdb::IndexVector&lt;unsigned long, duckdb::PhysicalIndex&gt;&amp;, duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;, duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;, duckdb::vector&lt;duckdb::PhysicalIndex, true&gt;, duckdb::vector&lt;duckdb::LogicalType, true&gt;, unsigned long&amp;, bool&amp;, bool, duckdb::OnConflictAction&amp;, duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;, duckdb::vector&lt;unsigned long, true&gt; &gt; (164,596,239 samples, 0.32%)</title><rect x="854.7" y="1829" width="3.8" height="15.0" fill="rgb(221,94,38)" rx="2" ry="2" />
<text  x="857.71" y="1839.5" ></text>
</g>
<g >
<title>duckdb::WriteAheadLog::GetWALSize (37,004,073 samples, 0.07%)</title><rect x="190.5" y="1797" width="0.8" height="15.0" fill="rgb(246,204,31)" rx="2" ry="2" />
<text  x="193.45" y="1807.5" ></text>
</g>
<g >
<title>do_syscall_64 (11,998,276 samples, 0.02%)</title><rect x="190.7" y="1717" width="0.2" height="15.0" fill="rgb(214,108,39)" rx="2" ry="2" />
<text  x="193.65" y="1727.5" ></text>
</g>
<g >
<title>std::__weak_ptr&lt;duckdb::Event,  (7,093,359 samples, 0.01%)</title><rect x="1051.9" y="1717" width="0.2" height="15.0" fill="rgb(210,165,49)" rx="2" ry="2" />
<text  x="1054.94" y="1727.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (147,879,815 samples, 0.29%)</title><rect x="217.2" y="1733" width="3.4" height="15.0" fill="rgb(227,70,39)" rx="2" ry="2" />
<text  x="220.16" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (7,193,929 samples, 0.01%)</title><rect x="613.9" y="1749" width="0.2" height="15.0" fill="rgb(240,31,51)" rx="2" ry="2" />
<text  x="616.94" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable (6,472,020 samples, 0.01%)</title><rect x="384.0" y="1765" width="0.1" height="15.0" fill="rgb(215,83,35)" rx="2" ry="2" />
<text  x="386.98" y="1775.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;, true&gt;::vector (5,884,293 samples, 0.01%)</title><rect x="1094.1" y="1557" width="0.1" height="15.0" fill="rgb(205,170,33)" rx="2" ry="2" />
<text  x="1097.05" y="1567.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (418,582,452 samples, 0.82%)</title><rect x="235.9" y="1621" width="9.7" height="15.0" fill="rgb(243,159,15)" rx="2" ry="2" />
<text  x="238.93" y="1631.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::ColumnDataAllocator, std::allocator&lt;duckdb::ColumnDataAllocator&gt;, duckdb::ClientContext&amp;, duckdb::ColumnDataAllocatorType&amp;&gt; (26,970,907 samples, 0.05%)</title><rect x="98.1" y="1733" width="0.6" height="15.0" fill="rgb(235,29,18)" rx="2" ry="2" />
<text  x="101.07" y="1743.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*, duckdb::Vector&gt; (63,214,470 samples, 0.12%)</title><rect x="297.3" y="1669" width="1.5" height="15.0" fill="rgb(231,73,20)" rx="2" ry="2" />
<text  x="300.32" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ConstantFoldingRule::~ConstantFoldingRule (9,011,053 samples, 0.02%)</title><rect x="830.8" y="1701" width="0.2" height="15.0" fill="rgb(218,128,1)" rx="2" ry="2" />
<text  x="833.83" y="1711.5" ></text>
</g>
<g >
<title>duckdb::PlanDeserializationState::~PlanDeserializationState (4,603,887 samples, 0.01%)</title><rect x="641.9" y="1861" width="0.1" height="15.0" fill="rgb(242,114,8)" rx="2" ry="2" />
<text  x="644.93" y="1871.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::operator= (9,878,992 samples, 0.02%)</title><rect x="938.5" y="1733" width="0.2" height="15.0" fill="rgb(224,10,23)" rx="2" ry="2" />
<text  x="941.48" y="1743.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorChildBuffer&gt;::shared_ptr&lt;std::allocator&lt;duckdb::VectorChildBuffer&gt;, duckdb::Vector&gt; (38,535,448 samples, 0.08%)</title><rect x="294.5" y="1621" width="0.9" height="15.0" fill="rgb(212,163,37)" rx="2" ry="2" />
<text  x="297.52" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::CommitState::~CommitState (15,588,789 samples, 0.03%)</title><rect x="246.6" y="1813" width="0.3" height="15.0" fill="rgb(225,33,48)" rx="2" ry="2" />
<text  x="249.58" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LocalSourceState, std::default_delete&lt;duckdb::LocalSourceState&gt; &gt;::get (4,409,601 samples, 0.01%)</title><rect x="496.6" y="1781" width="0.1" height="15.0" fill="rgb(250,144,49)" rx="2" ry="2" />
<text  x="499.60" y="1791.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (65,008,994 samples, 0.13%)</title><rect x="289.1" y="1637" width="1.5" height="15.0" fill="rgb(216,144,28)" rx="2" ry="2" />
<text  x="292.15" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt; const&amp;, std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::operator= (4,511,478 samples, 0.01%)</title><rect x="1026.2" y="1797" width="0.1" height="15.0" fill="rgb(244,85,33)" rx="2" ry="2" />
<text  x="1029.22" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::OrderedAggregateOptimizer, std::default_delete&lt;duckdb::OrderedAggregateOptimizer&gt;, void&gt; (10,756,702 samples, 0.02%)</title><rect x="824.4" y="1861" width="0.2" height="15.0" fill="rgb(242,73,35)" rx="2" ry="2" />
<text  x="827.37" y="1871.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::pair&lt;unsigned long, unsigned long&gt;*, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (34,802,276 samples, 0.07%)</title><rect x="629.3" y="1685" width="0.8" height="15.0" fill="rgb(249,170,39)" rx="2" ry="2" />
<text  x="632.29" y="1695.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (138,959,716 samples, 0.27%)</title><rect x="400.6" y="1829" width="3.2" height="15.0" fill="rgb(208,145,50)" rx="2" ry="2" />
<text  x="403.60" y="1839.5" ></text>
</g>
<g >
<title>duckdb::string_t::GetSize (10,277,631 samples, 0.02%)</title><rect x="279.9" y="1493" width="0.2" height="15.0" fill="rgb(234,210,5)" rx="2" ry="2" />
<text  x="282.87" y="1503.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (5,280,133 samples, 0.01%)</title><rect x="949.6" y="1653" width="0.2" height="15.0" fill="rgb(206,211,43)" rx="2" ry="2" />
<text  x="952.65" y="1663.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (44,300,533 samples, 0.09%)</title><rect x="725.1" y="1733" width="1.0" height="15.0" fill="rgb(234,204,5)" rx="2" ry="2" />
<text  x="728.09" y="1743.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::DictionaryBuffer,  (21,694,471 samples, 0.04%)</title><rect x="293.9" y="1605" width="0.5" height="15.0" fill="rgb(233,62,7)" rx="2" ry="2" />
<text  x="296.85" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityData&lt;unsigned long&gt;::TemplatedValidityData (13,058,569 samples, 0.03%)</title><rect x="473.9" y="1541" width="0.3" height="15.0" fill="rgb(242,36,9)" rx="2" ry="2" />
<text  x="476.88" y="1551.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::PipelineCompleteEvent, std::allocator&lt;duckdb::PipelineCompleteEvent&gt;,  (5,718,652 samples, 0.01%)</title><rect x="1049.4" y="1733" width="0.2" height="15.0" fill="rgb(220,53,16)" rx="2" ry="2" />
<text  x="1052.44" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (14,075,010 samples, 0.03%)</title><rect x="1000.2" y="1653" width="0.4" height="15.0" fill="rgb(227,92,39)" rx="2" ry="2" />
<text  x="1003.24" y="1663.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (47,550,188 samples, 0.09%)</title><rect x="297.5" y="1429" width="1.1" height="15.0" fill="rgb(216,216,50)" rx="2" ry="2" />
<text  x="300.48" y="1439.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt;::~unique_ptr (5,198,571 samples, 0.01%)</title><rect x="287.7" y="1589" width="0.1" height="15.0" fill="rgb(246,219,51)" rx="2" ry="2" />
<text  x="290.69" y="1599.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnDataCopyFunction, true&gt;::~vector (7,414,059 samples, 0.01%)</title><rect x="1121.9" y="1861" width="0.2" height="15.0" fill="rgb(207,190,34)" rx="2" ry="2" />
<text  x="1124.92" y="1871.5" ></text>
</g>
<g >
<title>std::function&lt;void  (10,726,364 samples, 0.02%)</title><rect x="724.5" y="1685" width="0.2" height="15.0" fill="rgb(253,139,6)" rx="2" ry="2" />
<text  x="727.48" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;duckdb::ClientContext,  (7,420,443 samples, 0.01%)</title><rect x="515.6" y="1925" width="0.1" height="15.0" fill="rgb(250,14,38)" rx="2" ry="2" />
<text  x="518.56" y="1935.5" ></text>
</g>
<g >
<title>duckdb::Vector::ToUnifiedFormat (5,116,882 samples, 0.01%)</title><rect x="230.5" y="1605" width="0.2" height="15.0" fill="rgb(251,111,15)" rx="2" ry="2" />
<text  x="233.55" y="1615.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionInfo&gt; (10,587,758 samples, 0.02%)</title><rect x="477.8" y="1733" width="0.3" height="15.0" fill="rgb(215,218,38)" rx="2" ry="2" />
<text  x="480.81" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (8,915,651 samples, 0.02%)</title><rect x="1024.6" y="1797" width="0.2" height="15.0" fill="rgb(249,26,48)" rx="2" ry="2" />
<text  x="1027.64" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (6,406,022 samples, 0.01%)</title><rect x="528.4" y="1605" width="0.1" height="15.0" fill="rgb(205,90,52)" rx="2" ry="2" />
<text  x="531.38" y="1615.5" ></text>
</g>
<g >
<title>mpage_process_page_bufs (15,401,717 samples, 0.03%)</title><rect x="251.6" y="1557" width="0.3" height="15.0" fill="rgb(235,138,53)" rx="2" ry="2" />
<text  x="254.59" y="1567.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;duckdb::PhysicalType, std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt;, std::_Select1st&lt;std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt; &gt;, std::less&lt;duckdb::PhysicalType&gt;, std::allocator&lt;std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt; &gt; &gt;::find (12,370,670 samples, 0.02%)</title><rect x="435.5" y="1621" width="0.3" height="15.0" fill="rgb(229,200,53)" rx="2" ry="2" />
<text  x="438.50" y="1631.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (8,265,775 samples, 0.02%)</title><rect x="1139.1" y="1861" width="0.2" height="15.0" fill="rgb(215,155,2)" rx="2" ry="2" />
<text  x="1142.10" y="1871.5" ></text>
</g>
<g >
<title>duckdb::PreparedStatementData::~PreparedStatementData (603,520,165 samples, 1.18%)</title><rect x="337.6" y="1701" width="13.9" height="15.0" fill="rgb(241,179,32)" rx="2" ry="2" />
<text  x="340.63" y="1711.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::Elapsed (4,528,082 samples, 0.01%)</title><rect x="466.1" y="1797" width="0.1" height="15.0" fill="rgb(207,203,54)" rx="2" ry="2" />
<text  x="469.07" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_move_assign (4,494,327 samples, 0.01%)</title><rect x="986.8" y="1781" width="0.1" height="15.0" fill="rgb(205,149,33)" rx="2" ry="2" />
<text  x="989.82" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr (6,793,654 samples, 0.01%)</title><rect x="813.5" y="1765" width="0.1" height="15.0" fill="rgb(230,226,35)" rx="2" ry="2" />
<text  x="816.47" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~vector (4,820,778 samples, 0.01%)</title><rect x="966.6" y="1733" width="0.1" height="15.0" fill="rgb(236,189,13)" rx="2" ry="2" />
<text  x="969.63" y="1743.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;std::thread, void  (4,754,155 samples, 0.01%)</title><rect x="1117.2" y="1941" width="0.1" height="15.0" fill="rgb(226,184,17)" rx="2" ry="2" />
<text  x="1120.21" y="1951.5" ></text>
</g>
<g >
<title>__x64_sys_futex (18,777,201 samples, 0.04%)</title><rect x="505.7" y="1781" width="0.4" height="15.0" fill="rgb(244,132,28)" rx="2" ry="2" />
<text  x="508.70" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (8,110,774 samples, 0.02%)</title><rect x="887.4" y="1685" width="0.2" height="15.0" fill="rgb(253,95,30)" rx="2" ry="2" />
<text  x="890.42" y="1695.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceHashFunction&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceEquality&lt;duckdb::UsingColumnSet&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt; &gt; &gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceHashFunction&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceEquality&lt;duckdb::UsingColumnSet&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt; &gt; &gt; &gt; &gt; &gt;::find (11,551,923 samples, 0.02%)</title><rect x="943.5" y="1685" width="0.3" height="15.0" fill="rgb(230,226,29)" rx="2" ry="2" />
<text  x="946.50" y="1695.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::Verify (16,836,828 samples, 0.03%)</title><rect x="417.8" y="1685" width="0.4" height="15.0" fill="rgb(219,30,9)" rx="2" ry="2" />
<text  x="420.82" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ExpressionListRef::~ExpressionListRef (28,099,058 samples, 0.05%)</title><rect x="971.7" y="1717" width="0.6" height="15.0" fill="rgb(214,219,13)" rx="2" ry="2" />
<text  x="974.69" y="1727.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unordered_set (10,749,149 samples, 0.02%)</title><rect x="1121.4" y="1877" width="0.2" height="15.0" fill="rgb(223,54,38)" rx="2" ry="2" />
<text  x="1124.40" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::push_back (15,509,620 samples, 0.03%)</title><rect x="970.0" y="1749" width="0.3" height="15.0" fill="rgb(234,130,34)" rx="2" ry="2" />
<text  x="972.99" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (55,404,377 samples, 0.11%)</title><rect x="289.2" y="1557" width="1.3" height="15.0" fill="rgb(235,77,51)" rx="2" ry="2" />
<text  x="292.23" y="1567.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::EstimatedSize (20,854,754 samples, 0.04%)</title><rect x="189.6" y="1813" width="0.5" height="15.0" fill="rgb(252,78,45)" rx="2" ry="2" />
<text  x="192.62" y="1823.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::~FileBuffer (241,378,595 samples, 0.47%)</title><rect x="344.1" y="933" width="5.6" height="15.0" fill="rgb(242,74,42)" rx="2" ry="2" />
<text  x="347.14" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;unsigned long, false&gt;::_M_next (4,685,046 samples, 0.01%)</title><rect x="692.2" y="1749" width="0.1" height="15.0" fill="rgb(222,79,19)" rx="2" ry="2" />
<text  x="695.15" y="1759.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;::~shared_ptr (10,826,048 samples, 0.02%)</title><rect x="374.7" y="1765" width="0.3" height="15.0" fill="rgb(251,148,37)" rx="2" ry="2" />
<text  x="377.72" y="1775.5" ></text>
</g>
<g >
<title>mark_buffer_dirty (6,640,846 samples, 0.01%)</title><rect x="248.5" y="1477" width="0.2" height="15.0" fill="rgb(224,184,11)" rx="2" ry="2" />
<text  x="251.54" y="1487.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::BlockPointer, true&gt;::~vector (6,945,295 samples, 0.01%)</title><rect x="237.7" y="1221" width="0.1" height="15.0" fill="rgb(251,169,11)" rx="2" ry="2" />
<text  x="240.67" y="1231.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (6,953,193 samples, 0.01%)</title><rect x="1182.7" y="2021" width="0.2" height="15.0" fill="rgb(247,205,26)" rx="2" ry="2" />
<text  x="1185.74" y="2031.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::~VectorCacheBuffer (56,616,037 samples, 0.11%)</title><rect x="498.1" y="1557" width="1.3" height="15.0" fill="rgb(218,17,47)" rx="2" ry="2" />
<text  x="501.10" y="1567.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;duckdb::Task&gt;::_M_weak_assign&lt;duckdb::PipelineInitializeTask&gt; (4,527,973 samples, 0.01%)</title><rect x="1060.5" y="1765" width="0.1" height="15.0" fill="rgb(229,71,9)" rx="2" ry="2" />
<text  x="1063.53" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, unsigned long&amp;, unsigned long&amp;&gt; (5,247,859 samples, 0.01%)</title><rect x="1073.7" y="1701" width="0.1" height="15.0" fill="rgb(244,43,9)" rx="2" ry="2" />
<text  x="1076.68" y="1711.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::AddChild (32,076,674 samples, 0.06%)</title><rect x="974.6" y="1733" width="0.7" height="15.0" fill="rgb(213,105,35)" rx="2" ry="2" />
<text  x="977.59" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::PipelineInitializeEvent&gt;::construct&lt;duckdb::PipelineInitializeEvent, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (12,723,264 samples, 0.02%)</title><rect x="1051.5" y="1701" width="0.3" height="15.0" fill="rgb(222,96,41)" rx="2" ry="2" />
<text  x="1054.49" y="1711.5" ></text>
</g>
<g >
<title>enqueue_task_fair (5,136,023 samples, 0.01%)</title><rect x="1058.8" y="1589" width="0.1" height="15.0" fill="rgb(235,200,6)" rx="2" ry="2" />
<text  x="1061.80" y="1599.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map (5,419,087 samples, 0.01%)</title><rect x="541.0" y="1909" width="0.1" height="15.0" fill="rgb(214,61,11)" rx="2" ry="2" />
<text  x="543.96" y="1919.5" ></text>
</g>
<g >
<title>duckdb::ConstantExpression::~ConstantExpression (5,818,615 samples, 0.01%)</title><rect x="935.1" y="1637" width="0.2" height="15.0" fill="rgb(226,2,18)" rx="2" ry="2" />
<text  x="938.15" y="1647.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::shared_ptr&lt;duckdb::LocalTableStorage&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt; &gt;::find (9,631,230 samples, 0.02%)</title><rect x="431.3" y="1749" width="0.2" height="15.0" fill="rgb(250,8,5)" rx="2" ry="2" />
<text  x="434.29" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::RenderWidth (13,999,363 samples, 0.03%)</title><rect x="626.4" y="1749" width="0.3" height="15.0" fill="rgb(219,111,31)" rx="2" ry="2" />
<text  x="629.39" y="1759.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::MetaPipeline (98,219,902 samples, 0.19%)</title><rect x="1093.3" y="1733" width="2.3" height="15.0" fill="rgb(247,44,30)" rx="2" ry="2" />
<text  x="1096.32" y="1743.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt; &gt; (22,251,549 samples, 0.04%)</title><rect x="1096.2" y="1653" width="0.5" height="15.0" fill="rgb(250,218,29)" rx="2" ry="2" />
<text  x="1099.18" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::DataArrays, std::allocator&lt;duckdb::DataArrays&gt; &gt;::emplace_back&lt;duckdb::DataArrays&amp;&gt; (20,310,577 samples, 0.04%)</title><rect x="474.8" y="1717" width="0.4" height="15.0" fill="rgb(250,199,2)" rx="2" ry="2" />
<text  x="477.76" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt; &gt; (15,307,510 samples, 0.03%)</title><rect x="500.0" y="1429" width="0.3" height="15.0" fill="rgb(246,32,47)" rx="2" ry="2" />
<text  x="502.99" y="1439.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RenderTreeNode&gt; (9,612,160 samples, 0.02%)</title><rect x="550.5" y="1669" width="0.3" height="15.0" fill="rgb(246,187,26)" rx="2" ry="2" />
<text  x="553.54" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::StorageLockKey, std::default_delete&lt;duckdb::StorageLockKey&gt;, true&gt;::unique_ptr (6,030,874 samples, 0.01%)</title><rect x="198.0" y="1605" width="0.2" height="15.0" fill="rgb(254,17,18)" rx="2" ry="2" />
<text  x="201.04" y="1615.5" ></text>
</g>
<g >
<title>std::deque&lt;std::pair&lt;unsigned long, std::shared_ptr&lt;duckdb::QueryProfiler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long, std::shared_ptr&lt;duckdb::QueryProfiler&gt; &gt; &gt; &gt;::pop_front (31,227,456 samples, 0.06%)</title><rect x="352.4" y="1877" width="0.7" height="15.0" fill="rgb(222,88,38)" rx="2" ry="2" />
<text  x="355.38" y="1887.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::Schedule (200,320,287 samples, 0.39%)</title><rect x="91.6" y="1765" width="4.6" height="15.0" fill="rgb(229,107,7)" rx="2" ry="2" />
<text  x="94.59" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (26,914,718 samples, 0.05%)</title><rect x="1051.3" y="1749" width="0.6" height="15.0" fill="rgb(234,145,4)" rx="2" ry="2" />
<text  x="1054.32" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnAppendState [], std::default_delete&lt;duckdb::ColumnAppendState&gt;, false&gt;::~unique_ptr (28,711,789 samples, 0.06%)</title><rect x="339.1" y="1461" width="0.7" height="15.0" fill="rgb(207,0,50)" rx="2" ry="2" />
<text  x="342.12" y="1471.5" ></text>
</g>
<g >
<title>duckdb::CastExpressionMatcher::~CastExpressionMatcher (6,108,755 samples, 0.01%)</title><rect x="832.0" y="1429" width="0.1" height="15.0" fill="rgb(237,172,52)" rx="2" ry="2" />
<text  x="834.96" y="1439.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_next_event_compute (6,661,565 samples, 0.01%)</title><rect x="392.2" y="1429" width="0.1" height="15.0" fill="rgb(237,65,47)" rx="2" ry="2" />
<text  x="395.18" y="1439.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::CompressionAppendState&gt;::operator (13,519,782 samples, 0.03%)</title><rect x="233.7" y="1653" width="0.3" height="15.0" fill="rgb(218,20,23)" rx="2" ry="2" />
<text  x="236.68" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (5,591,504 samples, 0.01%)</title><rect x="839.6" y="1781" width="0.2" height="15.0" fill="rgb(210,186,9)" rx="2" ry="2" />
<text  x="842.63" y="1791.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::GetNode (9,085,109 samples, 0.02%)</title><rect x="630.5" y="1765" width="0.2" height="15.0" fill="rgb(224,44,12)" rx="2" ry="2" />
<text  x="633.49" y="1775.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::Rule*, std::default_delete&lt;duckdb::Rule&gt; &gt;::tuple&lt;duckdb::Rule*&amp;, std::default_delete&lt;duckdb::EmptyNeedleRemovalRule&gt;, true&gt; (4,595,927 samples, 0.01%)</title><rect x="822.6" y="1829" width="0.1" height="15.0" fill="rgb(213,61,4)" rx="2" ry="2" />
<text  x="825.61" y="1839.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RenderTree, unsigned long&amp;, unsigned long&amp;&gt; (46,593,447 samples, 0.09%)</title><rect x="552.6" y="1797" width="1.0" height="15.0" fill="rgb(216,152,5)" rx="2" ry="2" />
<text  x="555.56" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (33,437,847 samples, 0.07%)</title><rect x="1080.9" y="1749" width="0.8" height="15.0" fill="rgb(230,64,8)" rx="2" ry="2" />
<text  x="1083.90" y="1759.5" ></text>
</g>
<g >
<title>mpage_prepare_extent_to_map (23,169,360 samples, 0.05%)</title><rect x="251.4" y="1573" width="0.6" height="15.0" fill="rgb(217,6,48)" rx="2" ry="2" />
<text  x="254.44" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (12,476,833 samples, 0.02%)</title><rect x="887.7" y="1701" width="0.3" height="15.0" fill="rgb(233,54,35)" rx="2" ry="2" />
<text  x="890.75" y="1711.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (23,405,058 samples, 0.05%)</title><rect x="621.7" y="1701" width="0.5" height="15.0" fill="rgb(242,64,41)" rx="2" ry="2" />
<text  x="624.65" y="1711.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::ReallocBuffer (99,443,540 samples, 0.19%)</title><rect x="436.8" y="1589" width="2.3" height="15.0" fill="rgb(244,144,9)" rx="2" ry="2" />
<text  x="439.81" y="1599.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::NextGraphemeCluster (18,148,577 samples, 0.04%)</title><rect x="636.7" y="1733" width="0.4" height="15.0" fill="rgb(209,216,31)" rx="2" ry="2" />
<text  x="639.72" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (6,778,779 samples, 0.01%)</title><rect x="431.8" y="1669" width="0.2" height="15.0" fill="rgb(231,223,27)" rx="2" ry="2" />
<text  x="434.84" y="1679.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::StandardColumnData, std::allocator&lt;duckdb::StandardColumnData&gt;, duckdb::BlockManager&amp;, duckdb::DataTableInfo&amp;, unsigned long&amp;, unsigned long&amp;, duckdb::LogicalType const&amp;, duckdb::optional_ptr&lt;duckdb::ColumnData&gt;&amp;&gt; (7,569,833 samples, 0.01%)</title><rect x="104.7" y="1605" width="0.2" height="15.0" fill="rgb(243,224,47)" rx="2" ry="2" />
<text  x="107.74" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::~unique_ptr (13,813,393 samples, 0.03%)</title><rect x="620.1" y="1685" width="0.3" height="15.0" fill="rgb(239,181,53)" rx="2" ry="2" />
<text  x="623.06" y="1695.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnAppendState*&gt; (8,878,460 samples, 0.02%)</title><rect x="234.1" y="1637" width="0.2" height="15.0" fill="rgb(251,54,33)" rx="2" ry="2" />
<text  x="237.05" y="1647.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (16,710,153 samples, 0.03%)</title><rect x="727.5" y="1685" width="0.3" height="15.0" fill="rgb(254,23,30)" rx="2" ry="2" />
<text  x="730.45" y="1695.5" ></text>
</g>
<g >
<title>finish_fault (8,054,970 samples, 0.02%)</title><rect x="73.8" y="1861" width="0.2" height="15.0" fill="rgb(254,112,14)" rx="2" ry="2" />
<text  x="76.76" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorMetaData, std::allocator&lt;duckdb::VectorMetaData&gt; &gt;::push_back (24,145,525 samples, 0.05%)</title><rect x="863.9" y="1701" width="0.6" height="15.0" fill="rgb(253,141,3)" rx="2" ry="2" />
<text  x="866.92" y="1711.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (95,465,048 samples, 0.19%)</title><rect x="355.2" y="1717" width="2.1" height="15.0" fill="rgb(245,27,24)" rx="2" ry="2" />
<text  x="358.15" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_free (5,135,565 samples, 0.01%)</title><rect x="108.5" y="1445" width="0.2" height="15.0" fill="rgb(207,155,17)" rx="2" ry="2" />
<text  x="111.53" y="1455.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::SegmentScanState&gt;::operator (15,135,593 samples, 0.03%)</title><rect x="288.0" y="1461" width="0.4" height="15.0" fill="rgb(229,99,36)" rx="2" ry="2" />
<text  x="291.03" y="1471.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (6,332,789 samples, 0.01%)</title><rect x="788.0" y="1797" width="0.1" height="15.0" fill="rgb(231,27,19)" rx="2" ry="2" />
<text  x="790.96" y="1807.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::Match (4,649,948 samples, 0.01%)</title><rect x="741.9" y="1653" width="0.1" height="15.0" fill="rgb(214,124,28)" rx="2" ry="2" />
<text  x="744.86" y="1663.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;duckdb::DatabaseInstance,  (4,994,886 samples, 0.01%)</title><rect x="503.3" y="1877" width="0.2" height="15.0" fill="rgb(249,217,52)" rx="2" ry="2" />
<text  x="506.34" y="1887.5" ></text>
</g>
<g >
<title>std::function&lt;void  (20,191,193 samples, 0.04%)</title><rect x="726.8" y="1653" width="0.5" height="15.0" fill="rgb(229,106,46)" rx="2" ry="2" />
<text  x="729.81" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CompressionAppendState, std::default_delete&lt;duckdb::CompressionAppendState&gt;, true&gt;::operator= (11,825,671 samples, 0.02%)</title><rect x="450.0" y="1685" width="0.3" height="15.0" fill="rgb(235,26,7)" rx="2" ry="2" />
<text  x="453.03" y="1695.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (6,670,505 samples, 0.01%)</title><rect x="166.1" y="1893" width="0.2" height="15.0" fill="rgb(218,95,26)" rx="2" ry="2" />
<text  x="169.13" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt; &gt;::~unique_ptr (574,376,908 samples, 1.12%)</title><rect x="338.0" y="1669" width="13.2" height="15.0" fill="rgb(216,85,39)" rx="2" ry="2" />
<text  x="340.96" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::ColumnBinding, std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt;, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt;, std::__detail::_Select1st, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5,340,519 samples, 0.01%)</title><rect x="758.7" y="1669" width="0.1" height="15.0" fill="rgb(218,149,23)" rx="2" ry="2" />
<text  x="761.65" y="1679.5" ></text>
</g>
<g >
<title>duckdb::BaseScalarFunction::BaseScalarFunction (6,378,611 samples, 0.01%)</title><rect x="1114.8" y="1685" width="0.2" height="15.0" fill="rgb(245,96,32)" rx="2" ry="2" />
<text  x="1117.81" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SpecificFunctionMatcher, std::default_delete&lt;duckdb::SpecificFunctionMatcher&gt; &gt;::release (4,678,472 samples, 0.01%)</title><rect x="797.8" y="1813" width="0.1" height="15.0" fill="rgb(226,72,42)" rx="2" ry="2" />
<text  x="800.79" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::~vector (9,620,604 samples, 0.02%)</title><rect x="321.6" y="1733" width="0.2" height="15.0" fill="rgb(227,95,6)" rx="2" ry="2" />
<text  x="324.58" y="1743.5" ></text>
</g>
<g >
<title>handle_mm_fault (7,971,376 samples, 0.02%)</title><rect x="67.6" y="1941" width="0.2" height="15.0" fill="rgb(211,32,34)" rx="2" ry="2" />
<text  x="70.61" y="1951.5" ></text>
</g>
<g >
<title>duckdb::ValidityScanState::~ValidityScanState (15,135,593 samples, 0.03%)</title><rect x="288.0" y="1445" width="0.4" height="15.0" fill="rgb(208,95,16)" rx="2" ry="2" />
<text  x="291.03" y="1455.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::unique_ptr&lt;duckdb::BoundConstantExpression, std::default_delete&lt;std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt; &gt;, void&gt; (10,133,385 samples, 0.02%)</title><rect x="983.3" y="1813" width="0.3" height="15.0" fill="rgb(247,110,1)" rx="2" ry="2" />
<text  x="986.32" y="1823.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VersionNode&gt;::~shared_ptr (34,385,137 samples, 0.07%)</title><rect x="244.4" y="1221" width="0.8" height="15.0" fill="rgb(230,111,43)" rx="2" ry="2" />
<text  x="247.38" y="1231.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::large_dalloc_finish_impl (91,801,873 samples, 0.18%)</title><rect x="346.2" y="757" width="2.1" height="15.0" fill="rgb(244,40,22)" rx="2" ry="2" />
<text  x="349.24" y="767.5" ></text>
</g>
<g >
<title>__strlen_sse2 (12,388,518 samples, 0.02%)</title><rect x="24.8" y="1989" width="0.3" height="15.0" fill="rgb(220,101,43)" rx="2" ry="2" />
<text  x="27.81" y="1999.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ConstantExpressionMatcher, std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt; &gt;::__uniq_ptr_impl (5,402,704 samples, 0.01%)</title><rect x="784.3" y="1797" width="0.1" height="15.0" fill="rgb(211,160,20)" rx="2" ry="2" />
<text  x="787.27" y="1807.5" ></text>
</g>
<g >
<title>duckdb::StarExpression::StarExpression (9,219,211 samples, 0.02%)</title><rect x="533.2" y="1749" width="0.2" height="15.0" fill="rgb(231,77,9)" rx="2" ry="2" />
<text  x="536.17" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformSelect (479,357,657 samples, 0.93%)</title><rect x="526.1" y="1813" width="11.0" height="15.0" fill="rgb(215,38,45)" rx="2" ry="2" />
<text  x="529.11" y="1823.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::unordered_set (55,248,332 samples, 0.11%)</title><rect x="787.9" y="1845" width="1.2" height="15.0" fill="rgb(237,106,50)" rx="2" ry="2" />
<text  x="790.87" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::get&lt;true&gt; (6,810,427 samples, 0.01%)</title><rect x="615.0" y="1765" width="0.2" height="15.0" fill="rgb(226,13,33)" rx="2" ry="2" />
<text  x="618.02" y="1775.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::QueryProfiler, duckdb::ClientContext&amp;&gt; (44,320,368 samples, 0.09%)</title><rect x="353.2" y="1877" width="1.0" height="15.0" fill="rgb(228,228,14)" rx="2" ry="2" />
<text  x="356.20" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (5,600,913 samples, 0.01%)</title><rect x="37.4" y="2005" width="0.1" height="15.0" fill="rgb(206,33,42)" rx="2" ry="2" />
<text  x="40.41" y="2015.5" ></text>
</g>
<g >
<title>duckdb::FilterCombiner::~FilterCombiner (6,229,589 samples, 0.01%)</title><rect x="749.5" y="1797" width="0.2" height="15.0" fill="rgb(206,18,12)" rx="2" ry="2" />
<text  x="752.52" y="1807.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::RegisterSmallMemory (249,772,802 samples, 0.49%)</title><rect x="436.4" y="1669" width="5.7" height="15.0" fill="rgb(241,8,30)" rx="2" ry="2" />
<text  x="439.36" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::vector (16,097,335 samples, 0.03%)</title><rect x="561.5" y="1765" width="0.4" height="15.0" fill="rgb(249,93,16)" rx="2" ry="2" />
<text  x="564.52" y="1775.5" ></text>
</g>
<g >
<title>duckdb::make_unsafe_uniq_array&lt;duckdb::ColumnAppendState&gt; (10,741,968 samples, 0.02%)</title><rect x="452.3" y="1733" width="0.2" height="15.0" fill="rgb(236,178,52)" rx="2" ry="2" />
<text  x="455.25" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (5,334,539 samples, 0.01%)</title><rect x="754.2" y="1685" width="0.2" height="15.0" fill="rgb(206,144,21)" rx="2" ry="2" />
<text  x="757.23" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::CleanupInternal (7,497,599,164 samples, 14.62%)</title><rect x="187.9" y="1909" width="172.5" height="15.0" fill="rgb(209,207,25)" rx="2" ry="2" />
<text  x="190.92" y="1919.5" >duckdb::ClientContext:..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt;::allocate (6,535,108 samples, 0.01%)</title><rect x="708.8" y="1781" width="0.1" height="15.0" fill="rgb(224,135,15)" rx="2" ry="2" />
<text  x="711.75" y="1791.5" ></text>
</g>
<g >
<title>std::transform&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, duckdb::StringUtil::Lower (6,035,752 samples, 0.01%)</title><rect x="994.9" y="1717" width="0.1" height="15.0" fill="rgb(249,128,52)" rx="2" ry="2" />
<text  x="997.90" y="1727.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::unordered_set (6,957,712 samples, 0.01%)</title><rect x="1100.3" y="1829" width="0.2" height="15.0" fill="rgb(217,29,26)" rx="2" ry="2" />
<text  x="1103.30" y="1839.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::Append (39,794,421 samples, 0.08%)</title><rect x="229.7" y="1621" width="1.0" height="15.0" fill="rgb(210,184,54)" rx="2" ry="2" />
<text  x="232.75" y="1631.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt; &gt; (27,220,437 samples, 0.05%)</title><rect x="499.8" y="1541" width="0.7" height="15.0" fill="rgb(215,3,35)" rx="2" ry="2" />
<text  x="502.84" y="1551.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::VectorCache, true&gt;::~vector (93,367,021 samples, 0.18%)</title><rect x="895.9" y="1765" width="2.1" height="15.0" fill="rgb(246,152,31)" rx="2" ry="2" />
<text  x="898.87" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; (11,557,521 samples, 0.02%)</title><rect x="755.0" y="1685" width="0.3" height="15.0" fill="rgb(240,15,19)" rx="2" ry="2" />
<text  x="758.01" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="245" width="0.1" height="15.0" fill="rgb(253,134,20)" rx="2" ry="2" />
<text  x="14.25" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt;::construct&lt;unsigned long, unsigned long const&amp;&gt; (4,363,713 samples, 0.01%)</title><rect x="680.0" y="1701" width="0.1" height="15.0" fill="rgb(240,66,0)" rx="2" ry="2" />
<text  x="683.00" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt; &gt; &gt;::operator= (10,072,514 samples, 0.02%)</title><rect x="361.6" y="1781" width="0.2" height="15.0" fill="rgb(253,190,34)" rx="2" ry="2" />
<text  x="364.59" y="1791.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::HTTPState, std::allocator&lt;duckdb::HTTPState&gt;&gt; (19,804,098 samples, 0.04%)</title><rect x="359.2" y="1877" width="0.5" height="15.0" fill="rgb(239,20,30)" rx="2" ry="2" />
<text  x="362.23" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::QueryProfiler&gt;::destroy&lt;duckdb::QueryProfiler&gt; (20,386,427 samples, 0.04%)</title><rect x="352.6" y="1717" width="0.4" height="15.0" fill="rgb(228,204,13)" rx="2" ry="2" />
<text  x="355.56" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ExtraTypeInfo::Serialize (5,223,125 samples, 0.01%)</title><rect x="313.1" y="1621" width="0.2" height="15.0" fill="rgb(250,2,9)" rx="2" ry="2" />
<text  x="316.14" y="1631.5" ></text>
</g>
<g >
<title>duckdb::DependencyList::AddDependency (61,288,186 samples, 0.12%)</title><rect x="851.3" y="1845" width="1.4" height="15.0" fill="rgb(250,4,37)" rx="2" ry="2" />
<text  x="854.32" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::vector (6,991,802 samples, 0.01%)</title><rect x="626.8" y="1733" width="0.2" height="15.0" fill="rgb(205,124,11)" rx="2" ry="2" />
<text  x="629.80" y="1743.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::EndOperator (98,043,479 samples, 0.19%)</title><rect x="466.0" y="1813" width="2.3" height="15.0" fill="rgb(215,182,53)" rx="2" ry="2" />
<text  x="469.03" y="1823.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::StringValueInfo&gt;::shared_ptr&lt;std::allocator&lt;duckdb::StringValueInfo&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (9,764,423 samples, 0.02%)</title><rect x="528.3" y="1637" width="0.2" height="15.0" fill="rgb(244,47,39)" rx="2" ry="2" />
<text  x="531.32" y="1647.5" ></text>
</g>
<g >
<title>duckdb::StringScanState::StringScanState (4,432,826 samples, 0.01%)</title><rect x="213.1" y="1573" width="0.1" height="15.0" fill="rgb(248,21,47)" rx="2" ry="2" />
<text  x="216.12" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_alloc (16,430,473 samples, 0.03%)</title><rect x="437.6" y="1461" width="0.4" height="15.0" fill="rgb(226,103,28)" rx="2" ry="2" />
<text  x="440.62" y="1471.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Catalog, std::default_delete&lt;duckdb::Catalog&gt;, true&gt;::operator* (5,891,801 samples, 0.01%)</title><rect x="421.5" y="1733" width="0.1" height="15.0" fill="rgb(229,204,38)" rx="2" ry="2" />
<text  x="424.49" y="1743.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (55,934,569 samples, 0.11%)</title><rect x="1024.4" y="1845" width="1.3" height="15.0" fill="rgb(223,138,28)" rx="2" ry="2" />
<text  x="1027.37" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_event (5,969,224 samples, 0.01%)</title><rect x="334.6" y="1253" width="0.2" height="15.0" fill="rgb(209,139,37)" rx="2" ry="2" />
<text  x="337.62" y="1263.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Expression&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Expression&gt; &gt; &gt;::~vector (7,790,612 samples, 0.02%)</title><rect x="740.1" y="1605" width="0.2" height="15.0" fill="rgb(226,48,32)" rx="2" ry="2" />
<text  x="743.07" y="1615.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*&gt; (7,242,694 samples, 0.01%)</title><rect x="108.5" y="1701" width="0.2" height="15.0" fill="rgb(227,115,28)" rx="2" ry="2" />
<text  x="111.52" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::Pipeline&gt;, duckdb::ReferenceHashFunction&lt;duckdb::Pipeline&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (15,273,340 samples, 0.03%)</title><rect x="1062.4" y="1813" width="0.4" height="15.0" fill="rgb(215,167,30)" rx="2" ry="2" />
<text  x="1065.44" y="1823.5" ></text>
</g>
<g >
<title>duckdb::StringUtil::Repeat (6,903,407 samples, 0.01%)</title><rect x="599.7" y="1781" width="0.1" height="15.0" fill="rgb(221,159,46)" rx="2" ry="2" />
<text  x="602.67" y="1791.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::BlockMetaData*&gt; (351,831,442 samples, 0.69%)</title><rect x="342.0" y="1173" width="8.1" height="15.0" fill="rgb(214,36,44)" rx="2" ry="2" />
<text  x="344.97" y="1183.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::SequenceCatalogEntry*, duckdb::SequenceValue, std::hash&lt;duckdb::SequenceCatalogEntry*&gt;, std::equal_to&lt;duckdb::SequenceCatalogEntry*&gt;, std::allocator&lt;std::pair&lt;duckdb::SequenceCatalogEntry* const, duckdb::SequenceValue&gt; &gt; &gt;::~unordered_map (11,437,609 samples, 0.02%)</title><rect x="327.5" y="1621" width="0.3" height="15.0" fill="rgb(215,22,30)" rx="2" ry="2" />
<text  x="330.53" y="1631.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::GetGlobalSourceState (21,233,726 samples, 0.04%)</title><rect x="399.5" y="1845" width="0.5" height="15.0" fill="rgb(208,62,2)" rx="2" ry="2" />
<text  x="402.49" y="1855.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::Iterate&lt;duckdb::LogicalOperator&gt; (28,014,963 samples, 0.05%)</title><rect x="621.6" y="1749" width="0.6" height="15.0" fill="rgb(244,176,45)" rx="2" ry="2" />
<text  x="624.60" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::operator[] (5,979,205 samples, 0.01%)</title><rect x="630.8" y="1765" width="0.2" height="15.0" fill="rgb(240,127,41)" rx="2" ry="2" />
<text  x="633.84" y="1775.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (61,042,060 samples, 0.12%)</title><rect x="297.4" y="1541" width="1.4" height="15.0" fill="rgb(217,151,11)" rx="2" ry="2" />
<text  x="300.35" y="1551.5" ></text>
</g>
<g >
<title>duckdb::DuckTransactionManager::CommitTransaction[abi:cxx11] (6,157,343,779 samples, 12.00%)</title><rect x="189.0" y="1845" width="141.6" height="15.0" fill="rgb(225,87,27)" rx="2" ry="2" />
<text  x="191.99" y="1855.5" >duckdb::DuckTransa..</text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::operator bool (12,121,430 samples, 0.02%)</title><rect x="774.1" y="1861" width="0.3" height="15.0" fill="rgb(220,86,34)" rx="2" ry="2" />
<text  x="777.14" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; (5,866,183 samples, 0.01%)</title><rect x="978.1" y="1733" width="0.1" height="15.0" fill="rgb(251,166,47)" rx="2" ry="2" />
<text  x="981.10" y="1743.5" ></text>
</g>
<g >
<title>duckdb::MetaTransaction::SetActiveQuery (11,662,900 samples, 0.02%)</title><rect x="332.8" y="1845" width="0.3" height="15.0" fill="rgb(234,162,30)" rx="2" ry="2" />
<text  x="335.82" y="1855.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;duckdb::ClientContext,  (9,761,002 samples, 0.02%)</title><rect x="515.0" y="1909" width="0.2" height="15.0" fill="rgb(250,116,51)" rx="2" ry="2" />
<text  x="518.02" y="1919.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1909" width="0.1" height="15.0" fill="rgb(231,83,31)" rx="2" ry="2" />
<text  x="14.25" y="1919.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::ColumnBinding, std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (6,761,032 samples, 0.01%)</title><rect x="765.5" y="1733" width="0.2" height="15.0" fill="rgb(250,58,27)" rx="2" ry="2" />
<text  x="768.52" y="1743.5" ></text>
</g>
<g >
<title>std::operator&amp; (8,787,265 samples, 0.02%)</title><rect x="414.6" y="1653" width="0.2" height="15.0" fill="rgb(252,195,16)" rx="2" ry="2" />
<text  x="417.62" y="1663.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (38,319,772 samples, 0.07%)</title><rect x="192.8" y="1605" width="0.9" height="15.0" fill="rgb(235,204,42)" rx="2" ry="2" />
<text  x="195.81" y="1615.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::RowGroupSegmentTree&gt;::destroy&lt;duckdb::RowGroupSegmentTree&gt; (350,274,486 samples, 0.68%)</title><rect x="237.4" y="1445" width="8.1" height="15.0" fill="rgb(240,76,12)" rx="2" ry="2" />
<text  x="240.40" y="1455.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperatorToString[abi:cxx11] (4,390,734 samples, 0.01%)</title><rect x="1067.7" y="1685" width="0.1" height="15.0" fill="rgb(247,209,8)" rx="2" ry="2" />
<text  x="1070.74" y="1695.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt;, duckdb::LogicalType*&gt; (5,110,189 samples, 0.01%)</title><rect x="1045.3" y="1813" width="0.1" height="15.0" fill="rgb(219,170,21)" rx="2" ry="2" />
<text  x="1048.25" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (8,707,069 samples, 0.02%)</title><rect x="242.9" y="405" width="0.2" height="15.0" fill="rgb(231,135,6)" rx="2" ry="2" />
<text  x="245.88" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (4,940,537 samples, 0.01%)</title><rect x="362.4" y="1765" width="0.1" height="15.0" fill="rgb(240,28,20)" rx="2" ry="2" />
<text  x="365.36" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;::reset (61,904,107 samples, 0.12%)</title><rect x="239.6" y="645" width="1.4" height="15.0" fill="rgb(238,176,38)" rx="2" ry="2" />
<text  x="242.56" y="655.5" ></text>
</g>
<g >
<title>__lsan::CollectLeaksCb (4,831,598 samples, 0.01%)</title><rect x="1125.8" y="2037" width="0.1" height="15.0" fill="rgb(237,133,28)" rx="2" ry="2" />
<text  x="1128.82" y="2047.5" ></text>
</g>
<g >
<title>page_fault (287,482,684 samples, 0.56%)</title><rect x="1134.5" y="2021" width="6.6" height="15.0" fill="rgb(206,145,42)" rx="2" ry="2" />
<text  x="1137.51" y="2031.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateStatistics (85,832,031 samples, 0.17%)</title><rect x="765.9" y="1765" width="2.0" height="15.0" fill="rgb(244,142,1)" rx="2" ry="2" />
<text  x="768.91" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::pa_alloc (7,719,071 samples, 0.02%)</title><rect x="103.2" y="1301" width="0.2" height="15.0" fill="rgb(234,203,19)" rx="2" ry="2" />
<text  x="106.22" y="1311.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, duckdb::OperatorInformation, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt; &gt;::~unordered_map (12,476,663 samples, 0.02%)</title><rect x="335.7" y="1653" width="0.3" height="15.0" fill="rgb(249,193,24)" rx="2" ry="2" />
<text  x="338.75" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, true&gt; &gt; &gt;::operator (11,385,142 samples, 0.02%)</title><rect x="852.1" y="1781" width="0.3" height="15.0" fill="rgb(230,62,28)" rx="2" ry="2" />
<text  x="855.13" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::FunctionExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (6,236,508 samples, 0.01%)</title><rect x="811.9" y="1845" width="0.2" height="15.0" fill="rgb(238,91,25)" rx="2" ry="2" />
<text  x="814.91" y="1855.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::GetDataPointer (15,076,957 samples, 0.03%)</title><rect x="863.0" y="1749" width="0.3" height="15.0" fill="rgb(240,71,38)" rx="2" ry="2" />
<text  x="865.97" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::CatalogEntryEquality, duckdb::CatalogEntryHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (15,581,689 samples, 0.03%)</title><rect x="924.5" y="1845" width="0.4" height="15.0" fill="rgb(232,134,18)" rx="2" ry="2" />
<text  x="927.52" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::ExpressionEquality&lt;duckdb::ParsedExpression&gt;, duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6,554,946 samples, 0.01%)</title><rect x="968.8" y="1733" width="0.2" height="15.0" fill="rgb(226,148,19)" rx="2" ry="2" />
<text  x="971.81" y="1743.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;*, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt; (19,956,037 samples, 0.04%)</title><rect x="828.2" y="1781" width="0.5" height="15.0" fill="rgb(230,126,44)" rx="2" ry="2" />
<text  x="831.22" y="1791.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderNode (10,545,630 samples, 0.02%)</title><rect x="622.5" y="1733" width="0.3" height="15.0" fill="rgb(241,97,27)" rx="2" ry="2" />
<text  x="625.51" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::OrderByNode, std::allocator&lt;duckdb::OrderByNode&gt; &gt;::vector (5,490,606 samples, 0.01%)</title><rect x="527.1" y="1733" width="0.1" height="15.0" fill="rgb(208,42,22)" rx="2" ry="2" />
<text  x="530.08" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::~vector (7,458,025 samples, 0.01%)</title><rect x="1057.0" y="1797" width="0.2" height="15.0" fill="rgb(210,70,2)" rx="2" ry="2" />
<text  x="1059.99" y="1807.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::LogicalInsert, duckdb::TableCatalogEntry&amp;, unsigned long&gt; (41,101,453 samples, 0.08%)</title><rect x="1012.6" y="1829" width="1.0" height="15.0" fill="rgb(217,52,33)" rx="2" ry="2" />
<text  x="1015.62" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TableRef, std::default_delete&lt;duckdb::TableRef&gt; &gt;::~unique_ptr (34,642,152 samples, 0.07%)</title><rect x="971.6" y="1749" width="0.8" height="15.0" fill="rgb(250,174,51)" rx="2" ry="2" />
<text  x="974.57" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CompressedSegmentState, std::default_delete&lt;duckdb::CompressedSegmentState&gt; &gt;::~unique_ptr (30,202,733 samples, 0.06%)</title><rect x="238.4" y="757" width="0.7" height="15.0" fill="rgb(238,145,28)" rx="2" ry="2" />
<text  x="241.39" y="767.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::InitializeAppend (54,939,272 samples, 0.11%)</title><rect x="449.1" y="1701" width="1.2" height="15.0" fill="rgb(252,160,25)" rx="2" ry="2" />
<text  x="452.08" y="1711.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::~Pipeline (23,055,121 samples, 0.04%)</title><rect x="356.1" y="1509" width="0.5" height="15.0" fill="rgb(206,129,15)" rx="2" ry="2" />
<text  x="359.09" y="1519.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::~vector (8,791,747 samples, 0.02%)</title><rect x="1036.2" y="1589" width="0.2" height="15.0" fill="rgb(219,178,44)" rx="2" ry="2" />
<text  x="1039.19" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::CatalogSearchEntry, std::allocator&lt;duckdb::CatalogSearchEntry&gt; &gt;::operator= (22,509,718 samples, 0.04%)</title><rect x="1008.7" y="1749" width="0.5" height="15.0" fill="rgb(247,34,26)" rx="2" ry="2" />
<text  x="1011.73" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="949" width="0.1" height="15.0" fill="rgb(253,17,5)" rx="2" ry="2" />
<text  x="14.25" y="959.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (41,581,513 samples, 0.08%)</title><rect x="699.0" y="1797" width="0.9" height="15.0" fill="rgb(247,152,3)" rx="2" ry="2" />
<text  x="701.95" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_no_sample (5,160,627 samples, 0.01%)</title><rect x="401.5" y="1493" width="0.2" height="15.0" fill="rgb(253,104,16)" rx="2" ry="2" />
<text  x="404.54" y="1503.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*, duckdb::Vector&gt; (89,272,199 samples, 0.17%)</title><rect x="333.4" y="1637" width="2.0" height="15.0" fill="rgb(216,15,33)" rx="2" ry="2" />
<text  x="336.39" y="1647.5" ></text>
</g>
<g >
<title>std::numeric_limits&lt;unsigned int&gt;::max (4,430,859 samples, 0.01%)</title><rect x="311.7" y="1541" width="0.1" height="15.0" fill="rgb(227,127,15)" rx="2" ry="2" />
<text  x="314.74" y="1551.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::LogicalOperator (4,845,902 samples, 0.01%)</title><rect x="976.1" y="1701" width="0.1" height="15.0" fill="rgb(235,101,5)" rx="2" ry="2" />
<text  x="979.10" y="1711.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ExpressionListRef, std::default_delete&lt;duckdb::ExpressionListRef&gt; &gt;::__uniq_ptr_impl (4,389,366 samples, 0.01%)</title><rect x="531.0" y="1701" width="0.1" height="15.0" fill="rgb(249,196,29)" rx="2" ry="2" />
<text  x="533.98" y="1711.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_deleter&lt;duckdb::PipelineTask*, std::default_delete&lt;duckdb::PipelineTask&gt;, std::allocator&lt;void&gt;,  (6,777,783 samples, 0.01%)</title><rect x="95.4" y="1685" width="0.2" height="15.0" fill="rgb(226,139,19)" rx="2" ry="2" />
<text  x="98.39" y="1695.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::SetNode (6,174,875 samples, 0.01%)</title><rect x="548.6" y="1541" width="0.1" height="15.0" fill="rgb(230,82,36)" rx="2" ry="2" />
<text  x="551.61" y="1551.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::ColumnStatistics&gt;::construct&lt;duckdb::ColumnStatistics, duckdb::BaseStatistics&gt; (59,250,845 samples, 0.12%)</title><rect x="426.0" y="1445" width="1.4" height="15.0" fill="rgb(212,115,41)" rx="2" ry="2" />
<text  x="428.99" y="1455.5" ></text>
</g>
<g >
<title>duckdb::StatementProperties::~StatementProperties (9,101,823 samples, 0.02%)</title><rect x="1029.8" y="1877" width="0.2" height="15.0" fill="rgb(237,166,42)" rx="2" ry="2" />
<text  x="1032.83" y="1887.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (79,485,048 samples, 0.15%)</title><rect x="486.7" y="1637" width="1.8" height="15.0" fill="rgb(209,77,20)" rx="2" ry="2" />
<text  x="489.68" y="1647.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::LocalStorage (4,857,166 samples, 0.01%)</title><rect x="998.8" y="1621" width="0.1" height="15.0" fill="rgb(205,157,4)" rx="2" ry="2" />
<text  x="1001.81" y="1631.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;duckdb::PreservedError const*, std::vector&lt;duckdb::PreservedError, std::allocator&lt;duckdb::PreservedError&gt; &gt; &gt; (5,885,054 samples, 0.01%)</title><rect x="398.7" y="1861" width="0.1" height="15.0" fill="rgb(217,49,12)" rx="2" ry="2" />
<text  x="401.68" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="757" width="0.1" height="15.0" fill="rgb(230,100,35)" rx="2" ry="2" />
<text  x="14.25" y="767.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (5,337,342 samples, 0.01%)</title><rect x="788.7" y="1733" width="0.1" height="15.0" fill="rgb(234,202,48)" rx="2" ry="2" />
<text  x="791.68" y="1743.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::core_yy_switch_to_buffer (9,644,713 samples, 0.02%)</title><rect x="524.3" y="1845" width="0.2" height="15.0" fill="rgb(254,60,10)" rx="2" ry="2" />
<text  x="527.32" y="1855.5" ></text>
</g>
<g >
<title>non-virtual thunk to std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringstream (4,392,011 samples, 0.01%)</title><rect x="82.8" y="2021" width="0.1" height="15.0" fill="rgb(224,40,43)" rx="2" ry="2" />
<text  x="85.77" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Binding&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Binding&gt; &gt; &gt;::push_back (24,257,940 samples, 0.05%)</title><rect x="928.4" y="1701" width="0.6" height="15.0" fill="rgb(208,136,18)" rx="2" ry="2" />
<text  x="931.39" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::ScanVector&lt;false, true&gt; (190,289,018 samples, 0.37%)</title><rect x="212.3" y="1653" width="4.4" height="15.0" fill="rgb(241,77,40)" rx="2" ry="2" />
<text  x="215.35" y="1663.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::End (4,646,813 samples, 0.01%)</title><rect x="645.2" y="1861" width="0.1" height="15.0" fill="rgb(241,201,5)" rx="2" ry="2" />
<text  x="648.22" y="1871.5" ></text>
</g>
<g >
<title>handle_mm_fault (14,110,483 samples, 0.03%)</title><rect x="1131.4" y="1957" width="0.3" height="15.0" fill="rgb(216,203,39)" rx="2" ry="2" />
<text  x="1134.37" y="1967.5" ></text>
</g>
<g >
<title>unmap_region (35,970,196 samples, 0.07%)</title><rect x="1172.2" y="1893" width="0.9" height="15.0" fill="rgb(233,107,44)" rx="2" ry="2" />
<text  x="1175.23" y="1903.5" ></text>
</g>
<g >
<title>duckdb::InsertLocalState::~InsertLocalState (11,191,624 samples, 0.02%)</title><rect x="106.8" y="1717" width="0.3" height="15.0" fill="rgb(254,149,54)" rx="2" ry="2" />
<text  x="109.84" y="1727.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::EndOperator (114,010,873 samples, 0.22%)</title><rect x="465.7" y="1829" width="2.7" height="15.0" fill="rgb(207,204,11)" rx="2" ry="2" />
<text  x="468.74" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_free (62,824,952 samples, 0.12%)</title><rect x="1123.2" y="1573" width="1.4" height="15.0" fill="rgb(248,37,39)" rx="2" ry="2" />
<text  x="1126.17" y="1583.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_allocate (5,121,381 samples, 0.01%)</title><rect x="661.2" y="1717" width="0.1" height="15.0" fill="rgb(253,57,13)" rx="2" ry="2" />
<text  x="664.22" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::AppendData (44,410,967 samples, 0.09%)</title><rect x="461.4" y="1685" width="1.0" height="15.0" fill="rgb(215,123,14)" rx="2" ry="2" />
<text  x="464.39" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundSelectNode, std::default_delete&lt;duckdb::BoundSelectNode&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BoundSelectNode&gt;, void&gt; (8,644,177 samples, 0.02%)</title><rect x="963.8" y="1733" width="0.2" height="15.0" fill="rgb(247,21,30)" rx="2" ry="2" />
<text  x="966.85" y="1743.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::SegmentScanState&gt;::operator (6,116,119 samples, 0.01%)</title><rect x="226.6" y="1605" width="0.2" height="15.0" fill="rgb(205,209,17)" rx="2" ry="2" />
<text  x="229.62" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TableIndexList::~TableIndexList (7,458,506 samples, 0.01%)</title><rect x="235.6" y="1669" width="0.2" height="15.0" fill="rgb(244,164,26)" rx="2" ry="2" />
<text  x="238.65" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (8,774,257 samples, 0.02%)</title><rect x="943.2" y="1669" width="0.2" height="15.0" fill="rgb(247,42,9)" rx="2" ry="2" />
<text  x="946.23" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ExpressionHeuristics::VisitOperator (50,256,607 samples, 0.10%)</title><rect x="734.2" y="1797" width="1.2" height="15.0" fill="rgb(229,197,35)" rx="2" ry="2" />
<text  x="737.23" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Executor::VerifyScheduledEventsInternal (27,396,688 samples, 0.05%)</title><rect x="1054.6" y="1797" width="0.7" height="15.0" fill="rgb(226,53,52)" rx="2" ry="2" />
<text  x="1057.63" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::pac_decay_to_limit (4,939,677 samples, 0.01%)</title><rect x="19.4" y="1845" width="0.1" height="15.0" fill="rgb(210,131,16)" rx="2" ry="2" />
<text  x="22.41" y="1855.5" ></text>
</g>
<g >
<title>duckdb::LogicalDummyScan::GetColumnBindings (8,701,475 samples, 0.02%)</title><rect x="847.3" y="1813" width="0.2" height="15.0" fill="rgb(220,48,31)" rx="2" ry="2" />
<text  x="850.33" y="1823.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Executor, std::default_delete&lt;duckdb::Executor&gt; &gt;::_M_ptr (14,854,760 samples, 0.03%)</title><rect x="511.2" y="1877" width="0.3" height="15.0" fill="rgb(214,185,48)" rx="2" ry="2" />
<text  x="514.18" y="1887.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::ColumnSegment (9,373,530 samples, 0.02%)</title><rect x="104.0" y="1605" width="0.2" height="15.0" fill="rgb(226,165,10)" rx="2" ry="2" />
<text  x="106.97" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="645" width="0.1" height="15.0" fill="rgb(243,123,53)" rx="2" ry="2" />
<text  x="14.25" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnDataCopyFunction, std::allocator&lt;duckdb::ColumnDataCopyFunction&gt; &gt;::~vector (7,508,762 samples, 0.01%)</title><rect x="338.3" y="1477" width="0.2" height="15.0" fill="rgb(229,110,42)" rx="2" ry="2" />
<text  x="341.28" y="1487.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_alloc_event (34,328,111 samples, 0.07%)</title><rect x="493.3" y="1477" width="0.8" height="15.0" fill="rgb(252,19,40)" rx="2" ry="2" />
<text  x="496.33" y="1487.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::reference_wrapper&lt;duckdb::ViewCatalogEntry&gt;, duckdb::ReferenceHashFunction&lt;duckdb::ViewCatalogEntry&gt;, duckdb::ReferenceEquality&lt;duckdb::ViewCatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::ViewCatalogEntry&gt; &gt; &gt;::~unordered_set (5,625,441 samples, 0.01%)</title><rect x="1031.8" y="1749" width="0.2" height="15.0" fill="rgb(252,10,30)" rx="2" ry="2" />
<text  x="1034.84" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="693" width="0.1" height="15.0" fill="rgb(218,94,39)" rx="2" ry="2" />
<text  x="14.25" y="703.5" ></text>
</g>
<g >
<title>flush_tlb_func_common.constprop.0 (14,921,375 samples, 0.03%)</title><rect x="167.3" y="1861" width="0.4" height="15.0" fill="rgb(212,55,48)" rx="2" ry="2" />
<text  x="170.31" y="1871.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (93,290,928 samples, 0.18%)</title><rect x="1177.6" y="2005" width="2.1" height="15.0" fill="rgb(237,117,37)" rx="2" ry="2" />
<text  x="1180.60" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Task&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; &gt;::emplace_back&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; (23,817,273 samples, 0.05%)</title><rect x="1060.8" y="1797" width="0.6" height="15.0" fill="rgb(215,165,18)" rx="2" ry="2" />
<text  x="1063.80" y="1807.5" ></text>
</g>
<g >
<title>std::function&lt;void  (25,684,079 samples, 0.05%)</title><rect x="621.6" y="1733" width="0.6" height="15.0" fill="rgb(246,221,30)" rx="2" ry="2" />
<text  x="624.63" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (9,578,443 samples, 0.02%)</title><rect x="38.4" y="2005" width="0.2" height="15.0" fill="rgb(211,196,27)" rx="2" ry="2" />
<text  x="41.38" y="2015.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocatorData::~ArenaAllocatorData (4,545,601 samples, 0.01%)</title><rect x="340.8" y="1093" width="0.1" height="15.0" fill="rgb(252,126,26)" rx="2" ry="2" />
<text  x="343.78" y="1103.5" ></text>
</g>
<g >
<title>duckdb::HyperLogLog::HyperLogLog (15,590,423 samples, 0.03%)</title><rect x="426.5" y="1365" width="0.3" height="15.0" fill="rgb(222,204,19)" rx="2" ry="2" />
<text  x="429.47" y="1375.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt;::allocate (7,581,451 samples, 0.01%)</title><rect x="732.8" y="1669" width="0.2" height="15.0" fill="rgb(251,44,21)" rx="2" ry="2" />
<text  x="735.81" y="1679.5" ></text>
</g>
<g >
<title>duckdb::DuckTransaction::~DuckTransaction (147,755,475 samples, 0.29%)</title><rect x="324.4" y="1637" width="3.4" height="15.0" fill="rgb(209,73,26)" rx="2" ry="2" />
<text  x="327.41" y="1647.5" ></text>
</g>
<g >
<title>duckdb::LogicalDummyScan::GetColumnBindings (26,894,353 samples, 0.05%)</title><rect x="842.7" y="1765" width="0.6" height="15.0" fill="rgb(242,198,52)" rx="2" ry="2" />
<text  x="845.67" y="1775.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;::operator (12,691,553 samples, 0.02%)</title><rect x="1089.4" y="1797" width="0.3" height="15.0" fill="rgb(247,18,14)" rx="2" ry="2" />
<text  x="1092.40" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (7,166,836 samples, 0.01%)</title><rect x="467.3" y="1733" width="0.2" height="15.0" fill="rgb(207,1,51)" rx="2" ry="2" />
<text  x="470.34" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (8,435,240 samples, 0.02%)</title><rect x="968.3" y="1701" width="0.2" height="15.0" fill="rgb(237,176,4)" rx="2" ry="2" />
<text  x="971.31" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_alloc (5,421,520 samples, 0.01%)</title><rect x="380.2" y="1701" width="0.1" height="15.0" fill="rgb(229,143,50)" rx="2" ry="2" />
<text  x="383.17" y="1711.5" ></text>
</g>
<g >
<title>duckdb::PhysicalPlanGenerator::~PhysicalPlanGenerator (23,361,246 samples, 0.05%)</title><rect x="924.5" y="1893" width="0.5" height="15.0" fill="rgb(228,2,3)" rx="2" ry="2" />
<text  x="927.50" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;unsigned long, true, false&gt;::operator++ (6,992,154 samples, 0.01%)</title><rect x="674.4" y="1797" width="0.2" height="15.0" fill="rgb(213,222,0)" rx="2" ry="2" />
<text  x="677.44" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (11,289,692 samples, 0.02%)</title><rect x="802.4" y="1813" width="0.3" height="15.0" fill="rgb(218,60,2)" rx="2" ry="2" />
<text  x="805.40" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BoundConstantExpression::~BoundConstantExpression (19,973,202 samples, 0.04%)</title><rect x="915.9" y="1461" width="0.4" height="15.0" fill="rgb(252,218,51)" rx="2" ry="2" />
<text  x="918.86" y="1471.5" ></text>
</g>
<g >
<title>duckdb::StatementProperties::operator= (19,238,325 samples, 0.04%)</title><rect x="1026.0" y="1861" width="0.4" height="15.0" fill="rgb(233,37,12)" rx="2" ry="2" />
<text  x="1028.95" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ProducerToken, std::default_delete&lt;duckdb::ProducerToken&gt; &gt;::get_deleter (5,022,767 samples, 0.01%)</title><rect x="1091.8" y="1829" width="0.2" height="15.0" fill="rgb(246,147,53)" rx="2" ry="2" />
<text  x="1094.84" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::EnumComparisonRule, std::default_delete&lt;duckdb::EnumComparisonRule&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::EnumComparisonRule&gt;, void&gt; (9,070,752 samples, 0.02%)</title><rect x="806.8" y="1861" width="0.2" height="15.0" fill="rgb(245,113,48)" rx="2" ry="2" />
<text  x="809.76" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Transaction::Get (21,859,748 samples, 0.04%)</title><rect x="1042.7" y="1829" width="0.5" height="15.0" fill="rgb(245,134,44)" rx="2" ry="2" />
<text  x="1045.73" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1221" width="0.1" height="15.0" fill="rgb(237,167,53)" rx="2" ry="2" />
<text  x="14.25" y="1231.5" ></text>
</g>
<g >
<title>do_mmap (148,794,411 samples, 0.29%)</title><rect x="1170.5" y="1941" width="3.5" height="15.0" fill="rgb(244,33,22)" rx="2" ry="2" />
<text  x="1173.53" y="1951.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::MetaPipeline&gt;::destroy&lt;duckdb::MetaPipeline&gt; (17,838,229 samples, 0.03%)</title><rect x="1096.3" y="1541" width="0.4" height="15.0" fill="rgb(248,151,4)" rx="2" ry="2" />
<text  x="1099.28" y="1551.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateTree (207,546,481 samples, 0.40%)</title><rect x="1065.5" y="1781" width="4.7" height="15.0" fill="rgb(230,124,47)" rx="2" ry="2" />
<text  x="1068.45" y="1791.5" ></text>
</g>
<g >
<title>duckdb::VersionNode::~VersionNode (21,019,013 samples, 0.04%)</title><rect x="244.5" y="1109" width="0.5" height="15.0" fill="rgb(232,153,34)" rx="2" ry="2" />
<text  x="247.55" y="1119.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryResult, std::default_delete&lt;duckdb::QueryResult&gt; &gt;::operator= (14,035,306 samples, 0.03%)</title><rect x="394.7" y="1909" width="0.3" height="15.0" fill="rgb(224,200,12)" rx="2" ry="2" />
<text  x="397.65" y="1919.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;, unsigned long&amp;&gt; (32,776,980 samples, 0.06%)</title><rect x="362.9" y="1733" width="0.8" height="15.0" fill="rgb(205,91,13)" rx="2" ry="2" />
<text  x="365.92" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (8,695,300 samples, 0.02%)</title><rect x="193.3" y="1525" width="0.2" height="15.0" fill="rgb(210,114,12)" rx="2" ry="2" />
<text  x="196.29" y="1535.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (14,745,400 samples, 0.03%)</title><rect x="401.9" y="1477" width="0.3" height="15.0" fill="rgb(210,133,39)" rx="2" ry="2" />
<text  x="404.87" y="1487.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, unsigned long&amp;&gt; (58,264,957 samples, 0.11%)</title><rect x="899.5" y="1621" width="1.4" height="15.0" fill="rgb(208,190,29)" rx="2" ry="2" />
<text  x="902.52" y="1631.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::AllocateNewChunk (723,496,206 samples, 1.41%)</title><rect x="869.5" y="1765" width="16.7" height="15.0" fill="rgb(234,184,33)" rx="2" ry="2" />
<text  x="872.53" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::deallocate (19,559,022 samples, 0.04%)</title><rect x="37.8" y="2021" width="0.5" height="15.0" fill="rgb(252,35,34)" rx="2" ry="2" />
<text  x="40.84" y="2031.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (29,251,738 samples, 0.06%)</title><rect x="675.3" y="1781" width="0.7" height="15.0" fill="rgb(211,172,7)" rx="2" ry="2" />
<text  x="678.34" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::BindCastFunction&gt; &gt;::construct&lt;duckdb::BindCastFunction, duckdb::BoundCastInfo  (5,587,018 samples, 0.01%)</title><rect x="1120.5" y="1909" width="0.1" height="15.0" fill="rgb(221,11,20)" rx="2" ry="2" />
<text  x="1123.47" y="1919.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;::operator (7,485,150 samples, 0.01%)</title><rect x="641.1" y="1685" width="0.1" height="15.0" fill="rgb(239,114,15)" rx="2" ry="2" />
<text  x="644.07" y="1695.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::find (4,912,482 samples, 0.01%)</title><rect x="953.5" y="1557" width="0.1" height="15.0" fill="rgb(235,100,19)" rx="2" ry="2" />
<text  x="956.52" y="1567.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (5,240,863 samples, 0.01%)</title><rect x="11.7" y="1973" width="0.1" height="15.0" fill="rgb(236,2,53)" rx="2" ry="2" />
<text  x="14.66" y="1983.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (7,415,548 samples, 0.01%)</title><rect x="896.9" y="1381" width="0.2" height="15.0" fill="rgb(231,15,13)" rx="2" ry="2" />
<text  x="899.92" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::operator (6,796,627 samples, 0.01%)</title><rect x="681.2" y="1765" width="0.2" height="15.0" fill="rgb(223,62,23)" rx="2" ry="2" />
<text  x="684.20" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;,  (32,029,208 samples, 0.06%)</title><rect x="362.9" y="1701" width="0.8" height="15.0" fill="rgb(221,136,13)" rx="2" ry="2" />
<text  x="365.94" y="1711.5" ></text>
</g>
<g >
<title>_raw_spin_lock (6,341,715 samples, 0.01%)</title><rect x="1136.7" y="1925" width="0.1" height="15.0" fill="rgb(241,205,5)" rx="2" ry="2" />
<text  x="1139.68" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_range_initialize&lt;duckdb::LogicalType const*&gt; (11,911,634 samples, 0.02%)</title><rect x="1014.9" y="1797" width="0.2" height="15.0" fill="rgb(239,143,39)" rx="2" ry="2" />
<text  x="1017.87" y="1807.5" ></text>
</g>
<g >
<title>duckdb::StringUtil::Repeat (4,448,365 samples, 0.01%)</title><rect x="554.6" y="1813" width="0.1" height="15.0" fill="rgb(238,201,50)" rx="2" ry="2" />
<text  x="557.58" y="1823.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringScanPartial (15,841,573 samples, 0.03%)</title><rect x="215.3" y="1589" width="0.4" height="15.0" fill="rgb(232,19,49)" rx="2" ry="2" />
<text  x="218.33" y="1599.5" ></text>
</g>
<g >
<title>duckdb::ExpressionHeuristics::~ExpressionHeuristics (17,340,175 samples, 0.03%)</title><rect x="735.5" y="1813" width="0.4" height="15.0" fill="rgb(214,111,37)" rx="2" ry="2" />
<text  x="738.50" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ifree (29,180,014 samples, 0.06%)</title><rect x="498.2" y="1445" width="0.7" height="15.0" fill="rgb(235,22,10)" rx="2" ry="2" />
<text  x="501.20" y="1455.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalDummyScan, std::default_delete&lt;duckdb::PhysicalDummyScan&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PhysicalDummyScan&gt;, void&gt; (5,399,549 samples, 0.01%)</title><rect x="908.6" y="1717" width="0.1" height="15.0" fill="rgb(227,60,10)" rx="2" ry="2" />
<text  x="911.61" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LikeOptimizationRule::~LikeOptimizationRule (12,115,192 samples, 0.02%)</title><rect x="832.5" y="1701" width="0.3" height="15.0" fill="rgb(207,74,37)" rx="2" ry="2" />
<text  x="835.54" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;::unique_ptr&lt;duckdb::InsertStatement, std::default_delete&lt;std::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt; &gt; &gt;, void&gt; (14,368,862 samples, 0.03%)</title><rect x="538.7" y="1845" width="0.3" height="15.0" fill="rgb(218,198,36)" rx="2" ry="2" />
<text  x="541.71" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::VectorCache, true&gt;::~vector (10,514,335 samples, 0.02%)</title><rect x="394.1" y="1861" width="0.3" height="15.0" fill="rgb(215,144,0)" rx="2" ry="2" />
<text  x="397.13" y="1871.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, duckdb::Executor*, std::default_delete&lt;duckdb::Executor&gt; &gt; (8,439,745 samples, 0.02%)</title><rect x="511.3" y="1845" width="0.2" height="15.0" fill="rgb(223,114,30)" rx="2" ry="2" />
<text  x="514.32" y="1855.5" ></text>
</g>
<g >
<title>__lru_cache_add (14,106,084 samples, 0.03%)</title><rect x="1139.1" y="1893" width="0.3" height="15.0" fill="rgb(240,89,0)" rx="2" ry="2" />
<text  x="1142.05" y="1903.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*&gt; (62,565,454 samples, 0.12%)</title><rect x="297.3" y="1653" width="1.5" height="15.0" fill="rgb(226,160,1)" rx="2" ry="2" />
<text  x="300.32" y="1663.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringSegmentState::~UncompressedStringSegmentState (22,676,398 samples, 0.04%)</title><rect x="238.5" y="725" width="0.6" height="15.0" fill="rgb(214,58,34)" rx="2" ry="2" />
<text  x="241.54" y="735.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::shared_ptr&lt;duckdb::LocalTableStorage&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt; &gt;::~unordered_map (8,281,877 samples, 0.02%)</title><rect x="327.3" y="1541" width="0.1" height="15.0" fill="rgb(218,19,28)" rx="2" ry="2" />
<text  x="330.25" y="1551.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::HTTPState&gt;::destroy&lt;duckdb::HTTPState&gt; (6,804,987 samples, 0.01%)</title><rect x="360.0" y="1781" width="0.1" height="15.0" fill="rgb(251,149,15)" rx="2" ry="2" />
<text  x="362.95" y="1791.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;::~pair (4,428,535 samples, 0.01%)</title><rect x="91.0" y="2021" width="0.1" height="15.0" fill="rgb(221,57,40)" rx="2" ry="2" />
<text  x="93.95" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Expression&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Expression&gt; &gt; &gt;::vector (7,107,815 samples, 0.01%)</title><rect x="739.9" y="1605" width="0.2" height="15.0" fill="rgb(249,65,47)" rx="2" ry="2" />
<text  x="742.91" y="1615.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, true&gt;::operator[] (5,342,968 samples, 0.01%)</title><rect x="469.5" y="1765" width="0.2" height="15.0" fill="rgb(211,180,24)" rx="2" ry="2" />
<text  x="472.53" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::ConstantExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (9,990,647 samples, 0.02%)</title><rect x="785.5" y="1845" width="0.3" height="15.0" fill="rgb(229,170,44)" rx="2" ry="2" />
<text  x="788.54" y="1855.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::InitializeScanWithOffset (42,872,390 samples, 0.08%)</title><rect x="300.0" y="1653" width="1.0" height="15.0" fill="rgb(213,74,33)" rx="2" ry="2" />
<text  x="302.97" y="1663.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::idalloctm (12,340,595 samples, 0.02%)</title><rect x="242.8" y="469" width="0.3" height="15.0" fill="rgb(232,74,48)" rx="2" ry="2" />
<text  x="245.81" y="479.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;::operator[] (5,252,923 samples, 0.01%)</title><rect x="643.2" y="1861" width="0.1" height="15.0" fill="rgb(240,207,46)" rx="2" ry="2" />
<text  x="646.19" y="1871.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionMatcher&gt;::operator (5,264,200 samples, 0.01%)</title><rect x="831.1" y="1637" width="0.1" height="15.0" fill="rgb(232,4,40)" rx="2" ry="2" />
<text  x="834.06" y="1647.5" ></text>
</g>
<g >
<title>duckdb::CommonTableExpressionMap::~CommonTableExpressionMap (5,769,414 samples, 0.01%)</title><rect x="1038.0" y="1813" width="0.2" height="15.0" fill="rgb(225,207,8)" rx="2" ry="2" />
<text  x="1041.04" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (23,001,892 samples, 0.04%)</title><rect x="218.5" y="1381" width="0.5" height="15.0" fill="rgb(249,99,39)" rx="2" ry="2" />
<text  x="221.48" y="1391.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::ColumnDataAllocator, std::allocator&lt;duckdb::ColumnDataAllocator&gt;,  (364,194,645 samples, 0.71%)</title><rect x="341.8" y="1285" width="8.4" height="15.0" fill="rgb(206,41,37)" rx="2" ry="2" />
<text  x="344.79" y="1295.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (5,325,467 samples, 0.01%)</title><rect x="634.4" y="1749" width="0.1" height="15.0" fill="rgb(221,53,23)" rx="2" ry="2" />
<text  x="637.35" y="1759.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::CommitAppend (5,995,617 samples, 0.01%)</title><rect x="254.6" y="1717" width="0.2" height="15.0" fill="rgb(217,2,36)" rx="2" ry="2" />
<text  x="257.62" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (58,943,359 samples, 0.11%)</title><rect x="239.6" y="565" width="1.3" height="15.0" fill="rgb(218,152,22)" rx="2" ry="2" />
<text  x="242.59" y="575.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (4,848,298 samples, 0.01%)</title><rect x="334.3" y="1269" width="0.1" height="15.0" fill="rgb(234,21,48)" rx="2" ry="2" />
<text  x="337.32" y="1279.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*&gt; (11,912,850 samples, 0.02%)</title><rect x="575.7" y="1749" width="0.2" height="15.0" fill="rgb(236,219,23)" rx="2" ry="2" />
<text  x="578.66" y="1759.5" ></text>
</g>
<g >
<title>duckdb::TableAppendState::TableAppendState (8,533,326 samples, 0.02%)</title><rect x="98.8" y="1749" width="0.1" height="15.0" fill="rgb(221,60,0)" rx="2" ry="2" />
<text  x="101.75" y="1759.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (4,468,174 samples, 0.01%)</title><rect x="614.2" y="1765" width="0.1" height="15.0" fill="rgb(216,189,49)" rx="2" ry="2" />
<text  x="617.21" y="1775.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::CompressedSegmentState&gt;::operator (25,764,124 samples, 0.05%)</title><rect x="238.5" y="741" width="0.6" height="15.0" fill="rgb(235,172,12)" rx="2" ry="2" />
<text  x="241.49" y="751.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt; &gt;::~unique_ptr (6,754,338 samples, 0.01%)</title><rect x="915.5" y="1573" width="0.2" height="15.0" fill="rgb(220,72,33)" rx="2" ry="2" />
<text  x="918.51" y="1583.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (4,769,172 samples, 0.01%)</title><rect x="991.5" y="1589" width="0.1" height="15.0" fill="rgb(240,117,40)" rx="2" ry="2" />
<text  x="994.51" y="1599.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (8,854,427 samples, 0.02%)</title><rect x="431.8" y="1685" width="0.2" height="15.0" fill="rgb(208,192,9)" rx="2" ry="2" />
<text  x="434.80" y="1695.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt; &gt; (11,257,429 samples, 0.02%)</title><rect x="629.6" y="1637" width="0.3" height="15.0" fill="rgb(233,38,4)" rx="2" ry="2" />
<text  x="632.63" y="1647.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ArenaChunk&gt;::operator (77,146,238 samples, 0.15%)</title><rect x="325.2" y="1557" width="1.7" height="15.0" fill="rgb(241,75,6)" rx="2" ry="2" />
<text  x="328.16" y="1567.5" ></text>
</g>
<g >
<title>std::function&lt;void  (6,011,623 samples, 0.01%)</title><rect x="1040.1" y="1893" width="0.2" height="15.0" fill="rgb(236,183,14)" rx="2" ry="2" />
<text  x="1043.14" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt; &gt;::~unique_ptr (14,107,297 samples, 0.03%)</title><rect x="641.0" y="1765" width="0.3" height="15.0" fill="rgb(217,169,13)" rx="2" ry="2" />
<text  x="644.01" y="1775.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::SelectionData&gt;::~shared_ptr (11,324,232 samples, 0.02%)</title><rect x="266.8" y="1653" width="0.3" height="15.0" fill="rgb(206,141,36)" rx="2" ry="2" />
<text  x="269.80" y="1663.5" ></text>
</g>
<g >
<title>duckdb::SingleFileStorageCommitState::~SingleFileStorageCommitState (5,277,793 samples, 0.01%)</title><rect x="318.4" y="1765" width="0.2" height="15.0" fill="rgb(239,174,33)" rx="2" ry="2" />
<text  x="321.43" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Catalog::LookupEntry (563,225,851 samples, 1.10%)</title><rect x="995.6" y="1781" width="12.9" height="15.0" fill="rgb(234,106,15)" rx="2" ry="2" />
<text  x="998.58" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (94,399,469 samples, 0.18%)</title><rect x="366.5" y="1653" width="2.2" height="15.0" fill="rgb(252,70,33)" rx="2" ry="2" />
<text  x="369.49" y="1663.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_deallocate (7,619,216 samples, 0.01%)</title><rect x="653.9" y="1717" width="0.2" height="15.0" fill="rgb(208,88,38)" rx="2" ry="2" />
<text  x="656.91" y="1727.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (7,506,227 samples, 0.01%)</title><rect x="703.7" y="1829" width="0.1" height="15.0" fill="rgb(239,107,2)" rx="2" ry="2" />
<text  x="706.65" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::StorageCommitState, std::default_delete&lt;duckdb::StorageCommitState&gt; &gt;::~unique_ptr (12,678,335 samples, 0.02%)</title><rect x="318.3" y="1797" width="0.3" height="15.0" fill="rgb(212,206,31)" rx="2" ry="2" />
<text  x="321.33" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_allocate_buckets (5,025,473 samples, 0.01%)</title><rect x="1101.0" y="1797" width="0.1" height="15.0" fill="rgb(243,228,33)" rx="2" ry="2" />
<text  x="1104.00" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::NodeStatistics, std::default_delete&lt;duckdb::NodeStatistics&gt; &gt;::get (4,541,584 samples, 0.01%)</title><rect x="767.3" y="1669" width="0.1" height="15.0" fill="rgb(212,174,20)" rx="2" ry="2" />
<text  x="770.28" y="1679.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::vector (11,842,893 samples, 0.02%)</title><rect x="946.2" y="1669" width="0.2" height="15.0" fill="rgb(206,72,51)" rx="2" ry="2" />
<text  x="949.15" y="1679.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (24,357,695 samples, 0.05%)</title><rect x="103.0" y="1525" width="0.6" height="15.0" fill="rgb(218,40,9)" rx="2" ry="2" />
<text  x="106.04" y="1535.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Pipeline&gt;::destroy&lt;duckdb::Pipeline&gt; (25,762,272 samples, 0.05%)</title><rect x="357.6" y="1669" width="0.6" height="15.0" fill="rgb(225,45,20)" rx="2" ry="2" />
<text  x="360.60" y="1679.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long const&amp;&gt; (4,723,255 samples, 0.01%)</title><rect x="695.1" y="1765" width="0.1" height="15.0" fill="rgb(215,187,17)" rx="2" ry="2" />
<text  x="698.06" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::MaterializedQueryResult, std::default_delete&lt;duckdb::MaterializedQueryResult&gt; &gt;::~unique_ptr (166,380,850 samples, 0.32%)</title><rect x="1121.3" y="1989" width="3.8" height="15.0" fill="rgb(250,108,40)" rx="2" ry="2" />
<text  x="1124.26" y="1999.5" ></text>
</g>
<g >
<title>duckdb::AttachedDatabase::GetCatalog (10,295,328 samples, 0.02%)</title><rect x="421.5" y="1749" width="0.2" height="15.0" fill="rgb(222,61,9)" rx="2" ry="2" />
<text  x="424.45" y="1759.5" ></text>
</g>
<g >
<title>duckdb::FilterPushdown::FilterPushdown (21,526,557 samples, 0.04%)</title><rect x="744.8" y="1813" width="0.5" height="15.0" fill="rgb(253,216,37)" rx="2" ry="2" />
<text  x="747.80" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (79,715,886 samples, 0.16%)</title><rect x="481.7" y="1461" width="1.9" height="15.0" fill="rgb(213,123,20)" rx="2" ry="2" />
<text  x="484.73" y="1471.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; (18,372,755 samples, 0.04%)</title><rect x="1036.4" y="1573" width="0.4" height="15.0" fill="rgb(217,193,49)" rx="2" ry="2" />
<text  x="1039.39" y="1583.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (5,946,249 samples, 0.01%)</title><rect x="975.7" y="1717" width="0.1" height="15.0" fill="rgb(205,126,0)" rx="2" ry="2" />
<text  x="978.70" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorMetaData, std::allocator&lt;duckdb::VectorMetaData&gt; &gt;::_S_do_relocate (8,760,194 samples, 0.02%)</title><rect x="864.3" y="1653" width="0.2" height="15.0" fill="rgb(219,41,52)" rx="2" ry="2" />
<text  x="867.26" y="1663.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (9,869,964 samples, 0.02%)</title><rect x="789.5" y="1797" width="0.2" height="15.0" fill="rgb(205,150,25)" rx="2" ry="2" />
<text  x="792.48" y="1807.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (14,799,077 samples, 0.03%)</title><rect x="248.0" y="1493" width="0.4" height="15.0" fill="rgb(224,148,20)" rx="2" ry="2" />
<text  x="251.02" y="1503.5" ></text>
</g>
<g >
<title>duckdb::BaseQueryResult::HasError (14,895,425 samples, 0.03%)</title><rect x="513.8" y="1909" width="0.4" height="15.0" fill="rgb(253,77,53)" rx="2" ry="2" />
<text  x="516.83" y="1919.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1557" width="0.3" height="15.0" fill="rgb(220,207,35)" rx="2" ry="2" />
<text  x="1120.47" y="1567.5" ></text>
</g>
<g >
<title>__fxstat (15,797,595 samples, 0.03%)</title><rect x="190.6" y="1749" width="0.3" height="15.0" fill="rgb(254,179,2)" rx="2" ry="2" />
<text  x="193.57" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::unique_ptr (5,135,919 samples, 0.01%)</title><rect x="1013.9" y="1813" width="0.1" height="15.0" fill="rgb(218,149,41)" rx="2" ry="2" />
<text  x="1016.88" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::EndQueryInternal (7,235,319,231 samples, 14.11%)</title><rect x="188.1" y="1893" width="166.4" height="15.0" fill="rgb(246,175,23)" rx="2" ry="2" />
<text  x="191.08" y="1903.5" >duckdb::ClientContext..</text>
</g>
<g >
<title>__x64_sys_futex (15,348,434 samples, 0.03%)</title><rect x="93.5" y="1621" width="0.4" height="15.0" fill="rgb(215,52,41)" rx="2" ry="2" />
<text  x="96.54" y="1631.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalInsert, std::default_delete&lt;duckdb::LogicalInsert&gt;, true&gt;::operator (5,583,183 samples, 0.01%)</title><rect x="1013.7" y="1829" width="0.1" height="15.0" fill="rgb(218,25,34)" rx="2" ry="2" />
<text  x="1016.69" y="1839.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::~SegmentTree (134,326,199 samples, 0.26%)</title><rect x="238.2" y="965" width="3.1" height="15.0" fill="rgb(210,98,23)" rx="2" ry="2" />
<text  x="241.22" y="975.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Unpin (58,906,720 samples, 0.11%)</title><rect x="870.3" y="1653" width="1.4" height="15.0" fill="rgb(220,101,14)" rx="2" ry="2" />
<text  x="873.30" y="1663.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::_M_ptr (8,422,949 samples, 0.02%)</title><rect x="571.8" y="1765" width="0.2" height="15.0" fill="rgb(247,42,13)" rx="2" ry="2" />
<text  x="574.80" y="1775.5" ></text>
</g>
<g >
<title>duckdb::JoinOrderOptimizer::~JoinOrderOptimizer (87,366,872 samples, 0.17%)</title><rect x="755.8" y="1781" width="2.0" height="15.0" fill="rgb(216,38,0)" rx="2" ry="2" />
<text  x="758.83" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Value::~Value (15,661,533 samples, 0.03%)</title><rect x="915.9" y="1429" width="0.4" height="15.0" fill="rgb(224,29,47)" rx="2" ry="2" />
<text  x="918.93" y="1439.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_next_grapheme (71,618,581 samples, 0.14%)</title><rect x="601.1" y="1749" width="1.7" height="15.0" fill="rgb(242,117,21)" rx="2" ry="2" />
<text  x="604.15" y="1759.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (4,506,919 samples, 0.01%)</title><rect x="669.9" y="1733" width="0.1" height="15.0" fill="rgb(246,47,34)" rx="2" ry="2" />
<text  x="672.91" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::_M_check_len (8,798,194 samples, 0.02%)</title><rect x="1080.0" y="1749" width="0.2" height="15.0" fill="rgb(220,59,15)" rx="2" ry="2" />
<text  x="1083.04" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ColumnLifetimeAnalyzer::~ColumnLifetimeAnalyzer (12,502,010 samples, 0.02%)</title><rect x="724.8" y="1749" width="0.3" height="15.0" fill="rgb(217,128,4)" rx="2" ry="2" />
<text  x="727.80" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (38,721,539 samples, 0.08%)</title><rect x="891.1" y="1429" width="0.9" height="15.0" fill="rgb(231,92,12)" rx="2" ry="2" />
<text  x="894.09" y="1439.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::VectorCache*, duckdb::VectorCache&gt; (100,091,365 samples, 0.20%)</title><rect x="481.5" y="1701" width="2.3" height="15.0" fill="rgb(230,193,33)" rx="2" ry="2" />
<text  x="484.46" y="1711.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (64,256,810 samples, 0.13%)</title><rect x="1130.3" y="2037" width="1.5" height="15.0" fill="rgb(237,7,13)" rx="2" ry="2" />
<text  x="1133.31" y="2047.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TableStatisticsLock, std::default_delete&lt;duckdb::TableStatisticsLock&gt; &gt;::~unique_ptr (5,524,005 samples, 0.01%)</title><rect x="463.6" y="1733" width="0.1" height="15.0" fill="rgb(209,31,38)" rx="2" ry="2" />
<text  x="466.62" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Vector::~Vector (20,479,122 samples, 0.04%)</title><rect x="895.3" y="1669" width="0.5" height="15.0" fill="rgb(215,92,44)" rx="2" ry="2" />
<text  x="898.32" y="1679.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, true&gt;::~vector (193,859,229 samples, 0.38%)</title><rect x="829.1" y="1861" width="4.4" height="15.0" fill="rgb(212,21,12)" rx="2" ry="2" />
<text  x="832.06" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt; (8,555,907 samples, 0.02%)</title><rect x="852.2" y="1765" width="0.2" height="15.0" fill="rgb(205,167,48)" rx="2" ry="2" />
<text  x="855.16" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt; &gt; &gt;::push_back (33,825,107 samples, 0.07%)</title><rect x="478.8" y="1765" width="0.8" height="15.0" fill="rgb(217,58,53)" rx="2" ry="2" />
<text  x="481.81" y="1775.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::ColumnData&gt; &gt; (275,160,640 samples, 0.54%)</title><rect x="237.9" y="1141" width="6.3" height="15.0" fill="rgb(217,167,4)" rx="2" ry="2" />
<text  x="240.90" y="1151.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::TaskScheduler, std::default_delete&lt;duckdb::TaskScheduler&gt; &gt;::_M_ptr (15,483,896 samples, 0.03%)</title><rect x="502.7" y="1813" width="0.4" height="15.0" fill="rgb(245,74,28)" rx="2" ry="2" />
<text  x="505.72" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::StorageCommitState, std::default_delete&lt;duckdb::StorageCommitState&gt;, true&gt;::unique_ptr&lt;duckdb::SingleFileStorageCommitState, std::default_delete&lt;std::unique_ptr&lt;duckdb::StorageCommitState, std::default_delete&lt;duckdb::StorageCommitState&gt; &gt; &gt;, void&gt; (12,123,589 samples, 0.02%)</title><rect x="253.5" y="1797" width="0.3" height="15.0" fill="rgb(240,121,45)" rx="2" ry="2" />
<text  x="256.51" y="1807.5" ></text>
</g>
<g >
<title>duckdb::UncompressedFunctions::Compress (4,715,471 samples, 0.01%)</title><rect x="1119.2" y="1029" width="0.1" height="15.0" fill="rgb(205,177,10)" rx="2" ry="2" />
<text  x="1122.18" y="1039.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (19,753,760 samples, 0.04%)</title><rect x="594.1" y="1781" width="0.4" height="15.0" fill="rgb(211,208,41)" rx="2" ry="2" />
<text  x="597.09" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Event::Finish (44,956,083 samples, 0.09%)</title><rect x="100.7" y="1781" width="1.0" height="15.0" fill="rgb(228,2,38)" rx="2" ry="2" />
<text  x="103.67" y="1791.5" ></text>
</g>
<g >
<title>duckdb::CompressionAppendState::~CompressionAppendState (13,580,054 samples, 0.03%)</title><rect x="339.2" y="1349" width="0.3" height="15.0" fill="rgb(248,217,18)" rx="2" ry="2" />
<text  x="342.24" y="1359.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (40,918,071 samples, 0.08%)</title><rect x="634.5" y="1749" width="0.9" height="15.0" fill="rgb(251,54,5)" rx="2" ry="2" />
<text  x="637.47" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int []&gt; &gt;::get (238,422,000 samples, 0.46%)</title><rect x="205.2" y="1493" width="5.5" height="15.0" fill="rgb(231,30,13)" rx="2" ry="2" />
<text  x="208.19" y="1503.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::idalloctm (110,834,974 samples, 0.22%)</title><rect x="346.0" y="821" width="2.6" height="15.0" fill="rgb(227,36,17)" rx="2" ry="2" />
<text  x="349.04" y="831.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::unordered_set (25,680,992 samples, 0.05%)</title><rect x="1100.7" y="1845" width="0.6" height="15.0" fill="rgb(233,91,1)" rx="2" ry="2" />
<text  x="1103.67" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Event*, true&gt;::~vector (5,628,486 samples, 0.01%)</title><rect x="356.8" y="1605" width="0.1" height="15.0" fill="rgb(207,67,23)" rx="2" ry="2" />
<text  x="359.78" y="1615.5" ></text>
</g>
<g >
<title>duckdb::ColumnStatistics::ColumnStatistics (49,078,232 samples, 0.10%)</title><rect x="426.2" y="1429" width="1.1" height="15.0" fill="rgb(253,83,4)" rx="2" ry="2" />
<text  x="429.20" y="1439.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::VectorCache (155,940,296 samples, 0.30%)</title><rect x="889.5" y="1749" width="3.6" height="15.0" fill="rgb(240,102,11)" rx="2" ry="2" />
<text  x="892.51" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::~unique_ptr (6,129,217 samples, 0.01%)</title><rect x="980.7" y="1621" width="0.1" height="15.0" fill="rgb(210,53,22)" rx="2" ry="2" />
<text  x="983.70" y="1631.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (56,856,618 samples, 0.11%)</title><rect x="297.4" y="1509" width="1.4" height="15.0" fill="rgb(221,56,37)" rx="2" ry="2" />
<text  x="300.45" y="1519.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperator (28,780,021 samples, 0.06%)</title><rect x="729.2" y="1701" width="0.6" height="15.0" fill="rgb(205,229,51)" rx="2" ry="2" />
<text  x="732.18" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (34,909,180 samples, 0.07%)</title><rect x="1016.6" y="1653" width="0.8" height="15.0" fill="rgb(218,53,49)" rx="2" ry="2" />
<text  x="1019.60" y="1663.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (126,539,881 samples, 0.25%)</title><rect x="889.8" y="1605" width="2.9" height="15.0" fill="rgb(229,94,30)" rx="2" ry="2" />
<text  x="892.82" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::get (5,418,033 samples, 0.01%)</title><rect x="826.6" y="1765" width="0.2" height="15.0" fill="rgb(251,151,8)" rx="2" ry="2" />
<text  x="829.63" y="1775.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;char, std::default_delete&lt;char []&gt; &gt;::__uniq_ptr_impl (5,186,554 samples, 0.01%)</title><rect x="522.6" y="1797" width="0.1" height="15.0" fill="rgb(240,194,35)" rx="2" ry="2" />
<text  x="525.61" y="1807.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;, unsigned long&amp;&gt; (16,551,371 samples, 0.03%)</title><rect x="296.4" y="1621" width="0.4" height="15.0" fill="rgb(226,88,4)" rx="2" ry="2" />
<text  x="299.44" y="1631.5" ></text>
</g>
<g >
<title>std::chrono::_V2::system_clock::now (5,175,632 samples, 0.01%)</title><rect x="715.6" y="1829" width="0.1" height="15.0" fill="rgb(235,184,1)" rx="2" ry="2" />
<text  x="718.60" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::push_back (8,241,348 samples, 0.02%)</title><rect x="969.6" y="1749" width="0.2" height="15.0" fill="rgb(241,86,38)" rx="2" ry="2" />
<text  x="972.64" y="1759.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_get_property (12,409,839 samples, 0.02%)</title><rect x="559.9" y="1749" width="0.3" height="15.0" fill="rgb(214,54,34)" rx="2" ry="2" />
<text  x="562.88" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CompressionFunctionSet, std::default_delete&lt;duckdb::CompressionFunctionSet&gt; &gt;::get (7,118,156 samples, 0.01%)</title><rect x="435.9" y="1637" width="0.2" height="15.0" fill="rgb(219,55,47)" rx="2" ry="2" />
<text  x="438.90" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnAppendState, std::allocator&lt;duckdb::ColumnAppendState&gt; &gt;::max_size (4,434,778 samples, 0.01%)</title><rect x="452.0" y="1653" width="0.1" height="15.0" fill="rgb(241,173,25)" rx="2" ry="2" />
<text  x="454.97" y="1663.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::BindExpression (249,710,591 samples, 0.49%)</title><rect x="950.4" y="1685" width="5.8" height="15.0" fill="rgb(230,6,1)" rx="2" ry="2" />
<text  x="953.42" y="1695.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (36,108,329 samples, 0.07%)</title><rect x="74.7" y="1925" width="0.8" height="15.0" fill="rgb(214,38,18)" rx="2" ry="2" />
<text  x="77.66" y="1935.5" ></text>
</g>
<g >
<title>duckdb::ColumnLifetimeAnalyzer::StandardVisitOperator (23,071,424 samples, 0.04%)</title><rect x="724.3" y="1733" width="0.5" height="15.0" fill="rgb(212,134,36)" rx="2" ry="2" />
<text  x="727.25" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::RenderWidth (44,244,270 samples, 0.09%)</title><rect x="560.2" y="1781" width="1.0" height="15.0" fill="rgb(243,31,14)" rx="2" ry="2" />
<text  x="563.17" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (4,976,010 samples, 0.01%)</title><rect x="1062.6" y="1781" width="0.1" height="15.0" fill="rgb(245,10,36)" rx="2" ry="2" />
<text  x="1065.60" y="1791.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,981,351 samples, 0.02%)</title><rect x="716.8" y="1829" width="0.2" height="15.0" fill="rgb(206,131,23)" rx="2" ry="2" />
<text  x="719.79" y="1839.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::SpecificExpressionTypeMatcher, duckdb::ExpressionType&gt; (4,740,777 samples, 0.01%)</title><rect x="799.0" y="1845" width="0.1" height="15.0" fill="rgb(210,124,40)" rx="2" ry="2" />
<text  x="801.97" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::begin (11,372,263 samples, 0.02%)</title><rect x="570.5" y="1749" width="0.2" height="15.0" fill="rgb(249,77,26)" rx="2" ry="2" />
<text  x="573.48" y="1759.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::~AllocatedData (71,222,584 samples, 0.14%)</title><rect x="333.6" y="1429" width="1.6" height="15.0" fill="rgb(206,12,40)" rx="2" ry="2" />
<text  x="336.60" y="1439.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::MetaPipeline, std::allocator&lt;duckdb::MetaPipeline&gt;,  (32,033,259 samples, 0.06%)</title><rect x="1080.9" y="1733" width="0.8" height="15.0" fill="rgb(226,35,39)" rx="2" ry="2" />
<text  x="1083.92" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (4,363,717 samples, 0.01%)</title><rect x="483.0" y="1333" width="0.1" height="15.0" fill="rgb(228,178,11)" rx="2" ry="2" />
<text  x="486.04" y="1343.5" ></text>
</g>
<g >
<title>vfs_write (62,642,770 samples, 0.12%)</title><rect x="247.5" y="1637" width="1.4" height="15.0" fill="rgb(234,10,53)" rx="2" ry="2" />
<text  x="250.47" y="1647.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ColumnStatistics&gt;::shared_ptr&lt;std::allocator&lt;duckdb::ColumnStatistics&gt;, duckdb::BaseStatistics&gt; (82,200,150 samples, 0.16%)</title><rect x="425.6" y="1525" width="1.9" height="15.0" fill="rgb(228,182,44)" rx="2" ry="2" />
<text  x="428.58" y="1535.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;, unsigned long, duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;, duckdb::ExpressionEquality&lt;duckdb::ParsedExpression&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt; &gt; &gt;::operator[] (58,885,067 samples, 0.11%)</title><rect x="967.3" y="1749" width="1.4" height="15.0" fill="rgb(222,94,12)" rx="2" ry="2" />
<text  x="970.32" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt; &gt;::allocate (8,873,092 samples, 0.02%)</title><rect x="732.8" y="1685" width="0.2" height="15.0" fill="rgb(238,204,23)" rx="2" ry="2" />
<text  x="735.79" y="1695.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt;, std::__detail::_Identity, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::clear (8,741,405 samples, 0.02%)</title><rect x="724.8" y="1701" width="0.2" height="15.0" fill="rgb(217,62,29)" rx="2" ry="2" />
<text  x="727.83" y="1711.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_get_property (21,327,955 samples, 0.04%)</title><rect x="602.3" y="1733" width="0.5" height="15.0" fill="rgb(220,49,10)" rx="2" ry="2" />
<text  x="605.30" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::iallocztm (5,149,684 samples, 0.01%)</title><rect x="890.7" y="1429" width="0.1" height="15.0" fill="rgb(210,29,16)" rx="2" ry="2" />
<text  x="893.66" y="1439.5" ></text>
</g>
<g >
<title>duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;::operator (15,964,275 samples, 0.03%)</title><rect x="956.5" y="1637" width="0.4" height="15.0" fill="rgb(248,26,40)" rx="2" ry="2" />
<text  x="959.48" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1189" width="0.1" height="15.0" fill="rgb(251,217,41)" rx="2" ry="2" />
<text  x="14.25" y="1199.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueueProducerToken, std::default_delete&lt;duckdb::QueueProducerToken&gt;, true&gt;::AssertNotNull (4,667,181 samples, 0.01%)</title><rect x="503.6" y="1861" width="0.1" height="15.0" fill="rgb(211,76,48)" rx="2" ry="2" />
<text  x="506.62" y="1871.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (71,691,651 samples, 0.14%)</title><rect x="221.3" y="1573" width="1.7" height="15.0" fill="rgb(235,105,40)" rx="2" ry="2" />
<text  x="224.32" y="1583.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (85,545,655 samples, 0.17%)</title><rect x="1122.9" y="1829" width="2.0" height="15.0" fill="rgb(250,61,41)" rx="2" ry="2" />
<text  x="1125.95" y="1839.5" ></text>
</g>
<g >
<title>duckdb::FieldReader::FieldReader (12,446,674 samples, 0.02%)</title><rect x="588.1" y="1845" width="0.3" height="15.0" fill="rgb(226,56,15)" rx="2" ry="2" />
<text  x="591.12" y="1855.5" ></text>
</g>
<g >
<title>duckdb::ExpressionRewriter::ExpressionRewriter (12,297,331 samples, 0.02%)</title><rect x="783.6" y="1877" width="0.3" height="15.0" fill="rgb(229,155,11)" rx="2" ry="2" />
<text  x="786.58" y="1887.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnAppendState&gt; (8,180,374 samples, 0.02%)</title><rect x="234.1" y="1605" width="0.2" height="15.0" fill="rgb(221,193,3)" rx="2" ry="2" />
<text  x="237.07" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::ToString[abi:cxx11] (307,343,386 samples, 0.60%)</title><rect x="634.3" y="1813" width="7.0" height="15.0" fill="rgb(252,51,36)" rx="2" ry="2" />
<text  x="637.26" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LocalSinkState, std::default_delete&lt;duckdb::LocalSinkState&gt; &gt;::reset (11,191,624 samples, 0.02%)</title><rect x="106.8" y="1765" width="0.3" height="15.0" fill="rgb(220,165,32)" rx="2" ry="2" />
<text  x="109.84" y="1775.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (6,196,018 samples, 0.01%)</title><rect x="616.1" y="1781" width="0.1" height="15.0" fill="rgb(251,59,4)" rx="2" ry="2" />
<text  x="619.08" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::Binding&gt;, void&gt; (8,657,322 samples, 0.02%)</title><rect x="930.5" y="1685" width="0.2" height="15.0" fill="rgb(207,189,13)" rx="2" ry="2" />
<text  x="933.45" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (18,120,938 samples, 0.04%)</title><rect x="107.3" y="1621" width="0.4" height="15.0" fill="rgb(253,142,15)" rx="2" ry="2" />
<text  x="110.29" y="1631.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::BoundConstantExpression, duckdb::Value&amp;&gt; (19,271,532 samples, 0.04%)</title><rect x="934.0" y="1653" width="0.5" height="15.0" fill="rgb(245,212,12)" rx="2" ry="2" />
<text  x="937.04" y="1663.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::end (10,428,748 samples, 0.02%)</title><rect x="674.9" y="1797" width="0.3" height="15.0" fill="rgb(226,80,37)" rx="2" ry="2" />
<text  x="677.93" y="1807.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt;::_M_ptr (10,469,386 samples, 0.02%)</title><rect x="514.6" y="1861" width="0.2" height="15.0" fill="rgb(246,97,23)" rx="2" ry="2" />
<text  x="517.58" y="1871.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (5,630,675 samples, 0.01%)</title><rect x="729.2" y="1637" width="0.1" height="15.0" fill="rgb(207,135,12)" rx="2" ry="2" />
<text  x="732.18" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (5,229,395 samples, 0.01%)</title><rect x="352.7" y="1637" width="0.1" height="15.0" fill="rgb(208,176,52)" rx="2" ry="2" />
<text  x="355.70" y="1647.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (971,794,209 samples, 1.89%)</title><rect x="1147.8" y="2037" width="22.3" height="15.0" fill="rgb(213,182,37)" rx="2" ry="2" />
<text  x="1150.75" y="2047.5" >_..</text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::emplace_back&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; (9,473,135 samples, 0.02%)</title><rect x="1085.6" y="1797" width="0.2" height="15.0" fill="rgb(254,207,24)" rx="2" ry="2" />
<text  x="1088.62" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::RenderWidth (25,837,532 samples, 0.05%)</title><rect x="602.8" y="1765" width="0.6" height="15.0" fill="rgb(223,1,25)" rx="2" ry="2" />
<text  x="605.79" y="1775.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*&gt; (89,272,199 samples, 0.17%)</title><rect x="333.4" y="1621" width="2.0" height="15.0" fill="rgb(215,166,46)" rx="2" ry="2" />
<text  x="336.39" y="1631.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;duckdb::Binding&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;duckdb::Binding&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4,398,424 samples, 0.01%)</title><rect x="1030.9" y="1717" width="0.1" height="15.0" fill="rgb(243,128,33)" rx="2" ry="2" />
<text  x="1033.94" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt; &gt; (29,613,576 samples, 0.06%)</title><rect x="1019.0" y="1797" width="0.7" height="15.0" fill="rgb(236,132,35)" rx="2" ry="2" />
<text  x="1022.00" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Pipeline&gt;::destroy&lt;duckdb::Pipeline&gt; (23,822,335 samples, 0.05%)</title><rect x="356.1" y="1525" width="0.5" height="15.0" fill="rgb(222,111,37)" rx="2" ry="2" />
<text  x="359.09" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_do_relocate (23,262,041 samples, 0.05%)</title><rect x="1074.2" y="1685" width="0.6" height="15.0" fill="rgb(242,99,14)" rx="2" ry="2" />
<text  x="1077.25" y="1695.5" ></text>
</g>
<g >
<title>std::_Sp_counted_deleter&lt;duckdb::PipelineTask*, std::default_delete&lt;duckdb::PipelineTask&gt;, std::allocator&lt;void&gt;,  (7,569,938 samples, 0.01%)</title><rect x="508.7" y="1829" width="0.2" height="15.0" fill="rgb(216,139,25)" rx="2" ry="2" />
<text  x="511.74" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable (10,184,025 samples, 0.02%)</title><rect x="885.4" y="1621" width="0.3" height="15.0" fill="rgb(230,43,15)" rx="2" ry="2" />
<text  x="888.45" y="1631.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (13,579,377 samples, 0.03%)</title><rect x="95.3" y="1701" width="0.3" height="15.0" fill="rgb(228,163,48)" rx="2" ry="2" />
<text  x="98.30" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt;, std::__detail::_Identity, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (11,852,487 samples, 0.02%)</title><rect x="724.8" y="1717" width="0.3" height="15.0" fill="rgb(235,179,6)" rx="2" ry="2" />
<text  x="727.81" y="1727.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::scanner_init (26,697,429 samples, 0.05%)</title><rect x="524.2" y="1877" width="0.6" height="15.0" fill="rgb(247,178,54)" rx="2" ry="2" />
<text  x="527.20" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ClientLockWrapper, std::allocator&lt;duckdb::ClientLockWrapper&gt; &gt;::~vector (10,715,413 samples, 0.02%)</title><rect x="330.0" y="1813" width="0.2" height="15.0" fill="rgb(231,224,16)" rx="2" ry="2" />
<text  x="332.96" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CompressedSegmentState, std::default_delete&lt;duckdb::CompressedSegmentState&gt; &gt;::reset (4,996,124 samples, 0.01%)</title><rect x="445.7" y="1605" width="0.1" height="15.0" fill="rgb(254,28,47)" rx="2" ry="2" />
<text  x="448.68" y="1615.5" ></text>
</g>
<g >
<title>duckdb::FillExtraInfo&lt;duckdb::CreateScalarFunctionInfo&gt; (7,985,836 samples, 0.02%)</title><rect x="1115.9" y="1909" width="0.2" height="15.0" fill="rgb(214,75,22)" rx="2" ry="2" />
<text  x="1118.93" y="1919.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::QueueProducerToken*, std::default_delete&lt;duckdb::QueueProducerToken&gt; &gt; (9,371,281 samples, 0.02%)</title><rect x="503.9" y="1813" width="0.3" height="15.0" fill="rgb(209,90,29)" rx="2" ry="2" />
<text  x="506.93" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::Execute (220,517,120 samples, 0.43%)</title><rect x="898.2" y="1749" width="5.1" height="15.0" fill="rgb(227,49,20)" rx="2" ry="2" />
<text  x="901.25" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Executor, std::default_delete&lt;duckdb::Executor&gt;, true&gt;::operator= (8,140,614 samples, 0.02%)</title><rect x="1102.5" y="1893" width="0.2" height="15.0" fill="rgb(244,129,34)" rx="2" ry="2" />
<text  x="1105.46" y="1903.5" ></text>
</g>
<g >
<title>duckdb::ValidityMask::~ValidityMask (10,826,048 samples, 0.02%)</title><rect x="374.7" y="1797" width="0.3" height="15.0" fill="rgb(244,8,52)" rx="2" ry="2" />
<text  x="377.72" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::emplace&lt;std::pair&lt;duckdb::DataTable&amp;, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt; (40,153,798 samples, 0.08%)</title><rect x="431.5" y="1733" width="1.0" height="15.0" fill="rgb(243,59,47)" rx="2" ry="2" />
<text  x="434.53" y="1743.5" ></text>
</g>
<g >
<title>duckdb::DatabaseManager::GetSystemCatalog (6,946,354 samples, 0.01%)</title><rect x="542.9" y="1845" width="0.2" height="15.0" fill="rgb(209,24,25)" rx="2" ry="2" />
<text  x="545.89" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="229" width="0.1" height="15.0" fill="rgb(208,81,54)" rx="2" ry="2" />
<text  x="14.25" y="239.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityData&lt;unsigned long&gt;::TemplatedValidityData (31,280,186 samples, 0.06%)</title><rect x="899.9" y="1477" width="0.8" height="15.0" fill="rgb(213,143,10)" rx="2" ry="2" />
<text  x="902.93" y="1487.5" ></text>
</g>
<g >
<title>duckdb::DictionaryAnalyzeState::AddNewString (7,433,804 samples, 0.01%)</title><rect x="1117.9" y="981" width="0.2" height="15.0" fill="rgb(219,58,50)" rx="2" ry="2" />
<text  x="1120.91" y="991.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionState&gt;::operator (16,104,834 samples, 0.03%)</title><rect x="906.7" y="1557" width="0.4" height="15.0" fill="rgb(213,49,8)" rx="2" ry="2" />
<text  x="909.72" y="1567.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::size_approx (6,834,835 samples, 0.01%)</title><rect x="343.7" y="949" width="0.2" height="15.0" fill="rgb(216,227,13)" rx="2" ry="2" />
<text  x="346.73" y="959.5" ></text>
</g>
<g >
<title>duckdb::BindContext::CreateColumnReference (57,717,410 samples, 0.11%)</title><rect x="958.3" y="1669" width="1.3" height="15.0" fill="rgb(221,186,19)" rx="2" ry="2" />
<text  x="961.31" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalInsert, std::default_delete&lt;duckdb::PhysicalInsert&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PhysicalInsert&gt;, void&gt; (9,791,194 samples, 0.02%)</title><rect x="857.1" y="1813" width="0.2" height="15.0" fill="rgb(217,18,40)" rx="2" ry="2" />
<text  x="860.05" y="1823.5" ></text>
</g>
<g >
<title>duckdb::PostgresParser::~PostgresParser (5,072,809 samples, 0.01%)</title><rect x="524.9" y="1925" width="0.1" height="15.0" fill="rgb(234,160,20)" rx="2" ry="2" />
<text  x="527.90" y="1935.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (7,152,695 samples, 0.01%)</title><rect x="222.2" y="1349" width="0.1" height="15.0" fill="rgb(237,221,5)" rx="2" ry="2" />
<text  x="225.16" y="1359.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::~TemplatedValidityMask (7,382,290 samples, 0.01%)</title><rect x="895.3" y="1637" width="0.2" height="15.0" fill="rgb(222,99,6)" rx="2" ry="2" />
<text  x="898.33" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;::~unique_ptr (446,344,109 samples, 0.87%)</title><rect x="339.9" y="1493" width="10.3" height="15.0" fill="rgb(243,55,43)" rx="2" ry="2" />
<text  x="342.93" y="1503.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (94,791,442 samples, 0.18%)</title><rect x="762.5" y="1733" width="2.2" height="15.0" fill="rgb(208,80,31)" rx="2" ry="2" />
<text  x="765.49" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; &gt;::~vector (28,317,645 samples, 0.06%)</title><rect x="483.9" y="1717" width="0.7" height="15.0" fill="rgb(240,56,9)" rx="2" ry="2" />
<text  x="486.91" y="1727.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Binder&gt; &gt;::destroy&lt;duckdb::Binder&gt; (103,848,140 samples, 0.20%)</title><rect x="1016.3" y="1749" width="2.4" height="15.0" fill="rgb(249,53,12)" rx="2" ry="2" />
<text  x="1019.26" y="1759.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::Get (4,888,344 samples, 0.01%)</title><rect x="480.6" y="1813" width="0.1" height="15.0" fill="rgb(242,52,6)" rx="2" ry="2" />
<text  x="483.62" y="1823.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::WriteData (4,586,729 samples, 0.01%)</title><rect x="593.3" y="1829" width="0.1" height="15.0" fill="rgb(209,186,37)" rx="2" ry="2" />
<text  x="596.26" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (295,630,226 samples, 0.58%)</title><rect x="689.0" y="1797" width="6.8" height="15.0" fill="rgb(211,82,24)" rx="2" ry="2" />
<text  x="691.99" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::Append (37,844,125 samples, 0.07%)</title><rect x="461.5" y="1669" width="0.9" height="15.0" fill="rgb(228,28,11)" rx="2" ry="2" />
<text  x="464.54" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc (11,322,415 samples, 0.02%)</title><rect x="325.7" y="1365" width="0.2" height="15.0" fill="rgb(229,118,34)" rx="2" ry="2" />
<text  x="328.68" y="1375.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::VectorCache*, duckdb::VectorCache&gt; (5,646,698 samples, 0.01%)</title><rect x="106.9" y="1653" width="0.1" height="15.0" fill="rgb(210,103,30)" rx="2" ry="2" />
<text  x="109.87" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (4,629,750 samples, 0.01%)</title><rect x="1038.8" y="1621" width="0.1" height="15.0" fill="rgb(219,163,19)" rx="2" ry="2" />
<text  x="1041.84" y="1631.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::SplitUpExtraInfo (96,168,756 samples, 0.19%)</title><rect x="612.5" y="1781" width="2.2" height="15.0" fill="rgb(247,60,53)" rx="2" ry="2" />
<text  x="615.48" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (34,425,635 samples, 0.07%)</title><rect x="499.8" y="1717" width="0.8" height="15.0" fill="rgb(244,163,46)" rx="2" ry="2" />
<text  x="502.78" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PendingQueryResult, std::default_delete&lt;duckdb::PendingQueryResult&gt;, true&gt;::~unique_ptr (26,891,211 samples, 0.05%)</title><rect x="1106.8" y="1973" width="0.6" height="15.0" fill="rgb(253,217,7)" rx="2" ry="2" />
<text  x="1109.78" y="1983.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (4,628,200 samples, 0.01%)</title><rect x="1031.2" y="1717" width="0.1" height="15.0" fill="rgb(219,102,9)" rx="2" ry="2" />
<text  x="1034.19" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ConjunctionExpressionMatcher::~ConjunctionExpressionMatcher (5,939,808 samples, 0.01%)</title><rect x="830.6" y="1621" width="0.2" height="15.0" fill="rgb(213,71,20)" rx="2" ry="2" />
<text  x="833.62" y="1631.5" ></text>
</g>
<g >
<title>duckdb::BlockHandle::Load (4,422,192 samples, 0.01%)</title><rect x="212.8" y="1573" width="0.1" height="15.0" fill="rgb(249,117,14)" rx="2" ry="2" />
<text  x="215.80" y="1583.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::BufferHandle, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt; &gt;::~unordered_map (8,427,890 samples, 0.02%)</title><rect x="356.1" y="1381" width="0.2" height="15.0" fill="rgb(232,176,23)" rx="2" ry="2" />
<text  x="359.14" y="1391.5" ></text>
</g>
<g >
<title>duckdb::BoundColumnRefExpression::BoundColumnRefExpression (10,356,147 samples, 0.02%)</title><rect x="587.1" y="1813" width="0.2" height="15.0" fill="rgb(207,49,3)" rx="2" ry="2" />
<text  x="590.06" y="1823.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::InterruptDoneSignalState,  (18,523,307 samples, 0.04%)</title><rect x="364.8" y="1829" width="0.4" height="15.0" fill="rgb(218,23,3)" rx="2" ry="2" />
<text  x="367.76" y="1839.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, unsigned long&amp;&gt; (34,179,803 samples, 0.07%)</title><rect x="362.9" y="1749" width="0.8" height="15.0" fill="rgb(240,109,36)" rx="2" ry="2" />
<text  x="365.89" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Deserializer::Read&lt;duckdb::ExpressionClass&gt; (6,103,173 samples, 0.01%)</title><rect x="588.5" y="1829" width="0.2" height="15.0" fill="rgb(247,182,34)" rx="2" ry="2" />
<text  x="591.54" y="1839.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::Scan (314,154,038 samples, 0.61%)</title><rect x="469.2" y="1797" width="7.2" height="15.0" fill="rgb(235,80,39)" rx="2" ry="2" />
<text  x="472.19" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Rule&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; &gt;::empty (4,474,007 samples, 0.01%)</title><rect x="737.2" y="1701" width="0.1" height="15.0" fill="rgb(225,202,39)" rx="2" ry="2" />
<text  x="740.16" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt;::~unique_ptr (10,325,743 samples, 0.02%)</title><rect x="829.6" y="1573" width="0.3" height="15.0" fill="rgb(226,75,7)" rx="2" ry="2" />
<text  x="832.63" y="1583.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutorState::~ExpressionExecutorState (23,446,940 samples, 0.05%)</title><rect x="484.0" y="1589" width="0.5" height="15.0" fill="rgb(242,159,1)" rx="2" ry="2" />
<text  x="486.98" y="1599.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::NeighborInfo, std::default_delete&lt;duckdb::NeighborInfo&gt;, true&gt;, true&gt;::~vector (4,731,586 samples, 0.01%)</title><rect x="756.4" y="1733" width="0.1" height="15.0" fill="rgb(207,9,34)" rx="2" ry="2" />
<text  x="759.36" y="1743.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::reference_wrapper&lt;duckdb::ViewCatalogEntry&gt;, duckdb::ReferenceHashFunction&lt;duckdb::ViewCatalogEntry&gt;, duckdb::ReferenceEquality&lt;duckdb::ViewCatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::ViewCatalogEntry&gt; &gt; &gt;::~unordered_set (5,916,152 samples, 0.01%)</title><rect x="1018.4" y="1701" width="0.2" height="15.0" fill="rgb(212,204,35)" rx="2" ry="2" />
<text  x="1021.43" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_relocate (77,380,334 samples, 0.15%)</title><rect x="609.6" y="1733" width="1.8" height="15.0" fill="rgb(224,224,33)" rx="2" ry="2" />
<text  x="612.63" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (23,316,246 samples, 0.05%)</title><rect x="775.9" y="1765" width="0.5" height="15.0" fill="rgb(230,43,8)" rx="2" ry="2" />
<text  x="778.88" y="1775.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::WriteField&lt;duckdb::ExpressionClass&gt; (4,586,729 samples, 0.01%)</title><rect x="593.3" y="1845" width="0.1" height="15.0" fill="rgb(211,207,13)" rx="2" ry="2" />
<text  x="596.26" y="1855.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::RowIsValid (123,836,292 samples, 0.24%)</title><rect x="283.4" y="1557" width="2.8" height="15.0" fill="rgb(239,75,27)" rx="2" ry="2" />
<text  x="286.35" y="1567.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (12,386,722 samples, 0.02%)</title><rect x="921.8" y="1797" width="0.3" height="15.0" fill="rgb(223,47,25)" rx="2" ry="2" />
<text  x="924.77" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_dalloc_small (9,103,425 samples, 0.02%)</title><rect x="325.7" y="1349" width="0.2" height="15.0" fill="rgb(221,131,30)" rx="2" ry="2" />
<text  x="328.73" y="1359.5" ></text>
</g>
<g >
<title>duckdb::StringScanState::~StringScanState (4,401,856 samples, 0.01%)</title><rect x="287.7" y="1557" width="0.1" height="15.0" fill="rgb(232,119,47)" rx="2" ry="2" />
<text  x="290.69" y="1567.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::SwizzleMetaData, std::allocator&lt;duckdb::SwizzleMetaData&gt; &gt;::vector (4,441,549 samples, 0.01%)</title><rect x="882.9" y="1685" width="0.1" height="15.0" fill="rgb(244,183,16)" rx="2" ry="2" />
<text  x="885.93" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Expression::~Expression (11,240,512 samples, 0.02%)</title><rect x="642.7" y="1781" width="0.3" height="15.0" fill="rgb(224,167,23)" rx="2" ry="2" />
<text  x="645.74" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (13,040,259 samples, 0.03%)</title><rect x="757.5" y="1749" width="0.3" height="15.0" fill="rgb(232,55,36)" rx="2" ry="2" />
<text  x="760.46" y="1759.5" ></text>
</g>
<g >
<title>std::chrono::__duration_cast_impl&lt;std::chrono::duration&lt;double, std::ratio&lt;1l, 1l&gt; &gt;, std::ratio&lt;1l, 1000000000l&gt;, double, true, false&gt;::__cast&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; (7,606,908 samples, 0.01%)</title><rect x="714.7" y="1813" width="0.2" height="15.0" fill="rgb(209,169,28)" rx="2" ry="2" />
<text  x="717.68" y="1823.5" ></text>
</g>
<g >
<title>std::_Construct&lt;duckdb::ScalarFunction, duckdb::ScalarFunction const&amp;&gt; (6,378,611 samples, 0.01%)</title><rect x="1114.8" y="1717" width="0.2" height="15.0" fill="rgb(239,35,45)" rx="2" ry="2" />
<text  x="1117.81" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt; &gt;::reset (246,322,637 samples, 0.48%)</title><rect x="344.1" y="965" width="5.7" height="15.0" fill="rgb(207,77,43)" rx="2" ry="2" />
<text  x="347.10" y="975.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Free (61,193,637 samples, 0.12%)</title><rect x="333.7" y="1381" width="1.4" height="15.0" fill="rgb(252,124,27)" rx="2" ry="2" />
<text  x="336.67" y="1391.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::ExpressionBinder (45,238,753 samples, 0.09%)</title><rect x="936.0" y="1717" width="1.1" height="15.0" fill="rgb(229,209,8)" rx="2" ry="2" />
<text  x="939.02" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::large_palloc (122,149,663 samples, 0.24%)</title><rect x="875.2" y="1365" width="2.8" height="15.0" fill="rgb(224,119,35)" rx="2" ry="2" />
<text  x="878.17" y="1375.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnDataCopyFunction, std::allocator&lt;duckdb::ColumnDataCopyFunction&gt; &gt;::~vector (4,657,413 samples, 0.01%)</title><rect x="910.3" y="1685" width="0.1" height="15.0" fill="rgb(214,192,18)" rx="2" ry="2" />
<text  x="913.26" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (17,712,243 samples, 0.03%)</title><rect x="11.3" y="1973" width="0.4" height="15.0" fill="rgb(246,64,19)" rx="2" ry="2" />
<text  x="14.25" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Event*, std::allocator&lt;duckdb::Event*&gt; &gt;::max_size (6,526,111 samples, 0.01%)</title><rect x="1046.7" y="1733" width="0.2" height="15.0" fill="rgb(238,101,4)" rx="2" ry="2" />
<text  x="1049.71" y="1743.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::SelectionData&gt;::~shared_ptr (15,611,107 samples, 0.03%)</title><rect x="211.9" y="1669" width="0.3" height="15.0" fill="rgb(216,229,6)" rx="2" ry="2" />
<text  x="214.86" y="1679.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::HTTPState&gt;::shared_ptr&lt;std::allocator&lt;duckdb::HTTPState&gt;&gt; (10,291,689 samples, 0.02%)</title><rect x="1040.3" y="1861" width="0.2" height="15.0" fill="rgb(227,187,52)" rx="2" ry="2" />
<text  x="1043.28" y="1871.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::SelectionData,  (14,820,100 samples, 0.03%)</title><rect x="211.9" y="1653" width="0.3" height="15.0" fill="rgb(205,207,3)" rx="2" ry="2" />
<text  x="214.87" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::AllocatorDebugInfo, std::default_delete&lt;duckdb::AllocatorDebugInfo&gt;, true&gt;::operator= (7,484,032 samples, 0.01%)</title><rect x="376.9" y="1813" width="0.2" height="15.0" fill="rgb(210,188,14)" rx="2" ry="2" />
<text  x="379.91" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ScalarFunctionCatalogEntry::~ScalarFunctionCatalogEntry (4,658,297 samples, 0.01%)</title><rect x="1117.6" y="709" width="0.1" height="15.0" fill="rgb(222,74,32)" rx="2" ry="2" />
<text  x="1120.63" y="719.5" ></text>
</g>
<g >
<title>duckdb::ExpressionState::~ExpressionState (15,465,649 samples, 0.03%)</title><rect x="906.7" y="1541" width="0.4" height="15.0" fill="rgb(208,188,2)" rx="2" ry="2" />
<text  x="909.73" y="1551.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_check_len (52,308,332 samples, 0.10%)</title><rect x="567.0" y="1749" width="1.2" height="15.0" fill="rgb(231,214,9)" rx="2" ry="2" />
<text  x="569.99" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Executor, std::default_delete&lt;duckdb::Executor&gt; &gt;::get (19,077,608 samples, 0.04%)</title><rect x="511.1" y="1893" width="0.5" height="15.0" fill="rgb(235,60,26)" rx="2" ry="2" />
<text  x="514.14" y="1903.5" ></text>
</g>
<g >
<title>deactivate_task (21,382,388 samples, 0.04%)</title><rect x="74.8" y="1877" width="0.5" height="15.0" fill="rgb(206,133,48)" rx="2" ry="2" />
<text  x="77.77" y="1887.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ifree (44,053,286 samples, 0.09%)</title><rect x="239.6" y="501" width="1.1" height="15.0" fill="rgb(229,89,47)" rx="2" ry="2" />
<text  x="242.65" y="511.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::BlockHandle, std::allocator&lt;duckdb::BlockHandle&gt;,  (28,325,552 samples, 0.06%)</title><rect x="441.2" y="1573" width="0.6" height="15.0" fill="rgb(250,184,33)" rx="2" ry="2" />
<text  x="444.19" y="1583.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::SetThreads (5,407,272 samples, 0.01%)</title><rect x="1117.2" y="1973" width="0.1" height="15.0" fill="rgb(218,79,11)" rx="2" ry="2" />
<text  x="1120.20" y="1983.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::unique_ptr (4,712,178 samples, 0.01%)</title><rect x="749.3" y="1765" width="0.1" height="15.0" fill="rgb(207,182,19)" rx="2" ry="2" />
<text  x="752.26" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt; &gt;::construct&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, unsigned long&amp;&gt; (34,012,216 samples, 0.07%)</title><rect x="899.9" y="1509" width="0.8" height="15.0" fill="rgb(209,62,42)" rx="2" ry="2" />
<text  x="902.90" y="1519.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::construct&lt;unsigned long, unsigned long const&amp;&gt; (12,911,845 samples, 0.03%)</title><rect x="693.8" y="1733" width="0.3" height="15.0" fill="rgb(233,176,50)" rx="2" ry="2" />
<text  x="696.81" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;, duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt; &gt; (7,326,109 samples, 0.01%)</title><rect x="532.1" y="1701" width="0.1" height="15.0" fill="rgb(243,131,30)" rx="2" ry="2" />
<text  x="535.06" y="1711.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (61,499,618 samples, 0.12%)</title><rect x="289.2" y="1589" width="1.4" height="15.0" fill="rgb(213,70,32)" rx="2" ry="2" />
<text  x="292.20" y="1599.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (7,248,867 samples, 0.01%)</title><rect x="243.1" y="421" width="0.2" height="15.0" fill="rgb(254,8,9)" rx="2" ry="2" />
<text  x="246.15" y="431.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ColumnDataAllocator,  (20,724,057 samples, 0.04%)</title><rect x="911.6" y="1701" width="0.5" height="15.0" fill="rgb(246,16,7)" rx="2" ry="2" />
<text  x="914.59" y="1711.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::~RenderTree (20,656,556 samples, 0.04%)</title><rect x="620.0" y="1765" width="0.4" height="15.0" fill="rgb(232,200,28)" rx="2" ry="2" />
<text  x="622.96" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Executor, std::default_delete&lt;duckdb::Executor&gt; &gt;::~unique_ptr (176,420,842 samples, 0.34%)</title><rect x="333.2" y="1797" width="4.1" height="15.0" fill="rgb(217,62,16)" rx="2" ry="2" />
<text  x="336.23" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt; &gt;::get (4,818,288 samples, 0.01%)</title><rect x="300.3" y="1557" width="0.1" height="15.0" fill="rgb(238,226,1)" rx="2" ry="2" />
<text  x="303.33" y="1567.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::SelectionData,  (483,174,461 samples, 0.94%)</title><rect x="200.5" y="1605" width="11.1" height="15.0" fill="rgb(230,28,1)" rx="2" ry="2" />
<text  x="203.48" y="1615.5" ></text>
</g>
<g >
<title>clear_page_rep (14,778,903 samples, 0.03%)</title><rect x="73.2" y="1813" width="0.3" height="15.0" fill="rgb(243,150,35)" rx="2" ry="2" />
<text  x="76.20" y="1823.5" ></text>
</g>
<g >
<title>duckdb::CheckTreeDepth (8,992,555 samples, 0.02%)</title><rect x="1022.6" y="1861" width="0.2" height="15.0" fill="rgb(245,199,42)" rx="2" ry="2" />
<text  x="1025.64" y="1871.5" ></text>
</g>
<g >
<title>duckdb::make_unsafe_uniq_array&lt;unsigned char&gt; (5,572,524 samples, 0.01%)</title><rect x="313.5" y="1573" width="0.2" height="15.0" fill="rgb(208,206,52)" rx="2" ry="2" />
<text  x="316.53" y="1583.5" ></text>
</g>
<g >
<title>duckdb::VirtualFileSystem::Write (72,995,548 samples, 0.14%)</title><rect x="247.3" y="1749" width="1.7" height="15.0" fill="rgb(219,164,30)" rx="2" ry="2" />
<text  x="250.27" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::OrderByNode, true&gt;::~vector (8,974,746 samples, 0.02%)</title><rect x="527.2" y="1749" width="0.2" height="15.0" fill="rgb(248,119,53)" rx="2" ry="2" />
<text  x="530.20" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt; &gt;::_M_deallocate_node (7,527,361 samples, 0.01%)</title><rect x="1017.0" y="1413" width="0.2" height="15.0" fill="rgb(205,18,38)" rx="2" ry="2" />
<text  x="1020.01" y="1423.5" ></text>
</g>
<g >
<title>do_syscall_64 (66,305,967 samples, 0.13%)</title><rect x="247.4" y="1685" width="1.5" height="15.0" fill="rgb(233,16,6)" rx="2" ry="2" />
<text  x="250.41" y="1695.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::InitializeScanWithOffset (46,377,044 samples, 0.09%)</title><rect x="300.0" y="1669" width="1.0" height="15.0" fill="rgb(230,45,20)" rx="2" ry="2" />
<text  x="302.97" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (6,307,107 samples, 0.01%)</title><rect x="780.6" y="1829" width="0.2" height="15.0" fill="rgb(250,48,54)" rx="2" ry="2" />
<text  x="783.63" y="1839.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::GetSegment (16,422,992 samples, 0.03%)</title><rect x="254.8" y="1717" width="0.3" height="15.0" fill="rgb(209,171,1)" rx="2" ry="2" />
<text  x="257.76" y="1727.5" ></text>
</g>
<g >
<title>duckdb::CollectionScanState::~CollectionScanState (43,576,102 samples, 0.08%)</title><rect x="287.7" y="1685" width="1.0" height="15.0" fill="rgb(245,36,43)" rx="2" ry="2" />
<text  x="290.66" y="1695.5" ></text>
</g>
<g >
<title>duckdb::BoundColumnRefExpression::ToString[abi:cxx11] (7,387,890 samples, 0.01%)</title><rect x="584.4" y="1861" width="0.2" height="15.0" fill="rgb(229,229,11)" rx="2" ry="2" />
<text  x="587.38" y="1871.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::pair&lt;unsigned long, unsigned long&gt;*, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (17,550,478 samples, 0.03%)</title><rect x="1074.3" y="1669" width="0.4" height="15.0" fill="rgb(246,65,44)" rx="2" ry="2" />
<text  x="1077.32" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (23,637,570 samples, 0.05%)</title><rect x="103.0" y="1477" width="0.6" height="15.0" fill="rgb(207,101,49)" rx="2" ry="2" />
<text  x="106.04" y="1487.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;*&gt; (187,942,455 samples, 0.37%)</title><rect x="829.1" y="1797" width="4.3" height="15.0" fill="rgb(219,59,17)" rx="2" ry="2" />
<text  x="832.11" y="1807.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (47,061,999 samples, 0.09%)</title><rect x="74.5" y="2005" width="1.1" height="15.0" fill="rgb(250,51,38)" rx="2" ry="2" />
<text  x="77.53" y="2015.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionState, std::default_delete&lt;duckdb::ExpressionState&gt;, true&gt;::~unique_ptr (22,658,734 samples, 0.04%)</title><rect x="484.0" y="1573" width="0.5" height="15.0" fill="rgb(205,129,53)" rx="2" ry="2" />
<text  x="487.00" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::ExpressionBinder&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::ExpressionBinder&gt; &gt; &gt;::max_size (4,387,772 samples, 0.01%)</title><rect x="936.5" y="1621" width="0.1" height="15.0" fill="rgb(228,12,35)" rx="2" ry="2" />
<text  x="939.52" y="1631.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::EvictBlocksOrThrow&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (13,496,970 samples, 0.03%)</title><rect x="439.6" y="1653" width="0.3" height="15.0" fill="rgb(222,156,27)" rx="2" ry="2" />
<text  x="442.58" y="1663.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt; &gt;::construct&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;, duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt; &gt; (7,326,109 samples, 0.01%)</title><rect x="532.1" y="1685" width="0.1" height="15.0" fill="rgb(234,73,1)" rx="2" ry="2" />
<text  x="535.06" y="1695.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::Destroy (64,011,934 samples, 0.12%)</title><rect x="870.3" y="1669" width="1.5" height="15.0" fill="rgb(232,18,44)" rx="2" ry="2" />
<text  x="873.28" y="1679.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::Binding, duckdb::BindingType, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt; const&amp;, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; const&amp;, unsigned long&amp;&gt; (116,955,611 samples, 0.23%)</title><rect x="929.0" y="1717" width="2.7" height="15.0" fill="rgb(230,184,22)" rx="2" ry="2" />
<text  x="932.00" y="1727.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (5,134,723 samples, 0.01%)</title><rect x="840.2" y="1781" width="0.1" height="15.0" fill="rgb(207,86,49)" rx="2" ry="2" />
<text  x="843.22" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_realloc_insert&lt;unsigned long&amp;, unsigned long&amp;&gt; (78,771,042 samples, 0.15%)</title><rect x="1073.0" y="1717" width="1.9" height="15.0" fill="rgb(212,77,42)" rx="2" ry="2" />
<text  x="1076.05" y="1727.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::allocate (13,113,983 samples, 0.03%)</title><rect x="565.8" y="1733" width="0.3" height="15.0" fill="rgb(205,115,53)" rx="2" ry="2" />
<text  x="568.75" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PipelineRenderNode, std::default_delete&lt;duckdb::PipelineRenderNode&gt;, true&gt;::unique_ptr (6,489,423 samples, 0.01%)</title><rect x="1069.6" y="1765" width="0.2" height="15.0" fill="rgb(212,140,33)" rx="2" ry="2" />
<text  x="1072.61" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;unsigned long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt; &gt; (160,181,028 samples, 0.31%)</title><rect x="655.5" y="1733" width="3.6" height="15.0" fill="rgb(232,193,13)" rx="2" ry="2" />
<text  x="658.46" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (77,664,163 samples, 0.15%)</title><rect x="333.6" y="1461" width="1.8" height="15.0" fill="rgb(244,188,6)" rx="2" ry="2" />
<text  x="336.60" y="1471.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (13,770,605 samples, 0.03%)</title><rect x="325.9" y="1365" width="0.4" height="15.0" fill="rgb(229,29,52)" rx="2" ry="2" />
<text  x="328.94" y="1375.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::PendingStatementOrPreparedStatement (24,505,747,576 samples, 47.78%)</title><rect x="542.3" y="1941" width="563.8" height="15.0" fill="rgb(222,71,12)" rx="2" ry="2" />
<text  x="545.33" y="1951.5" >duckdb::ClientContext::PendingStatementOrPreparedStatement</text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::AttachedDatabase, std::default_delete&lt;duckdb::AttachedDatabase&gt; &gt;::~unique_ptr (15,089,061 samples, 0.03%)</title><rect x="1117.5" y="1781" width="0.3" height="15.0" fill="rgb(236,41,16)" rx="2" ry="2" />
<text  x="1120.47" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TypeMatcherId, std::default_delete&lt;duckdb::TypeMatcherId&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::TypeMatcherId&gt;, void&gt; (9,229,801 samples, 0.02%)</title><rect x="803.8" y="1829" width="0.2" height="15.0" fill="rgb(226,217,28)" rx="2" ry="2" />
<text  x="806.81" y="1839.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;*&gt; (4,629,750 samples, 0.01%)</title><rect x="1038.8" y="1605" width="0.1" height="15.0" fill="rgb(250,120,28)" rx="2" ry="2" />
<text  x="1041.84" y="1615.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Pipeline,  (38,617,746 samples, 0.08%)</title><rect x="1093.8" y="1653" width="0.9" height="15.0" fill="rgb(207,130,5)" rx="2" ry="2" />
<text  x="1096.80" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::AllocatedData*&gt; (69,894,385 samples, 0.14%)</title><rect x="1123.1" y="1685" width="1.6" height="15.0" fill="rgb(231,32,46)" rx="2" ry="2" />
<text  x="1126.11" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (5,196,041 samples, 0.01%)</title><rect x="80.5" y="2005" width="0.1" height="15.0" fill="rgb(243,85,30)" rx="2" ry="2" />
<text  x="83.46" y="2015.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (59,026,862 samples, 0.12%)</title><rect x="595.1" y="1717" width="1.3" height="15.0" fill="rgb(225,126,13)" rx="2" ry="2" />
<text  x="598.07" y="1727.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::DictionaryBuffer, duckdb::SelectionVector const&amp;&gt; (25,981,297 samples, 0.05%)</title><rect x="293.8" y="1669" width="0.6" height="15.0" fill="rgb(229,180,41)" rx="2" ry="2" />
<text  x="296.75" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocatorData::~ArenaAllocatorData (10,460,100 samples, 0.02%)</title><rect x="324.7" y="1509" width="0.2" height="15.0" fill="rgb(248,56,54)" rx="2" ry="2" />
<text  x="327.70" y="1519.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::DistributivityRule, duckdb::ExpressionRewriter&amp;&gt; (58,183,969 samples, 0.11%)</title><rect x="798.8" y="1877" width="1.3" height="15.0" fill="rgb(246,165,12)" rx="2" ry="2" />
<text  x="801.76" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (17,574,249 samples, 0.03%)</title><rect x="666.2" y="1701" width="0.4" height="15.0" fill="rgb(246,95,17)" rx="2" ry="2" />
<text  x="669.15" y="1711.5" ></text>
</g>
<g >
<title>duckdb::BufferedDeserializer::ReadData (4,517,219 samples, 0.01%)</title><rect x="588.2" y="1813" width="0.1" height="15.0" fill="rgb(208,97,20)" rx="2" ry="2" />
<text  x="591.23" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (10,400,902 samples, 0.02%)</title><rect x="953.3" y="1557" width="0.2" height="15.0" fill="rgb(207,56,2)" rx="2" ry="2" />
<text  x="956.25" y="1567.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; &gt;::push_back (29,559,443 samples, 0.06%)</title><rect x="754.8" y="1749" width="0.7" height="15.0" fill="rgb(241,193,46)" rx="2" ry="2" />
<text  x="757.78" y="1759.5" ></text>
</g>
<g >
<title>std::distance&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt; &gt; (4,762,102 samples, 0.01%)</title><rect x="1084.8" y="1797" width="0.1" height="15.0" fill="rgb(223,86,39)" rx="2" ry="2" />
<text  x="1087.78" y="1807.5" ></text>
</g>
<g >
<title>std::map&lt;duckdb::CompressionType, std::map&lt;duckdb::PhysicalType, duckdb::CompressionFunction, std::less&lt;duckdb::PhysicalType&gt;, std::allocator&lt;std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt; &gt; &gt;, std::less&lt;duckdb::CompressionType&gt;, std::allocator&lt;std::pair&lt;duckdb::CompressionType const, std::map&lt;duckdb::PhysicalType, duckdb::CompressionFunction, std::less&lt;duckdb::PhysicalType&gt;, std::allocator&lt;std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt; &gt; &gt; &gt; &gt; &gt;::find (23,389,165 samples, 0.05%)</title><rect x="435.0" y="1637" width="0.5" height="15.0" fill="rgb(235,99,27)" rx="2" ry="2" />
<text  x="437.96" y="1647.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (7,628,832 samples, 0.01%)</title><rect x="610.5" y="1621" width="0.2" height="15.0" fill="rgb(215,112,15)" rx="2" ry="2" />
<text  x="613.52" y="1631.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryNode, std::default_delete&lt;duckdb::QueryNode&gt;, true&gt;::unique_ptr&lt;duckdb::SelectNode, std::default_delete&lt;std::unique_ptr&lt;duckdb::QueryNode, std::default_delete&lt;duckdb::QueryNode&gt; &gt; &gt;, void&gt; (12,343,260 samples, 0.02%)</title><rect x="534.4" y="1765" width="0.3" height="15.0" fill="rgb(222,196,38)" rx="2" ry="2" />
<text  x="537.39" y="1775.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;*&gt; (11,365,356 samples, 0.02%)</title><rect x="971.8" y="1621" width="0.3" height="15.0" fill="rgb(244,223,1)" rx="2" ry="2" />
<text  x="974.83" y="1631.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::UnifiedVectorFormat&gt; (11,397,512 samples, 0.02%)</title><rect x="374.7" y="1829" width="0.3" height="15.0" fill="rgb(248,117,40)" rx="2" ry="2" />
<text  x="377.70" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_free (60,427,604 samples, 0.12%)</title><rect x="333.7" y="1365" width="1.4" height="15.0" fill="rgb(223,0,48)" rx="2" ry="2" />
<text  x="336.68" y="1375.5" ></text>
</g>
<g >
<title>do_user_addr_fault (19,434,262 samples, 0.04%)</title><rect x="55.9" y="1957" width="0.5" height="15.0" fill="rgb(221,145,26)" rx="2" ry="2" />
<text  x="58.92" y="1967.5" ></text>
</g>
<g >
<title>pagecache_get_page (7,950,688 samples, 0.02%)</title><rect x="72.9" y="1813" width="0.2" height="15.0" fill="rgb(218,194,36)" rx="2" ry="2" />
<text  x="75.93" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="261" width="0.1" height="15.0" fill="rgb(249,73,32)" rx="2" ry="2" />
<text  x="14.25" y="271.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ChunkInfo, std::default_delete&lt;duckdb::ChunkInfo&gt; &gt;::operator= (5,231,049 samples, 0.01%)</title><rect x="415.1" y="1669" width="0.1" height="15.0" fill="rgb(210,34,42)" rx="2" ry="2" />
<text  x="418.07" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::AllocateBuffer (549,128,051 samples, 1.07%)</title><rect x="870.1" y="1701" width="12.7" height="15.0" fill="rgb(214,6,48)" rx="2" ry="2" />
<text  x="873.12" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::CreateSegment (120,976,124 samples, 0.24%)</title><rect x="376.7" y="1909" width="2.8" height="15.0" fill="rgb(253,50,15)" rx="2" ry="2" />
<text  x="379.68" y="1919.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BufferManager, std::default_delete&lt;duckdb::BufferManager&gt;, true&gt;::operator* (7,129,713 samples, 0.01%)</title><rect x="998.5" y="1557" width="0.2" height="15.0" fill="rgb(207,125,43)" rx="2" ry="2" />
<text  x="1001.49" y="1567.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::StarExpression, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (9,235,042 samples, 0.02%)</title><rect x="947.2" y="1701" width="0.2" height="15.0" fill="rgb(254,208,10)" rx="2" ry="2" />
<text  x="950.23" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1573" width="0.1" height="15.0" fill="rgb(213,33,8)" rx="2" ry="2" />
<text  x="14.25" y="1583.5" ></text>
</g>
<g >
<title>duckdb::TransactionContext::SetActiveQuery (13,078,518 samples, 0.03%)</title><rect x="332.8" y="1861" width="0.3" height="15.0" fill="rgb(225,76,0)" rx="2" ry="2" />
<text  x="335.82" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::Verify (2,364,102,420 samples, 4.61%)</title><rect x="645.9" y="1845" width="54.4" height="15.0" fill="rgb(212,43,24)" rx="2" ry="2" />
<text  x="648.86" y="1855.5" >duckd..</text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (10,705,436 samples, 0.02%)</title><rect x="849.5" y="1813" width="0.2" height="15.0" fill="rgb(232,134,49)" rx="2" ry="2" />
<text  x="852.49" y="1823.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (71,691,651 samples, 0.14%)</title><rect x="221.3" y="1589" width="1.7" height="15.0" fill="rgb(238,122,29)" rx="2" ry="2" />
<text  x="224.32" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionInfo, std::default_delete&lt;duckdb::ExpressionInfo&gt; &gt;::~unique_ptr (8,008,292 samples, 0.02%)</title><rect x="500.1" y="1285" width="0.1" height="15.0" fill="rgb(209,104,21)" rx="2" ry="2" />
<text  x="503.06" y="1295.5" ></text>
</g>
<g >
<title>[unknown] (5,975,983,849 samples, 11.65%)</title><rect x="10.4" y="2037" width="137.5" height="15.0" fill="rgb(224,223,46)" rx="2" ry="2" />
<text  x="13.39" y="2047.5" >[unknown]</text>
</g>
<g >
<title>duckdb::ColumnStatistics::CreateEmptyStats (11,170,790 samples, 0.02%)</title><rect x="102.2" y="1525" width="0.2" height="15.0" fill="rgb(216,196,13)" rx="2" ry="2" />
<text  x="105.16" y="1535.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::Reset (58,045,827 samples, 0.11%)</title><rect x="91.7" y="1749" width="1.3" height="15.0" fill="rgb(245,106,6)" rx="2" ry="2" />
<text  x="94.67" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::pac_alloc_real (88,220,275 samples, 0.17%)</title><rect x="875.7" y="1285" width="2.0" height="15.0" fill="rgb(243,45,21)" rx="2" ry="2" />
<text  x="878.71" y="1295.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Task&gt;::shared_ptr&lt;duckdb::PipelineTask, std::default_delete&lt;duckdb::PipelineTask&gt;, void&gt; (29,645,914 samples, 0.06%)</title><rect x="95.2" y="1733" width="0.7" height="15.0" fill="rgb(248,13,18)" rx="2" ry="2" />
<text  x="98.22" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::emplace_back&lt;unsigned long&amp;, unsigned long&amp;&gt; (308,985,710 samples, 0.60%)</title><rect x="604.7" y="1765" width="7.1" height="15.0" fill="rgb(223,38,4)" rx="2" ry="2" />
<text  x="607.71" y="1775.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::InitializeScanWithOffset (118,151,349 samples, 0.23%)</title><rect x="299.0" y="1701" width="2.7" height="15.0" fill="rgb(247,28,19)" rx="2" ry="2" />
<text  x="302.00" y="1711.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::NextGraphemeCluster (25,724,634 samples, 0.05%)</title><rect x="1071.3" y="1733" width="0.6" height="15.0" fill="rgb(238,23,2)" rx="2" ry="2" />
<text  x="1074.29" y="1743.5" ></text>
</g>
<g >
<title>duckdb::CollectionScanState::Scan (773,965,098 samples, 1.51%)</title><rect x="199.2" y="1733" width="17.8" height="15.0" fill="rgb(219,85,18)" rx="2" ry="2" />
<text  x="202.24" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_bin_flush_stashed (6,711,403 samples, 0.01%)</title><rect x="240.2" y="405" width="0.2" height="15.0" fill="rgb(208,163,35)" rx="2" ry="2" />
<text  x="243.23" y="415.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::SingleJoinRelation, duckdb::LogicalOperator&amp;, duckdb::optional_ptr&lt;duckdb::LogicalOperator&gt;&amp;&gt; (7,315,942 samples, 0.01%)</title><rect x="758.0" y="1781" width="0.2" height="15.0" fill="rgb(212,115,39)" rx="2" ry="2" />
<text  x="761.01" y="1791.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::~RenderTree (17,924,568 samples, 0.03%)</title><rect x="581.6" y="1781" width="0.4" height="15.0" fill="rgb(212,98,24)" rx="2" ry="2" />
<text  x="584.55" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::unique_ptr&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt; &gt;, void&gt; (14,634,980 samples, 0.03%)</title><rect x="952.1" y="1621" width="0.4" height="15.0" fill="rgb(206,137,5)" rx="2" ry="2" />
<text  x="955.13" y="1631.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (7,405,177 samples, 0.01%)</title><rect x="361.2" y="1813" width="0.2" height="15.0" fill="rgb(210,185,37)" rx="2" ry="2" />
<text  x="364.22" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ClientConfig::ExtractTimezone[abi:cxx11] (22,223,592 samples, 0.04%)</title><rect x="373.4" y="1909" width="0.6" height="15.0" fill="rgb(236,173,28)" rx="2" ry="2" />
<text  x="376.45" y="1919.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt; &gt; (27,220,437 samples, 0.05%)</title><rect x="499.8" y="1589" width="0.7" height="15.0" fill="rgb(244,145,44)" rx="2" ry="2" />
<text  x="502.84" y="1599.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt;::_M_head (56,663,853 samples, 0.11%)</title><rect x="264.5" y="1413" width="1.3" height="15.0" fill="rgb(223,47,29)" rx="2" ry="2" />
<text  x="267.48" y="1423.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt;::~unique_ptr (8,460,147 samples, 0.02%)</title><rect x="832.6" y="1573" width="0.2" height="15.0" fill="rgb(212,70,36)" rx="2" ry="2" />
<text  x="835.56" y="1583.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorToString[abi:cxx11] (4,477,067 samples, 0.01%)</title><rect x="634.7" y="1685" width="0.1" height="15.0" fill="rgb(207,8,51)" rx="2" ry="2" />
<text  x="637.74" y="1695.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;unsigned long, true, false&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;unsigned long, true, false&gt;, bool, true&gt; (12,212,721 samples, 0.02%)</title><rect x="695.2" y="1765" width="0.2" height="15.0" fill="rgb(207,9,25)" rx="2" ry="2" />
<text  x="698.17" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformSelect (483,968,133 samples, 0.94%)</title><rect x="526.1" y="1829" width="11.1" height="15.0" fill="rgb(248,209,30)" rx="2" ry="2" />
<text  x="529.05" y="1839.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ProducerToken::ProducerToken&lt;std::shared_ptr&lt;duckdb::Task&gt;, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt; (7,825,284 samples, 0.02%)</title><rect x="1091.0" y="1813" width="0.2" height="15.0" fill="rgb(243,43,33)" rx="2" ry="2" />
<text  x="1094.00" y="1823.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (6,241,453 samples, 0.01%)</title><rect x="724.3" y="1717" width="0.1" height="15.0" fill="rgb(225,183,5)" rx="2" ry="2" />
<text  x="727.29" y="1727.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (275,160,640 samples, 0.54%)</title><rect x="237.9" y="1093" width="6.3" height="15.0" fill="rgb(217,152,14)" rx="2" ry="2" />
<text  x="240.90" y="1103.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BlockMetaData, std::allocator&lt;duckdb::BlockMetaData&gt; &gt;::~vector (355,547,109 samples, 0.69%)</title><rect x="342.0" y="1205" width="8.1" height="15.0" fill="rgb(211,142,27)" rx="2" ry="2" />
<text  x="344.97" y="1215.5" ></text>
</g>
<g >
<title>__libc_start_main (40,813,946,601 samples, 79.57%)</title><rect x="186.5" y="2037" width="938.9" height="15.0" fill="rgb(221,195,35)" rx="2" ry="2" />
<text  x="189.46" y="2047.5" >__libc_start_main</text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr (6,833,191 samples, 0.01%)</title><rect x="798.2" y="1749" width="0.1" height="15.0" fill="rgb(224,107,50)" rx="2" ry="2" />
<text  x="801.16" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_get (4,408,174 samples, 0.01%)</title><rect x="482.9" y="1301" width="0.1" height="15.0" fill="rgb(236,29,11)" rx="2" ry="2" />
<text  x="485.94" y="1311.5" ></text>
</g>
<g >
<title>[unknown] (5,101,944 samples, 0.01%)</title><rect x="75.9" y="2005" width="0.2" height="15.0" fill="rgb(216,225,20)" rx="2" ry="2" />
<text  x="78.94" y="2015.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, unsigned long const*, unsigned long*&gt; (7,562,271 samples, 0.01%)</title><rect x="684.7" y="1669" width="0.2" height="15.0" fill="rgb(218,203,9)" rx="2" ry="2" />
<text  x="687.70" y="1679.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::Execute (237,111,606 samples, 0.46%)</title><rect x="101.7" y="1829" width="5.5" height="15.0" fill="rgb(220,89,20)" rx="2" ry="2" />
<text  x="104.73" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Binder&gt;::destroy&lt;duckdb::Binder&gt; (103,848,140 samples, 0.20%)</title><rect x="1016.3" y="1733" width="2.4" height="15.0" fill="rgb(205,158,48)" rx="2" ry="2" />
<text  x="1019.26" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (6,547,473 samples, 0.01%)</title><rect x="108.5" y="1557" width="0.2" height="15.0" fill="rgb(216,5,32)" rx="2" ry="2" />
<text  x="111.53" y="1567.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt; &gt;::unique_ptr&lt;duckdb::SpecificExpressionTypeMatcher, std::default_delete&lt;duckdb::SpecificExpressionTypeMatcher&gt;, void&gt; (9,765,913 samples, 0.02%)</title><rect x="808.7" y="1829" width="0.2" height="15.0" fill="rgb(211,110,53)" rx="2" ry="2" />
<text  x="811.69" y="1839.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::PipelineRenderNode, duckdb::PhysicalOperator const&amp;&gt; (6,884,907 samples, 0.01%)</title><rect x="1069.1" y="1765" width="0.1" height="15.0" fill="rgb(244,135,49)" rx="2" ry="2" />
<text  x="1072.06" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_S_do_relocate (7,033,038 samples, 0.01%)</title><rect x="818.2" y="1781" width="0.2" height="15.0" fill="rgb(208,137,31)" rx="2" ry="2" />
<text  x="821.23" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::CreateColumn (114,219,676 samples, 0.22%)</title><rect x="453.0" y="1717" width="2.6" height="15.0" fill="rgb(212,126,11)" rx="2" ry="2" />
<text  x="455.97" y="1727.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::GetLocalSinkState (246,098,635 samples, 0.48%)</title><rect x="486.2" y="1829" width="5.7" height="15.0" fill="rgb(209,120,32)" rx="2" ry="2" />
<text  x="489.20" y="1839.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;unsigned long const*, unsigned long*, unsigned long&gt; (18,811,785 samples, 0.04%)</title><rect x="672.7" y="1733" width="0.4" height="15.0" fill="rgb(223,122,21)" rx="2" ry="2" />
<text  x="675.69" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (15,216,022 samples, 0.03%)</title><rect x="88.7" y="1989" width="0.3" height="15.0" fill="rgb(236,9,7)" rx="2" ry="2" />
<text  x="91.69" y="1999.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::Iterate&lt;duckdb::LogicalOperator&gt; (145,138,072 samples, 0.28%)</title><rect x="547.8" y="1781" width="3.3" height="15.0" fill="rgb(248,140,28)" rx="2" ry="2" />
<text  x="550.79" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (76,705,235 samples, 0.15%)</title><rect x="890.2" y="1461" width="1.8" height="15.0" fill="rgb(209,164,24)" rx="2" ry="2" />
<text  x="893.22" y="1471.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (15,871,986 samples, 0.03%)</title><rect x="107.3" y="1477" width="0.4" height="15.0" fill="rgb(233,173,11)" rx="2" ry="2" />
<text  x="110.29" y="1487.5" ></text>
</g>
<g >
<title>duckdb::BlockHandle::BlockHandle (10,031,082 samples, 0.02%)</title><rect x="881.1" y="1509" width="0.2" height="15.0" fill="rgb(217,176,9)" rx="2" ry="2" />
<text  x="884.09" y="1519.5" ></text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (54,779,511 samples, 0.11%)</title><rect x="81.5" y="2021" width="1.3" height="15.0" fill="rgb(236,171,9)" rx="2" ry="2" />
<text  x="84.51" y="2031.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (5,646,698 samples, 0.01%)</title><rect x="106.9" y="1541" width="0.1" height="15.0" fill="rgb(227,37,6)" rx="2" ry="2" />
<text  x="109.87" y="1551.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::PhysicalOperator (11,455,627 samples, 0.02%)</title><rect x="913.5" y="1749" width="0.3" height="15.0" fill="rgb(235,209,16)" rx="2" ry="2" />
<text  x="916.53" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DatabaseManager, std::default_delete&lt;duckdb::DatabaseManager&gt; &gt;::operator bool (5,153,893 samples, 0.01%)</title><rect x="1042.5" y="1845" width="0.1" height="15.0" fill="rgb(247,46,51)" rx="2" ry="2" />
<text  x="1045.50" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (40,890,841 samples, 0.08%)</title><rect x="883.2" y="1701" width="1.0" height="15.0" fill="rgb(206,170,48)" rx="2" ry="2" />
<text  x="886.25" y="1711.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::AddTiming (41,424,777 samples, 0.08%)</title><rect x="361.6" y="1829" width="0.9" height="15.0" fill="rgb(246,25,43)" rx="2" ry="2" />
<text  x="364.55" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, duckdb::unique_ptr&lt;duckdb::TableAppendState, std::default_delete&lt;duckdb::TableAppendState&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, duckdb::unique_ptr&lt;duckdb::TableAppendState, std::default_delete&lt;duckdb::TableAppendState&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (10,311,613 samples, 0.02%)</title><rect x="246.7" y="1781" width="0.2" height="15.0" fill="rgb(236,115,10)" rx="2" ry="2" />
<text  x="249.68" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ExpressionInfo::~ExpressionInfo (5,087,607 samples, 0.01%)</title><rect x="500.1" y="1253" width="0.1" height="15.0" fill="rgb(210,73,38)" rx="2" ry="2" />
<text  x="503.11" y="1263.5" ></text>
</g>
<g >
<title>duckdb::PhysicalColumnDataScan::GetGlobalSourceState (34,899,158 samples, 0.07%)</title><rect x="91.8" y="1717" width="0.8" height="15.0" fill="rgb(211,71,40)" rx="2" ry="2" />
<text  x="94.79" y="1727.5" ></text>
</g>
<g >
<title>duckdb::DuckTransaction::~DuckTransaction (151,554,980 samples, 0.30%)</title><rect x="324.4" y="1653" width="3.5" height="15.0" fill="rgb(245,149,6)" rx="2" ry="2" />
<text  x="327.41" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryResult, std::default_delete&lt;duckdb::QueryResult&gt; &gt;::unique_ptr&lt;duckdb::MaterializedQueryResult, std::default_delete&lt;duckdb::MaterializedQueryResult&gt;, void&gt; (7,334,102 samples, 0.01%)</title><rect x="395.3" y="1909" width="0.1" height="15.0" fill="rgb(218,197,31)" rx="2" ry="2" />
<text  x="398.26" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::emplace_back&lt;duckdb::VectorCache&gt; (12,266,558 samples, 0.02%)</title><rect x="489.5" y="1733" width="0.3" height="15.0" fill="rgb(226,189,15)" rx="2" ry="2" />
<text  x="492.49" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, true&gt;::~vector (35,241,566 samples, 0.07%)</title><rect x="1122.1" y="1861" width="0.8" height="15.0" fill="rgb(245,146,40)" rx="2" ry="2" />
<text  x="1125.14" y="1871.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (107,518,219 samples, 0.21%)</title><rect x="179.2" y="2037" width="2.5" height="15.0" fill="rgb(250,229,36)" rx="2" ry="2" />
<text  x="182.21" y="2047.5" ></text>
</g>
<g >
<title>duckdb::FilterPullup::FinishPullup (35,932,704 samples, 0.07%)</title><rect x="743.9" y="1797" width="0.8" height="15.0" fill="rgb(238,68,50)" rx="2" ry="2" />
<text  x="746.92" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_dalloc_event (10,494,159 samples, 0.02%)</title><rect x="896.9" y="1413" width="0.3" height="15.0" fill="rgb(214,133,32)" rx="2" ry="2" />
<text  x="899.92" y="1423.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (19,502,679 samples, 0.04%)</title><rect x="765.0" y="1765" width="0.4" height="15.0" fill="rgb(219,145,37)" rx="2" ry="2" />
<text  x="767.97" y="1775.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::LocalSinkState&gt;::operator (178,369,990 samples, 0.35%)</title><rect x="481.0" y="1797" width="4.1" height="15.0" fill="rgb(249,79,31)" rx="2" ry="2" />
<text  x="484.02" y="1807.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::Start (4,348,565 samples, 0.01%)</title><rect x="1033.5" y="1877" width="0.1" height="15.0" fill="rgb(229,179,51)" rx="2" ry="2" />
<text  x="1036.50" y="1887.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::HTTPState, std::allocator&lt;duckdb::HTTPState&gt;,  (13,825,570 samples, 0.03%)</title><rect x="359.8" y="1813" width="0.3" height="15.0" fill="rgb(252,157,11)" rx="2" ry="2" />
<text  x="362.82" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (42,412,414 samples, 0.08%)</title><rect x="499.6" y="1749" width="1.0" height="15.0" fill="rgb(227,118,52)" rx="2" ry="2" />
<text  x="502.63" y="1759.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::ChunkInfo*, std::default_delete&lt;duckdb::ChunkInfo&gt; &gt; (6,516,526 samples, 0.01%)</title><rect x="244.7" y="1045" width="0.2" height="15.0" fill="rgb(224,123,54)" rx="2" ry="2" />
<text  x="247.71" y="1055.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::PipelineExecutor (191,976,761 samples, 0.37%)</title><rect x="400.3" y="1861" width="4.5" height="15.0" fill="rgb(250,55,50)" rx="2" ry="2" />
<text  x="403.34" y="1871.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (233,024,074 samples, 0.45%)</title><rect x="889.5" y="1781" width="5.3" height="15.0" fill="rgb(220,77,30)" rx="2" ry="2" />
<text  x="892.45" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt; &gt; (6,265,175 samples, 0.01%)</title><rect x="1074.4" y="1621" width="0.2" height="15.0" fill="rgb(239,99,26)" rx="2" ry="2" />
<text  x="1077.45" y="1631.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::pair&lt;unsigned long, unsigned long&gt;*, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (9,870,642 samples, 0.02%)</title><rect x="838.8" y="1733" width="0.2" height="15.0" fill="rgb(208,3,32)" rx="2" ry="2" />
<text  x="841.81" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="901" width="0.1" height="15.0" fill="rgb(215,20,4)" rx="2" ry="2" />
<text  x="14.25" y="911.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BaseStatistics, std::default_delete&lt;duckdb::BaseStatistics&gt;, true&gt;::~unique_ptr (11,240,512 samples, 0.02%)</title><rect x="642.7" y="1765" width="0.3" height="15.0" fill="rgb(236,19,19)" rx="2" ry="2" />
<text  x="645.74" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ExpressionRewriter::~ExpressionRewriter (200,474,996 samples, 0.39%)</title><rect x="829.1" y="1877" width="4.6" height="15.0" fill="rgb(213,161,39)" rx="2" ry="2" />
<text  x="832.06" y="1887.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalExpressionGet, std::default_delete&lt;duckdb::LogicalExpressionGet&gt; &gt;::get (4,501,211 samples, 0.01%)</title><rect x="976.4" y="1717" width="0.1" height="15.0" fill="rgb(216,115,20)" rx="2" ry="2" />
<text  x="979.42" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (66,812,290 samples, 0.13%)</title><rect x="741.3" y="1701" width="1.5" height="15.0" fill="rgb(207,129,35)" rx="2" ry="2" />
<text  x="744.29" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt;, true&gt;::unique_ptr (11,844,911 samples, 0.02%)</title><rect x="997.1" y="1589" width="0.3" height="15.0" fill="rgb(213,66,1)" rx="2" ry="2" />
<text  x="1000.13" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="437" width="0.1" height="15.0" fill="rgb(229,12,7)" rx="2" ry="2" />
<text  x="14.25" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::BlockHandle, std::allocator&lt;duckdb::BlockHandle&gt;,  (347,324,677 samples, 0.68%)</title><rect x="342.0" y="1045" width="8.0" height="15.0" fill="rgb(209,206,0)" rx="2" ry="2" />
<text  x="345.04" y="1055.5" ></text>
</g>
<g >
<title>duckdb::DistributivityRule::~DistributivityRule (8,417,082 samples, 0.02%)</title><rect x="831.2" y="1717" width="0.2" height="15.0" fill="rgb(219,18,48)" rx="2" ry="2" />
<text  x="834.20" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;*&gt; (12,098,182 samples, 0.02%)</title><rect x="971.8" y="1637" width="0.3" height="15.0" fill="rgb(241,65,47)" rx="2" ry="2" />
<text  x="974.81" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnScanState, std::allocator&lt;duckdb::ColumnScanState&gt; &gt;::resize (11,097,813 samples, 0.02%)</title><rect x="299.1" y="1653" width="0.3" height="15.0" fill="rgb(250,211,21)" rx="2" ry="2" />
<text  x="302.11" y="1663.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (4,483,706 samples, 0.01%)</title><rect x="891.8" y="1397" width="0.2" height="15.0" fill="rgb(214,65,10)" rx="2" ry="2" />
<text  x="894.85" y="1407.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::DataArrays, std::allocator&lt;duckdb::DataArrays&gt; &gt;::_M_realloc_insert&lt;duckdb::DataArrays&amp;&gt; (14,593,209 samples, 0.03%)</title><rect x="474.8" y="1701" width="0.4" height="15.0" fill="rgb(243,69,43)" rx="2" ry="2" />
<text  x="477.84" y="1711.5" ></text>
</g>
<g >
<title>file_write_and_wait_range (126,420,015 samples, 0.25%)</title><rect x="249.2" y="1637" width="2.9" height="15.0" fill="rgb(210,135,44)" rx="2" ry="2" />
<text  x="252.20" y="1647.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::~CatalogSet (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1141" width="0.3" height="15.0" fill="rgb(226,1,6)" rx="2" ry="2" />
<text  x="1120.47" y="1151.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; &gt;::~unordered_map (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1733" width="1.9" height="15.0" fill="rgb(233,25,52)" rx="2" ry="2" />
<text  x="1120.81" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::~unique_ptr (4,793,286 samples, 0.01%)</title><rect x="828.6" y="1717" width="0.1" height="15.0" fill="rgb(254,112,10)" rx="2" ry="2" />
<text  x="831.57" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::EqualOrNullSimplification, std::default_delete&lt;duckdb::EqualOrNullSimplification&gt;, void&gt; (6,615,675 samples, 0.01%)</title><rect x="823.3" y="1861" width="0.1" height="15.0" fill="rgb(233,35,12)" rx="2" ry="2" />
<text  x="826.25" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::~ColumnData (140,788,452 samples, 0.27%)</title><rect x="238.2" y="997" width="3.2" height="15.0" fill="rgb(246,62,15)" rx="2" ry="2" />
<text  x="241.20" y="1007.5" ></text>
</g>
<g >
<title>duckdb::BindContext::BindContext (6,344,725 samples, 0.01%)</title><rect x="984.9" y="1669" width="0.2" height="15.0" fill="rgb(243,108,38)" rx="2" ry="2" />
<text  x="987.95" y="1679.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::~BufferHandle (7,529,803 samples, 0.01%)</title><rect x="233.8" y="1605" width="0.2" height="15.0" fill="rgb(224,15,41)" rx="2" ry="2" />
<text  x="236.80" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (20,158,916 samples, 0.04%)</title><rect x="970.5" y="1733" width="0.4" height="15.0" fill="rgb(254,213,6)" rx="2" ry="2" />
<text  x="973.47" y="1743.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::_M_ptr (9,733,478 samples, 0.02%)</title><rect x="771.3" y="1765" width="0.2" height="15.0" fill="rgb(212,111,23)" rx="2" ry="2" />
<text  x="774.31" y="1775.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::VectorCache*&gt; (100,091,365 samples, 0.20%)</title><rect x="481.5" y="1685" width="2.3" height="15.0" fill="rgb(239,97,46)" rx="2" ry="2" />
<text  x="484.46" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::~ColumnDataCollection (420,161,921 samples, 0.82%)</title><rect x="340.5" y="1365" width="9.7" height="15.0" fill="rgb(247,11,24)" rx="2" ry="2" />
<text  x="343.50" y="1375.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1861" width="0.1" height="15.0" fill="rgb(232,75,34)" rx="2" ry="2" />
<text  x="14.25" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::ReadChunk (209,565,763 samples, 0.41%)</title><rect x="470.8" y="1781" width="4.8" height="15.0" fill="rgb(223,15,1)" rx="2" ry="2" />
<text  x="473.75" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::empty (5,384,805 samples, 0.01%)</title><rect x="1033.7" y="1877" width="0.1" height="15.0" fill="rgb(240,26,15)" rx="2" ry="2" />
<text  x="1036.67" y="1887.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::operator[] (11,480,865 samples, 0.02%)</title><rect x="571.5" y="1781" width="0.3" height="15.0" fill="rgb(246,175,27)" rx="2" ry="2" />
<text  x="574.54" y="1791.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::Sink (1,929,379,284 samples, 3.76%)</title><rect x="421.1" y="1813" width="44.4" height="15.0" fill="rgb(206,75,46)" rx="2" ry="2" />
<text  x="424.09" y="1823.5" >duck..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt; const&amp;, std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::operator= (16,395,742 samples, 0.03%)</title><rect x="1034.3" y="1845" width="0.4" height="15.0" fill="rgb(208,19,12)" rx="2" ry="2" />
<text  x="1037.31" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt;::get (5,699,016 samples, 0.01%)</title><rect x="514.4" y="1877" width="0.1" height="15.0" fill="rgb(209,67,29)" rx="2" ry="2" />
<text  x="517.35" y="1887.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt;::get (34,314,241 samples, 0.07%)</title><rect x="510.1" y="1893" width="0.8" height="15.0" fill="rgb(251,57,28)" rx="2" ry="2" />
<text  x="513.14" y="1903.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_codepoint (19,080,344 samples, 0.04%)</title><rect x="559.4" y="1749" width="0.5" height="15.0" fill="rgb(208,227,6)" rx="2" ry="2" />
<text  x="562.44" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryNode, std::default_delete&lt;duckdb::QueryNode&gt;, true&gt;::operator= (13,138,295 samples, 0.03%)</title><rect x="534.1" y="1765" width="0.3" height="15.0" fill="rgb(252,198,2)" rx="2" ry="2" />
<text  x="537.09" y="1775.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt;*&gt; (339,350,470 samples, 0.66%)</title><rect x="237.5" y="1333" width="7.8" height="15.0" fill="rgb(246,88,13)" rx="2" ry="2" />
<text  x="240.47" y="1343.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Allocator, std::default_delete&lt;duckdb::Allocator&gt;, true&gt;::operator* (4,808,068 samples, 0.01%)</title><rect x="436.6" y="1621" width="0.1" height="15.0" fill="rgb(235,25,39)" rx="2" ry="2" />
<text  x="439.57" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt;, std::allocator&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; (8,439,333 samples, 0.02%)</title><rect x="992.4" y="1605" width="0.2" height="15.0" fill="rgb(248,184,29)" rx="2" ry="2" />
<text  x="995.39" y="1615.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::FetchStringLocation (74,889,466 samples, 0.15%)</title><rect x="280.1" y="1541" width="1.7" height="15.0" fill="rgb(248,10,52)" rx="2" ry="2" />
<text  x="283.10" y="1551.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::max_size (4,814,698 samples, 0.01%)</title><rect x="1074.1" y="1685" width="0.1" height="15.0" fill="rgb(217,132,47)" rx="2" ry="2" />
<text  x="1077.05" y="1695.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::RegisterStringFunctions (19,926,278 samples, 0.04%)</title><rect x="1111.3" y="1909" width="0.4" height="15.0" fill="rgb(224,131,32)" rx="2" ry="2" />
<text  x="1114.28" y="1919.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::ColumnDataAllocator&gt;::destroy&lt;duckdb::ColumnDataAllocator&gt; (358,243,586 samples, 0.70%)</title><rect x="341.9" y="1253" width="8.2" height="15.0" fill="rgb(218,179,2)" rx="2" ry="2" />
<text  x="344.91" y="1263.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5,033,773 samples, 0.01%)</title><rect x="927.5" y="1685" width="0.1" height="15.0" fill="rgb(243,157,38)" rx="2" ry="2" />
<text  x="930.50" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt;::unique_ptr (8,004,355 samples, 0.02%)</title><rect x="224.1" y="1669" width="0.2" height="15.0" fill="rgb(239,151,29)" rx="2" ry="2" />
<text  x="227.08" y="1679.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (5,509,712 samples, 0.01%)</title><rect x="467.7" y="1717" width="0.2" height="15.0" fill="rgb(227,28,26)" rx="2" ry="2" />
<text  x="470.73" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt; &gt;::emplace_back&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt; (36,044,701 samples, 0.07%)</title><rect x="1053.5" y="1797" width="0.8" height="15.0" fill="rgb(208,21,19)" rx="2" ry="2" />
<text  x="1056.50" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::InsertGlobalState, std::default_delete&lt;duckdb::InsertGlobalState&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::InsertGlobalState&gt;, void&gt; (5,432,476 samples, 0.01%)</title><rect x="99.4" y="1781" width="0.1" height="15.0" fill="rgb(253,183,53)" rx="2" ry="2" />
<text  x="102.40" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (77,675,104 samples, 0.15%)</title><rect x="896.2" y="1573" width="1.8" height="15.0" fill="rgb(234,223,53)" rx="2" ry="2" />
<text  x="899.16" y="1583.5" ></text>
</g>
<g >
<title>duckdb::StringStats::CreateEmpty (23,509,027 samples, 0.05%)</title><rect x="424.8" y="1525" width="0.5" height="15.0" fill="rgb(220,161,50)" rx="2" ry="2" />
<text  x="427.78" y="1535.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::Executor*, std::default_delete&lt;duckdb::Executor&gt; &gt; (12,025,345 samples, 0.02%)</title><rect x="511.2" y="1861" width="0.3" height="15.0" fill="rgb(234,52,3)" rx="2" ry="2" />
<text  x="514.24" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::max_size (5,932,590 samples, 0.01%)</title><rect x="1080.1" y="1733" width="0.1" height="15.0" fill="rgb(210,125,18)" rx="2" ry="2" />
<text  x="1083.09" y="1743.5" ></text>
</g>
<g >
<title>duckdb::BasePipelineEvent::~BasePipelineEvent (31,122,497 samples, 0.06%)</title><rect x="355.9" y="1637" width="0.7" height="15.0" fill="rgb(213,118,54)" rx="2" ry="2" />
<text  x="358.92" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::idalloctm (13,165,966 samples, 0.03%)</title><rect x="297.7" y="1349" width="0.3" height="15.0" fill="rgb(209,52,3)" rx="2" ry="2" />
<text  x="300.74" y="1359.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::ConstructManagedBuffer (133,457,022 samples, 0.26%)</title><rect x="436.5" y="1653" width="3.1" height="15.0" fill="rgb(226,184,10)" rx="2" ry="2" />
<text  x="439.51" y="1663.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;*, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt; (21,525,229 samples, 0.04%)</title><rect x="828.2" y="1797" width="0.5" height="15.0" fill="rgb(232,140,44)" rx="2" ry="2" />
<text  x="831.19" y="1807.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::ScheduleTask (48,408,781 samples, 0.09%)</title><rect x="93.3" y="1717" width="1.1" height="15.0" fill="rgb(231,69,25)" rx="2" ry="2" />
<text  x="96.33" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnAppendState::ColumnAppendState (27,178,702 samples, 0.05%)</title><rect x="451.3" y="1637" width="0.6" height="15.0" fill="rgb(226,152,32)" rx="2" ry="2" />
<text  x="454.32" y="1647.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::QualifyColumnName (107,994,296 samples, 0.21%)</title><rect x="958.3" y="1717" width="2.4" height="15.0" fill="rgb(241,171,11)" rx="2" ry="2" />
<text  x="961.26" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Vector::Vector (15,221,219 samples, 0.03%)</title><rect x="219.8" y="1637" width="0.3" height="15.0" fill="rgb(254,206,40)" rx="2" ry="2" />
<text  x="222.78" y="1647.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt;::allocate (5,308,336 samples, 0.01%)</title><rect x="679.7" y="1701" width="0.1" height="15.0" fill="rgb(226,3,35)" rx="2" ry="2" />
<text  x="682.68" y="1711.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionState&gt;::operator (17,219,763 samples, 0.03%)</title><rect x="484.1" y="1541" width="0.4" height="15.0" fill="rgb(245,102,22)" rx="2" ry="2" />
<text  x="487.12" y="1551.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::PhysicalOperator&gt;::operator (572,971,325 samples, 1.12%)</title><rect x="338.0" y="1653" width="13.2" height="15.0" fill="rgb(241,106,0)" rx="2" ry="2" />
<text  x="340.97" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::operator= (7,641,429 samples, 0.01%)</title><rect x="589.5" y="1829" width="0.2" height="15.0" fill="rgb(227,102,43)" rx="2" ry="2" />
<text  x="592.53" y="1839.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::~vector (5,604,867 samples, 0.01%)</title><rect x="906.8" y="1509" width="0.2" height="15.0" fill="rgb(221,48,33)" rx="2" ry="2" />
<text  x="909.83" y="1519.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ChunkVectorInfo, unsigned long&gt; (376,563,979 samples, 0.73%)</title><rect x="406.4" y="1685" width="8.7" height="15.0" fill="rgb(220,164,0)" rx="2" ry="2" />
<text  x="409.39" y="1695.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::QueueProducerToken*, std::default_delete&lt;duckdb::QueueProducerToken&gt; &gt;::tuple&lt;duckdb::QueueProducerToken*&amp;, std::default_delete&lt;duckdb::QueueProducerToken&gt;, true&gt; (5,536,161 samples, 0.01%)</title><rect x="1090.7" y="1781" width="0.1" height="15.0" fill="rgb(207,66,33)" rx="2" ry="2" />
<text  x="1093.67" y="1791.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (14,684,299 samples, 0.03%)</title><rect x="844.0" y="1733" width="0.3" height="15.0" fill="rgb(232,170,16)" rx="2" ry="2" />
<text  x="847.01" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::~unique_ptr (23,917,846 samples, 0.05%)</title><rect x="915.8" y="1493" width="0.6" height="15.0" fill="rgb(244,176,22)" rx="2" ry="2" />
<text  x="918.83" y="1503.5" ></text>
</g>
<g >
<title>duckdb::LogicalDummyScan::GetName[abi:cxx11] (4,538,801 samples, 0.01%)</title><rect x="548.8" y="1525" width="0.1" height="15.0" fill="rgb(222,198,22)" rx="2" ry="2" />
<text  x="551.77" y="1535.5" ></text>
</g>
<g >
<title>duckdb::LogicalExpressionGet::~LogicalExpressionGet (16,146,964 samples, 0.03%)</title><rect x="1036.4" y="1461" width="0.4" height="15.0" fill="rgb(217,104,11)" rx="2" ry="2" />
<text  x="1039.42" y="1471.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::operator= (9,848,360 samples, 0.02%)</title><rect x="770.3" y="1813" width="0.3" height="15.0" fill="rgb(222,52,10)" rx="2" ry="2" />
<text  x="773.33" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (16,716,819 samples, 0.03%)</title><rect x="612.9" y="1733" width="0.4" height="15.0" fill="rgb(242,128,39)" rx="2" ry="2" />
<text  x="615.89" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt; &gt;::unique_ptr (5,772,238 samples, 0.01%)</title><rect x="328.2" y="1733" width="0.2" height="15.0" fill="rgb(226,111,13)" rx="2" ry="2" />
<text  x="331.25" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_dalloc_large (8,940,316 samples, 0.02%)</title><rect x="1123.5" y="1477" width="0.3" height="15.0" fill="rgb(226,134,25)" rx="2" ry="2" />
<text  x="1126.55" y="1487.5" ></text>
</g>
<g >
<title>pthread_getspecific (19,505,362 samples, 0.04%)</title><rect x="83.0" y="2021" width="0.5" height="15.0" fill="rgb(243,148,1)" rx="2" ry="2" />
<text  x="86.03" y="2031.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Unpin (5,382,379 samples, 0.01%)</title><rect x="288.1" y="1381" width="0.1" height="15.0" fill="rgb(250,1,4)" rx="2" ry="2" />
<text  x="291.11" y="1391.5" ></text>
</g>
<g >
<title>duckdb::DuckTransactionManager::StartTransaction (95,656,547 samples, 0.19%)</title><rect x="988.9" y="1637" width="2.2" height="15.0" fill="rgb(236,14,22)" rx="2" ry="2" />
<text  x="991.93" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (33,552,041 samples, 0.07%)</title><rect x="493.3" y="1461" width="0.8" height="15.0" fill="rgb(233,11,10)" rx="2" ry="2" />
<text  x="496.35" y="1471.5" ></text>
</g>
<g >
<title>duckdb::StorageManager::InMemory (8,159,331 samples, 0.02%)</title><rect x="319.4" y="1813" width="0.2" height="15.0" fill="rgb(253,203,13)" rx="2" ry="2" />
<text  x="322.42" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (4,864,927 samples, 0.01%)</title><rect x="108.1" y="1477" width="0.1" height="15.0" fill="rgb(241,202,49)" rx="2" ry="2" />
<text  x="111.11" y="1487.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformStatement (604,469,080 samples, 1.18%)</title><rect x="525.4" y="1909" width="13.9" height="15.0" fill="rgb(221,59,42)" rx="2" ry="2" />
<text  x="528.44" y="1919.5" ></text>
</g>
<g >
<title>duckdb::BoundExpressionListRef::BoundExpressionListRef (5,603,526 samples, 0.01%)</title><rect x="937.7" y="1717" width="0.2" height="15.0" fill="rgb(233,35,28)" rx="2" ry="2" />
<text  x="940.75" y="1727.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;::~pair (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1461" width="0.3" height="15.0" fill="rgb(224,189,48)" rx="2" ry="2" />
<text  x="1120.47" y="1471.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BindCastFunction, std::allocator&lt;duckdb::BindCastFunction&gt; &gt;::emplace_back&lt;duckdb::BoundCastInfo  (9,576,859 samples, 0.02%)</title><rect x="1120.5" y="1941" width="0.2" height="15.0" fill="rgb(212,123,33)" rx="2" ry="2" />
<text  x="1123.45" y="1951.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::TemplatedScan&lt; (1,362,840,920 samples, 2.66%)</title><rect x="255.9" y="1685" width="31.4" height="15.0" fill="rgb(229,44,40)" rx="2" ry="2" />
<text  x="258.92" y="1695.5" >du..</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;duckdb::CatalogSearchEntry const*, std::vector&lt;duckdb::CatalogSearchEntry, std::allocator&lt;duckdb::CatalogSearchEntry&gt; &gt; &gt;, duckdb::CatalogSearchEntry*, duckdb::CatalogSearchEntry&gt; (10,965,500 samples, 0.02%)</title><rect x="1008.9" y="1717" width="0.3" height="15.0" fill="rgb(246,82,48)" rx="2" ry="2" />
<text  x="1011.90" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::insert&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt;, void&gt; (15,591,613 samples, 0.03%)</title><rect x="1083.3" y="1829" width="0.4" height="15.0" fill="rgb(230,137,39)" rx="2" ry="2" />
<text  x="1086.31" y="1839.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned long const*, unsigned long*&gt; (26,104,293 samples, 0.05%)</title><rect x="652.0" y="1669" width="0.6" height="15.0" fill="rgb(223,179,40)" rx="2" ry="2" />
<text  x="654.98" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ProgressBar, std::default_delete&lt;duckdb::ProgressBar&gt; &gt;::operator bool (37,882,056 samples, 0.07%)</title><rect x="512.5" y="1909" width="0.9" height="15.0" fill="rgb(236,120,36)" rx="2" ry="2" />
<text  x="515.50" y="1919.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (6,274,872 samples, 0.01%)</title><rect x="735.2" y="1669" width="0.2" height="15.0" fill="rgb(213,65,47)" rx="2" ry="2" />
<text  x="738.21" y="1679.5" ></text>
</g>
<g >
<title>duckdb::WhereBinder::WhereBinder (20,556,015 samples, 0.04%)</title><rect x="961.1" y="1733" width="0.5" height="15.0" fill="rgb(211,225,14)" rx="2" ry="2" />
<text  x="964.14" y="1743.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (150,944,509 samples, 0.29%)</title><rect x="365.9" y="1797" width="3.5" height="15.0" fill="rgb(246,211,17)" rx="2" ry="2" />
<text  x="368.92" y="1807.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::BufferedSerializer&gt; (13,985,090 samples, 0.03%)</title><rect x="591.0" y="1781" width="0.4" height="15.0" fill="rgb(249,72,42)" rx="2" ry="2" />
<text  x="594.03" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::~vector (7,919,686 samples, 0.02%)</title><rect x="394.2" y="1845" width="0.2" height="15.0" fill="rgb(227,144,20)" rx="2" ry="2" />
<text  x="397.19" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt;::construct&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (6,001,000 samples, 0.01%)</title><rect x="887.9" y="1669" width="0.1" height="15.0" fill="rgb(236,163,37)" rx="2" ry="2" />
<text  x="890.88" y="1679.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (5,711,773 samples, 0.01%)</title><rect x="37.2" y="1989" width="0.1" height="15.0" fill="rgb(234,188,54)" rx="2" ry="2" />
<text  x="40.18" y="1999.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetEntry (87,790,681 samples, 0.17%)</title><rect x="1004.6" y="1733" width="2.0" height="15.0" fill="rgb(232,101,32)" rx="2" ry="2" />
<text  x="1007.56" y="1743.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt; &gt;::__uniq_ptr_impl (4,451,660 samples, 0.01%)</title><rect x="490.3" y="1701" width="0.2" height="15.0" fill="rgb(219,143,53)" rx="2" ry="2" />
<text  x="493.35" y="1711.5" ></text>
</g>
<g >
<title>__sanitizer::BlockingMutex::Lock (9,266,709 samples, 0.02%)</title><rect x="51.9" y="2021" width="0.2" height="15.0" fill="rgb(208,105,41)" rx="2" ry="2" />
<text  x="54.87" y="2031.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::VectorCache, true&gt;::~vector (6,251,799 samples, 0.01%)</title><rect x="106.9" y="1685" width="0.1" height="15.0" fill="rgb(231,140,8)" rx="2" ry="2" />
<text  x="109.87" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt;::~vector (193,859,229 samples, 0.38%)</title><rect x="829.1" y="1845" width="4.4" height="15.0" fill="rgb(222,51,48)" rx="2" ry="2" />
<text  x="832.06" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SingleFileStorageCommitState, std::default_delete&lt;duckdb::SingleFileStorageCommitState&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::SingleFileStorageCommitState&gt;, void&gt; (10,020,287 samples, 0.02%)</title><rect x="253.2" y="1781" width="0.3" height="15.0" fill="rgb(251,221,6)" rx="2" ry="2" />
<text  x="256.22" y="1791.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::HTTPState, std::allocator&lt;duckdb::HTTPState&gt;&gt; (10,291,689 samples, 0.02%)</title><rect x="1040.3" y="1877" width="0.2" height="15.0" fill="rgb(217,204,41)" rx="2" ry="2" />
<text  x="1043.28" y="1887.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt;::reset (5,220,473 samples, 0.01%)</title><rect x="225.7" y="1653" width="0.1" height="15.0" fill="rgb(211,153,43)" rx="2" ry="2" />
<text  x="228.69" y="1663.5" ></text>
</g>
<g >
<title>duckdb::Executor::WorkOnTasks (19,800,445 samples, 0.04%)</title><rect x="354.6" y="1877" width="0.5" height="15.0" fill="rgb(227,207,42)" rx="2" ry="2" />
<text  x="357.63" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt;::construct&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;, duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt; (7,813,966 samples, 0.02%)</title><rect x="939.9" y="1669" width="0.2" height="15.0" fill="rgb(234,40,46)" rx="2" ry="2" />
<text  x="942.92" y="1679.5" ></text>
</g>
<g >
<title>call_init.part.0 (5,602,472 samples, 0.01%)</title><rect x="1175.9" y="2037" width="0.1" height="15.0" fill="rgb(253,158,52)" rx="2" ry="2" />
<text  x="1178.87" y="2047.5" ></text>
</g>
<g >
<title>duckdb::FieldReader::ReadRequired&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (19,432,661 samples, 0.04%)</title><rect x="588.9" y="1845" width="0.4" height="15.0" fill="rgb(210,200,51)" rx="2" ry="2" />
<text  x="591.89" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::operator[] (375,898,361 samples, 0.73%)</title><rect x="257.3" y="1493" width="8.7" height="15.0" fill="rgb(236,20,50)" rx="2" ry="2" />
<text  x="260.35" y="1503.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;duckdb::DatabaseInstance,  (5,332,238 samples, 0.01%)</title><rect x="645.6" y="1845" width="0.1" height="15.0" fill="rgb(213,84,38)" rx="2" ry="2" />
<text  x="648.60" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BufferedSerializer, std::default_delete&lt;duckdb::BufferedSerializer&gt; &gt;::reset (10,508,293 samples, 0.02%)</title><rect x="314.0" y="1589" width="0.3" height="15.0" fill="rgb(236,0,11)" rx="2" ry="2" />
<text  x="317.04" y="1599.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;::~unique_ptr (10,479,785 samples, 0.02%)</title><rect x="915.4" y="1589" width="0.3" height="15.0" fill="rgb(236,164,34)" rx="2" ry="2" />
<text  x="918.42" y="1599.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::GetType (5,082,809 samples, 0.01%)</title><rect x="893.8" y="1669" width="0.1" height="15.0" fill="rgb(252,138,1)" rx="2" ry="2" />
<text  x="896.83" y="1679.5" ></text>
</g>
<g >
<title>duckdb::DataTable::Append (137,161,849 samples, 0.27%)</title><rect x="228.5" y="1685" width="3.2" height="15.0" fill="rgb(250,54,29)" rx="2" ry="2" />
<text  x="231.55" y="1695.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (16,360,305 samples, 0.03%)</title><rect x="25.2" y="2005" width="0.4" height="15.0" fill="rgb(229,164,21)" rx="2" ry="2" />
<text  x="28.20" y="2015.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (10,087,253 samples, 0.02%)</title><rect x="762.0" y="1797" width="0.3" height="15.0" fill="rgb(225,86,41)" rx="2" ry="2" />
<text  x="765.05" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ExtraValueInfo,  (14,329,563 samples, 0.03%)</title><rect x="916.0" y="1397" width="0.3" height="15.0" fill="rgb(212,119,52)" rx="2" ry="2" />
<text  x="918.96" y="1407.5" ></text>
</g>
<g >
<title>duckdb::LocalTableStorage::~LocalTableStorage (437,673,586 samples, 0.85%)</title><rect x="235.6" y="1685" width="10.0" height="15.0" fill="rgb(212,198,7)" rx="2" ry="2" />
<text  x="238.58" y="1695.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::ResetFromCache (44,507,227 samples, 0.09%)</title><rect x="292.0" y="1685" width="1.0" height="15.0" fill="rgb(238,50,6)" rx="2" ry="2" />
<text  x="294.97" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VerifyInternal (229,079,086 samples, 0.45%)</title><rect x="775.3" y="1845" width="5.3" height="15.0" fill="rgb(222,32,4)" rx="2" ry="2" />
<text  x="778.35" y="1855.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::RowIsValidUnsafe (86,434,784 samples, 0.17%)</title><rect x="284.2" y="1541" width="2.0" height="15.0" fill="rgb(233,224,11)" rx="2" ry="2" />
<text  x="287.21" y="1551.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_event (7,940,976 samples, 0.02%)</title><rect x="482.9" y="1317" width="0.1" height="15.0" fill="rgb(243,21,44)" rx="2" ry="2" />
<text  x="485.86" y="1327.5" ></text>
</g>
<g >
<title>duckdb::BasePipelineEvent::BasePipelineEvent (9,868,250 samples, 0.02%)</title><rect x="1051.5" y="1669" width="0.2" height="15.0" fill="rgb(208,225,9)" rx="2" ry="2" />
<text  x="1054.50" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned long [], std::default_delete&lt;unsigned long&gt;, false&gt;::operator[] (7,963,076 samples, 0.02%)</title><rect x="900.3" y="1461" width="0.2" height="15.0" fill="rgb(216,52,39)" rx="2" ry="2" />
<text  x="903.27" y="1471.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*, duckdb::Vector&gt; (14,761,866 samples, 0.03%)</title><rect x="481.1" y="1701" width="0.3" height="15.0" fill="rgb(228,27,46)" rx="2" ry="2" />
<text  x="484.10" y="1711.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::HTTPState, std::allocator&lt;duckdb::HTTPState&gt;,  (6,171,869 samples, 0.01%)</title><rect x="1040.3" y="1813" width="0.1" height="15.0" fill="rgb(211,113,41)" rx="2" ry="2" />
<text  x="1043.28" y="1823.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::GetSegmentIndex (11,763,588 samples, 0.02%)</title><rect x="254.8" y="1685" width="0.2" height="15.0" fill="rgb(232,169,11)" rx="2" ry="2" />
<text  x="257.78" y="1695.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (4,470,141 samples, 0.01%)</title><rect x="701.4" y="1845" width="0.1" height="15.0" fill="rgb(219,151,45)" rx="2" ry="2" />
<text  x="704.38" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::max_size (10,408,058 samples, 0.02%)</title><rect x="578.4" y="1765" width="0.3" height="15.0" fill="rgb(250,64,8)" rx="2" ry="2" />
<text  x="581.45" y="1775.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;long, std::ratio&lt;1l, 1000000000l&gt;, long, std::ratio&lt;1l, 1000000000l&gt; &gt; (9,426,812 samples, 0.02%)</title><rect x="703.0" y="1813" width="0.2" height="15.0" fill="rgb(242,26,46)" rx="2" ry="2" />
<text  x="705.98" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt; &gt;::operator (29,995,527 samples, 0.06%)</title><rect x="732.5" y="1717" width="0.7" height="15.0" fill="rgb(230,67,4)" rx="2" ry="2" />
<text  x="735.53" y="1727.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;::construct&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, unsigned long&amp;&gt; (22,751,310 samples, 0.04%)</title><rect x="363.0" y="1637" width="0.5" height="15.0" fill="rgb(216,194,47)" rx="2" ry="2" />
<text  x="366.02" y="1647.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::Expression&gt;, duckdb::vector&lt;duckdb::FilterInfo*, true&gt;, duckdb::ExpressionHashFunction&lt;duckdb::Expression&gt;, duckdb::ExpressionEquality&lt;duckdb::Expression&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Expression&gt; const, duckdb::vector&lt;duckdb::FilterInfo*, true&gt; &gt; &gt; &gt;::~unordered_map (5,296,638 samples, 0.01%)</title><rect x="757.3" y="1765" width="0.1" height="15.0" fill="rgb(250,42,3)" rx="2" ry="2" />
<text  x="760.32" y="1775.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (5,398,013 samples, 0.01%)</title><rect x="547.2" y="1765" width="0.1" height="15.0" fill="rgb(222,219,37)" rx="2" ry="2" />
<text  x="550.20" y="1775.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::BlockMetaData&gt; (348,066,787 samples, 0.68%)</title><rect x="342.0" y="1141" width="8.0" height="15.0" fill="rgb(236,114,49)" rx="2" ry="2" />
<text  x="345.02" y="1151.5" ></text>
</g>
<g >
<title>duckdb::grapheme_break_extended (7,822,451 samples, 0.02%)</title><rect x="836.9" y="1765" width="0.2" height="15.0" fill="rgb(207,125,15)" rx="2" ry="2" />
<text  x="839.93" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (23,333,933 samples, 0.05%)</title><rect x="44.1" y="1989" width="0.6" height="15.0" fill="rgb(207,149,10)" rx="2" ry="2" />
<text  x="47.13" y="1999.5" ></text>
</g>
<g >
<title>duckdb::InClauseSimplificationRule::InClauseSimplificationRule (32,748,927 samples, 0.06%)</title><rect x="810.1" y="1861" width="0.8" height="15.0" fill="rgb(230,135,17)" rx="2" ry="2" />
<text  x="813.14" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (15,936,810 samples, 0.03%)</title><rect x="831.7" y="1669" width="0.4" height="15.0" fill="rgb(242,38,13)" rx="2" ry="2" />
<text  x="834.74" y="1679.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (4,952,864 samples, 0.01%)</title><rect x="921.9" y="1749" width="0.1" height="15.0" fill="rgb(220,160,5)" rx="2" ry="2" />
<text  x="924.86" y="1759.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::TableStatisticsLock, std::mutex&amp;&gt; (12,218,392 samples, 0.02%)</title><rect x="463.2" y="1733" width="0.3" height="15.0" fill="rgb(246,86,3)" rx="2" ry="2" />
<text  x="466.22" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (7,769,911 samples, 0.02%)</title><rect x="954.7" y="1541" width="0.2" height="15.0" fill="rgb(208,211,44)" rx="2" ry="2" />
<text  x="957.72" y="1551.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Executor, std::default_delete&lt;duckdb::Executor&gt; &gt;::__uniq_ptr_impl (5,262,779 samples, 0.01%)</title><rect x="1099.8" y="1845" width="0.2" height="15.0" fill="rgb(226,5,27)" rx="2" ry="2" />
<text  x="1102.83" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_check_len (7,427,106 samples, 0.01%)</title><rect x="1076.3" y="1717" width="0.2" height="15.0" fill="rgb(242,128,7)" rx="2" ry="2" />
<text  x="1079.31" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionInfo, std::default_delete&lt;duckdb::ExpressionInfo&gt;, true&gt;, true&gt;::~vector (4,468,437 samples, 0.01%)</title><rect x="500.1" y="1237" width="0.1" height="15.0" fill="rgb(232,16,47)" rx="2" ry="2" />
<text  x="503.11" y="1247.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::HasSegment (12,937,414 samples, 0.03%)</title><rect x="216.1" y="1621" width="0.3" height="15.0" fill="rgb(230,96,45)" rx="2" ry="2" />
<text  x="219.06" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnAppendState, std::allocator&lt;duckdb::ColumnAppendState&gt; &gt;::push_back (49,723,888 samples, 0.10%)</title><rect x="451.1" y="1717" width="1.2" height="15.0" fill="rgb(233,109,17)" rx="2" ry="2" />
<text  x="454.11" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Rule::~Rule (12,111,852 samples, 0.02%)</title><rect x="831.4" y="1685" width="0.3" height="15.0" fill="rgb(254,63,52)" rx="2" ry="2" />
<text  x="834.44" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ExpressionRootInfo::~ExpressionRootInfo (10,138,368 samples, 0.02%)</title><rect x="500.0" y="1317" width="0.3" height="15.0" fill="rgb(212,220,32)" rx="2" ry="2" />
<text  x="503.03" y="1327.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_free (5,676,734 samples, 0.01%)</title><rect x="333.8" y="1317" width="0.1" height="15.0" fill="rgb(235,53,38)" rx="2" ry="2" />
<text  x="336.76" y="1327.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (2,354,839,056 samples, 4.59%)</title><rect x="91.1" y="1973" width="54.2" height="15.0" fill="rgb(246,112,1)" rx="2" ry="2" />
<text  x="94.10" y="1983.5" >std::..</text>
</g>
<g >
<title>duckdb::AddCastToTypeInternal (43,174,074 samples, 0.08%)</title><rect x="932.2" y="1701" width="1.0" height="15.0" fill="rgb(249,86,4)" rx="2" ry="2" />
<text  x="935.20" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt;, true&gt;::~unique_ptr (5,791,780 samples, 0.01%)</title><rect x="832.9" y="1413" width="0.1" height="15.0" fill="rgb(238,26,32)" rx="2" ry="2" />
<text  x="835.91" y="1423.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_event (7,562,153 samples, 0.01%)</title><rect x="218.7" y="1333" width="0.1" height="15.0" fill="rgb(237,192,8)" rx="2" ry="2" />
<text  x="221.65" y="1343.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (35,486,544 samples, 0.07%)</title><rect x="529.9" y="1717" width="0.8" height="15.0" fill="rgb(241,131,38)" rx="2" ry="2" />
<text  x="532.93" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_free (41,863,454 samples, 0.08%)</title><rect x="297.5" y="1397" width="1.0" height="15.0" fill="rgb(220,215,40)" rx="2" ry="2" />
<text  x="300.52" y="1407.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; (34,623,537 samples, 0.07%)</title><rect x="357.5" y="1829" width="0.7" height="15.0" fill="rgb(244,214,47)" rx="2" ry="2" />
<text  x="360.45" y="1839.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::ColumnStatistics, duckdb::BaseStatistics&gt; (6,247,548 samples, 0.01%)</title><rect x="102.3" y="1509" width="0.1" height="15.0" fill="rgb(213,145,36)" rx="2" ry="2" />
<text  x="105.28" y="1519.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::dequeue&lt;duckdb::BufferEvictionNode&gt; (28,118,335 samples, 0.05%)</title><rect x="343.0" y="949" width="0.7" height="15.0" fill="rgb(219,181,28)" rx="2" ry="2" />
<text  x="346.01" y="959.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt;::allocate (7,595,564 samples, 0.01%)</title><rect x="38.8" y="2021" width="0.1" height="15.0" fill="rgb(253,196,7)" rx="2" ry="2" />
<text  x="41.76" y="2031.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::insert (8,015,345 samples, 0.02%)</title><rect x="863.7" y="1701" width="0.2" height="15.0" fill="rgb(212,169,1)" rx="2" ry="2" />
<text  x="866.74" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CompressionFunctionSet, std::default_delete&lt;duckdb::CompressionFunctionSet&gt;, true&gt;::operator (8,658,248 samples, 0.02%)</title><rect x="435.9" y="1653" width="0.2" height="15.0" fill="rgb(249,50,47)" rx="2" ry="2" />
<text  x="438.87" y="1663.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1029" width="0.3" height="15.0" fill="rgb(250,144,49)" rx="2" ry="2" />
<text  x="1120.47" y="1039.5" ></text>
</g>
<g >
<title>__pthread_once (11,549,380 samples, 0.02%)</title><rect x="89.9" y="1989" width="0.3" height="15.0" fill="rgb(227,73,53)" rx="2" ry="2" />
<text  x="92.90" y="1999.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::ResetFromCache (6,894,753 samples, 0.01%)</title><rect x="419.6" y="1797" width="0.2" height="15.0" fill="rgb(232,134,4)" rx="2" ry="2" />
<text  x="422.60" y="1807.5" ></text>
</g>
<g >
<title>jbd2__journal_start (5,938,628 samples, 0.01%)</title><rect x="247.8" y="1477" width="0.1" height="15.0" fill="rgb(218,7,31)" rx="2" ry="2" />
<text  x="250.77" y="1487.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; &gt;::~vector (7,653,624 samples, 0.01%)</title><rect x="756.9" y="1749" width="0.2" height="15.0" fill="rgb(229,67,52)" rx="2" ry="2" />
<text  x="759.91" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ColumnLifetimeAnalyzer::VisitOperator (90,497,978 samples, 0.18%)</title><rect x="724.1" y="1765" width="2.1" height="15.0" fill="rgb(230,40,28)" rx="2" ry="2" />
<text  x="727.10" y="1775.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::StandardColumnData (81,205,233 samples, 0.16%)</title><rect x="453.4" y="1541" width="1.8" height="15.0" fill="rgb(212,220,10)" rx="2" ry="2" />
<text  x="456.35" y="1551.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (4,494,226 samples, 0.01%)</title><rect x="1039.7" y="1861" width="0.1" height="15.0" fill="rgb(242,58,38)" rx="2" ry="2" />
<text  x="1042.71" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (5,006,581 samples, 0.01%)</title><rect x="1183.2" y="2021" width="0.1" height="15.0" fill="rgb(254,37,4)" rx="2" ry="2" />
<text  x="1186.16" y="2031.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (18,141,661 samples, 0.04%)</title><rect x="546.8" y="1733" width="0.4" height="15.0" fill="rgb(214,204,51)" rx="2" ry="2" />
<text  x="549.77" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (4,965,859 samples, 0.01%)</title><rect x="106.9" y="1493" width="0.1" height="15.0" fill="rgb(250,29,38)" rx="2" ry="2" />
<text  x="109.89" y="1503.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::clear (18,521,303 samples, 0.04%)</title><rect x="1089.9" y="1845" width="0.4" height="15.0" fill="rgb(250,204,14)" rx="2" ry="2" />
<text  x="1092.91" y="1855.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::Commit (2,372,474,483 samples, 4.63%)</title><rect x="191.9" y="1813" width="54.5" height="15.0" fill="rgb(229,147,28)" rx="2" ry="2" />
<text  x="194.86" y="1823.5" >duckd..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (6,717,622 samples, 0.01%)</title><rect x="802.2" y="1829" width="0.2" height="15.0" fill="rgb(241,61,51)" rx="2" ry="2" />
<text  x="805.21" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc (13,203,526 samples, 0.03%)</title><rect x="896.6" y="1397" width="0.3" height="15.0" fill="rgb(219,13,6)" rx="2" ry="2" />
<text  x="899.58" y="1407.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (4,601,315 samples, 0.01%)</title><rect x="858.0" y="1797" width="0.1" height="15.0" fill="rgb(242,212,9)" rx="2" ry="2" />
<text  x="860.96" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalIndex, std::allocator&lt;duckdb::LogicalIndex&gt; &gt;::_M_realloc_insert&lt;duckdb::LogicalIndex&gt; (22,697,797 samples, 0.04%)</title><rect x="1019.9" y="1797" width="0.5" height="15.0" fill="rgb(239,77,52)" rx="2" ry="2" />
<text  x="1022.89" y="1807.5" ></text>
</g>
<g >
<title>duckdb::PendingQueryResult::PendingQueryResult (70,472,616 samples, 0.14%)</title><rect x="1100.1" y="1877" width="1.6" height="15.0" fill="rgb(233,25,20)" rx="2" ry="2" />
<text  x="1103.11" y="1887.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;::~pair (28,130,425 samples, 0.05%)</title><rect x="1016.7" y="1573" width="0.6" height="15.0" fill="rgb(227,175,10)" rx="2" ry="2" />
<text  x="1019.67" y="1583.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; &gt;::find (11,879,326 samples, 0.02%)</title><rect x="1005.9" y="1701" width="0.3" height="15.0" fill="rgb(239,226,2)" rx="2" ry="2" />
<text  x="1008.91" y="1711.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::End (8,511,850 samples, 0.02%)</title><rect x="715.3" y="1845" width="0.2" height="15.0" fill="rgb(236,141,22)" rx="2" ry="2" />
<text  x="718.30" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt;, true&gt;::AssertNotNull (8,394,661 samples, 0.02%)</title><rect x="509.8" y="1893" width="0.2" height="15.0" fill="rgb(225,81,37)" rx="2" ry="2" />
<text  x="512.79" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundExpression, std::default_delete&lt;duckdb::BoundExpression&gt; &gt;::release (5,840,437 samples, 0.01%)</title><rect x="935.5" y="1669" width="0.1" height="15.0" fill="rgb(235,174,2)" rx="2" ry="2" />
<text  x="938.47" y="1679.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::Register&lt;duckdb::AddFun&gt; (5,592,576 samples, 0.01%)</title><rect x="1110.1" y="1893" width="0.1" height="15.0" fill="rgb(213,12,50)" rx="2" ry="2" />
<text  x="1113.05" y="1903.5" ></text>
</g>
<g >
<title>__asan_memcpy (5,654,262 samples, 0.01%)</title><rect x="268.7" y="1573" width="0.2" height="15.0" fill="rgb(236,124,47)" rx="2" ry="2" />
<text  x="271.73" y="1583.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (11,461,321 samples, 0.02%)</title><rect x="718.5" y="1733" width="0.3" height="15.0" fill="rgb(216,35,14)" rx="2" ry="2" />
<text  x="721.49" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt;::reset (5,084,280 samples, 0.01%)</title><rect x="300.8" y="1621" width="0.2" height="15.0" fill="rgb(250,2,35)" rx="2" ry="2" />
<text  x="303.84" y="1631.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;,  (37,725,606 samples, 0.07%)</title><rect x="899.8" y="1525" width="0.9" height="15.0" fill="rgb(241,109,26)" rx="2" ry="2" />
<text  x="902.82" y="1535.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::get (4,433,804 samples, 0.01%)</title><rect x="612.2" y="1749" width="0.1" height="15.0" fill="rgb(247,222,29)" rx="2" ry="2" />
<text  x="615.22" y="1759.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::HasNode (9,295,065 samples, 0.02%)</title><rect x="624.5" y="1765" width="0.2" height="15.0" fill="rgb(243,110,28)" rx="2" ry="2" />
<text  x="627.47" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1269" width="0.1" height="15.0" fill="rgb(236,75,25)" rx="2" ry="2" />
<text  x="14.25" y="1279.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::EnumComparisonRule, duckdb::ExpressionRewriter&amp;&gt; (178,773,305 samples, 0.35%)</title><rect x="803.0" y="1877" width="4.1" height="15.0" fill="rgb(233,135,28)" rx="2" ry="2" />
<text  x="806.02" y="1887.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::SpecificExpressionTypeMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt; &gt; &gt;, void&gt; (11,198,548 samples, 0.02%)</title><rect x="808.7" y="1845" width="0.2" height="15.0" fill="rgb(231,127,15)" rx="2" ry="2" />
<text  x="811.67" y="1855.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::Execute (182,051,376 samples, 0.35%)</title><rect x="898.7" y="1717" width="4.2" height="15.0" fill="rgb(212,147,35)" rx="2" ry="2" />
<text  x="901.74" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::unique_ptr (6,244,126 samples, 0.01%)</title><rect x="986.4" y="1813" width="0.2" height="15.0" fill="rgb(232,86,21)" rx="2" ry="2" />
<text  x="989.41" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Expression::HasParameter (10,815,015 samples, 0.02%)</title><rect x="590.1" y="1861" width="0.2" height="15.0" fill="rgb(232,5,35)" rx="2" ry="2" />
<text  x="593.08" y="1871.5" ></text>
</g>
<g >
<title>duckdb::UnnestRewriterPlanUpdater::UnnestRewriterPlanUpdater (5,227,291 samples, 0.01%)</title><rect x="769.2" y="1797" width="0.1" height="15.0" fill="rgb(235,112,22)" rx="2" ry="2" />
<text  x="772.19" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Binder::HasMatchingBinding (32,017,831 samples, 0.06%)</title><rect x="954.6" y="1621" width="0.7" height="15.0" fill="rgb(228,12,7)" rx="2" ry="2" />
<text  x="957.55" y="1631.5" ></text>
</g>
<g >
<title>duckdb::PreparedStatementData::Bind (15,442,865 samples, 0.03%)</title><rect x="1098.7" y="1893" width="0.3" height="15.0" fill="rgb(209,157,3)" rx="2" ry="2" />
<text  x="1101.68" y="1903.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (4,676,951 samples, 0.01%)</title><rect x="759.1" y="1749" width="0.2" height="15.0" fill="rgb(245,52,16)" rx="2" ry="2" />
<text  x="762.15" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::PipelineFinishEvent&gt; &gt;::construct&lt;duckdb::PipelineFinishEvent, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (4,499,585 samples, 0.01%)</title><rect x="1050.8" y="1717" width="0.2" height="15.0" fill="rgb(219,80,14)" rx="2" ry="2" />
<text  x="1053.85" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_allocate_buckets (26,291,099 samples, 0.05%)</title><rect x="656.2" y="1669" width="0.6" height="15.0" fill="rgb(243,30,32)" rx="2" ry="2" />
<text  x="659.16" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*&gt; (4,961,795 samples, 0.01%)</title><rect x="839.6" y="1765" width="0.2" height="15.0" fill="rgb(227,63,20)" rx="2" ry="2" />
<text  x="842.64" y="1775.5" ></text>
</g>
<g >
<title>find_get_entry (7,950,688 samples, 0.02%)</title><rect x="72.9" y="1797" width="0.2" height="15.0" fill="rgb(254,154,35)" rx="2" ry="2" />
<text  x="75.93" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::PipelineInitializeEvent,  (37,713,876 samples, 0.07%)</title><rect x="1051.3" y="1765" width="0.8" height="15.0" fill="rgb(238,117,20)" rx="2" ry="2" />
<text  x="1054.25" y="1775.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ExtraValueInfo&gt;::operator=&lt;duckdb::StringValueInfo&gt; (10,584,120 samples, 0.02%)</title><rect x="528.5" y="1669" width="0.3" height="15.0" fill="rgb(222,5,10)" rx="2" ry="2" />
<text  x="531.54" y="1679.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt; (7,533,185 samples, 0.01%)</title><rect x="207.1" y="1461" width="0.2" height="15.0" fill="rgb(231,106,42)" rx="2" ry="2" />
<text  x="210.12" y="1471.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (262,447,658 samples, 0.51%)</title><rect x="365.7" y="1877" width="6.0" height="15.0" fill="rgb(227,165,43)" rx="2" ry="2" />
<text  x="368.67" y="1887.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ColumnData,  (275,160,640 samples, 0.54%)</title><rect x="237.9" y="1109" width="6.3" height="15.0" fill="rgb(238,66,4)" rx="2" ry="2" />
<text  x="240.90" y="1119.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_free (5,135,712 samples, 0.01%)</title><rect x="481.9" y="1381" width="0.1" height="15.0" fill="rgb(220,71,1)" rx="2" ry="2" />
<text  x="484.91" y="1391.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_default (39,303,803 samples, 0.08%)</title><rect x="221.6" y="1397" width="0.9" height="15.0" fill="rgb(215,183,25)" rx="2" ry="2" />
<text  x="224.59" y="1407.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;unsigned long const*, unsigned long*&gt; (28,489,858 samples, 0.06%)</title><rect x="652.0" y="1685" width="0.6" height="15.0" fill="rgb(251,38,4)" rx="2" ry="2" />
<text  x="654.98" y="1695.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::deallocate (5,226,404 samples, 0.01%)</title><rect x="566.2" y="1717" width="0.1" height="15.0" fill="rgb(231,80,40)" rx="2" ry="2" />
<text  x="569.16" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::MergeIntoStatistics (7,765,520 samples, 0.02%)</title><rect x="462.9" y="1733" width="0.2" height="15.0" fill="rgb(208,85,8)" rx="2" ry="2" />
<text  x="465.94" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TableStatisticsLock, std::default_delete&lt;duckdb::TableStatisticsLock&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::TableStatisticsLock&gt;, void&gt; (8,532,572 samples, 0.02%)</title><rect x="463.3" y="1701" width="0.2" height="15.0" fill="rgb(220,164,38)" rx="2" ry="2" />
<text  x="466.27" y="1711.5" ></text>
</g>
<g >
<title>page_fault (4,811,192 samples, 0.01%)</title><rect x="1175.6" y="2005" width="0.1" height="15.0" fill="rgb(235,147,16)" rx="2" ry="2" />
<text  x="1178.60" y="2015.5" ></text>
</g>
<g >
<title>__vfprintf_internal (5,857,868 samples, 0.01%)</title><rect x="68.2" y="2005" width="0.1" height="15.0" fill="rgb(220,56,33)" rx="2" ry="2" />
<text  x="71.15" y="2015.5" ></text>
</g>
<g >
<title>duckdb::JoinOrderOptimizer::Optimize (92,716,692 samples, 0.18%)</title><rect x="753.7" y="1781" width="2.1" height="15.0" fill="rgb(254,158,18)" rx="2" ry="2" />
<text  x="756.70" y="1791.5" ></text>
</g>
<g >
<title>duckdb::DuckDB::~DuckDB (100,574,591 samples, 0.20%)</title><rect x="1117.4" y="2005" width="2.3" height="15.0" fill="rgb(242,57,7)" rx="2" ry="2" />
<text  x="1120.43" y="2015.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (60,440,669 samples, 0.12%)</title><rect x="379.9" y="1813" width="1.4" height="15.0" fill="rgb(214,127,7)" rx="2" ry="2" />
<text  x="382.92" y="1823.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::RenderTree (25,373,941 samples, 0.05%)</title><rect x="597.6" y="1765" width="0.6" height="15.0" fill="rgb(212,226,16)" rx="2" ry="2" />
<text  x="600.64" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionInfo, std::default_delete&lt;duckdb::ExpressionInfo&gt;, true&gt;::operator= (5,158,283 samples, 0.01%)</title><rect x="478.2" y="1733" width="0.1" height="15.0" fill="rgb(218,163,35)" rx="2" ry="2" />
<text  x="481.17" y="1743.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map (17,340,175 samples, 0.03%)</title><rect x="735.5" y="1797" width="0.4" height="15.0" fill="rgb(250,17,14)" rx="2" ry="2" />
<text  x="738.50" y="1807.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnScanState&gt; (19,125,990 samples, 0.04%)</title><rect x="226.8" y="1557" width="0.4" height="15.0" fill="rgb(238,104,3)" rx="2" ry="2" />
<text  x="229.79" y="1567.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::ConstantExpressionMatcher, std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt;, void&gt; (10,262,508 samples, 0.02%)</title><rect x="815.4" y="1829" width="0.2" height="15.0" fill="rgb(246,168,48)" rx="2" ry="2" />
<text  x="818.35" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt;, true&gt;::~unique_ptr (10,343,096 samples, 0.02%)</title><rect x="841.2" y="1845" width="0.2" height="15.0" fill="rgb(213,131,13)" rx="2" ry="2" />
<text  x="844.19" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (7,977,877 samples, 0.02%)</title><rect x="733.3" y="1717" width="0.1" height="15.0" fill="rgb(207,105,46)" rx="2" ry="2" />
<text  x="736.26" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DataChunk, std::default_delete&lt;duckdb::DataChunk&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::DataChunk&gt;, void&gt; (4,592,697 samples, 0.01%)</title><rect x="254.0" y="1765" width="0.2" height="15.0" fill="rgb(225,217,5)" rx="2" ry="2" />
<text  x="257.05" y="1775.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (18,593,908 samples, 0.04%)</title><rect x="726.8" y="1637" width="0.5" height="15.0" fill="rgb(235,144,32)" rx="2" ry="2" />
<text  x="729.85" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnBinding, true&gt;::~vector (6,926,492 samples, 0.01%)</title><rect x="769.8" y="1797" width="0.1" height="15.0" fill="rgb(208,117,34)" rx="2" ry="2" />
<text  x="772.75" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Task,  (5,117,388 samples, 0.01%)</title><rect x="505.2" y="1813" width="0.1" height="15.0" fill="rgb(227,107,8)" rx="2" ry="2" />
<text  x="508.22" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::UnifiedVectorFormat, std::allocator&lt;duckdb::UnifiedVectorFormat&gt; &gt;::resize (23,546,112 samples, 0.05%)</title><rect x="888.8" y="1765" width="0.5" height="15.0" fill="rgb(227,69,18)" rx="2" ry="2" />
<text  x="891.80" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::allocate (10,321,646 samples, 0.02%)</title><rect x="565.8" y="1717" width="0.2" height="15.0" fill="rgb(245,213,41)" rx="2" ry="2" />
<text  x="568.77" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (61,419,393 samples, 0.12%)</title><rect x="217.7" y="1445" width="1.4" height="15.0" fill="rgb(244,144,42)" rx="2" ry="2" />
<text  x="220.71" y="1455.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Vector, true&gt;::~vector (16,996,906 samples, 0.03%)</title><rect x="481.1" y="1733" width="0.4" height="15.0" fill="rgb(208,141,37)" rx="2" ry="2" />
<text  x="484.07" y="1743.5" ></text>
</g>
<g >
<title>duckdb::InsertBinder::~InsertBinder (22,662,077 samples, 0.04%)</title><rect x="937.1" y="1733" width="0.6" height="15.0" fill="rgb(221,197,32)" rx="2" ry="2" />
<text  x="940.15" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ExpressionIterator::EnumerateChildren (4,901,288 samples, 0.01%)</title><rect x="974.3" y="1717" width="0.1" height="15.0" fill="rgb(230,108,47)" rx="2" ry="2" />
<text  x="977.26" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::FilterPushdown::Filter, std::default_delete&lt;duckdb::FilterPushdown::Filter&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::FilterPushdown::Filter, std::default_delete&lt;duckdb::FilterPushdown::Filter&gt;, true&gt; &gt; &gt;::empty (4,496,162 samples, 0.01%)</title><rect x="746.9" y="1733" width="0.1" height="15.0" fill="rgb(239,103,13)" rx="2" ry="2" />
<text  x="749.86" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::FunctionExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (9,758,886 samples, 0.02%)</title><rect x="785.8" y="1845" width="0.2" height="15.0" fill="rgb(248,15,21)" rx="2" ry="2" />
<text  x="788.77" y="1855.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (12,575,178 samples, 0.02%)</title><rect x="508.7" y="1845" width="0.3" height="15.0" fill="rgb(239,40,26)" rx="2" ry="2" />
<text  x="511.69" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::operator= (17,725,076 samples, 0.03%)</title><rect x="1026.0" y="1829" width="0.4" height="15.0" fill="rgb(210,198,51)" rx="2" ry="2" />
<text  x="1028.99" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnDataCollection, std::default_delete&lt;duckdb::ColumnDataCollection&gt;, true&gt;::unique_ptr (4,374,823 samples, 0.01%)</title><rect x="389.3" y="1909" width="0.1" height="15.0" fill="rgb(222,3,9)" rx="2" ry="2" />
<text  x="392.29" y="1919.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::~ColumnData (115,407,882 samples, 0.23%)</title><rect x="241.5" y="981" width="2.6" height="15.0" fill="rgb(244,224,23)" rx="2" ry="2" />
<text  x="244.47" y="991.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::PreparedStatementData&gt;::shared_ptr&lt;std::allocator&lt;duckdb::PreparedStatementData&gt;, duckdb::StatementType&amp;&gt; (34,579,741 samples, 0.07%)</title><rect x="1040.5" y="1861" width="0.8" height="15.0" fill="rgb(208,160,41)" rx="2" ry="2" />
<text  x="1043.52" y="1871.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::extent_try_coalesce_large (15,200,109 samples, 0.03%)</title><rect x="347.7" y="661" width="0.4" height="15.0" fill="rgb(244,53,13)" rx="2" ry="2" />
<text  x="350.71" y="671.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (9,664,159 samples, 0.02%)</title><rect x="1040.3" y="1829" width="0.2" height="15.0" fill="rgb(211,150,11)" rx="2" ry="2" />
<text  x="1043.28" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::operator= (7,230,601 samples, 0.01%)</title><rect x="202.3" y="1509" width="0.2" height="15.0" fill="rgb(229,175,8)" rx="2" ry="2" />
<text  x="205.32" y="1519.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned char [], std::default_delete&lt;unsigned char []&gt; &gt;::operator= (5,895,005 samples, 0.01%)</title><rect x="901.8" y="1461" width="0.1" height="15.0" fill="rgb(241,215,14)" rx="2" ry="2" />
<text  x="904.79" y="1471.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_get (4,539,321 samples, 0.01%)</title><rect x="897.2" y="1413" width="0.1" height="15.0" fill="rgb(225,211,40)" rx="2" ry="2" />
<text  x="900.16" y="1423.5" ></text>
</g>
<g >
<title>duckdb::LocalTableManager::GetOrCreateStorage (439,149,707 samples, 0.86%)</title><rect x="422.4" y="1765" width="10.1" height="15.0" fill="rgb(228,56,24)" rx="2" ry="2" />
<text  x="425.35" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_free (233,444,866 samples, 0.46%)</title><rect x="344.2" y="869" width="5.4" height="15.0" fill="rgb(227,202,0)" rx="2" ry="2" />
<text  x="347.24" y="879.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (364,194,645 samples, 0.71%)</title><rect x="341.8" y="1301" width="8.4" height="15.0" fill="rgb(227,129,46)" rx="2" ry="2" />
<text  x="344.79" y="1311.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (7,248,867 samples, 0.01%)</title><rect x="243.1" y="437" width="0.2" height="15.0" fill="rgb(253,154,7)" rx="2" ry="2" />
<text  x="246.15" y="447.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (5,707,331 samples, 0.01%)</title><rect x="289.9" y="1349" width="0.1" height="15.0" fill="rgb(227,57,37)" rx="2" ry="2" />
<text  x="292.87" y="1359.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_event (9,729,742 samples, 0.02%)</title><rect x="891.6" y="1381" width="0.2" height="15.0" fill="rgb(210,131,26)" rx="2" ry="2" />
<text  x="894.59" y="1391.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (4,652,359 samples, 0.01%)</title><rect x="639.4" y="1637" width="0.1" height="15.0" fill="rgb(216,225,38)" rx="2" ry="2" />
<text  x="642.39" y="1647.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;*&gt; (8,791,747 samples, 0.02%)</title><rect x="1036.2" y="1541" width="0.2" height="15.0" fill="rgb(242,212,4)" rx="2" ry="2" />
<text  x="1039.19" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (11,443,262 samples, 0.02%)</title><rect x="88.4" y="2005" width="0.3" height="15.0" fill="rgb(245,76,37)" rx="2" ry="2" />
<text  x="91.41" y="2015.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, false&gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt; (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1269" width="0.3" height="15.0" fill="rgb(238,129,18)" rx="2" ry="2" />
<text  x="1120.47" y="1279.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (13,945,574 samples, 0.03%)</title><rect x="331.1" y="1813" width="0.3" height="15.0" fill="rgb(248,23,36)" rx="2" ry="2" />
<text  x="334.09" y="1823.5" ></text>
</g>
<g >
<title>duckdb::DataTable::InitializeScanWithOffset (142,672,161 samples, 0.28%)</title><rect x="299.0" y="1717" width="3.2" height="15.0" fill="rgb(243,137,40)" rx="2" ry="2" />
<text  x="301.96" y="1727.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::PhysicalExpressionScan&gt;::operator (58,102,868 samples, 0.11%)</title><rect x="915.2" y="1749" width="1.3" height="15.0" fill="rgb(225,164,53)" rx="2" ry="2" />
<text  x="918.16" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ConjunctionExpressionMatcher, std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt;, void&gt; (7,829,672 samples, 0.02%)</title><rect x="807.5" y="1829" width="0.1" height="15.0" fill="rgb(215,95,44)" rx="2" ry="2" />
<text  x="810.45" y="1839.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, true&gt;::~vector (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1589" width="0.3" height="15.0" fill="rgb(207,107,40)" rx="2" ry="2" />
<text  x="835.82" y="1599.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (9,768,482 samples, 0.02%)</title><rect x="750.0" y="1717" width="0.2" height="15.0" fill="rgb(216,28,22)" rx="2" ry="2" />
<text  x="753.02" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::CommitState::CommitState (5,990,145 samples, 0.01%)</title><rect x="246.4" y="1813" width="0.2" height="15.0" fill="rgb(251,149,21)" rx="2" ry="2" />
<text  x="249.44" y="1823.5" ></text>
</g>
<g >
<title>ext4_sync_file (144,897,321 samples, 0.28%)</title><rect x="249.2" y="1653" width="3.3" height="15.0" fill="rgb(206,204,27)" rx="2" ry="2" />
<text  x="252.16" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;*, std::shared_ptr&lt;duckdb::MetaPipeline&gt; &gt; (4,981,188 samples, 0.01%)</title><rect x="1092.2" y="1829" width="0.1" height="15.0" fill="rgb(228,178,42)" rx="2" ry="2" />
<text  x="1095.20" y="1839.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VersionNode,  (29,202,935 samples, 0.06%)</title><rect x="415.4" y="1637" width="0.7" height="15.0" fill="rgb(241,54,14)" rx="2" ry="2" />
<text  x="418.39" y="1647.5" ></text>
</g>
<g >
<title>mmput (92,489,977 samples, 0.18%)</title><rect x="1177.6" y="1957" width="2.1" height="15.0" fill="rgb(254,171,51)" rx="2" ry="2" />
<text  x="1180.60" y="1967.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (65,778,154 samples, 0.13%)</title><rect x="289.1" y="1669" width="1.6" height="15.0" fill="rgb(224,53,14)" rx="2" ry="2" />
<text  x="292.15" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ScalarFunction::ScalarFunction (6,378,611 samples, 0.01%)</title><rect x="1114.8" y="1701" width="0.2" height="15.0" fill="rgb(235,118,51)" rx="2" ry="2" />
<text  x="1117.81" y="1711.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (92,593,312 samples, 0.18%)</title><rect x="724.1" y="1781" width="2.1" height="15.0" fill="rgb(237,71,54)" rx="2" ry="2" />
<text  x="727.08" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1093" width="0.3" height="15.0" fill="rgb(209,220,27)" rx="2" ry="2" />
<text  x="1120.47" y="1103.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::push_back (12,976,396 samples, 0.03%)</title><rect x="793.8" y="1845" width="0.3" height="15.0" fill="rgb(242,107,46)" rx="2" ry="2" />
<text  x="796.75" y="1855.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::StartQuery (19,756,400 samples, 0.04%)</title><rect x="1105.1" y="1925" width="0.4" height="15.0" fill="rgb(207,150,25)" rx="2" ry="2" />
<text  x="1108.07" y="1935.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::ExecuteForever (2,349,453,821 samples, 4.58%)</title><rect x="91.1" y="1877" width="54.1" height="15.0" fill="rgb(247,50,8)" rx="2" ry="2" />
<text  x="94.10" y="1887.5" >duckd..</text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (87,531,616 samples, 0.17%)</title><rect x="241.9" y="709" width="2.0" height="15.0" fill="rgb(222,47,48)" rx="2" ry="2" />
<text  x="244.86" y="719.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; (26,940,362 samples, 0.05%)</title><rect x="483.9" y="1701" width="0.6" height="15.0" fill="rgb(216,201,45)" rx="2" ry="2" />
<text  x="486.91" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1525" width="0.3" height="15.0" fill="rgb(248,224,17)" rx="2" ry="2" />
<text  x="1120.47" y="1535.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;unsigned long const*, unsigned long*, unsigned long&gt; (18,857,072 samples, 0.04%)</title><rect x="661.4" y="1717" width="0.4" height="15.0" fill="rgb(227,62,0)" rx="2" ry="2" />
<text  x="664.41" y="1727.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (26,711,573 samples, 0.05%)</title><rect x="42.4" y="2021" width="0.6" height="15.0" fill="rgb(247,167,22)" rx="2" ry="2" />
<text  x="45.40" y="2031.5" ></text>
</g>
<g >
<title>duckdb::FilterPushdown::FinishPushdown (147,052,044 samples, 0.29%)</title><rect x="746.0" y="1797" width="3.4" height="15.0" fill="rgb(237,180,47)" rx="2" ry="2" />
<text  x="749.02" y="1807.5" ></text>
</g>
<g >
<title>std::locale::locale (8,989,718 samples, 0.02%)</title><rect x="90.5" y="1989" width="0.3" height="15.0" fill="rgb(219,176,11)" rx="2" ry="2" />
<text  x="93.54" y="1999.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt;::__uniq_ptr_impl (5,030,184 samples, 0.01%)</title><rect x="224.1" y="1637" width="0.1" height="15.0" fill="rgb(254,173,11)" rx="2" ry="2" />
<text  x="227.12" y="1647.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::GetDataPointer (16,148,495 samples, 0.03%)</title><rect x="472.8" y="1733" width="0.4" height="15.0" fill="rgb(243,131,21)" rx="2" ry="2" />
<text  x="475.79" y="1743.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::VectorCache (83,210,812 samples, 0.16%)</title><rect x="400.7" y="1797" width="1.9" height="15.0" fill="rgb(254,49,21)" rx="2" ry="2" />
<text  x="403.71" y="1807.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (67,373,394 samples, 0.13%)</title><rect x="548.3" y="1637" width="1.5" height="15.0" fill="rgb(229,35,44)" rx="2" ry="2" />
<text  x="551.27" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::SwizzleMetaData, true&gt;::vector (4,512,496 samples, 0.01%)</title><rect x="864.1" y="1621" width="0.1" height="15.0" fill="rgb(240,170,47)" rx="2" ry="2" />
<text  x="867.05" y="1631.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::unique_ptr (5,873,228 samples, 0.01%)</title><rect x="952.9" y="1637" width="0.1" height="15.0" fill="rgb(216,95,14)" rx="2" ry="2" />
<text  x="955.90" y="1647.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (5,398,013 samples, 0.01%)</title><rect x="547.2" y="1701" width="0.1" height="15.0" fill="rgb(251,159,23)" rx="2" ry="2" />
<text  x="550.20" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::get (4,729,431 samples, 0.01%)</title><rect x="795.4" y="1797" width="0.1" height="15.0" fill="rgb(235,218,51)" rx="2" ry="2" />
<text  x="798.41" y="1807.5" ></text>
</g>
<g >
<title>duckdb::PhysicalPlanGenerator::CreatePlan (2,495,906,195 samples, 4.87%)</title><rect x="860.8" y="1797" width="57.4" height="15.0" fill="rgb(244,175,42)" rx="2" ry="2" />
<text  x="863.79" y="1807.5" >duckdb..</text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VerifyInternal (80,922,015 samples, 0.16%)</title><rect x="775.7" y="1797" width="1.9" height="15.0" fill="rgb(208,191,32)" rx="2" ry="2" />
<text  x="778.74" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (5,208,639 samples, 0.01%)</title><rect x="946.7" y="1589" width="0.1" height="15.0" fill="rgb(228,169,46)" rx="2" ry="2" />
<text  x="949.70" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::release (4,586,493 samples, 0.01%)</title><rect x="530.4" y="1621" width="0.1" height="15.0" fill="rgb(249,68,39)" rx="2" ry="2" />
<text  x="533.37" y="1631.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Pipeline&gt;::shared_ptr (5,027,777 samples, 0.01%)</title><rect x="1084.4" y="1733" width="0.1" height="15.0" fill="rgb(223,187,40)" rx="2" ry="2" />
<text  x="1087.40" y="1743.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::Combine (165,328,021 samples, 0.32%)</title><rect x="477.1" y="1829" width="3.8" height="15.0" fill="rgb(239,211,36)" rx="2" ry="2" />
<text  x="480.07" y="1839.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::Binder, std::allocator&lt;duckdb::Binder&gt;,  (57,790,855 samples, 0.11%)</title><rect x="1028.0" y="1781" width="1.3" height="15.0" fill="rgb(215,62,36)" rx="2" ry="2" />
<text  x="1030.97" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned long [], std::default_delete&lt;unsigned long&gt;, false&gt;::operator= (6,179,668 samples, 0.01%)</title><rect x="900.1" y="1461" width="0.2" height="15.0" fill="rgb(206,21,5)" rx="2" ry="2" />
<text  x="903.13" y="1471.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt; &gt;::_M_ptr (4,429,155 samples, 0.01%)</title><rect x="553.7" y="1765" width="0.1" height="15.0" fill="rgb(254,29,2)" rx="2" ry="2" />
<text  x="556.67" y="1775.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (132,648,775 samples, 0.26%)</title><rect x="650.4" y="1749" width="3.0" height="15.0" fill="rgb(242,88,18)" rx="2" ry="2" />
<text  x="653.37" y="1759.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::BufferHandle, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt; &gt;::clear (47,827,916 samples, 0.09%)</title><rect x="469.7" y="1765" width="1.1" height="15.0" fill="rgb(231,106,28)" rx="2" ry="2" />
<text  x="472.65" y="1775.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, duckdb::EntryValue&gt;::~pair (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1253" width="0.3" height="15.0" fill="rgb(253,114,34)" rx="2" ry="2" />
<text  x="1120.47" y="1263.5" ></text>
</g>
<g >
<title>duckdb::Binding::GetBindingIndex (6,437,534 samples, 0.01%)</title><rect x="953.5" y="1589" width="0.2" height="15.0" fill="rgb(236,180,0)" rx="2" ry="2" />
<text  x="956.51" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ChunkMetaData, std::allocator&lt;duckdb::ChunkMetaData&gt; &gt;::_M_realloc_insert&lt;duckdb::ChunkMetaData&gt; (23,468,568 samples, 0.05%)</title><rect x="383.8" y="1861" width="0.6" height="15.0" fill="rgb(245,128,32)" rx="2" ry="2" />
<text  x="386.81" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;::~unique_ptr (14,005,918 samples, 0.03%)</title><rect x="500.0" y="1365" width="0.3" height="15.0" fill="rgb(232,54,27)" rx="2" ry="2" />
<text  x="502.99" y="1375.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::deallocate (5,397,325 samples, 0.01%)</title><rect x="673.9" y="1733" width="0.1" height="15.0" fill="rgb(226,4,29)" rx="2" ry="2" />
<text  x="676.87" y="1743.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::LocalTableStorage,  (457,634,368 samples, 0.89%)</title><rect x="235.3" y="1797" width="10.5" height="15.0" fill="rgb(235,53,19)" rx="2" ry="2" />
<text  x="238.29" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (12,421,922 samples, 0.02%)</title><rect x="895.5" y="1637" width="0.3" height="15.0" fill="rgb(250,148,29)" rx="2" ry="2" />
<text  x="898.50" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::ColumnBinding, std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (5,477,300 samples, 0.01%)</title><rect x="763.1" y="1605" width="0.1" height="15.0" fill="rgb(253,42,2)" rx="2" ry="2" />
<text  x="766.06" y="1615.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (6,471,143 samples, 0.01%)</title><rect x="890.4" y="1429" width="0.2" height="15.0" fill="rgb(219,77,48)" rx="2" ry="2" />
<text  x="893.42" y="1439.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::~vector (4,390,997 samples, 0.01%)</title><rect x="987.1" y="1813" width="0.1" height="15.0" fill="rgb(208,218,48)" rx="2" ry="2" />
<text  x="990.08" y="1823.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (31,258,449 samples, 0.06%)</title><rect x="247.7" y="1525" width="0.7" height="15.0" fill="rgb(238,25,28)" rx="2" ry="2" />
<text  x="250.66" y="1535.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1701" width="1.9" height="15.0" fill="rgb(226,10,41)" rx="2" ry="2" />
<text  x="1120.81" y="1711.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::VectorCacheBuffer (85,820,701 samples, 0.17%)</title><rect x="217.5" y="1541" width="2.0" height="15.0" fill="rgb(238,46,17)" rx="2" ry="2" />
<text  x="220.48" y="1551.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::DistributivityRule, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (8,656,436 samples, 0.02%)</title><rect x="822.4" y="1877" width="0.2" height="15.0" fill="rgb(245,94,54)" rx="2" ry="2" />
<text  x="825.36" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::~vector (14,050,926 samples, 0.03%)</title><rect x="829.9" y="1573" width="0.3" height="15.0" fill="rgb(232,95,17)" rx="2" ry="2" />
<text  x="832.90" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::begin (8,498,787 samples, 0.02%)</title><rect x="720.2" y="1845" width="0.1" height="15.0" fill="rgb(222,1,11)" rx="2" ry="2" />
<text  x="723.15" y="1855.5" ></text>
</g>
<g >
<title>duckdb::JoinOrderOptimizer::ExtractJoinRelations (71,603,938 samples, 0.14%)</title><rect x="753.8" y="1765" width="1.7" height="15.0" fill="rgb(220,151,31)" rx="2" ry="2" />
<text  x="756.81" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_metadata_read (5,318,051 samples, 0.01%)</title><rect x="890.9" y="1397" width="0.1" height="15.0" fill="rgb(241,23,25)" rx="2" ry="2" />
<text  x="893.91" y="1407.5" ></text>
</g>
<g >
<title>duckdb::SelectionVector::~SelectionVector (15,611,107 samples, 0.03%)</title><rect x="211.9" y="1685" width="0.3" height="15.0" fill="rgb(243,79,33)" rx="2" ry="2" />
<text  x="214.86" y="1695.5" ></text>
</g>
<g >
<title>duckdb::SharedConstructor::Create&lt;duckdb::StandardColumnData, duckdb::BlockManager&amp;, duckdb::DataTableInfo&amp;, unsigned long&amp;, unsigned long&amp;, duckdb::LogicalType const&amp;, duckdb::optional_ptr&lt;duckdb::ColumnData&gt;&amp;&gt; (104,671,545 samples, 0.20%)</title><rect x="453.0" y="1685" width="2.4" height="15.0" fill="rgb(251,138,32)" rx="2" ry="2" />
<text  x="456.03" y="1695.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::GetAllocator (5,706,373 samples, 0.01%)</title><rect x="223.2" y="1733" width="0.1" height="15.0" fill="rgb(218,18,42)" rx="2" ry="2" />
<text  x="226.21" y="1743.5" ></text>
</g>
<g >
<title>deactivate_task (8,632,194 samples, 0.02%)</title><rect x="505.8" y="1685" width="0.2" height="15.0" fill="rgb(226,178,15)" rx="2" ry="2" />
<text  x="508.80" y="1695.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::~BaseStatistics (4,350,508 samples, 0.01%)</title><rect x="426.1" y="1429" width="0.1" height="15.0" fill="rgb(244,189,17)" rx="2" ry="2" />
<text  x="429.10" y="1439.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::~RowGroup (329,279,245 samples, 0.64%)</title><rect x="237.6" y="1237" width="7.6" height="15.0" fill="rgb(244,210,13)" rx="2" ry="2" />
<text  x="240.61" y="1247.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (23,637,570 samples, 0.05%)</title><rect x="103.0" y="1493" width="0.6" height="15.0" fill="rgb(235,155,38)" rx="2" ry="2" />
<text  x="106.04" y="1503.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (5,504,722 samples, 0.01%)</title><rect x="108.1" y="1525" width="0.1" height="15.0" fill="rgb(246,160,5)" rx="2" ry="2" />
<text  x="111.09" y="1535.5" ></text>
</g>
<g >
<title>duckdb::StarExpression::~StarExpression (11,004,512 samples, 0.02%)</title><rect x="946.7" y="1637" width="0.2" height="15.0" fill="rgb(206,89,4)" rx="2" ry="2" />
<text  x="949.67" y="1647.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::LogicalOperator*, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt; (4,574,092 samples, 0.01%)</title><rect x="774.3" y="1813" width="0.1" height="15.0" fill="rgb(236,182,30)" rx="2" ry="2" />
<text  x="777.26" y="1823.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::ProgressBar*, std::default_delete&lt;duckdb::ProgressBar&gt; &gt; (10,664,638 samples, 0.02%)</title><rect x="513.1" y="1877" width="0.3" height="15.0" fill="rgb(244,229,39)" rx="2" ry="2" />
<text  x="516.13" y="1887.5" ></text>
</g>
<g >
<title>duckdb::Vector::Vector (11,387,787 samples, 0.02%)</title><rect x="494.9" y="1717" width="0.2" height="15.0" fill="rgb(253,76,22)" rx="2" ry="2" />
<text  x="497.87" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, true&gt;::vector (6,027,305 samples, 0.01%)</title><rect x="853.1" y="1781" width="0.2" height="15.0" fill="rgb(224,183,10)" rx="2" ry="2" />
<text  x="856.15" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Binder::BindSelectNode (1,290,277,518 samples, 2.52%)</title><rect x="941.4" y="1765" width="29.6" height="15.0" fill="rgb(208,86,54)" rx="2" ry="2" />
<text  x="944.36" y="1775.5" >du..</text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_alloc (7,865,395 samples, 0.02%)</title><rect x="492.9" y="1477" width="0.2" height="15.0" fill="rgb(250,199,3)" rx="2" ry="2" />
<text  x="495.87" y="1487.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Rule&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; &gt;::_S_do_relocate (6,851,491 samples, 0.01%)</title><rect x="738.1" y="1637" width="0.1" height="15.0" fill="rgb(237,220,1)" rx="2" ry="2" />
<text  x="741.08" y="1647.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::EndOperator (60,722,767 samples, 0.12%)</title><rect x="361.2" y="1861" width="1.4" height="15.0" fill="rgb(213,172,11)" rx="2" ry="2" />
<text  x="364.18" y="1871.5" ></text>
</g>
<g >
<title>clear_page_rep (32,578,991 samples, 0.06%)</title><rect x="1137.5" y="1861" width="0.7" height="15.0" fill="rgb(213,78,40)" rx="2" ry="2" />
<text  x="1140.48" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr (5,137,671 samples, 0.01%)</title><rect x="820.1" y="1765" width="0.1" height="15.0" fill="rgb(229,81,9)" rx="2" ry="2" />
<text  x="823.11" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::get (6,235,687 samples, 0.01%)</title><rect x="786.8" y="1797" width="0.2" height="15.0" fill="rgb(214,18,8)" rx="2" ry="2" />
<text  x="789.81" y="1807.5" ></text>
</g>
<g >
<title>std::function&lt;void  (96,763,652 samples, 0.19%)</title><rect x="738.6" y="1701" width="2.2" height="15.0" fill="rgb(229,87,37)" rx="2" ry="2" />
<text  x="741.59" y="1711.5" ></text>
</g>
<g >
<title>duckdb::SharedConstructor::Create&lt;duckdb::StandardColumnData, duckdb::BlockManager&amp;, duckdb::DataTableInfo&amp;, unsigned long&amp;, unsigned long&amp;, duckdb::LogicalType const&amp;, duckdb::optional_ptr&lt;duckdb::ColumnData&gt;&amp;&gt; (8,249,785 samples, 0.02%)</title><rect x="104.7" y="1637" width="0.2" height="15.0" fill="rgb(241,39,47)" rx="2" ry="2" />
<text  x="107.72" y="1647.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; &gt; (4,902,325 samples, 0.01%)</title><rect x="711.3" y="1813" width="0.1" height="15.0" fill="rgb(240,35,30)" rx="2" ry="2" />
<text  x="714.30" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (32,302,162 samples, 0.06%)</title><rect x="927.7" y="1685" width="0.7" height="15.0" fill="rgb(207,76,32)" rx="2" ry="2" />
<text  x="930.65" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt;::~unique_ptr (16,453,796 samples, 0.03%)</title><rect x="226.8" y="1525" width="0.4" height="15.0" fill="rgb(216,103,11)" rx="2" ry="2" />
<text  x="229.81" y="1535.5" ></text>
</g>
<g >
<title>duckdb::DuckSchemaEntry::GetEntry (96,810,156 samples, 0.19%)</title><rect x="1004.4" y="1749" width="2.3" height="15.0" fill="rgb(205,25,11)" rx="2" ry="2" />
<text  x="1007.45" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt; &gt;::_S_do_relocate (5,908,024 samples, 0.01%)</title><rect x="1054.1" y="1749" width="0.1" height="15.0" fill="rgb(253,41,28)" rx="2" ry="2" />
<text  x="1057.07" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; (26,301,805 samples, 0.05%)</title><rect x="974.7" y="1701" width="0.6" height="15.0" fill="rgb(217,21,6)" rx="2" ry="2" />
<text  x="977.68" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt; &gt;::_M_deallocate_node (4,900,080 samples, 0.01%)</title><rect x="108.7" y="1669" width="0.1" height="15.0" fill="rgb(233,17,26)" rx="2" ry="2" />
<text  x="111.70" y="1679.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, duckdb::OperatorInformation, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt; &gt;::find (7,366,549 samples, 0.01%)</title><rect x="480.0" y="1797" width="0.1" height="15.0" fill="rgb(231,112,16)" rx="2" ry="2" />
<text  x="482.96" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;duckdb::AttachedDatabase*&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (9,486,056 samples, 0.02%)</title><rect x="991.8" y="1605" width="0.2" height="15.0" fill="rgb(229,62,23)" rx="2" ry="2" />
<text  x="994.78" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (4,664,870 samples, 0.01%)</title><rect x="430.0" y="1461" width="0.1" height="15.0" fill="rgb(224,207,51)" rx="2" ry="2" />
<text  x="433.00" y="1471.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::AttachedDatabase*, duckdb::Transaction*, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt; &gt;::operator[] (35,745,325 samples, 0.07%)</title><rect x="991.3" y="1637" width="0.9" height="15.0" fill="rgb(253,219,8)" rx="2" ry="2" />
<text  x="994.35" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (10,290,373 samples, 0.02%)</title><rect x="471.7" y="1701" width="0.2" height="15.0" fill="rgb(253,190,25)" rx="2" ry="2" />
<text  x="474.70" y="1711.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::MetaTransaction&gt;::operator (22,448,934 samples, 0.04%)</title><rect x="332.1" y="1829" width="0.5" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="335.06" y="1839.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Expression const*, true&gt;::~vector (4,991,095 samples, 0.01%)</title><rect x="906.4" y="1749" width="0.1" height="15.0" fill="rgb(221,112,19)" rx="2" ry="2" />
<text  x="909.41" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; &gt;::push_back (28,488,107 samples, 0.06%)</title><rect x="905.4" y="1733" width="0.6" height="15.0" fill="rgb(215,98,47)" rx="2" ry="2" />
<text  x="908.35" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_choose_hard (6,525,978 samples, 0.01%)</title><rect x="107.4" y="1301" width="0.2" height="15.0" fill="rgb(251,187,38)" rx="2" ry="2" />
<text  x="110.43" y="1311.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundTableRef, std::default_delete&lt;duckdb::BoundTableRef&gt; &gt;::operator= (10,181,423 samples, 0.02%)</title><rect x="940.7" y="1733" width="0.2" height="15.0" fill="rgb(238,97,53)" rx="2" ry="2" />
<text  x="943.70" y="1743.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (117,415,303 samples, 0.23%)</title><rect x="1016.0" y="1797" width="2.7" height="15.0" fill="rgb(220,126,47)" rx="2" ry="2" />
<text  x="1018.97" y="1807.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::~OperatorProfiler (12,476,663 samples, 0.02%)</title><rect x="335.7" y="1669" width="0.3" height="15.0" fill="rgb(250,193,38)" rx="2" ry="2" />
<text  x="338.75" y="1679.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;unsigned long, true, false&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;unsigned long, true, false&gt;, bool, true&gt; (7,531,490 samples, 0.01%)</title><rect x="659.0" y="1717" width="0.1" height="15.0" fill="rgb(224,43,0)" rx="2" ry="2" />
<text  x="661.97" y="1727.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::RowGroupCollection, std::allocator&lt;duckdb::RowGroupCollection&gt;,  (4,498,174 samples, 0.01%)</title><rect x="236.0" y="1589" width="0.1" height="15.0" fill="rgb(245,98,8)" rx="2" ry="2" />
<text  x="239.00" y="1599.5" ></text>
</g>
<g >
<title>duckdb::LocalTableManager::EstimatedSize (18,649,441 samples, 0.04%)</title><rect x="189.6" y="1797" width="0.5" height="15.0" fill="rgb(233,37,47)" rx="2" ry="2" />
<text  x="192.62" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (26,711,573 samples, 0.05%)</title><rect x="42.4" y="2005" width="0.6" height="15.0" fill="rgb(222,148,42)" rx="2" ry="2" />
<text  x="45.40" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt;::_S_relocate (23,694,915 samples, 0.05%)</title><rect x="828.1" y="1829" width="0.6" height="15.0" fill="rgb(245,107,3)" rx="2" ry="2" />
<text  x="831.14" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::release (8,285,337 samples, 0.02%)</title><rect x="786.8" y="1813" width="0.2" height="15.0" fill="rgb(216,12,23)" rx="2" ry="2" />
<text  x="789.76" y="1823.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::weak_ptr&lt;duckdb::Event&gt;, true&gt;::~vector (10,277,069 samples, 0.02%)</title><rect x="356.9" y="1605" width="0.2" height="15.0" fill="rgb(241,142,30)" rx="2" ry="2" />
<text  x="359.91" y="1615.5" ></text>
</g>
<g >
<title>duckdb::Vector::SetValue (91,261,183 samples, 0.18%)</title><rect x="899.1" y="1669" width="2.1" height="15.0" fill="rgb(217,5,38)" rx="2" ry="2" />
<text  x="902.12" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1829" width="0.1" height="15.0" fill="rgb(228,133,39)" rx="2" ry="2" />
<text  x="14.25" y="1839.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::ResetFromCache (14,869,067 samples, 0.03%)</title><rect x="220.6" y="1701" width="0.4" height="15.0" fill="rgb(246,210,39)" rx="2" ry="2" />
<text  x="223.61" y="1711.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;duckdb::VectorMetaData, duckdb::VectorMetaData, std::allocator&lt;duckdb::VectorMetaData&gt; &gt; (8,760,194 samples, 0.02%)</title><rect x="864.3" y="1605" width="0.2" height="15.0" fill="rgb(232,59,25)" rx="2" ry="2" />
<text  x="867.26" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::operator= (7,890,652 samples, 0.02%)</title><rect x="983.1" y="1797" width="0.2" height="15.0" fill="rgb(247,171,50)" rx="2" ry="2" />
<text  x="986.14" y="1807.5" ></text>
</g>
<g >
<title>duckdb::AdjustTextForRendering (213,281,197 samples, 0.42%)</title><rect x="625.5" y="1765" width="5.0" height="15.0" fill="rgb(233,144,26)" rx="2" ry="2" />
<text  x="628.55" y="1775.5" ></text>
</g>
<g >
<title>handle_mm_fault (11,261,786 samples, 0.02%)</title><rect x="413.5" y="1573" width="0.3" height="15.0" fill="rgb(215,166,3)" rx="2" ry="2" />
<text  x="416.51" y="1583.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::core_yylex_init (7,917,435 samples, 0.02%)</title><rect x="524.6" y="1861" width="0.2" height="15.0" fill="rgb(242,30,38)" rx="2" ry="2" />
<text  x="527.57" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::Pipeline&gt;, duckdb::ReferenceHashFunction&lt;duckdb::Pipeline&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;duckdb::Pipeline&amp;, duckdb::PipelineEventStack&gt; &gt; (39,509,031 samples, 0.08%)</title><rect x="1052.3" y="1781" width="1.0" height="15.0" fill="rgb(239,102,51)" rx="2" ry="2" />
<text  x="1055.34" y="1791.5" ></text>
</g>
<g >
<title>__asan_memcpy (17,373,790 samples, 0.03%)</title><rect x="274.9" y="1541" width="0.4" height="15.0" fill="rgb(208,44,26)" rx="2" ry="2" />
<text  x="277.88" y="1551.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt;::deallocate (7,429,748 samples, 0.01%)</title><rect x="35.9" y="2021" width="0.1" height="15.0" fill="rgb(216,149,51)" rx="2" ry="2" />
<text  x="38.88" y="2031.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_fastpath (9,870,417 samples, 0.02%)</title><rect x="326.4" y="1413" width="0.2" height="15.0" fill="rgb(220,29,54)" rx="2" ry="2" />
<text  x="329.37" y="1423.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (6,862,457 samples, 0.01%)</title><rect x="1176.3" y="2021" width="0.1" height="15.0" fill="rgb(236,0,9)" rx="2" ry="2" />
<text  x="1179.26" y="2031.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::AllocatorDebugInfo, std::default_delete&lt;duckdb::AllocatorDebugInfo&gt;, true&gt;::~unique_ptr (4,545,601 samples, 0.01%)</title><rect x="340.8" y="1045" width="0.1" height="15.0" fill="rgb(214,68,9)" rx="2" ry="2" />
<text  x="343.78" y="1055.5" ></text>
</g>
<g >
<title>duckdb::DatabaseManager::GetDefaultDatabase[abi:cxx11] (6,939,677 samples, 0.01%)</title><rect x="995.1" y="1749" width="0.1" height="15.0" fill="rgb(233,51,9)" rx="2" ry="2" />
<text  x="998.07" y="1759.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long, unsigned long&gt;::pair&lt;unsigned long&amp;, unsigned long&amp;, true&gt; (6,206,174 samples, 0.01%)</title><rect x="605.9" y="1717" width="0.2" height="15.0" fill="rgb(209,89,24)" rx="2" ry="2" />
<text  x="608.93" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::CreateSegment (129,098,153 samples, 0.25%)</title><rect x="866.6" y="1765" width="2.9" height="15.0" fill="rgb(247,131,25)" rx="2" ry="2" />
<text  x="869.56" y="1775.5" ></text>
</g>
<g >
<title>duckdb::LogicalInsert::GetTableIndex (10,047,471 samples, 0.02%)</title><rect x="779.5" y="1829" width="0.3" height="15.0" fill="rgb(224,182,29)" rx="2" ry="2" />
<text  x="782.53" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CatalogEntry, std::default_delete&lt;duckdb::CatalogEntry&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::CatalogEntry&gt;, void&gt; (4,737,734 samples, 0.01%)</title><rect x="1005.2" y="1685" width="0.1" height="15.0" fill="rgb(209,185,39)" rx="2" ry="2" />
<text  x="1008.17" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_trigger (24,093,553 samples, 0.05%)</title><rect x="240.1" y="453" width="0.6" height="15.0" fill="rgb(219,128,32)" rx="2" ry="2" />
<text  x="243.11" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::UnifiedVectorFormat, std::allocator&lt;duckdb::UnifiedVectorFormat&gt; &gt;::_M_default_append (14,412,807 samples, 0.03%)</title><rect x="385.0" y="1893" width="0.3" height="15.0" fill="rgb(245,185,11)" rx="2" ry="2" />
<text  x="388.00" y="1903.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_salloc (4,534,368 samples, 0.01%)</title><rect x="334.1" y="1253" width="0.1" height="15.0" fill="rgb(213,71,17)" rx="2" ry="2" />
<text  x="337.07" y="1263.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::MetaPipeline&gt;::construct&lt;duckdb::MetaPipeline, duckdb::Executor&amp;, duckdb::PipelineBuildState&amp;, duckdb::PhysicalOperator*&gt; (29,738,729 samples, 0.06%)</title><rect x="1081.0" y="1701" width="0.7" height="15.0" fill="rgb(239,68,38)" rx="2" ry="2" />
<text  x="1083.97" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_no_sample (8,299,513 samples, 0.02%)</title><rect x="438.0" y="1461" width="0.2" height="15.0" fill="rgb(205,16,52)" rx="2" ry="2" />
<text  x="441.00" y="1471.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long&gt; (18,501,060 samples, 0.04%)</title><rect x="577.6" y="1749" width="0.4" height="15.0" fill="rgb(220,184,24)" rx="2" ry="2" />
<text  x="580.60" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_trigger (18,263,443 samples, 0.04%)</title><rect x="482.8" y="1349" width="0.4" height="15.0" fill="rgb(254,150,14)" rx="2" ry="2" />
<text  x="485.76" y="1359.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::release (4,721,128 samples, 0.01%)</title><rect x="828.5" y="1685" width="0.1" height="15.0" fill="rgb(251,208,15)" rx="2" ry="2" />
<text  x="831.46" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RowGroup, std::default_delete&lt;duckdb::RowGroup&gt;, true&gt;::~unique_ptr (336,985,521 samples, 0.66%)</title><rect x="237.5" y="1285" width="7.8" height="15.0" fill="rgb(242,197,19)" rx="2" ry="2" />
<text  x="240.50" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::__distance_fw&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; const*&gt; (4,461,501 samples, 0.01%)</title><rect x="734.0" y="1749" width="0.1" height="15.0" fill="rgb(229,21,34)" rx="2" ry="2" />
<text  x="736.99" y="1759.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;::shared_ptr&lt;std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;, unsigned long&amp;&gt; (51,946,965 samples, 0.10%)</title><rect x="899.7" y="1573" width="1.2" height="15.0" fill="rgb(221,69,8)" rx="2" ry="2" />
<text  x="902.66" y="1583.5" ></text>
</g>
<g >
<title>duckdb::StorageManager::GetWriteAheadLog (6,527,140 samples, 0.01%)</title><rect x="190.3" y="1797" width="0.2" height="15.0" fill="rgb(252,143,41)" rx="2" ry="2" />
<text  x="193.30" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Vector::Vector (8,695,318 samples, 0.02%)</title><rect x="294.9" y="1525" width="0.2" height="15.0" fill="rgb(228,156,34)" rx="2" ry="2" />
<text  x="297.85" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (5,338,084 samples, 0.01%)</title><rect x="792.3" y="1829" width="0.1" height="15.0" fill="rgb(213,45,20)" rx="2" ry="2" />
<text  x="795.27" y="1839.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (24,581,404 samples, 0.05%)</title><rect x="915.8" y="1573" width="0.6" height="15.0" fill="rgb(233,209,7)" rx="2" ry="2" />
<text  x="918.83" y="1583.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::allocated (21,717,411 samples, 0.04%)</title><rect x="18.8" y="2005" width="0.5" height="15.0" fill="rgb(245,159,23)" rx="2" ry="2" />
<text  x="21.80" y="2015.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::RowGroupCollection,  (8,070,322 samples, 0.02%)</title><rect x="430.5" y="1589" width="0.2" height="15.0" fill="rgb(232,46,2)" rx="2" ry="2" />
<text  x="433.51" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_check_len (6,088,745 samples, 0.01%)</title><rect x="578.1" y="1765" width="0.1" height="15.0" fill="rgb(228,118,30)" rx="2" ry="2" />
<text  x="581.06" y="1775.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (4,606,637 samples, 0.01%)</title><rect x="32.1" y="2021" width="0.1" height="15.0" fill="rgb(222,184,38)" rx="2" ry="2" />
<text  x="35.14" y="2031.5" ></text>
</g>
<g >
<title>duckdb::ExpressionRewriter::VisitExpression (91,263,942 samples, 0.18%)</title><rect x="738.7" y="1653" width="2.1" height="15.0" fill="rgb(229,60,12)" rx="2" ry="2" />
<text  x="741.68" y="1663.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::Elapsed (5,014,317 samples, 0.01%)</title><rect x="1032.2" y="1877" width="0.1" height="15.0" fill="rgb(223,80,2)" rx="2" ry="2" />
<text  x="1035.22" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (4,382,983 samples, 0.01%)</title><rect x="923.4" y="1829" width="0.1" height="15.0" fill="rgb(227,34,40)" rx="2" ry="2" />
<text  x="926.38" y="1839.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RenderTree, unsigned long&amp;, unsigned long&amp;&gt; (31,893,877 samples, 0.06%)</title><rect x="623.2" y="1765" width="0.7" height="15.0" fill="rgb(244,66,26)" rx="2" ry="2" />
<text  x="626.15" y="1775.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::PipelineExecutor, duckdb::ClientContext&amp;, duckdb::Pipeline&amp;&gt; (202,112,989 samples, 0.39%)</title><rect x="400.3" y="1877" width="4.7" height="15.0" fill="rgb(229,188,32)" rx="2" ry="2" />
<text  x="403.30" y="1887.5" ></text>
</g>
<g >
<title>do_page_fault (4,811,192 samples, 0.01%)</title><rect x="1175.6" y="1989" width="0.1" height="15.0" fill="rgb(233,127,0)" rx="2" ry="2" />
<text  x="1178.60" y="1999.5" ></text>
</g>
<g >
<title>duckdb::PipelineTask::ExecuteTask (356,573,749 samples, 0.70%)</title><rect x="100.7" y="1845" width="8.2" height="15.0" fill="rgb(236,31,22)" rx="2" ry="2" />
<text  x="103.67" y="1855.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::SelectionData, unsigned long&amp;&gt; (17,201,285 samples, 0.03%)</title><rect x="296.4" y="1653" width="0.4" height="15.0" fill="rgb(249,186,43)" rx="2" ry="2" />
<text  x="299.43" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (4,917,632 samples, 0.01%)</title><rect x="388.1" y="1845" width="0.1" height="15.0" fill="rgb(228,28,37)" rx="2" ry="2" />
<text  x="391.09" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::insert&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt;, void&gt; (50,420,568 samples, 0.10%)</title><rect x="1083.8" y="1845" width="1.2" height="15.0" fill="rgb(250,167,20)" rx="2" ry="2" />
<text  x="1086.79" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="869" width="0.1" height="15.0" fill="rgb(231,165,19)" rx="2" ry="2" />
<text  x="14.25" y="879.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::CreatePipeline (24,716,057 samples, 0.05%)</title><rect x="1081.0" y="1669" width="0.6" height="15.0" fill="rgb(220,96,3)" rx="2" ry="2" />
<text  x="1083.99" y="1679.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::InitializeAppend (106,853,511 samples, 0.21%)</title><rect x="102.8" y="1717" width="2.4" height="15.0" fill="rgb(245,45,36)" rx="2" ry="2" />
<text  x="105.78" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::clear (5,528,264 samples, 0.01%)</title><rect x="1029.9" y="1829" width="0.1" height="15.0" fill="rgb(207,36,48)" rx="2" ry="2" />
<text  x="1032.90" y="1839.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VersionNode&gt; &gt;::destroy&lt;duckdb::VersionNode&gt; (22,527,538 samples, 0.04%)</title><rect x="244.5" y="1141" width="0.6" height="15.0" fill="rgb(232,71,18)" rx="2" ry="2" />
<text  x="247.55" y="1151.5" ></text>
</g>
<g >
<title>duckdb::SelectBinder::SelectBinder (27,137,391 samples, 0.05%)</title><rect x="962.3" y="1749" width="0.6" height="15.0" fill="rgb(211,206,50)" rx="2" ry="2" />
<text  x="965.30" y="1759.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::PipelineFinishEvent,  (22,156,753 samples, 0.04%)</title><rect x="1050.6" y="1765" width="0.6" height="15.0" fill="rgb(207,195,37)" rx="2" ry="2" />
<text  x="1053.64" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (57,649,023 samples, 0.11%)</title><rect x="709.0" y="1781" width="1.4" height="15.0" fill="rgb(240,191,22)" rx="2" ry="2" />
<text  x="712.03" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::~vector (5,994,387 samples, 0.01%)</title><rect x="358.0" y="1621" width="0.1" height="15.0" fill="rgb(223,86,42)" rx="2" ry="2" />
<text  x="360.95" y="1631.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (50,041,640 samples, 0.10%)</title><rect x="401.2" y="1589" width="1.1" height="15.0" fill="rgb(223,13,15)" rx="2" ry="2" />
<text  x="404.15" y="1599.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::AllocateVectorInternal (172,928,930 samples, 0.34%)</title><rect x="379.7" y="1877" width="4.0" height="15.0" fill="rgb(221,88,25)" rx="2" ry="2" />
<text  x="382.72" y="1887.5" ></text>
</g>
<g >
<title>duckdb::ConjunctionSimplificationRule::~ConjunctionSimplificationRule (11,357,207 samples, 0.02%)</title><rect x="830.6" y="1717" width="0.2" height="15.0" fill="rgb(220,86,36)" rx="2" ry="2" />
<text  x="833.56" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalProjection::~LogicalProjection (31,615,292 samples, 0.06%)</title><rect x="1036.1" y="1653" width="0.7" height="15.0" fill="rgb(212,146,25)" rx="2" ry="2" />
<text  x="1039.10" y="1663.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, duckdb::OperatorInformation, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt; &gt;::find (5,167,163 samples, 0.01%)</title><rect x="361.9" y="1813" width="0.1" height="15.0" fill="rgb(226,120,18)" rx="2" ry="2" />
<text  x="364.92" y="1823.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::~vector (9,175,697 samples, 0.02%)</title><rect x="615.5" y="1685" width="0.2" height="15.0" fill="rgb(229,225,25)" rx="2" ry="2" />
<text  x="618.49" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundSelectNode, std::default_delete&lt;duckdb::BoundSelectNode&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BoundSelectNode&gt;, void&gt; (8,644,177 samples, 0.02%)</title><rect x="963.8" y="1717" width="0.2" height="15.0" fill="rgb(236,46,9)" rx="2" ry="2" />
<text  x="966.85" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::operator (4,413,560 samples, 0.01%)</title><rect x="659.3" y="1733" width="0.1" height="15.0" fill="rgb(225,94,52)" rx="2" ry="2" />
<text  x="662.25" y="1743.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::insert (35,750,396 samples, 0.07%)</title><rect x="776.8" y="1781" width="0.8" height="15.0" fill="rgb(240,37,24)" rx="2" ry="2" />
<text  x="779.76" y="1791.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::FetchStringFromDict (431,360,269 samples, 0.84%)</title><rect x="272.1" y="1557" width="9.9" height="15.0" fill="rgb(214,220,19)" rx="2" ry="2" />
<text  x="275.11" y="1567.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCheckpointer::DetectBestCompressionMethod (12,551,523 samples, 0.02%)</title><rect x="1117.9" y="1029" width="0.3" height="15.0" fill="rgb(208,83,12)" rx="2" ry="2" />
<text  x="1120.90" y="1039.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (5,752,012 samples, 0.01%)</title><rect x="467.4" y="1717" width="0.1" height="15.0" fill="rgb(245,80,33)" rx="2" ry="2" />
<text  x="470.37" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (5,283,085 samples, 0.01%)</title><rect x="85.5" y="2005" width="0.1" height="15.0" fill="rgb(244,78,33)" rx="2" ry="2" />
<text  x="88.46" y="2015.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::ColumnBinding, std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (16,131,405 samples, 0.03%)</title><rect x="762.9" y="1637" width="0.4" height="15.0" fill="rgb(212,64,22)" rx="2" ry="2" />
<text  x="765.90" y="1647.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RenderTree, unsigned long&amp;, unsigned long&amp;&gt; (31,707,030 samples, 0.06%)</title><rect x="597.6" y="1781" width="0.7" height="15.0" fill="rgb(237,11,14)" rx="2" ry="2" />
<text  x="600.61" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::operator (4,674,260 samples, 0.01%)</title><rect x="596.9" y="1733" width="0.1" height="15.0" fill="rgb(217,50,43)" rx="2" ry="2" />
<text  x="599.92" y="1743.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::Verify (44,400,822 samples, 0.09%)</title><rect x="416.6" y="1669" width="1.0" height="15.0" fill="rgb(236,97,45)" rx="2" ry="2" />
<text  x="419.57" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (7,404,622 samples, 0.01%)</title><rect x="482.2" y="1301" width="0.1" height="15.0" fill="rgb(242,151,29)" rx="2" ry="2" />
<text  x="485.17" y="1311.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt;::find (6,248,800 samples, 0.01%)</title><rect x="727.5" y="1621" width="0.2" height="15.0" fill="rgb(225,178,22)" rx="2" ry="2" />
<text  x="730.53" y="1631.5" ></text>
</g>
<g >
<title>duckdb::AdjustTextForRendering (608,473,085 samples, 1.19%)</title><rect x="557.4" y="1797" width="14.0" height="15.0" fill="rgb(232,132,23)" rx="2" ry="2" />
<text  x="560.42" y="1807.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;*&gt; (189,539,246 samples, 0.37%)</title><rect x="829.1" y="1813" width="4.3" height="15.0" fill="rgb(219,97,45)" rx="2" ry="2" />
<text  x="832.08" y="1823.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::SelectStatement, std::default_delete&lt;duckdb::SelectStatement&gt; &gt;::_M_ptr (4,673,597 samples, 0.01%)</title><rect x="536.7" y="1733" width="0.1" height="15.0" fill="rgb(231,192,21)" rx="2" ry="2" />
<text  x="539.66" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (5,977,921 samples, 0.01%)</title><rect x="1023.3" y="1781" width="0.1" height="15.0" fill="rgb(244,68,21)" rx="2" ry="2" />
<text  x="1026.28" y="1791.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::GetName[abi:cxx11] (5,910,499 samples, 0.01%)</title><rect x="634.7" y="1701" width="0.2" height="15.0" fill="rgb(222,185,43)" rx="2" ry="2" />
<text  x="637.72" y="1711.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; (35,077,907 samples, 0.07%)</title><rect x="1036.1" y="1765" width="0.8" height="15.0" fill="rgb(242,194,17)" rx="2" ry="2" />
<text  x="1039.06" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::CleanupInternal (25,768,715 samples, 0.05%)</title><rect x="516.5" y="1941" width="0.6" height="15.0" fill="rgb(227,194,31)" rx="2" ry="2" />
<text  x="519.47" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (6,280,914 samples, 0.01%)</title><rect x="812.7" y="1749" width="0.2" height="15.0" fill="rgb(226,80,26)" rx="2" ry="2" />
<text  x="815.71" y="1759.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (96,255,609 samples, 0.19%)</title><rect x="355.2" y="1733" width="2.2" height="15.0" fill="rgb(210,222,12)" rx="2" ry="2" />
<text  x="358.15" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt; &gt;::reset (61,182,423 samples, 0.12%)</title><rect x="239.6" y="629" width="1.4" height="15.0" fill="rgb(211,182,47)" rx="2" ry="2" />
<text  x="242.58" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_range_initialize&lt;unsigned long const*&gt; (5,609,398 samples, 0.01%)</title><rect x="779.6" y="1781" width="0.2" height="15.0" fill="rgb(227,165,29)" rx="2" ry="2" />
<text  x="782.63" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (9,456,375 samples, 0.02%)</title><rect x="1032.7" y="1813" width="0.2" height="15.0" fill="rgb(247,172,17)" rx="2" ry="2" />
<text  x="1035.71" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*, std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt; &gt; (7,377,600 samples, 0.01%)</title><rect x="646.0" y="1829" width="0.2" height="15.0" fill="rgb(245,83,9)" rx="2" ry="2" />
<text  x="649.00" y="1839.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::PrivateAllocatorData&gt;::operator (5,243,912 samples, 0.01%)</title><rect x="340.8" y="1109" width="0.1" height="15.0" fill="rgb(254,14,48)" rx="2" ry="2" />
<text  x="343.76" y="1119.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (10,385,666 samples, 0.02%)</title><rect x="302.0" y="1685" width="0.2" height="15.0" fill="rgb(227,160,27)" rx="2" ry="2" />
<text  x="304.99" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Task,  (28,327,224 samples, 0.06%)</title><rect x="95.2" y="1717" width="0.7" height="15.0" fill="rgb(218,169,21)" rx="2" ry="2" />
<text  x="98.22" y="1727.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::FieldWriter (26,754,144 samples, 0.05%)</title><rect x="313.3" y="1621" width="0.6" height="15.0" fill="rgb(229,215,2)" rx="2" ry="2" />
<text  x="316.28" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LocalAppendState::~LocalAppendState (31,675,412 samples, 0.06%)</title><rect x="339.1" y="1509" width="0.7" height="15.0" fill="rgb(244,59,26)" rx="2" ry="2" />
<text  x="342.06" y="1519.5" ></text>
</g>
<g >
<title>wait_on_page_bit (14,448,407 samples, 0.03%)</title><rect x="249.2" y="1589" width="0.4" height="15.0" fill="rgb(254,193,13)" rx="2" ry="2" />
<text  x="252.24" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt; &gt; &gt;::emplace_back&lt;&gt; (17,587,404 samples, 0.03%)</title><rect x="759.8" y="1781" width="0.4" height="15.0" fill="rgb(238,190,10)" rx="2" ry="2" />
<text  x="762.76" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;::operator= (8,019,570 samples, 0.02%)</title><rect x="479.7" y="1797" width="0.2" height="15.0" fill="rgb(242,191,51)" rx="2" ry="2" />
<text  x="482.69" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (11,606,264 samples, 0.02%)</title><rect x="959.4" y="1653" width="0.2" height="15.0" fill="rgb(224,134,38)" rx="2" ry="2" />
<text  x="962.38" y="1663.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::Start (7,775,259 samples, 0.02%)</title><rect x="703.8" y="1845" width="0.2" height="15.0" fill="rgb(245,149,46)" rx="2" ry="2" />
<text  x="706.82" y="1855.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (11,471,342 samples, 0.02%)</title><rect x="546.9" y="1669" width="0.3" height="15.0" fill="rgb(218,169,36)" rx="2" ry="2" />
<text  x="549.89" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::empty (5,223,236 samples, 0.01%)</title><rect x="969.5" y="1749" width="0.1" height="15.0" fill="rgb(235,145,18)" rx="2" ry="2" />
<text  x="972.52" y="1759.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (6,106,029 samples, 0.01%)</title><rect x="580.6" y="1813" width="0.1" height="15.0" fill="rgb(239,98,28)" rx="2" ry="2" />
<text  x="583.60" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::BaseStatistics (11,431,779 samples, 0.02%)</title><rect x="424.8" y="1509" width="0.3" height="15.0" fill="rgb(236,22,6)" rx="2" ry="2" />
<text  x="427.85" y="1519.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt; &gt;::operator= (13,351,014 samples, 0.03%)</title><rect x="808.4" y="1829" width="0.3" height="15.0" fill="rgb(221,111,28)" rx="2" ry="2" />
<text  x="811.36" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BufferedSerializer, std::default_delete&lt;duckdb::BufferedSerializer&gt; &gt;::reset (6,003,794 samples, 0.01%)</title><rect x="593.0" y="1813" width="0.2" height="15.0" fill="rgb(232,75,44)" rx="2" ry="2" />
<text  x="596.02" y="1823.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt;, duckdb::LogicalType*&gt; (5,108,864 samples, 0.01%)</title><rect x="387.4" y="1861" width="0.2" height="15.0" fill="rgb(250,124,33)" rx="2" ry="2" />
<text  x="390.44" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Transaction::Get (171,864,161 samples, 0.34%)</title><rect x="988.8" y="1669" width="3.9" height="15.0" fill="rgb(224,152,24)" rx="2" ry="2" />
<text  x="991.77" y="1679.5" ></text>
</g>
<g >
<title>__asan_register_globals (8,800,283 samples, 0.02%)</title><rect x="1175.3" y="2021" width="0.2" height="15.0" fill="rgb(223,106,35)" rx="2" ry="2" />
<text  x="1178.34" y="2031.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; (10,115,281 samples, 0.02%)</title><rect x="379.1" y="1861" width="0.2" height="15.0" fill="rgb(247,2,36)" rx="2" ry="2" />
<text  x="382.09" y="1871.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::RegisterReadFunctions (5,593,996 samples, 0.01%)</title><rect x="1110.8" y="1909" width="0.2" height="15.0" fill="rgb(207,214,8)" rx="2" ry="2" />
<text  x="1113.83" y="1919.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (72,269,993 samples, 0.14%)</title><rect x="1030.4" y="1829" width="1.7" height="15.0" fill="rgb(232,203,21)" rx="2" ry="2" />
<text  x="1033.41" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::~unique_ptr (11,341,804 samples, 0.02%)</title><rect x="350.5" y="1509" width="0.3" height="15.0" fill="rgb(226,40,5)" rx="2" ry="2" />
<text  x="353.52" y="1519.5" ></text>
</g>
<g >
<title>[unknown] (9,293,352 samples, 0.02%)</title><rect x="78.7" y="2005" width="0.2" height="15.0" fill="rgb(218,52,20)" rx="2" ry="2" />
<text  x="81.71" y="2015.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (166,215,307 samples, 0.32%)</title><rect x="1185.8" y="2037" width="3.8" height="15.0" fill="rgb(225,145,1)" rx="2" ry="2" />
<text  x="1188.80" y="2047.5" ></text>
</g>
<g >
<title>duckdb::CycleCounter::EndSample (5,105,728 samples, 0.01%)</title><rect x="898.6" y="1717" width="0.1" height="15.0" fill="rgb(233,16,24)" rx="2" ry="2" />
<text  x="901.57" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::PendingStatementOrPreparedStatement (18,349,454 samples, 0.04%)</title><rect x="1108.8" y="1877" width="0.5" height="15.0" fill="rgb(246,138,40)" rx="2" ry="2" />
<text  x="1111.84" y="1887.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::get (8,422,949 samples, 0.02%)</title><rect x="571.8" y="1781" width="0.2" height="15.0" fill="rgb(238,14,50)" rx="2" ry="2" />
<text  x="574.80" y="1791.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::InitializeEmpty (13,279,706 samples, 0.03%)</title><rect x="102.2" y="1557" width="0.3" height="15.0" fill="rgb(207,2,11)" rx="2" ry="2" />
<text  x="105.16" y="1567.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::InitializeChunkState (5,813,407 samples, 0.01%)</title><rect x="384.7" y="1909" width="0.1" height="15.0" fill="rgb(223,167,25)" rx="2" ry="2" />
<text  x="387.65" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt;, std::allocator&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; (25,587,162 samples, 0.05%)</title><rect x="1001.1" y="1653" width="0.6" height="15.0" fill="rgb(221,162,38)" rx="2" ry="2" />
<text  x="1004.06" y="1663.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_next_event_compute (4,888,421 samples, 0.01%)</title><rect x="402.0" y="1413" width="0.1" height="15.0" fill="rgb(239,61,5)" rx="2" ry="2" />
<text  x="405.00" y="1423.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::BlockHandle&gt;::shared_ptr (4,374,893 samples, 0.01%)</title><rect x="342.6" y="933" width="0.1" height="15.0" fill="rgb(244,153,23)" rx="2" ry="2" />
<text  x="345.62" y="943.5" ></text>
</g>
<g >
<title>duckdb::FilterCombiner::HasFilters (28,312,434 samples, 0.06%)</title><rect x="745.4" y="1797" width="0.6" height="15.0" fill="rgb(207,16,37)" rx="2" ry="2" />
<text  x="748.36" y="1807.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorToString[abi:cxx11] (4,448,643 samples, 0.01%)</title><rect x="596.7" y="1717" width="0.1" height="15.0" fill="rgb(220,82,53)" rx="2" ry="2" />
<text  x="599.68" y="1727.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::VectorCacheBuffer (124,254,398 samples, 0.24%)</title><rect x="889.9" y="1589" width="2.8" height="15.0" fill="rgb(218,52,19)" rx="2" ry="2" />
<text  x="892.87" y="1599.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, duckdb::CatalogEntryHashFunction, duckdb::CatalogEntryEquality, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt; &gt;::~unordered_set (15,581,689 samples, 0.03%)</title><rect x="924.5" y="1861" width="0.4" height="15.0" fill="rgb(210,82,28)" rx="2" ry="2" />
<text  x="927.52" y="1871.5" ></text>
</g>
<g >
<title>duckdb::make_unsafe_uniq&lt;duckdb::ArenaChunk, duckdb::Allocator&amp;, unsigned long&amp;&gt; (79,349,862 samples, 0.15%)</title><rect x="192.6" y="1733" width="1.8" height="15.0" fill="rgb(221,213,31)" rx="2" ry="2" />
<text  x="195.56" y="1743.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (21,244,545 samples, 0.04%)</title><rect x="98.2" y="1685" width="0.4" height="15.0" fill="rgb(252,43,12)" rx="2" ry="2" />
<text  x="101.16" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocate (97,909,088 samples, 0.19%)</title><rect x="366.5" y="1669" width="2.2" height="15.0" fill="rgb(244,136,8)" rx="2" ry="2" />
<text  x="369.49" y="1679.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::LogicalOperator&gt; &gt; (5,520,912 samples, 0.01%)</title><rect x="1035.5" y="1861" width="0.1" height="15.0" fill="rgb(251,147,48)" rx="2" ry="2" />
<text  x="1038.47" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Catalog::GetSchema (13,568,358 samples, 0.03%)</title><rect x="1115.1" y="1893" width="0.3" height="15.0" fill="rgb(231,68,13)" rx="2" ry="2" />
<text  x="1118.08" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt; &gt;::unique_ptr (10,765,632 samples, 0.02%)</title><rect x="479.0" y="1669" width="0.3" height="15.0" fill="rgb(210,57,27)" rx="2" ry="2" />
<text  x="482.03" y="1679.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::~FunctionExpressionMatcher (11,407,247 samples, 0.02%)</title><rect x="832.6" y="1621" width="0.2" height="15.0" fill="rgb(240,54,53)" rx="2" ry="2" />
<text  x="835.56" y="1631.5" ></text>
</g>
<g >
<title>rmqueue (17,556,400 samples, 0.03%)</title><rect x="1138.3" y="1861" width="0.4" height="15.0" fill="rgb(232,158,11)" rx="2" ry="2" />
<text  x="1141.33" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1637" width="1.9" height="15.0" fill="rgb(207,224,6)" rx="2" ry="2" />
<text  x="1120.81" y="1647.5" ></text>
</g>
<g >
<title>duckdb::PipelineFinishEvent::FinishEvent (43,565,380 samples, 0.08%)</title><rect x="100.7" y="1765" width="1.0" height="15.0" fill="rgb(207,8,52)" rx="2" ry="2" />
<text  x="103.69" y="1775.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::StandardColumnData, std::allocator&lt;duckdb::StandardColumnData&gt;,  (92,494,218 samples, 0.18%)</title><rect x="453.2" y="1589" width="2.1" height="15.0" fill="rgb(242,24,23)" rx="2" ry="2" />
<text  x="456.16" y="1599.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (269,752,217 samples, 0.53%)</title><rect x="68.3" y="2021" width="6.2" height="15.0" fill="rgb(244,130,9)" rx="2" ry="2" />
<text  x="71.29" y="2031.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::reference_wrapper&lt;duckdb::Rule&gt;*, std::reference_wrapper&lt;duckdb::Rule&gt;*, std::allocator&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; &gt; (6,851,491 samples, 0.01%)</title><rect x="738.1" y="1621" width="0.1" height="15.0" fill="rgb(210,108,9)" rx="2" ry="2" />
<text  x="741.08" y="1631.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::ComparisonSimplificationRule, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (5,303,426 samples, 0.01%)</title><rect x="821.5" y="1877" width="0.2" height="15.0" fill="rgb(228,46,36)" rx="2" ry="2" />
<text  x="824.54" y="1887.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::StartPhase (337,388,143 samples, 0.66%)</title><rect x="713.9" y="1861" width="7.8" height="15.0" fill="rgb(249,98,52)" rx="2" ry="2" />
<text  x="716.93" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::Bind[abi:cxx11] (330,638,232 samples, 0.64%)</title><rect x="950.1" y="1733" width="7.6" height="15.0" fill="rgb(214,124,12)" rx="2" ry="2" />
<text  x="953.07" y="1743.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (13,222,422 samples, 0.03%)</title><rect x="16.8" y="2005" width="0.4" height="15.0" fill="rgb(212,198,11)" rx="2" ry="2" />
<text  x="19.85" y="2015.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (14,386,696 samples, 0.03%)</title><rect x="178.1" y="2037" width="0.4" height="15.0" fill="rgb(225,79,41)" rx="2" ry="2" />
<text  x="181.13" y="2047.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::FunctionExpressionMatcher, std::default_delete&lt;duckdb::FunctionExpressionMatcher&gt;, void&gt; (4,795,831 samples, 0.01%)</title><rect x="811.9" y="1829" width="0.1" height="15.0" fill="rgb(233,115,53)" rx="2" ry="2" />
<text  x="814.91" y="1839.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt; &gt;::find (10,639,238 samples, 0.02%)</title><rect x="954.7" y="1573" width="0.2" height="15.0" fill="rgb(253,18,14)" rx="2" ry="2" />
<text  x="957.69" y="1583.5" ></text>
</g>
<g >
<title>std::function&lt;void  (12,276,394 samples, 0.02%)</title><rect x="546.9" y="1685" width="0.3" height="15.0" fill="rgb(213,110,31)" rx="2" ry="2" />
<text  x="549.87" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (8,018,382 samples, 0.02%)</title><rect x="981.8" y="1781" width="0.2" height="15.0" fill="rgb(225,216,14)" rx="2" ry="2" />
<text  x="984.84" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (63,917,622 samples, 0.12%)</title><rect x="498.0" y="1637" width="1.4" height="15.0" fill="rgb(212,103,45)" rx="2" ry="2" />
<text  x="500.97" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt; &gt; (33,037,931 samples, 0.06%)</title><rect x="478.8" y="1749" width="0.8" height="15.0" fill="rgb(239,215,25)" rx="2" ry="2" />
<text  x="481.81" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::operator= (18,199,386 samples, 0.04%)</title><rect x="786.6" y="1829" width="0.4" height="15.0" fill="rgb(243,99,30)" rx="2" ry="2" />
<text  x="789.61" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; &gt;::base (7,004,249 samples, 0.01%)</title><rect x="565.4" y="1749" width="0.2" height="15.0" fill="rgb(222,165,49)" rx="2" ry="2" />
<text  x="568.44" y="1759.5" ></text>
</g>
<g >
<title>duckdb::QueryResult::QueryResult (14,129,875 samples, 0.03%)</title><rect x="387.8" y="1893" width="0.3" height="15.0" fill="rgb(221,139,46)" rx="2" ry="2" />
<text  x="390.75" y="1903.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (254,561,532 samples, 0.50%)</title><rect x="365.7" y="1861" width="5.9" height="15.0" fill="rgb(220,156,19)" rx="2" ry="2" />
<text  x="368.74" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (5,286,090 samples, 0.01%)</title><rect x="719.8" y="1797" width="0.1" height="15.0" fill="rgb(230,43,43)" rx="2" ry="2" />
<text  x="722.76" y="1807.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperator (40,532,872 samples, 0.08%)</title><rect x="726.5" y="1701" width="0.9" height="15.0" fill="rgb(238,214,27)" rx="2" ry="2" />
<text  x="729.49" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1109" width="0.1" height="15.0" fill="rgb(219,170,35)" rx="2" ry="2" />
<text  x="14.25" y="1119.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::StandardColumnData, duckdb::BlockManager&amp;, duckdb::DataTableInfo&amp;, unsigned long&amp;, unsigned long&amp;, duckdb::LogicalType const&amp;, duckdb::optional_ptr&lt;duckdb::ColumnData&gt;&amp;&gt; (103,259,896 samples, 0.20%)</title><rect x="453.1" y="1669" width="2.3" height="15.0" fill="rgb(228,6,19)" rx="2" ry="2" />
<text  x="456.06" y="1679.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::GetSegmentIndex (23,817,159 samples, 0.05%)</title><rect x="300.1" y="1605" width="0.6" height="15.0" fill="rgb(222,106,20)" rx="2" ry="2" />
<text  x="303.13" y="1615.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (44,446,711 samples, 0.09%)</title><rect x="848.8" y="1861" width="1.0" height="15.0" fill="rgb(237,182,38)" rx="2" ry="2" />
<text  x="851.77" y="1871.5" ></text>
</g>
<g >
<title>std::function&lt;void  (5,398,013 samples, 0.01%)</title><rect x="547.2" y="1669" width="0.1" height="15.0" fill="rgb(215,107,8)" rx="2" ry="2" />
<text  x="550.20" y="1679.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::operator= (4,898,403 samples, 0.01%)</title><rect x="366.4" y="1669" width="0.1" height="15.0" fill="rgb(215,156,40)" rx="2" ry="2" />
<text  x="369.37" y="1679.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (13,299,563 samples, 0.03%)</title><rect x="85.6" y="2021" width="0.3" height="15.0" fill="rgb(250,191,0)" rx="2" ry="2" />
<text  x="88.59" y="2031.5" ></text>
</g>
<g >
<title>duckdb::PendingQueryResult::~PendingQueryResult (21,559,974 samples, 0.04%)</title><rect x="1106.9" y="1909" width="0.5" height="15.0" fill="rgb(206,128,39)" rx="2" ry="2" />
<text  x="1109.87" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; (26,239,917 samples, 0.05%)</title><rect x="905.4" y="1717" width="0.6" height="15.0" fill="rgb(207,159,19)" rx="2" ry="2" />
<text  x="908.40" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; (5,968,346 samples, 0.01%)</title><rect x="825.4" y="1877" width="0.1" height="15.0" fill="rgb(223,69,10)" rx="2" ry="2" />
<text  x="828.38" y="1887.5" ></text>
</g>
<g >
<title>duckdb::DatabaseManager::Get (6,605,458 samples, 0.01%)</title><rect x="1042.5" y="1893" width="0.1" height="15.0" fill="rgb(237,88,29)" rx="2" ry="2" />
<text  x="1045.47" y="1903.5" ></text>
</g>
<g >
<title>duckdb::PipelineInitializeTask::ExecuteTask (407,277,389 samples, 0.79%)</title><rect x="91.3" y="1845" width="9.4" height="15.0" fill="rgb(210,110,17)" rx="2" ry="2" />
<text  x="94.30" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt;, true&gt;::unique_ptr (9,376,329 samples, 0.02%)</title><rect x="867.1" y="1669" width="0.2" height="15.0" fill="rgb(225,58,17)" rx="2" ry="2" />
<text  x="870.13" y="1679.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::Destroy (35,875,444 samples, 0.07%)</title><rect x="469.9" y="1637" width="0.8" height="15.0" fill="rgb(225,42,45)" rx="2" ry="2" />
<text  x="472.87" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::eset_insert (18,749,000 samples, 0.04%)</title><rect x="347.2" y="629" width="0.4" height="15.0" fill="rgb(211,177,44)" rx="2" ry="2" />
<text  x="350.19" y="639.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (26,730,051 samples, 0.05%)</title><rect x="709.5" y="1749" width="0.6" height="15.0" fill="rgb(243,104,22)" rx="2" ry="2" />
<text  x="712.47" y="1759.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::SetNode (5,038,883 samples, 0.01%)</title><rect x="548.0" y="1701" width="0.1" height="15.0" fill="rgb(237,144,16)" rx="2" ry="2" />
<text  x="551.02" y="1711.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (6,842,132 samples, 0.01%)</title><rect x="108.1" y="1717" width="0.2" height="15.0" fill="rgb(224,219,46)" rx="2" ry="2" />
<text  x="111.09" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalType::Serialize (64,135,023 samples, 0.13%)</title><rect x="590.7" y="1813" width="1.5" height="15.0" fill="rgb(211,74,17)" rx="2" ry="2" />
<text  x="593.69" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BoundConstantExpression::~BoundConstantExpression (19,973,202 samples, 0.04%)</title><rect x="915.9" y="1445" width="0.4" height="15.0" fill="rgb(210,23,30)" rx="2" ry="2" />
<text  x="918.86" y="1455.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Binder&gt;::~shared_ptr (73,868,934 samples, 0.14%)</title><rect x="1030.4" y="1877" width="1.7" height="15.0" fill="rgb(217,191,34)" rx="2" ry="2" />
<text  x="1033.37" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; (4,562,895 samples, 0.01%)</title><rect x="648.1" y="1797" width="0.1" height="15.0" fill="rgb(210,13,20)" rx="2" ry="2" />
<text  x="651.10" y="1807.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::BufferHandle, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt; &gt;::begin (4,352,449 samples, 0.01%)</title><rect x="887.0" y="1733" width="0.1" height="15.0" fill="rgb(229,68,49)" rx="2" ry="2" />
<text  x="889.97" y="1743.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (8,370,558 samples, 0.02%)</title><rect x="1172.5" y="1829" width="0.2" height="15.0" fill="rgb(222,62,32)" rx="2" ry="2" />
<text  x="1175.53" y="1839.5" ></text>
</g>
<g >
<title>__lsan::DisabledInThisThread (60,601,778 samples, 0.12%)</title><rect x="1125.9" y="2037" width="1.4" height="15.0" fill="rgb(216,219,22)" rx="2" ry="2" />
<text  x="1128.93" y="2047.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Exception&gt;::operator= (5,376,512 samples, 0.01%)</title><rect x="231.9" y="1669" width="0.1" height="15.0" fill="rgb(240,207,44)" rx="2" ry="2" />
<text  x="234.91" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc (11,571,290 samples, 0.02%)</title><rect x="242.8" y="453" width="0.3" height="15.0" fill="rgb(241,110,37)" rx="2" ry="2" />
<text  x="245.81" y="463.5" ></text>
</g>
<g >
<title>duckdb::ExpressionListRef::ExpressionListRef (6,051,530 samples, 0.01%)</title><rect x="530.8" y="1733" width="0.1" height="15.0" fill="rgb(251,41,45)" rx="2" ry="2" />
<text  x="533.77" y="1743.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::VectorCache (20,119,379 samples, 0.04%)</title><rect x="107.3" y="1717" width="0.4" height="15.0" fill="rgb(225,30,38)" rx="2" ry="2" />
<text  x="110.26" y="1727.5" ></text>
</g>
<g >
<title>duckdb::TableScanState::GetAdaptiveFilter (4,404,614 samples, 0.01%)</title><rect x="199.6" y="1669" width="0.1" height="15.0" fill="rgb(226,144,2)" rx="2" ry="2" />
<text  x="202.59" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_allocate_buckets (17,362,618 samples, 0.03%)</title><rect x="666.7" y="1685" width="0.4" height="15.0" fill="rgb(226,78,9)" rx="2" ry="2" />
<text  x="669.66" y="1695.5" ></text>
</g>
<g >
<title>duckdb_hll::hll_create (7,123,264 samples, 0.01%)</title><rect x="426.6" y="1349" width="0.2" height="15.0" fill="rgb(219,71,26)" rx="2" ry="2" />
<text  x="429.65" y="1359.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::TypeMatcherId&gt; &gt; (7,762,245 samples, 0.02%)</title><rect x="805.6" y="1813" width="0.1" height="15.0" fill="rgb(246,149,35)" rx="2" ry="2" />
<text  x="808.56" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::extent_recycle_extract (54,627,356 samples, 0.11%)</title><rect x="876.0" y="1237" width="1.2" height="15.0" fill="rgb(229,68,45)" rx="2" ry="2" />
<text  x="878.95" y="1247.5" ></text>
</g>
<g >
<title>duckdb::HTTPState::~HTTPState (6,155,213 samples, 0.01%)</title><rect x="360.0" y="1765" width="0.1" height="15.0" fill="rgb(230,197,24)" rx="2" ry="2" />
<text  x="362.95" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; (10,269,839 samples, 0.02%)</title><rect x="328.2" y="1765" width="0.2" height="15.0" fill="rgb(226,188,32)" rx="2" ry="2" />
<text  x="331.18" y="1775.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (5,164,210 samples, 0.01%)</title><rect x="74.0" y="1845" width="0.1" height="15.0" fill="rgb(225,166,42)" rx="2" ry="2" />
<text  x="76.99" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::StorageLockKey, std::default_delete&lt;duckdb::StorageLockKey&gt; &gt;::unique_ptr (14,084,889 samples, 0.03%)</title><rect x="451.5" y="1605" width="0.3" height="15.0" fill="rgb(250,190,12)" rx="2" ry="2" />
<text  x="454.46" y="1615.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::PhysicalInsert, std::default_delete&lt;duckdb::PhysicalInsert&gt; &gt;::__uniq_ptr_impl (7,648,200 samples, 0.01%)</title><rect x="857.1" y="1781" width="0.1" height="15.0" fill="rgb(230,194,11)" rx="2" ry="2" />
<text  x="860.07" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned int, false&gt; &gt; &gt;::operator (4,516,075 samples, 0.01%)</title><rect x="883.8" y="1669" width="0.1" height="15.0" fill="rgb(238,169,43)" rx="2" ry="2" />
<text  x="886.78" y="1679.5" ></text>
</g>
<g >
<title>duckdb::MetaTransaction::GetTransaction (12,819,333 samples, 0.02%)</title><rect x="421.9" y="1701" width="0.2" height="15.0" fill="rgb(207,58,29)" rx="2" ry="2" />
<text  x="424.85" y="1711.5" ></text>
</g>
<g >
<title>std::swap&lt;duckdb::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics&gt;, false&gt; &gt; (4,935,565 samples, 0.01%)</title><rect x="426.3" y="1397" width="0.1" height="15.0" fill="rgb(246,202,22)" rx="2" ry="2" />
<text  x="429.33" y="1407.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::BlockHandle&gt;::operator= (7,795,395 samples, 0.02%)</title><rect x="446.8" y="1669" width="0.2" height="15.0" fill="rgb(222,206,33)" rx="2" ry="2" />
<text  x="449.82" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;duckdb::PhysicalOperator const&amp;, duckdb::QueryProfiler::TreeNode&amp;&gt; &gt; (7,316,646 samples, 0.01%)</title><rect x="1086.4" y="1781" width="0.2" height="15.0" fill="rgb(229,24,17)" rx="2" ry="2" />
<text  x="1089.43" y="1791.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;*&gt; (24,581,404 samples, 0.05%)</title><rect x="915.8" y="1557" width="0.6" height="15.0" fill="rgb(232,39,21)" rx="2" ry="2" />
<text  x="918.83" y="1567.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (18,106,018 samples, 0.04%)</title><rect x="620.8" y="1765" width="0.4" height="15.0" fill="rgb(218,167,22)" rx="2" ry="2" />
<text  x="623.79" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_try_lookup_fast (5,747,544 samples, 0.01%)</title><rect x="393.0" y="1525" width="0.1" height="15.0" fill="rgb(216,8,41)" rx="2" ry="2" />
<text  x="395.96" y="1535.5" ></text>
</g>
<g >
<title>duckdb::InsertSourceState::~InsertSourceState (8,764,809 samples, 0.02%)</title><rect x="357.7" y="1589" width="0.2" height="15.0" fill="rgb(238,58,20)" rx="2" ry="2" />
<text  x="360.65" y="1599.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; (9,772,467 samples, 0.02%)</title><rect x="999.7" y="1637" width="0.3" height="15.0" fill="rgb(231,4,33)" rx="2" ry="2" />
<text  x="1002.74" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (5,722,005 samples, 0.01%)</title><rect x="948.8" y="1701" width="0.1" height="15.0" fill="rgb(234,28,42)" rx="2" ry="2" />
<text  x="951.76" y="1711.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::TryGetSegmentIndex (8,855,337 samples, 0.02%)</title><rect x="301.2" y="1637" width="0.2" height="15.0" fill="rgb(207,164,10)" rx="2" ry="2" />
<text  x="304.23" y="1647.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (5,164,964 samples, 0.01%)</title><rect x="166.0" y="1845" width="0.1" height="15.0" fill="rgb(242,35,53)" rx="2" ry="2" />
<text  x="168.97" y="1855.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionMatcher&gt; (4,663,554 samples, 0.01%)</title><rect x="796.7" y="1845" width="0.1" height="15.0" fill="rgb(223,158,40)" rx="2" ry="2" />
<text  x="799.66" y="1855.5" ></text>
</g>
<g >
<title>duckdb::DuckDBAssertInternal (16,260,791 samples, 0.03%)</title><rect x="278.8" y="1509" width="0.4" height="15.0" fill="rgb(253,205,29)" rx="2" ry="2" />
<text  x="281.85" y="1519.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::Construct (5,073,781 samples, 0.01%)</title><rect x="433.5" y="1637" width="0.1" height="15.0" fill="rgb(244,217,9)" rx="2" ry="2" />
<text  x="436.52" y="1647.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (13,529,088 samples, 0.03%)</title><rect x="916.0" y="1365" width="0.3" height="15.0" fill="rgb(247,70,20)" rx="2" ry="2" />
<text  x="918.96" y="1375.5" ></text>
</g>
<g >
<title>__lll_lock_wait (21,052,066 samples, 0.04%)</title><rect x="505.7" y="1829" width="0.5" height="15.0" fill="rgb(240,112,42)" rx="2" ry="2" />
<text  x="508.67" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundTableRef, std::default_delete&lt;duckdb::BoundTableRef&gt; &gt;::~unique_ptr (9,769,127 samples, 0.02%)</title><rect x="980.3" y="1701" width="0.2" height="15.0" fill="rgb(207,49,35)" rx="2" ry="2" />
<text  x="983.28" y="1711.5" ></text>
</g>
<g >
<title>__lsan::MarkInvalidPCCb (10,460,758 samples, 0.02%)</title><rect x="1130.0" y="2037" width="0.2" height="15.0" fill="rgb(205,96,49)" rx="2" ry="2" />
<text  x="1132.98" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_node_allocator (6,749,546 samples, 0.01%)</title><rect x="693.2" y="1733" width="0.1" height="15.0" fill="rgb(228,163,39)" rx="2" ry="2" />
<text  x="696.18" y="1743.5" ></text>
</g>
<g >
<title>__filemap_fdatawait_range (15,141,749 samples, 0.03%)</title><rect x="249.2" y="1621" width="0.4" height="15.0" fill="rgb(236,78,7)" rx="2" ry="2" />
<text  x="252.22" y="1631.5" ></text>
</g>
<g >
<title>duckdb::Binder::CreateBinder (83,764,416 samples, 0.16%)</title><rect x="1027.6" y="1877" width="2.0" height="15.0" fill="rgb(227,132,41)" rx="2" ry="2" />
<text  x="1030.64" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::ColumnDataAllocator&gt;::destroy&lt;duckdb::ColumnDataAllocator&gt; (77,957,313 samples, 0.15%)</title><rect x="1123.1" y="1765" width="1.8" height="15.0" fill="rgb(219,28,30)" rx="2" ry="2" />
<text  x="1126.11" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;::unique_ptr (10,003,933 samples, 0.02%)</title><rect x="539.8" y="1829" width="0.2" height="15.0" fill="rgb(218,208,20)" rx="2" ry="2" />
<text  x="542.75" y="1839.5" ></text>
</g>
<g >
<title>duckdb::DatabaseInstance::GetScheduler (7,830,298 samples, 0.02%)</title><rect x="502.2" y="1877" width="0.1" height="15.0" fill="rgb(209,17,45)" rx="2" ry="2" />
<text  x="505.16" y="1887.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt;::operator= (7,604,797 samples, 0.01%)</title><rect x="815.8" y="1829" width="0.2" height="15.0" fill="rgb(221,202,15)" rx="2" ry="2" />
<text  x="818.81" y="1839.5" ></text>
</g>
<g >
<title>duckdb::Binder::Bind (2,428,634,956 samples, 4.73%)</title><rect x="926.2" y="1813" width="55.9" height="15.0" fill="rgb(207,53,52)" rx="2" ry="2" />
<text  x="929.24" y="1823.5" >duckd..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (11,504,135 samples, 0.02%)</title><rect x="928.0" y="1669" width="0.3" height="15.0" fill="rgb(254,95,43)" rx="2" ry="2" />
<text  x="931.05" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;::operator= (12,469,285 samples, 0.02%)</title><rect x="909.6" y="1765" width="0.3" height="15.0" fill="rgb(212,171,29)" rx="2" ry="2" />
<text  x="912.64" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::BoundResultModifier, std::default_delete&lt;duckdb::BoundResultModifier&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::BoundResultModifier, std::default_delete&lt;duckdb::BoundResultModifier&gt;, true&gt; &gt; &gt;::~vector (5,795,604 samples, 0.01%)</title><rect x="980.1" y="1685" width="0.1" height="15.0" fill="rgb(250,167,20)" rx="2" ry="2" />
<text  x="983.10" y="1695.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (55,331,985 samples, 0.11%)</title><rect x="844.6" y="1829" width="1.2" height="15.0" fill="rgb(240,184,20)" rx="2" ry="2" />
<text  x="847.56" y="1839.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::GetColumn (10,981,171 samples, 0.02%)</title><rect x="432.6" y="1733" width="0.2" height="15.0" fill="rgb(207,81,26)" rx="2" ry="2" />
<text  x="435.57" y="1743.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (5,137,673 samples, 0.01%)</title><rect x="751.6" y="1797" width="0.1" height="15.0" fill="rgb(220,92,13)" rx="2" ry="2" />
<text  x="754.59" y="1807.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::BlockHandle&gt;::operator= (4,390,335 samples, 0.01%)</title><rect x="881.9" y="1653" width="0.1" height="15.0" fill="rgb(229,133,54)" rx="2" ry="2" />
<text  x="884.90" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::InsertGlobalState, std::default_delete&lt;duckdb::InsertGlobalState&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::InsertGlobalState&gt;, void&gt; (5,432,476 samples, 0.01%)</title><rect x="99.4" y="1765" width="0.1" height="15.0" fill="rgb(236,50,26)" rx="2" ry="2" />
<text  x="102.40" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::LogicalType&gt; &gt;::construct&lt;duckdb::LogicalType, duckdb::LogicalType const&amp;&gt; (4,711,852 samples, 0.01%)</title><rect x="856.0" y="1749" width="0.1" height="15.0" fill="rgb(252,37,3)" rx="2" ry="2" />
<text  x="859.00" y="1759.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::SelectionData, unsigned long&amp;&gt; (455,714,400 samples, 0.89%)</title><rect x="256.2" y="1637" width="10.5" height="15.0" fill="rgb(253,176,39)" rx="2" ry="2" />
<text  x="259.23" y="1647.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string (14,688,313 samples, 0.03%)</title><rect x="440.0" y="1637" width="0.4" height="15.0" fill="rgb(240,185,40)" rx="2" ry="2" />
<text  x="443.04" y="1647.5" ></text>
</g>
<g >
<title>duckdb::ComparisonExpressionMatcher::~ComparisonExpressionMatcher (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1621" width="0.3" height="15.0" fill="rgb(249,135,15)" rx="2" ry="2" />
<text  x="835.82" y="1631.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;duckdb::Pipeline&gt;::_M_weak_assign&lt;duckdb::Pipeline&gt; (5,037,967 samples, 0.01%)</title><rect x="1094.6" y="1621" width="0.1" height="15.0" fill="rgb(238,43,25)" rx="2" ry="2" />
<text  x="1097.58" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="661" width="0.1" height="15.0" fill="rgb(231,38,5)" rx="2" ry="2" />
<text  x="14.25" y="671.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (38,319,772 samples, 0.07%)</title><rect x="192.8" y="1637" width="0.9" height="15.0" fill="rgb(234,17,32)" rx="2" ry="2" />
<text  x="195.81" y="1647.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::~shared_ptr (12,421,922 samples, 0.02%)</title><rect x="895.5" y="1653" width="0.3" height="15.0" fill="rgb(205,179,14)" rx="2" ry="2" />
<text  x="898.50" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SelectStatement, std::default_delete&lt;duckdb::SelectStatement&gt;, true&gt;::~unique_ptr (34,998,774 samples, 0.07%)</title><rect x="1038.3" y="1813" width="0.8" height="15.0" fill="rgb(221,222,38)" rx="2" ry="2" />
<text  x="1041.28" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BufferedSerializer, std::default_delete&lt;duckdb::BufferedSerializer&gt;, true&gt;::reset (6,801,349 samples, 0.01%)</title><rect x="593.0" y="1829" width="0.2" height="15.0" fill="rgb(213,187,34)" rx="2" ry="2" />
<text  x="596.00" y="1839.5" ></text>
</g>
<g >
<title>duckdb::ExpressionState::~ExpressionState (14,734,564 samples, 0.03%)</title><rect x="906.7" y="1525" width="0.4" height="15.0" fill="rgb(215,188,7)" rx="2" ry="2" />
<text  x="909.75" y="1535.5" ></text>
</g>
<g >
<title>duckdb::AggregateFunctionSet::AggregateFunctionSet (4,790,327 samples, 0.01%)</title><rect x="1112.0" y="1909" width="0.1" height="15.0" fill="rgb(251,62,34)" rx="2" ry="2" />
<text  x="1114.98" y="1919.5" ></text>
</g>
<g >
<title>duckdb::DuckTransaction::Commit[abi:cxx11] (5,544,561,581 samples, 10.81%)</title><rect x="191.5" y="1829" width="127.6" height="15.0" fill="rgb(216,153,3)" rx="2" ry="2" />
<text  x="194.52" y="1839.5" >duckdb::DuckTran..</text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ColumnDataAllocator&gt;::~shared_ptr (22,132,858 samples, 0.04%)</title><rect x="338.6" y="1493" width="0.5" height="15.0" fill="rgb(238,67,40)" rx="2" ry="2" />
<text  x="341.55" y="1503.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::StorageCommitState, std::default_delete&lt;duckdb::StorageCommitState&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::StorageCommitState&gt;, void&gt; (5,727,206 samples, 0.01%)</title><rect x="318.1" y="1797" width="0.2" height="15.0" fill="rgb(246,49,44)" rx="2" ry="2" />
<text  x="321.15" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_default_append (14,862,994 samples, 0.03%)</title><rect x="840.1" y="1797" width="0.4" height="15.0" fill="rgb(252,71,25)" rx="2" ry="2" />
<text  x="843.15" y="1807.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long&gt; (7,420,412 samples, 0.01%)</title><rect x="632.0" y="1717" width="0.2" height="15.0" fill="rgb(252,15,44)" rx="2" ry="2" />
<text  x="634.98" y="1727.5" ></text>
</g>
<g >
<title>__asan::Allocator::GetAsanChunkByAddrFastLocked (243,086,543 samples, 0.47%)</title><rect x="172.1" y="2037" width="5.6" height="15.0" fill="rgb(215,195,15)" rx="2" ry="2" />
<text  x="175.06" y="2047.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LocalSourceState, std::default_delete&lt;duckdb::LocalSourceState&gt;, true&gt;::~unique_ptr (8,836,169 samples, 0.02%)</title><rect x="500.7" y="1797" width="0.2" height="15.0" fill="rgb(244,88,45)" rx="2" ry="2" />
<text  x="503.70" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (4,423,225 samples, 0.01%)</title><rect x="597.7" y="1749" width="0.1" height="15.0" fill="rgb(227,49,12)" rx="2" ry="2" />
<text  x="600.65" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;duckdb::Binding&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;duckdb::Binding&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5,680,247 samples, 0.01%)</title><rect x="985.1" y="1637" width="0.2" height="15.0" fill="rgb(235,27,12)" rx="2" ry="2" />
<text  x="988.13" y="1647.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TableRef, std::default_delete&lt;duckdb::TableRef&gt; &gt;::unique_ptr&lt;duckdb::ExpressionListRef, std::default_delete&lt;duckdb::ExpressionListRef&gt;, void&gt; (7,436,887 samples, 0.01%)</title><rect x="531.3" y="1733" width="0.2" height="15.0" fill="rgb(234,141,49)" rx="2" ry="2" />
<text  x="534.34" y="1743.5" ></text>
</g>
<g >
<title>__interceptor_sigwaitinfo (77,219,795 samples, 0.15%)</title><rect x="184.7" y="2037" width="1.7" height="15.0" fill="rgb(233,197,11)" rx="2" ry="2" />
<text  x="187.67" y="2047.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (34,738,219 samples, 0.07%)</title><rect x="812.4" y="1829" width="0.8" height="15.0" fill="rgb(230,23,36)" rx="2" ry="2" />
<text  x="815.40" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::get (9,105,106 samples, 0.02%)</title><rect x="774.2" y="1845" width="0.2" height="15.0" fill="rgb(206,213,49)" rx="2" ry="2" />
<text  x="777.21" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (71,536,325 samples, 0.14%)</title><rect x="671.8" y="1781" width="1.7" height="15.0" fill="rgb(230,199,19)" rx="2" ry="2" />
<text  x="674.81" y="1791.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::Destroy (44,500,602 samples, 0.09%)</title><rect x="861.6" y="1605" width="1.0" height="15.0" fill="rgb(214,134,49)" rx="2" ry="2" />
<text  x="864.60" y="1615.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::CatalogEntry&gt;::operator (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1189" width="0.3" height="15.0" fill="rgb(213,159,34)" rx="2" ry="2" />
<text  x="1120.47" y="1199.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::Pipeline&gt;, duckdb::ReferenceHashFunction&lt;duckdb::Pipeline&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (16,400,204 samples, 0.03%)</title><rect x="1052.4" y="1765" width="0.4" height="15.0" fill="rgb(235,107,1)" rx="2" ry="2" />
<text  x="1055.38" y="1775.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (31,052,555 samples, 0.06%)</title><rect x="702.7" y="1829" width="0.7" height="15.0" fill="rgb(238,51,27)" rx="2" ry="2" />
<text  x="705.67" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::operator= (12,548,390 samples, 0.02%)</title><rect x="552.8" y="1765" width="0.3" height="15.0" fill="rgb(237,216,22)" rx="2" ry="2" />
<text  x="555.79" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::InitializeAppend (997,059,605 samples, 1.94%)</title><rect x="866.5" y="1781" width="22.9" height="15.0" fill="rgb(237,193,21)" rx="2" ry="2" />
<text  x="869.47" y="1791.5" >d..</text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (104,488,980 samples, 0.20%)</title><rect x="738.5" y="1733" width="2.4" height="15.0" fill="rgb(214,27,15)" rx="2" ry="2" />
<text  x="741.48" y="1743.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::BoundSelectNode, std::default_delete&lt;duckdb::BoundSelectNode&gt; &gt;::_M_ptr (4,935,515 samples, 0.01%)</title><rect x="963.9" y="1685" width="0.1" height="15.0" fill="rgb(223,182,29)" rx="2" ry="2" />
<text  x="966.86" y="1695.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::Elapsed (58,921,423 samples, 0.11%)</title><rect x="702.1" y="1845" width="1.4" height="15.0" fill="rgb(242,19,5)" rx="2" ry="2" />
<text  x="705.12" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt; &gt;::unique_ptr&lt;duckdb::SpecificExpressionTypeMatcher, std::default_delete&lt;duckdb::SpecificExpressionTypeMatcher&gt;, void&gt; (12,953,108 samples, 0.03%)</title><rect x="799.5" y="1829" width="0.3" height="15.0" fill="rgb(214,106,0)" rx="2" ry="2" />
<text  x="802.47" y="1839.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (10,530,629 samples, 0.02%)</title><rect x="387.3" y="1909" width="0.3" height="15.0" fill="rgb(244,36,35)" rx="2" ry="2" />
<text  x="390.31" y="1919.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ClientData, std::default_delete&lt;duckdb::ClientData&gt; &gt;::_M_ptr (9,239,364 samples, 0.02%)</title><rect x="713.0" y="1797" width="0.3" height="15.0" fill="rgb(223,159,44)" rx="2" ry="2" />
<text  x="716.04" y="1807.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt; (103,743,245 samples, 0.20%)</title><rect x="263.4" y="1429" width="2.4" height="15.0" fill="rgb(254,81,26)" rx="2" ry="2" />
<text  x="266.40" y="1439.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (46,163,635 samples, 0.09%)</title><rect x="669.8" y="1749" width="1.1" height="15.0" fill="rgb(235,225,12)" rx="2" ry="2" />
<text  x="672.83" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt;::operator= (4,917,773 samples, 0.01%)</title><rect x="927.3" y="1701" width="0.1" height="15.0" fill="rgb(237,177,32)" rx="2" ry="2" />
<text  x="930.28" y="1711.5" ></text>
</g>
<g >
<title>__blk_mq_sched_bio_merge (6,129,293 samples, 0.01%)</title><rect x="250.8" y="1509" width="0.2" height="15.0" fill="rgb(217,53,4)" rx="2" ry="2" />
<text  x="253.83" y="1519.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (4,547,053 samples, 0.01%)</title><rect x="329.5" y="1781" width="0.1" height="15.0" fill="rgb(241,106,53)" rx="2" ry="2" />
<text  x="332.54" y="1791.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::Value, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::Value&gt; &gt; &gt;::~unordered_map (5,106,703 samples, 0.01%)</title><rect x="374.0" y="1893" width="0.1" height="15.0" fill="rgb(247,222,18)" rx="2" ry="2" />
<text  x="376.98" y="1903.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnAppendState, true&gt;::~vector (6,722,310 samples, 0.01%)</title><rect x="339.6" y="1397" width="0.2" height="15.0" fill="rgb(250,143,5)" rx="2" ry="2" />
<text  x="342.60" y="1407.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::ExpressionBinder&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::ExpressionBinder&gt; &gt; &gt;::_M_check_len (7,952,699 samples, 0.02%)</title><rect x="936.5" y="1637" width="0.2" height="15.0" fill="rgb(248,198,51)" rx="2" ry="2" />
<text  x="939.50" y="1647.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ColumnStatistics&gt;::~shared_ptr (29,295,516 samples, 0.06%)</title><rect x="236.2" y="1429" width="0.7" height="15.0" fill="rgb(248,183,9)" rx="2" ry="2" />
<text  x="239.24" y="1439.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionMatcher&gt;::operator (9,118,631 samples, 0.02%)</title><rect x="831.9" y="1461" width="0.2" height="15.0" fill="rgb(207,182,15)" rx="2" ry="2" />
<text  x="834.89" y="1471.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_max_size (15,631,334 samples, 0.03%)</title><rect x="567.6" y="1717" width="0.3" height="15.0" fill="rgb(221,150,19)" rx="2" ry="2" />
<text  x="570.57" y="1727.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::~RenderTree (11,132,540 samples, 0.02%)</title><rect x="641.0" y="1733" width="0.3" height="15.0" fill="rgb(205,34,16)" rx="2" ry="2" />
<text  x="644.02" y="1743.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::Binder, std::allocator&lt;duckdb::Binder&gt;, bool, duckdb::ClientContext&amp;, std::shared_ptr&lt;duckdb::Binder&gt;, bool&amp;&gt; (79,654,836 samples, 0.16%)</title><rect x="1027.7" y="1845" width="1.9" height="15.0" fill="rgb(249,201,50)" rx="2" ry="2" />
<text  x="1030.73" y="1855.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::Pin (22,585,636 samples, 0.04%)</title><rect x="886.3" y="1733" width="0.5" height="15.0" fill="rgb(228,163,43)" rx="2" ry="2" />
<text  x="889.29" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Executor::NextExecutor (251,193,696 samples, 0.49%)</title><rect x="399.4" y="1893" width="5.8" height="15.0" fill="rgb(218,65,44)" rx="2" ry="2" />
<text  x="402.40" y="1903.5" ></text>
</g>
<g >
<title>duckdb::RegexOptimizationRule::RegexOptimizationRule (62,759,576 samples, 0.12%)</title><rect x="819.1" y="1861" width="1.4" height="15.0" fill="rgb(221,207,3)" rx="2" ry="2" />
<text  x="822.07" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (35,312,663 samples, 0.07%)</title><rect x="41.0" y="1989" width="0.9" height="15.0" fill="rgb(214,176,31)" rx="2" ry="2" />
<text  x="44.05" y="1999.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (99,017,970 samples, 0.19%)</title><rect x="217.2" y="1685" width="2.3" height="15.0" fill="rgb(235,204,18)" rx="2" ry="2" />
<text  x="220.24" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorDataIndex, std::allocator&lt;duckdb::VectorDataIndex&gt; &gt;::reserve (8,664,791 samples, 0.02%)</title><rect x="384.4" y="1893" width="0.2" height="15.0" fill="rgb(219,138,48)" rx="2" ry="2" />
<text  x="387.44" y="1903.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::Expression*, std::default_delete&lt;duckdb::Expression&gt; &gt;::tuple&lt;duckdb::Expression*&amp;, std::default_delete&lt;duckdb::BoundColumnRefExpression&gt;, true&gt; (5,058,133 samples, 0.01%)</title><rect x="952.2" y="1573" width="0.2" height="15.0" fill="rgb(236,206,50)" rx="2" ry="2" />
<text  x="955.23" y="1583.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (11,554,645 samples, 0.02%)</title><rect x="548.7" y="1541" width="0.3" height="15.0" fill="rgb(252,223,0)" rx="2" ry="2" />
<text  x="551.75" y="1551.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Pipeline&gt; &gt;::construct&lt;duckdb::Pipeline, duckdb::Executor&amp;&gt; (16,496,411 samples, 0.03%)</title><rect x="1094.0" y="1605" width="0.4" height="15.0" fill="rgb(249,142,20)" rx="2" ry="2" />
<text  x="1096.99" y="1615.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::CatalogSet&gt;::operator (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1765" width="1.9" height="15.0" fill="rgb(239,224,28)" rx="2" ry="2" />
<text  x="1120.81" y="1775.5" ></text>
</g>
<g >
<title>duckdb::BufferedSerializer::BufferedSerializer (9,844,178 samples, 0.02%)</title><rect x="592.4" y="1813" width="0.2" height="15.0" fill="rgb(222,55,53)" rx="2" ry="2" />
<text  x="595.37" y="1823.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::TryGetSegmentIndex (21,582,576 samples, 0.04%)</title><rect x="300.2" y="1589" width="0.5" height="15.0" fill="rgb(207,221,32)" rx="2" ry="2" />
<text  x="303.16" y="1599.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (12,850,255 samples, 0.03%)</title><rect x="849.5" y="1829" width="0.3" height="15.0" fill="rgb(244,183,9)" rx="2" ry="2" />
<text  x="852.49" y="1839.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::GetScheduler (43,435,574 samples, 0.08%)</title><rect x="502.3" y="1877" width="1.0" height="15.0" fill="rgb(216,63,41)" rx="2" ry="2" />
<text  x="505.34" y="1887.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (51,594,658 samples, 0.10%)</title><rect x="1178.5" y="1861" width="1.2" height="15.0" fill="rgb(245,76,48)" rx="2" ry="2" />
<text  x="1181.54" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::operator= (17,797,106 samples, 0.03%)</title><rect x="795.1" y="1845" width="0.5" height="15.0" fill="rgb(206,162,26)" rx="2" ry="2" />
<text  x="798.14" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_max_size (4,417,090 samples, 0.01%)</title><rect x="629.0" y="1685" width="0.1" height="15.0" fill="rgb(248,134,53)" rx="2" ry="2" />
<text  x="632.04" y="1695.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~deque (11,556,810 samples, 0.02%)</title><rect x="501.1" y="1781" width="0.2" height="15.0" fill="rgb(219,86,9)" rx="2" ry="2" />
<text  x="504.06" y="1791.5" ></text>
</g>
<g >
<title>duckdb::PipelineInitializeTask::~PipelineInitializeTask (9,404,462 samples, 0.02%)</title><rect x="144.7" y="1749" width="0.3" height="15.0" fill="rgb(208,201,35)" rx="2" ry="2" />
<text  x="147.75" y="1759.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::BlockHandle,  (43,492,267 samples, 0.08%)</title><rect x="441.0" y="1605" width="1.0" height="15.0" fill="rgb(252,139,25)" rx="2" ry="2" />
<text  x="444.01" y="1615.5" ></text>
</g>
<g >
<title>duckdb::PipelineInitializeEvent::PipelineInitializeEvent (11,289,473 samples, 0.02%)</title><rect x="1051.5" y="1685" width="0.3" height="15.0" fill="rgb(247,96,22)" rx="2" ry="2" />
<text  x="1054.50" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (5,548,278 samples, 0.01%)</title><rect x="438.2" y="1445" width="0.1" height="15.0" fill="rgb(214,184,14)" rx="2" ry="2" />
<text  x="441.19" y="1455.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::get_or_add_implicit_producer (9,846,790 samples, 0.02%)</title><rect x="870.9" y="1589" width="0.2" height="15.0" fill="rgb(225,165,28)" rx="2" ry="2" />
<text  x="873.86" y="1599.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::isalloc (7,247,855 samples, 0.01%)</title><rect x="878.1" y="1445" width="0.2" height="15.0" fill="rgb(253,205,14)" rx="2" ry="2" />
<text  x="881.09" y="1455.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SelectNode, std::default_delete&lt;duckdb::SelectNode&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::SelectNode&gt;, void&gt; (5,145,772 samples, 0.01%)</title><rect x="533.0" y="1733" width="0.1" height="15.0" fill="rgb(244,164,5)" rx="2" ry="2" />
<text  x="535.99" y="1743.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::GenerateColumnBindings (5,745,924 samples, 0.01%)</title><rect x="846.8" y="1813" width="0.2" height="15.0" fill="rgb(217,222,34)" rx="2" ry="2" />
<text  x="849.84" y="1823.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::_M_ptr (4,691,701 samples, 0.01%)</title><rect x="581.8" y="1685" width="0.1" height="15.0" fill="rgb(211,5,13)" rx="2" ry="2" />
<text  x="584.76" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ColumnDataAllocator,  (25,753,294 samples, 0.05%)</title><rect x="98.1" y="1701" width="0.6" height="15.0" fill="rgb(237,209,36)" rx="2" ry="2" />
<text  x="101.10" y="1711.5" ></text>
</g>
<g >
<title>duckdb::Allocator::~Allocator (8,197,896 samples, 0.02%)</title><rect x="340.7" y="1157" width="0.2" height="15.0" fill="rgb(245,223,2)" rx="2" ry="2" />
<text  x="343.71" y="1167.5" ></text>
</g>
<g >
<title>duckdb::LogicalDummyScan::GetTableIndex (143,497,820 samples, 0.28%)</title><rect x="650.2" y="1765" width="3.3" height="15.0" fill="rgb(222,22,44)" rx="2" ry="2" />
<text  x="653.18" y="1775.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::shared_ptr&lt;duckdb::LocalTableStorage&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt; &gt;::unordered_map (17,285,969 samples, 0.03%)</title><rect x="234.8" y="1781" width="0.4" height="15.0" fill="rgb(236,36,16)" rx="2" ry="2" />
<text  x="237.81" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::SelectionData,  (454,945,101 samples, 0.89%)</title><rect x="256.2" y="1589" width="10.5" height="15.0" fill="rgb(251,102,27)" rx="2" ry="2" />
<text  x="259.25" y="1599.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::Reset (81,008,022 samples, 0.16%)</title><rect x="481.7" y="1477" width="1.9" height="15.0" fill="rgb(220,121,18)" rx="2" ry="2" />
<text  x="484.73" y="1487.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (5,472,353 samples, 0.01%)</title><rect x="762.1" y="1781" width="0.1" height="15.0" fill="rgb(230,147,5)" rx="2" ry="2" />
<text  x="765.10" y="1791.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::ToString[abi:cxx11] (337,209,361 samples, 0.66%)</title><rect x="833.7" y="1893" width="7.8" height="15.0" fill="rgb(211,163,41)" rx="2" ry="2" />
<text  x="836.72" y="1903.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (11,054,290 samples, 0.02%)</title><rect x="37.6" y="2021" width="0.2" height="15.0" fill="rgb(209,122,4)" rx="2" ry="2" />
<text  x="40.59" y="2031.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PipelineExecutor, std::default_delete&lt;duckdb::PipelineExecutor&gt; &gt;::reset (14,297,582 samples, 0.03%)</title><rect x="108.5" y="1813" width="0.3" height="15.0" fill="rgb(237,149,42)" rx="2" ry="2" />
<text  x="111.52" y="1823.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (8,055,262 samples, 0.02%)</title><rect x="729.9" y="1717" width="0.1" height="15.0" fill="rgb(210,52,45)" rx="2" ry="2" />
<text  x="732.86" y="1727.5" ></text>
</g>
<g >
<title>vfs_statx_fd (9,697,697 samples, 0.02%)</title><rect x="190.7" y="1669" width="0.2" height="15.0" fill="rgb(251,211,19)" rx="2" ry="2" />
<text  x="193.71" y="1679.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::ResetSource (52,362,519 samples, 0.10%)</title><rect x="91.8" y="1733" width="1.2" height="15.0" fill="rgb(211,224,10)" rx="2" ry="2" />
<text  x="94.77" y="1743.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::ToString[abi:cxx11] (1,548,038,649 samples, 3.02%)</title><rect x="546.4" y="1861" width="35.6" height="15.0" fill="rgb(248,190,5)" rx="2" ry="2" />
<text  x="549.42" y="1871.5" >duc..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (10,313,961 samples, 0.02%)</title><rect x="362.1" y="1781" width="0.2" height="15.0" fill="rgb(249,206,29)" rx="2" ry="2" />
<text  x="365.05" y="1791.5" ></text>
</g>
<g >
<title>duckdb::TableScanState::TableScanState (7,908,962 samples, 0.02%)</title><rect x="226.3" y="1733" width="0.2" height="15.0" fill="rgb(245,25,25)" rx="2" ry="2" />
<text  x="229.35" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::_M_check_len (5,172,177 samples, 0.01%)</title><rect x="371.4" y="1797" width="0.1" height="15.0" fill="rgb(217,215,35)" rx="2" ry="2" />
<text  x="374.41" y="1807.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (7,363,120 samples, 0.01%)</title><rect x="296.9" y="1605" width="0.1" height="15.0" fill="rgb(219,28,3)" rx="2" ry="2" />
<text  x="299.85" y="1615.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::~VectorCacheBuffer (55,296,275 samples, 0.11%)</title><rect x="297.5" y="1477" width="1.3" height="15.0" fill="rgb(244,47,21)" rx="2" ry="2" />
<text  x="300.48" y="1487.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ColumnData&gt;::~shared_ptr (275,160,640 samples, 0.54%)</title><rect x="237.9" y="1125" width="6.3" height="15.0" fill="rgb(248,196,26)" rx="2" ry="2" />
<text  x="240.90" y="1135.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;::reset (16,265,362 samples, 0.03%)</title><rect x="1089.4" y="1813" width="0.4" height="15.0" fill="rgb(205,220,45)" rx="2" ry="2" />
<text  x="1092.39" y="1823.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::allocate (4,528,809 samples, 0.01%)</title><rect x="652.6" y="1701" width="0.1" height="15.0" fill="rgb(221,178,31)" rx="2" ry="2" />
<text  x="655.64" y="1711.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::VectorCache, true&gt;::~vector (6,817,589 samples, 0.01%)</title><rect x="223.0" y="1717" width="0.2" height="15.0" fill="rgb(219,37,28)" rx="2" ry="2" />
<text  x="226.00" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (5,010,016 samples, 0.01%)</title><rect x="84.5" y="1989" width="0.1" height="15.0" fill="rgb(228,140,25)" rx="2" ry="2" />
<text  x="87.52" y="1999.5" ></text>
</g>
<g >
<title>duckdb::Rule::Rule (5,891,374 samples, 0.01%)</title><rect x="790.5" y="1845" width="0.1" height="15.0" fill="rgb(231,169,13)" rx="2" ry="2" />
<text  x="793.49" y="1855.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::CatalogSet&gt;::operator (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1605" width="0.3" height="15.0" fill="rgb(236,176,26)" rx="2" ry="2" />
<text  x="1120.47" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;unsigned long, false&gt; (5,286,871 samples, 0.01%)</title><rect x="674.6" y="1797" width="0.1" height="15.0" fill="rgb(212,56,37)" rx="2" ry="2" />
<text  x="677.60" y="1807.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::RenderTree (18,054,252 samples, 0.04%)</title><rect x="635.5" y="1733" width="0.4" height="15.0" fill="rgb(231,59,9)" rx="2" ry="2" />
<text  x="638.45" y="1743.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::TypeMatcher*, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::tuple&lt;duckdb::TypeMatcher*&amp;, std::default_delete&lt;duckdb::TypeMatcherId&gt;, true&gt; (7,762,245 samples, 0.02%)</title><rect x="805.6" y="1797" width="0.1" height="15.0" fill="rgb(234,164,15)" rx="2" ry="2" />
<text  x="808.56" y="1807.5" ></text>
</g>
<g >
<title>duckdb::CaseInsensitiveStringHashFunction::operator (4,845,307 samples, 0.01%)</title><rect x="1006.1" y="1653" width="0.1" height="15.0" fill="rgb(230,110,5)" rx="2" ry="2" />
<text  x="1009.07" y="1663.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Free (41,155,000 samples, 0.08%)</title><rect x="498.1" y="1493" width="1.0" height="15.0" fill="rgb(223,126,35)" rx="2" ry="2" />
<text  x="501.15" y="1503.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,277,097 samples, 0.02%)</title><rect x="292.7" y="1605" width="0.3" height="15.0" fill="rgb(251,149,17)" rx="2" ry="2" />
<text  x="295.74" y="1615.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::ColumnDataAllocator&gt; &gt;::destroy&lt;duckdb::ColumnDataAllocator&gt; (77,957,313 samples, 0.15%)</title><rect x="1123.1" y="1781" width="1.8" height="15.0" fill="rgb(243,133,44)" rx="2" ry="2" />
<text  x="1126.11" y="1791.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::GetName[abi:cxx11] (8,685,983 samples, 0.02%)</title><rect x="1067.7" y="1701" width="0.2" height="15.0" fill="rgb(234,162,43)" rx="2" ry="2" />
<text  x="1070.69" y="1711.5" ></text>
</g>
<g >
<title>duckdb::DuckSchemaEntry::AddEntry (4,792,459 samples, 0.01%)</title><rect x="1110.4" y="1797" width="0.1" height="15.0" fill="rgb(242,97,14)" rx="2" ry="2" />
<text  x="1113.44" y="1807.5" ></text>
</g>
<g >
<title>duckdb::BindContext::~BindContext (20,255,600 samples, 0.04%)</title><rect x="1030.7" y="1749" width="0.5" height="15.0" fill="rgb(253,34,48)" rx="2" ry="2" />
<text  x="1033.72" y="1759.5" ></text>
</g>
<g >
<title>std::function&lt;void  (5,928,992 samples, 0.01%)</title><rect x="750.9" y="1669" width="0.1" height="15.0" fill="rgb(232,136,23)" rx="2" ry="2" />
<text  x="753.86" y="1679.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::VersionNode&gt; (30,624,814 samples, 0.06%)</title><rect x="415.4" y="1685" width="0.7" height="15.0" fill="rgb(215,89,7)" rx="2" ry="2" />
<text  x="418.39" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::operator= (5,255,410 samples, 0.01%)</title><rect x="977.6" y="1749" width="0.1" height="15.0" fill="rgb(231,185,10)" rx="2" ry="2" />
<text  x="980.62" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::PipelineEvent&gt; &gt;::destroy&lt;duckdb::PipelineEvent&gt; (4,941,364 samples, 0.01%)</title><rect x="355.6" y="1685" width="0.1" height="15.0" fill="rgb(240,20,2)" rx="2" ry="2" />
<text  x="358.59" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt; &gt; &gt;::_M_realloc_insert&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt; &gt; (42,999,850 samples, 0.08%)</title><rect x="1064.1" y="1781" width="1.0" height="15.0" fill="rgb(252,174,14)" rx="2" ry="2" />
<text  x="1067.14" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::CatalogEntryEquality, duckdb::CatalogEntryHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_rehash (10,826,983 samples, 0.02%)</title><rect x="851.8" y="1765" width="0.2" height="15.0" fill="rgb(214,131,8)" rx="2" ry="2" />
<text  x="854.76" y="1775.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_deallocate (5,119,611 samples, 0.01%)</title><rect x="628.4" y="1717" width="0.1" height="15.0" fill="rgb(250,55,41)" rx="2" ry="2" />
<text  x="631.37" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::Scan (22,057,061 samples, 0.04%)</title><rect x="105.9" y="1749" width="0.6" height="15.0" fill="rgb(218,176,45)" rx="2" ry="2" />
<text  x="108.95" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (17,722,515 samples, 0.03%)</title><rect x="1089.9" y="1829" width="0.4" height="15.0" fill="rgb(211,31,0)" rx="2" ry="2" />
<text  x="1092.91" y="1839.5" ></text>
</g>
<g >
<title>duckdb::AggregateFunctionCatalogEntry::AggregateFunctionCatalogEntry (6,398,298 samples, 0.01%)</title><rect x="1114.4" y="1845" width="0.2" height="15.0" fill="rgb(223,157,44)" rx="2" ry="2" />
<text  x="1117.44" y="1855.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::EqualOrNullSimplification, duckdb::ExpressionRewriter&amp;&gt; (129,361,503 samples, 0.25%)</title><rect x="807.1" y="1877" width="3.0" height="15.0" fill="rgb(206,4,52)" rx="2" ry="2" />
<text  x="810.13" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::_M_realloc_insert&lt;std::weak_ptr&lt;duckdb::Pipeline&gt; &gt; (19,055,255 samples, 0.04%)</title><rect x="1079.9" y="1765" width="0.4" height="15.0" fill="rgb(231,175,11)" rx="2" ry="2" />
<text  x="1082.86" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_impl (14,398,420 samples, 0.03%)</title><rect x="392.0" y="1445" width="0.3" height="15.0" fill="rgb(249,116,15)" rx="2" ry="2" />
<text  x="395.02" y="1455.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_range_initialize&lt;unsigned long const*&gt; (40,721,035 samples, 0.08%)</title><rect x="672.5" y="1749" width="0.9" height="15.0" fill="rgb(224,79,39)" rx="2" ry="2" />
<text  x="675.47" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;*&gt; (48,261,202 samples, 0.09%)</title><rect x="340.6" y="1301" width="1.1" height="15.0" fill="rgb(245,116,23)" rx="2" ry="2" />
<text  x="343.63" y="1311.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::SequenceCatalogEntry*, std::pair&lt;duckdb::SequenceCatalogEntry* const, duckdb::SequenceValue&gt;, std::allocator&lt;std::pair&lt;duckdb::SequenceCatalogEntry* const, duckdb::SequenceValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::SequenceCatalogEntry*&gt;, std::hash&lt;duckdb::SequenceCatalogEntry*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (8,415,927 samples, 0.02%)</title><rect x="327.6" y="1605" width="0.2" height="15.0" fill="rgb(205,83,5)" rx="2" ry="2" />
<text  x="330.57" y="1615.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1333" width="0.3" height="15.0" fill="rgb(218,125,10)" rx="2" ry="2" />
<text  x="1120.47" y="1343.5" ></text>
</g>
<g >
<title>duckdb::StatementProperties::~StatementProperties (4,628,200 samples, 0.01%)</title><rect x="1031.2" y="1749" width="0.1" height="15.0" fill="rgb(232,16,8)" rx="2" ry="2" />
<text  x="1034.19" y="1759.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::FileBuffer&gt;::operator (48,704,036 samples, 0.09%)</title><rect x="242.6" y="597" width="1.1" height="15.0" fill="rgb(237,2,40)" rx="2" ry="2" />
<text  x="245.57" y="607.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::PendingQueryInternal (7,990,876 samples, 0.02%)</title><rect x="1109.3" y="1909" width="0.2" height="15.0" fill="rgb(211,29,49)" rx="2" ry="2" />
<text  x="1112.34" y="1919.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperator (37,614,606 samples, 0.07%)</title><rect x="729.2" y="1749" width="0.8" height="15.0" fill="rgb(241,50,31)" rx="2" ry="2" />
<text  x="732.18" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (61,457,665 samples, 0.12%)</title><rect x="492.8" y="1509" width="1.4" height="15.0" fill="rgb(245,161,1)" rx="2" ry="2" />
<text  x="495.76" y="1519.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4,900,080 samples, 0.01%)</title><rect x="108.7" y="1717" width="0.1" height="15.0" fill="rgb(218,87,19)" rx="2" ry="2" />
<text  x="111.70" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Timestamp::GetCurrentTimestamp (4,769,372 samples, 0.01%)</title><rect x="543.1" y="1877" width="0.1" height="15.0" fill="rgb(219,217,36)" rx="2" ry="2" />
<text  x="546.10" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (7,572,685 samples, 0.01%)</title><rect x="817.9" y="1781" width="0.2" height="15.0" fill="rgb(212,162,0)" rx="2" ry="2" />
<text  x="820.89" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ValidityInitAppend (16,963,725 samples, 0.03%)</title><rect x="449.6" y="1685" width="0.4" height="15.0" fill="rgb(213,124,51)" rx="2" ry="2" />
<text  x="452.64" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Value::Value (8,787,411 samples, 0.02%)</title><rect x="1119.9" y="1925" width="0.2" height="15.0" fill="rgb(252,217,45)" rx="2" ry="2" />
<text  x="1122.91" y="1935.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::RenderWidth (5,340,979 samples, 0.01%)</title><rect x="637.1" y="1733" width="0.2" height="15.0" fill="rgb(243,134,22)" rx="2" ry="2" />
<text  x="640.14" y="1743.5" ></text>
</g>
<g >
<title>duckdb::LogicalExpressionGet::GetTableIndex (9,402,585 samples, 0.02%)</title><rect x="777.6" y="1797" width="0.2" height="15.0" fill="rgb(209,206,49)" rx="2" ry="2" />
<text  x="780.60" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (22,814,729 samples, 0.04%)</title><rect x="41.9" y="2005" width="0.5" height="15.0" fill="rgb(226,181,10)" rx="2" ry="2" />
<text  x="44.88" y="2015.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RenderTree, unsigned long&amp;, unsigned long&amp;&gt; (25,679,343 samples, 0.05%)</title><rect x="1068.4" y="1749" width="0.6" height="15.0" fill="rgb(243,65,45)" rx="2" ry="2" />
<text  x="1071.36" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::unique_ptr&lt;duckdb::ColumnRefExpression, std::default_delete&lt;duckdb::ColumnRefExpression&gt;, void&gt; (14,546,262 samples, 0.03%)</title><rect x="944.5" y="1685" width="0.3" height="15.0" fill="rgb(249,124,19)" rx="2" ry="2" />
<text  x="947.48" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt;, std::allocator&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; &gt;::push_back (30,220,406 samples, 0.06%)</title><rect x="1001.0" y="1685" width="0.7" height="15.0" fill="rgb(232,200,41)" rx="2" ry="2" />
<text  x="1003.98" y="1695.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::Pipeline, std::allocator&lt;duckdb::Pipeline&gt;,  (28,758,571 samples, 0.06%)</title><rect x="357.5" y="1701" width="0.7" height="15.0" fill="rgb(223,194,45)" rx="2" ry="2" />
<text  x="360.53" y="1711.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (148,714,892 samples, 0.29%)</title><rect x="390.6" y="1717" width="3.4" height="15.0" fill="rgb(227,65,26)" rx="2" ry="2" />
<text  x="393.56" y="1727.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (4,965,859 samples, 0.01%)</title><rect x="106.9" y="1477" width="0.1" height="15.0" fill="rgb(250,8,31)" rx="2" ry="2" />
<text  x="109.89" y="1487.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueueProducerToken, std::default_delete&lt;duckdb::QueueProducerToken&gt; &gt;::get (15,411,383 samples, 0.03%)</title><rect x="503.9" y="1845" width="0.3" height="15.0" fill="rgb(227,204,21)" rx="2" ry="2" />
<text  x="506.87" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::GlobalSinkState, std::default_delete&lt;duckdb::GlobalSinkState&gt;, true&gt;::unique_ptr&lt;duckdb::InsertGlobalState, std::default_delete&lt;std::unique_ptr&lt;duckdb::GlobalSinkState, std::default_delete&lt;duckdb::GlobalSinkState&gt; &gt; &gt;, void&gt; (10,947,020 samples, 0.02%)</title><rect x="99.6" y="1797" width="0.2" height="15.0" fill="rgb(218,163,43)" rx="2" ry="2" />
<text  x="102.56" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (8,792,411 samples, 0.02%)</title><rect x="34.6" y="1989" width="0.2" height="15.0" fill="rgb(211,183,34)" rx="2" ry="2" />
<text  x="37.60" y="1999.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (11,930,555 samples, 0.02%)</title><rect x="970.1" y="1717" width="0.2" height="15.0" fill="rgb(220,174,4)" rx="2" ry="2" />
<text  x="973.06" y="1727.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb_libpgquery::PGWindowDef*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb_libpgquery::PGWindowDef*&gt; &gt; &gt;::unordered_map (5,623,063 samples, 0.01%)</title><rect x="540.4" y="1909" width="0.2" height="15.0" fill="rgb(208,152,1)" rx="2" ry="2" />
<text  x="543.44" y="1919.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorBuffer&gt;::construct&lt;duckdb::VectorBuffer, unsigned long&gt; (14,636,145 samples, 0.03%)</title><rect x="901.7" y="1509" width="0.3" height="15.0" fill="rgb(236,16,29)" rx="2" ry="2" />
<text  x="904.67" y="1519.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::InitializeChunk (159,274,091 samples, 0.31%)</title><rect x="492.1" y="1829" width="3.7" height="15.0" fill="rgb(246,110,13)" rx="2" ry="2" />
<text  x="495.10" y="1839.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::BlockHandle, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (54,222,102 samples, 0.11%)</title><rect x="440.8" y="1653" width="1.3" height="15.0" fill="rgb(226,100,18)" rx="2" ry="2" />
<text  x="443.84" y="1663.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::deque (10,292,892 samples, 0.02%)</title><rect x="496.9" y="1813" width="0.2" height="15.0" fill="rgb(231,105,5)" rx="2" ry="2" />
<text  x="499.87" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_range_initialize&lt;unsigned long const*&gt; (51,009,054 samples, 0.10%)</title><rect x="661.0" y="1733" width="1.2" height="15.0" fill="rgb(229,156,39)" rx="2" ry="2" />
<text  x="664.00" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (7,859,382 samples, 0.02%)</title><rect x="596.2" y="1685" width="0.1" height="15.0" fill="rgb(215,98,29)" rx="2" ry="2" />
<text  x="599.16" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionState, std::default_delete&lt;duckdb::ExpressionState&gt;, true&gt;::operator= (5,694,867 samples, 0.01%)</title><rect x="904.1" y="1717" width="0.1" height="15.0" fill="rgb(241,39,12)" rx="2" ry="2" />
<text  x="907.09" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::emplace_back&lt;unsigned long&amp;, unsigned long&amp;&gt; (60,689,250 samples, 0.12%)</title><rect x="637.5" y="1733" width="1.3" height="15.0" fill="rgb(217,23,42)" rx="2" ry="2" />
<text  x="640.45" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorMetaData&gt;::construct&lt;duckdb::VectorMetaData, duckdb::VectorMetaData const&amp;&gt; (6,738,679 samples, 0.01%)</title><rect x="864.0" y="1653" width="0.2" height="15.0" fill="rgb(252,197,24)" rx="2" ry="2" />
<text  x="867.04" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*&gt; (18,372,755 samples, 0.04%)</title><rect x="1036.4" y="1557" width="0.4" height="15.0" fill="rgb(233,89,42)" rx="2" ry="2" />
<text  x="1039.39" y="1567.5" ></text>
</g>
<g >
<title>duckdb::Binder::AddCTEMap (4,710,532 samples, 0.01%)</title><rect x="926.1" y="1829" width="0.1" height="15.0" fill="rgb(220,221,2)" rx="2" ry="2" />
<text  x="929.12" y="1839.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::ColumnDataCollection (64,147,689 samples, 0.13%)</title><rect x="385.7" y="1909" width="1.5" height="15.0" fill="rgb(209,227,25)" rx="2" ry="2" />
<text  x="388.72" y="1919.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::SelectionData,  (4,378,740 samples, 0.01%)</title><rect x="315.8" y="1573" width="0.1" height="15.0" fill="rgb(209,74,39)" rx="2" ry="2" />
<text  x="318.76" y="1583.5" ></text>
</g>
<g >
<title>duckdb::Transaction::Transaction (8,792,876 samples, 0.02%)</title><rect x="989.1" y="1589" width="0.2" height="15.0" fill="rgb(246,103,30)" rx="2" ry="2" />
<text  x="992.11" y="1599.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::FinalizeAppend (41,400,184 samples, 0.08%)</title><rect x="100.7" y="1685" width="1.0" height="15.0" fill="rgb(243,205,43)" rx="2" ry="2" />
<text  x="103.72" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::AdaptiveFilter, std::default_delete&lt;duckdb::AdaptiveFilter&gt; &gt;::~unique_ptr (4,554,311 samples, 0.01%)</title><rect x="227.5" y="1701" width="0.1" height="15.0" fill="rgb(245,120,20)" rx="2" ry="2" />
<text  x="230.48" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (13,893,108 samples, 0.03%)</title><rect x="536.0" y="1749" width="0.3" height="15.0" fill="rgb(219,150,26)" rx="2" ry="2" />
<text  x="538.99" y="1759.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RenderTreeNode&gt; (6,269,881 samples, 0.01%)</title><rect x="634.9" y="1701" width="0.2" height="15.0" fill="rgb(243,175,27)" rx="2" ry="2" />
<text  x="637.92" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Rule&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; &gt;::_M_check_len (10,053,241 samples, 0.02%)</title><rect x="737.9" y="1653" width="0.2" height="15.0" fill="rgb(252,42,16)" rx="2" ry="2" />
<text  x="740.85" y="1663.5" ></text>
</g>
<g >
<title>duckdb::Value::DefaultCastAs (28,783,991 samples, 0.06%)</title><rect x="1120.4" y="1973" width="0.7" height="15.0" fill="rgb(209,113,11)" rx="2" ry="2" />
<text  x="1123.42" y="1983.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::ColumnBinding, std::pair&lt;duckdb::ColumnBinding const, duckdb::unique_ptr&lt;duckdb::BaseStatistics, std::default_delete&lt;duckdb::BaseStatistics&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::unique_ptr&lt;duckdb::BaseStatistics, std::default_delete&lt;duckdb::BaseStatistics&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (8,430,450 samples, 0.02%)</title><rect x="766.5" y="1653" width="0.2" height="15.0" fill="rgb(248,109,6)" rx="2" ry="2" />
<text  x="769.50" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::max_size (7,256,788 samples, 0.01%)</title><rect x="617.7" y="1749" width="0.2" height="15.0" fill="rgb(206,188,32)" rx="2" ry="2" />
<text  x="620.70" y="1759.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::~DataChunk (18,508,559 samples, 0.04%)</title><rect x="321.4" y="1765" width="0.4" height="15.0" fill="rgb(216,225,36)" rx="2" ry="2" />
<text  x="324.39" y="1775.5" ></text>
</g>
<g >
<title>duckdb::PipelineInitializeTask::PipelineInitializeTask (4,999,289 samples, 0.01%)</title><rect x="1059.4" y="1797" width="0.1" height="15.0" fill="rgb(230,177,36)" rx="2" ry="2" />
<text  x="1062.42" y="1807.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Index, std::default_delete&lt;duckdb::Index&gt;, true&gt;, true&gt;::~vector (7,458,506 samples, 0.01%)</title><rect x="235.6" y="1653" width="0.2" height="15.0" fill="rgb(212,203,4)" rx="2" ry="2" />
<text  x="238.65" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SegmentStatistics, std::default_delete&lt;duckdb::SegmentStatistics&gt; &gt;::operator= (10,582,549 samples, 0.02%)</title><rect x="454.4" y="1493" width="0.3" height="15.0" fill="rgb(235,114,21)" rx="2" ry="2" />
<text  x="457.42" y="1503.5" ></text>
</g>
<g >
<title>duckdb::Optimizer::Optimize (6,034,271,486 samples, 11.76%)</title><rect x="644.0" y="1893" width="138.8" height="15.0" fill="rgb(237,44,7)" rx="2" ry="2" />
<text  x="647.03" y="1903.5" >duckdb::Optimizer..</text>
</g>
<g >
<title>duckdb::CollectionScanState::Initialize (74,137,547 samples, 0.14%)</title><rect x="223.4" y="1717" width="1.7" height="15.0" fill="rgb(253,169,16)" rx="2" ry="2" />
<text  x="226.39" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (74,975,643 samples, 0.15%)</title><rect x="366.7" y="1589" width="1.7" height="15.0" fill="rgb(251,115,23)" rx="2" ry="2" />
<text  x="369.65" y="1599.5" ></text>
</g>
<g >
<title>duckdb::OperatorInformation::~OperatorInformation (4,720,482 samples, 0.01%)</title><rect x="1089.5" y="1605" width="0.1" height="15.0" fill="rgb(217,70,9)" rx="2" ry="2" />
<text  x="1092.46" y="1615.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_trigger (12,490,581 samples, 0.02%)</title><rect x="334.5" y="1285" width="0.3" height="15.0" fill="rgb(250,24,8)" rx="2" ry="2" />
<text  x="337.52" y="1295.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Vector, true&gt;::~vector (24,937,260 samples, 0.05%)</title><rect x="895.3" y="1765" width="0.6" height="15.0" fill="rgb(216,110,37)" rx="2" ry="2" />
<text  x="898.30" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (26,223,077 samples, 0.05%)</title><rect x="690.7" y="1733" width="0.6" height="15.0" fill="rgb(233,177,28)" rx="2" ry="2" />
<text  x="693.68" y="1743.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::find (10,302,112 samples, 0.02%)</title><rect x="955.0" y="1557" width="0.2" height="15.0" fill="rgb(207,156,38)" rx="2" ry="2" />
<text  x="957.97" y="1567.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::find (45,354,508 samples, 0.09%)</title><rect x="663.7" y="1781" width="1.1" height="15.0" fill="rgb(216,30,50)" rx="2" ry="2" />
<text  x="666.73" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (5,402,541 samples, 0.01%)</title><rect x="465.9" y="1781" width="0.1" height="15.0" fill="rgb(234,174,21)" rx="2" ry="2" />
<text  x="468.87" y="1791.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::Verify (20,737,948 samples, 0.04%)</title><rect x="417.0" y="1637" width="0.5" height="15.0" fill="rgb(250,76,4)" rx="2" ry="2" />
<text  x="420.01" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::~vector (9,916,935 samples, 0.02%)</title><rect x="831.9" y="1573" width="0.2" height="15.0" fill="rgb(232,179,45)" rx="2" ry="2" />
<text  x="834.87" y="1583.5" ></text>
</g>
<g >
<title>duckdb::ArithmeticSimplificationRule::~ArithmeticSimplificationRule (33,106,038 samples, 0.06%)</title><rect x="829.5" y="1717" width="0.8" height="15.0" fill="rgb(209,173,17)" rx="2" ry="2" />
<text  x="832.53" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*&gt; (65,319,458 samples, 0.13%)</title><rect x="497.9" y="1733" width="1.5" height="15.0" fill="rgb(250,71,45)" rx="2" ry="2" />
<text  x="500.94" y="1743.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (21,466,266 samples, 0.04%)</title><rect x="595.3" y="1653" width="0.5" height="15.0" fill="rgb(225,71,25)" rx="2" ry="2" />
<text  x="598.30" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BufferedSerializer, std::default_delete&lt;duckdb::BufferedSerializer&gt;, true&gt;::reset (14,336,575 samples, 0.03%)</title><rect x="591.6" y="1781" width="0.3" height="15.0" fill="rgb(235,199,3)" rx="2" ry="2" />
<text  x="594.58" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (78,882,937 samples, 0.15%)</title><rect x="669.4" y="1765" width="1.8" height="15.0" fill="rgb(217,178,51)" rx="2" ry="2" />
<text  x="672.40" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::DictionaryBuffer&gt; &gt;::destroy&lt;duckdb::DictionaryBuffer&gt; (12,255,699 samples, 0.02%)</title><rect x="292.3" y="1557" width="0.2" height="15.0" fill="rgb(205,106,35)" rx="2" ry="2" />
<text  x="295.26" y="1567.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr (36,199,877 samples, 0.07%)</title><rect x="825.9" y="1813" width="0.9" height="15.0" fill="rgb(227,29,13)" rx="2" ry="2" />
<text  x="828.92" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ProducerToken, std::default_delete&lt;duckdb::ProducerToken&gt; &gt;::get (12,973,733 samples, 0.03%)</title><rect x="508.1" y="1877" width="0.3" height="15.0" fill="rgb(231,160,10)" rx="2" ry="2" />
<text  x="511.07" y="1887.5" ></text>
</g>
<g >
<title>duckdb::BlockHandle::~BlockHandle (79,001,668 samples, 0.15%)</title><rect x="242.0" y="645" width="1.8" height="15.0" fill="rgb(244,134,34)" rx="2" ry="2" />
<text  x="244.97" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_realloc_insert&lt;unsigned long&amp;, unsigned long&amp;&gt; (43,181,102 samples, 0.08%)</title><rect x="637.7" y="1717" width="1.0" height="15.0" fill="rgb(213,218,20)" rx="2" ry="2" />
<text  x="640.73" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="613" width="0.1" height="15.0" fill="rgb(220,224,14)" rx="2" ry="2" />
<text  x="14.25" y="623.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ifree (28,256,288 samples, 0.06%)</title><rect x="221.7" y="1381" width="0.6" height="15.0" fill="rgb(226,28,36)" rx="2" ry="2" />
<text  x="224.67" y="1391.5" ></text>
</g>
<g >
<title>duckdb::AttachedDatabase::GetCatalog (4,844,141 samples, 0.01%)</title><rect x="988.0" y="1749" width="0.1" height="15.0" fill="rgb(211,6,35)" rx="2" ry="2" />
<text  x="990.99" y="1759.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceHashFunction&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceEquality&lt;duckdb::UsingColumnSet&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt; &gt; &gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceHashFunction&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceEquality&lt;duckdb::UsingColumnSet&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt; &gt; &gt; &gt; &gt; &gt;::~unordered_map (4,420,732 samples, 0.01%)</title><rect x="1031.1" y="1733" width="0.1" height="15.0" fill="rgb(211,228,13)" rx="2" ry="2" />
<text  x="1034.08" y="1743.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::DatePartSimplificationRule, duckdb::ExpressionRewriter&amp;&gt; (102,894,518 samples, 0.20%)</title><rect x="796.4" y="1877" width="2.4" height="15.0" fill="rgb(254,212,3)" rx="2" ry="2" />
<text  x="799.39" y="1887.5" ></text>
</g>
<g >
<title>duckdb::BaseSelectBinder::TryBindGroup (31,990,947 samples, 0.06%)</title><rect x="956.2" y="1701" width="0.7" height="15.0" fill="rgb(249,122,20)" rx="2" ry="2" />
<text  x="959.17" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PipelineExecutor, std::default_delete&lt;duckdb::PipelineExecutor&gt;, true&gt;::reset (7,566,231 samples, 0.01%)</title><rect x="1097.6" y="1861" width="0.2" height="15.0" fill="rgb(205,78,42)" rx="2" ry="2" />
<text  x="1100.58" y="1871.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (5,426,798 samples, 0.01%)</title><rect x="573.9" y="1781" width="0.2" height="15.0" fill="rgb(221,6,31)" rx="2" ry="2" />
<text  x="576.93" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_gc_event_handler (7,562,153 samples, 0.01%)</title><rect x="218.7" y="1349" width="0.1" height="15.0" fill="rgb(221,141,38)" rx="2" ry="2" />
<text  x="221.65" y="1359.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::unique_ptr&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt; &gt;, void&gt; (13,757,250 samples, 0.03%)</title><rect x="587.6" y="1829" width="0.3" height="15.0" fill="rgb(254,187,14)" rx="2" ry="2" />
<text  x="590.56" y="1839.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::PipelineInitializeEvent&gt; &gt;::destroy&lt;duckdb::PipelineInitializeEvent&gt; (21,855,686 samples, 0.04%)</title><rect x="356.7" y="1685" width="0.5" height="15.0" fill="rgb(252,21,34)" rx="2" ry="2" />
<text  x="359.73" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::push_back (9,473,135 samples, 0.02%)</title><rect x="1085.6" y="1813" width="0.2" height="15.0" fill="rgb(236,198,52)" rx="2" ry="2" />
<text  x="1088.62" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::Ready (5,374,596 samples, 0.01%)</title><rect x="1085.1" y="1845" width="0.1" height="15.0" fill="rgb(215,115,45)" rx="2" ry="2" />
<text  x="1088.10" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TableStatisticsLock, std::default_delete&lt;duckdb::TableStatisticsLock&gt;, true&gt;::~unique_ptr (5,524,005 samples, 0.01%)</title><rect x="463.6" y="1749" width="0.1" height="15.0" fill="rgb(218,202,4)" rx="2" ry="2" />
<text  x="466.62" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (26,163,007 samples, 0.05%)</title><rect x="691.4" y="1733" width="0.6" height="15.0" fill="rgb(246,144,53)" rx="2" ry="2" />
<text  x="694.44" y="1743.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBoxContent (168,417,335 samples, 0.33%)</title><rect x="636.6" y="1765" width="3.8" height="15.0" fill="rgb(248,127,7)" rx="2" ry="2" />
<text  x="639.55" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned long [], std::default_delete&lt;unsigned long&gt;, false&gt;::operator= (6,057,333 samples, 0.01%)</title><rect x="363.1" y="1605" width="0.1" height="15.0" fill="rgb(231,56,22)" rx="2" ry="2" />
<text  x="366.10" y="1615.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DistinctStatistics, std::default_delete&lt;duckdb::DistinctStatistics&gt;, true&gt;::operator= (7,258,135 samples, 0.01%)</title><rect x="427.1" y="1413" width="0.1" height="15.0" fill="rgb(242,37,12)" rx="2" ry="2" />
<text  x="430.07" y="1423.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnScanState [], std::default_delete&lt;duckdb::ColumnScanState []&gt; &gt;::unique_ptr&lt;duckdb::ColumnScanState*, std::default_delete&lt;duckdb::ColumnScanState []&gt;, void, bool&gt; (5,828,121 samples, 0.01%)</title><rect x="224.5" y="1669" width="0.1" height="15.0" fill="rgb(236,221,29)" rx="2" ry="2" />
<text  x="227.47" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::operator= (4,595,257 samples, 0.01%)</title><rect x="804.4" y="1829" width="0.1" height="15.0" fill="rgb(239,76,48)" rx="2" ry="2" />
<text  x="807.42" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_do_relocate (16,669,453 samples, 0.03%)</title><rect x="638.3" y="1685" width="0.4" height="15.0" fill="rgb(233,91,26)" rx="2" ry="2" />
<text  x="641.29" y="1695.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::SetNode (8,222,792 samples, 0.02%)</title><rect x="594.7" y="1765" width="0.1" height="15.0" fill="rgb(253,163,44)" rx="2" ry="2" />
<text  x="597.65" y="1775.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (97,859,304 samples, 0.19%)</title><rect x="492.3" y="1749" width="2.3" height="15.0" fill="rgb(240,42,5)" rx="2" ry="2" />
<text  x="495.32" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::AllocateVector (51,392,683 samples, 0.10%)</title><rect x="863.4" y="1733" width="1.1" height="15.0" fill="rgb(247,60,32)" rx="2" ry="2" />
<text  x="866.37" y="1743.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_Vector_base (5,741,693 samples, 0.01%)</title><rect x="575.4" y="1765" width="0.2" height="15.0" fill="rgb(254,156,35)" rx="2" ry="2" />
<text  x="578.43" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (7,854,437 samples, 0.02%)</title><rect x="776.6" y="1765" width="0.2" height="15.0" fill="rgb(226,221,54)" rx="2" ry="2" />
<text  x="779.58" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (11,978,219 samples, 0.02%)</title><rect x="401.9" y="1445" width="0.3" height="15.0" fill="rgb(227,91,51)" rx="2" ry="2" />
<text  x="404.90" y="1455.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (87,285,258 samples, 0.17%)</title><rect x="217.5" y="1573" width="2.0" height="15.0" fill="rgb(235,40,53)" rx="2" ry="2" />
<text  x="220.46" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::large_dalloc (102,622,066 samples, 0.20%)</title><rect x="346.1" y="773" width="2.4" height="15.0" fill="rgb(216,209,40)" rx="2" ry="2" />
<text  x="349.11" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ResultModifier, std::default_delete&lt;duckdb::ResultModifier&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ResultModifier, std::default_delete&lt;duckdb::ResultModifier&gt;, true&gt; &gt; &gt;::~vector (4,582,560 samples, 0.01%)</title><rect x="1038.6" y="1621" width="0.1" height="15.0" fill="rgb(224,39,32)" rx="2" ry="2" />
<text  x="1041.62" y="1631.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::LightweightSemaphore::wait (1,494,260,593 samples, 2.91%)</title><rect x="110.1" y="1861" width="34.4" height="15.0" fill="rgb(229,48,46)" rx="2" ry="2" />
<text  x="113.09" y="1871.5" >du..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt;::allocate (9,578,443 samples, 0.02%)</title><rect x="38.4" y="2021" width="0.2" height="15.0" fill="rgb(218,42,54)" rx="2" ry="2" />
<text  x="41.38" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::~vector (24,937,260 samples, 0.05%)</title><rect x="895.3" y="1749" width="0.6" height="15.0" fill="rgb(214,29,25)" rx="2" ry="2" />
<text  x="898.30" y="1759.5" ></text>
</g>
<g >
<title>std::ios_base::ios_base (7,224,446 samples, 0.01%)</title><rect x="23.5" y="2005" width="0.2" height="15.0" fill="rgb(244,171,49)" rx="2" ry="2" />
<text  x="26.52" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; (10,078,404 samples, 0.02%)</title><rect x="759.5" y="1765" width="0.2" height="15.0" fill="rgb(214,69,10)" rx="2" ry="2" />
<text  x="762.46" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Now (5,267,483 samples, 0.01%)</title><rect x="898.5" y="1685" width="0.1" height="15.0" fill="rgb(247,1,53)" rx="2" ry="2" />
<text  x="901.45" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocator::Allocate (99,194,158 samples, 0.19%)</title><rect x="192.5" y="1749" width="2.3" height="15.0" fill="rgb(219,225,47)" rx="2" ry="2" />
<text  x="195.50" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Vector::ResetFromCache (16,321,323 samples, 0.03%)</title><rect x="220.6" y="1717" width="0.4" height="15.0" fill="rgb(251,186,2)" rx="2" ry="2" />
<text  x="223.58" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (5,931,086 samples, 0.01%)</title><rect x="193.3" y="1493" width="0.1" height="15.0" fill="rgb(252,7,51)" rx="2" ry="2" />
<text  x="196.31" y="1503.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::ResolveDefaults (29,513,191 samples, 0.06%)</title><rect x="464.7" y="1797" width="0.7" height="15.0" fill="rgb(250,195,19)" rx="2" ry="2" />
<text  x="467.70" y="1807.5" ></text>
</g>
<g >
<title>duckdb::InsertStatement::~InsertStatement (57,807,672 samples, 0.11%)</title><rect x="1038.0" y="1829" width="1.4" height="15.0" fill="rgb(240,109,21)" rx="2" ry="2" />
<text  x="1041.03" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CompressionAppendState, std::default_delete&lt;duckdb::CompressionAppendState&gt; &gt;::operator= (7,679,159 samples, 0.01%)</title><rect x="197.1" y="1653" width="0.2" height="15.0" fill="rgb(216,28,47)" rx="2" ry="2" />
<text  x="200.14" y="1663.5" ></text>
</g>
<g >
<title>duckdb::DuckSchemaEntry::~DuckSchemaEntry (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1173" width="0.3" height="15.0" fill="rgb(249,100,0)" rx="2" ry="2" />
<text  x="1120.47" y="1183.5" ></text>
</g>
<g >
<title>duckdb::ColumnRefExpression::~ColumnRefExpression (6,690,303 samples, 0.01%)</title><rect x="955.4" y="1605" width="0.1" height="15.0" fill="rgb(239,79,53)" rx="2" ry="2" />
<text  x="958.39" y="1615.5" ></text>
</g>
<g >
<title>duckdb::BufferPool::PurgeQueue (11,189,467 samples, 0.02%)</title><rect x="242.2" y="629" width="0.3" height="15.0" fill="rgb(231,209,48)" rx="2" ry="2" />
<text  x="245.21" y="639.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (98,516,374 samples, 0.19%)</title><rect x="492.3" y="1765" width="2.3" height="15.0" fill="rgb(209,66,50)" rx="2" ry="2" />
<text  x="495.30" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LocalSinkState, std::default_delete&lt;duckdb::LocalSinkState&gt; &gt;::operator= (14,221,320 samples, 0.03%)</title><rect x="496.1" y="1813" width="0.4" height="15.0" fill="rgb(220,19,0)" rx="2" ry="2" />
<text  x="499.14" y="1823.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (35,382,568 samples, 0.07%)</title><rect x="901.4" y="1573" width="0.8" height="15.0" fill="rgb(222,7,22)" rx="2" ry="2" />
<text  x="904.36" y="1583.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*&gt; (6,232,664 samples, 0.01%)</title><rect x="639.4" y="1701" width="0.1" height="15.0" fill="rgb(212,86,10)" rx="2" ry="2" />
<text  x="642.35" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (34,035,181 samples, 0.07%)</title><rect x="289.4" y="1413" width="0.8" height="15.0" fill="rgb(240,192,8)" rx="2" ry="2" />
<text  x="292.43" y="1423.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::ColumnBinding, std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (7,052,158 samples, 0.01%)</title><rect x="763.0" y="1621" width="0.2" height="15.0" fill="rgb(221,212,8)" rx="2" ry="2" />
<text  x="766.03" y="1631.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;unsigned long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt; &gt; (10,462,576 samples, 0.02%)</title><rect x="778.2" y="1765" width="0.3" height="15.0" fill="rgb(254,17,1)" rx="2" ry="2" />
<text  x="781.21" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::shared_ptr&lt;duckdb::ColumnData&gt; &gt; &gt;::construct&lt;std::shared_ptr&lt;duckdb::ColumnData&gt;, std::shared_ptr&lt;duckdb::ColumnData&gt; &gt; (5,018,507 samples, 0.01%)</title><rect x="456.2" y="1669" width="0.1" height="15.0" fill="rgb(223,216,16)" rx="2" ry="2" />
<text  x="459.17" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (5,571,187 samples, 0.01%)</title><rect x="878.8" y="1381" width="0.1" height="15.0" fill="rgb(212,186,22)" rx="2" ry="2" />
<text  x="881.75" y="1391.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt;::max_size (4,673,069 samples, 0.01%)</title><rect x="658.0" y="1669" width="0.1" height="15.0" fill="rgb(224,163,40)" rx="2" ry="2" />
<text  x="660.97" y="1679.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::GetColumn (4,558,126 samples, 0.01%)</title><rect x="195.5" y="1717" width="0.1" height="15.0" fill="rgb(225,106,1)" rx="2" ry="2" />
<text  x="198.52" y="1727.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt; &gt;::__uniq_ptr_impl (5,795,652 samples, 0.01%)</title><rect x="930.5" y="1669" width="0.1" height="15.0" fill="rgb(249,197,4)" rx="2" ry="2" />
<text  x="933.47" y="1679.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ColumnSegment&gt;::operator (128,268,513 samples, 0.25%)</title><rect x="238.3" y="805" width="2.9" height="15.0" fill="rgb(250,62,49)" rx="2" ry="2" />
<text  x="241.29" y="815.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt; &gt;::~unique_ptr (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1429" width="0.3" height="15.0" fill="rgb(225,161,47)" rx="2" ry="2" />
<text  x="1120.47" y="1439.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_realloc_insert&lt;duckdb::LogicalType const&amp;&gt; (9,246,880 samples, 0.02%)</title><rect x="316.3" y="1701" width="0.2" height="15.0" fill="rgb(229,118,6)" rx="2" ry="2" />
<text  x="319.30" y="1711.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::allocate (4,556,616 samples, 0.01%)</title><rect x="651.7" y="1685" width="0.1" height="15.0" fill="rgb(252,54,10)" rx="2" ry="2" />
<text  x="654.72" y="1695.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::FunctionExpressionMatcher&gt; (6,776,423 samples, 0.01%)</title><rect x="819.2" y="1845" width="0.2" height="15.0" fill="rgb(234,152,5)" rx="2" ry="2" />
<text  x="822.25" y="1855.5" ></text>
</g>
<g >
<title>duckdb::TemplatedColumnDataCopy&lt;duckdb::StandardValueCopy&lt;long&gt; &gt; (9,917,994 samples, 0.02%)</title><rect x="375.2" y="1893" width="0.2" height="15.0" fill="rgb(218,114,19)" rx="2" ry="2" />
<text  x="378.17" y="1903.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ClientContext,  (4,855,035 samples, 0.01%)</title><rect x="515.5" y="1925" width="0.1" height="15.0" fill="rgb(228,159,48)" rx="2" ry="2" />
<text  x="518.45" y="1935.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateStatistics (95,536,873 samples, 0.19%)</title><rect x="765.9" y="1813" width="2.2" height="15.0" fill="rgb(242,221,26)" rx="2" ry="2" />
<text  x="768.88" y="1823.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringInitAppend (33,550,323 samples, 0.07%)</title><rect x="196.0" y="1669" width="0.8" height="15.0" fill="rgb(226,44,17)" rx="2" ry="2" />
<text  x="199.00" y="1679.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Reset (26,075,094 samples, 0.05%)</title><rect x="220.6" y="1733" width="0.6" height="15.0" fill="rgb(251,78,29)" rx="2" ry="2" />
<text  x="223.56" y="1743.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::Reset (4,965,859 samples, 0.01%)</title><rect x="106.9" y="1429" width="0.1" height="15.0" fill="rgb(225,10,47)" rx="2" ry="2" />
<text  x="109.89" y="1439.5" ></text>
</g>
<g >
<title>duckdb::PendingQueryResult::Close (6,042,075 samples, 0.01%)</title><rect x="396.3" y="1941" width="0.1" height="15.0" fill="rgb(241,204,10)" rx="2" ry="2" />
<text  x="399.26" y="1951.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; (8,429,655 samples, 0.02%)</title><rect x="649.2" y="1781" width="0.2" height="15.0" fill="rgb(209,111,35)" rx="2" ry="2" />
<text  x="652.24" y="1791.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::operator= (11,782,730 samples, 0.02%)</title><rect x="938.9" y="1733" width="0.3" height="15.0" fill="rgb(212,32,20)" rx="2" ry="2" />
<text  x="941.89" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, true&gt;::~vector (4,513,520 samples, 0.01%)</title><rect x="837.6" y="1797" width="0.1" height="15.0" fill="rgb(228,131,43)" rx="2" ry="2" />
<text  x="840.61" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ExecutorTask::Execute (4,204,047,520 samples, 8.20%)</title><rect x="405.2" y="1893" width="96.7" height="15.0" fill="rgb(244,133,40)" rx="2" ry="2" />
<text  x="408.18" y="1903.5" >duckdb::Exe..</text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::MetaPipeline, std::allocator&lt;duckdb::MetaPipeline&gt;, duckdb::Executor&amp;, duckdb::PipelineBuildState&amp;, decltype (140,384,205 samples, 0.27%)</title><rect x="1092.8" y="1845" width="3.2" height="15.0" fill="rgb(235,94,0)" rx="2" ry="2" />
<text  x="1095.77" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::LogicalOperator&gt;, void&gt; (4,422,359 samples, 0.01%)</title><rect x="976.3" y="1717" width="0.1" height="15.0" fill="rgb(227,208,16)" rx="2" ry="2" />
<text  x="979.27" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VisitOperator (191,603,840 samples, 0.37%)</title><rect x="841.9" y="1877" width="4.4" height="15.0" fill="rgb(229,83,53)" rx="2" ry="2" />
<text  x="844.93" y="1887.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CompressionAppendState, std::default_delete&lt;duckdb::CompressionAppendState&gt;, true&gt;::~unique_ptr (5,148,375 samples, 0.01%)</title><rect x="234.1" y="1573" width="0.1" height="15.0" fill="rgb(231,72,3)" rx="2" ry="2" />
<text  x="237.07" y="1583.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (6,664,193 samples, 0.01%)</title><rect x="736.6" y="1701" width="0.2" height="15.0" fill="rgb(232,196,28)" rx="2" ry="2" />
<text  x="739.63" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::InitializeChunkState (87,034,064 samples, 0.17%)</title><rect x="886.2" y="1749" width="2.0" height="15.0" fill="rgb(208,187,3)" rx="2" ry="2" />
<text  x="889.21" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_realloc_insert&lt;duckdb::LogicalType const&amp;&gt; (9,738,375 samples, 0.02%)</title><rect x="1020.5" y="1813" width="0.2" height="15.0" fill="rgb(236,158,12)" rx="2" ry="2" />
<text  x="1023.47" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (5,221,611 samples, 0.01%)</title><rect x="883.5" y="1653" width="0.2" height="15.0" fill="rgb(228,148,9)" rx="2" ry="2" />
<text  x="886.54" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TemporaryDirectoryHandle, std::default_delete&lt;duckdb::TemporaryDirectoryHandle&gt; &gt;::operator bool (5,008,644 samples, 0.01%)</title><rect x="342.4" y="949" width="0.1" height="15.0" fill="rgb(250,23,23)" rx="2" ry="2" />
<text  x="345.36" y="959.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::ExpressionEquality&lt;duckdb::ParsedExpression&gt;, duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (14,496,709 samples, 0.03%)</title><rect x="967.5" y="1717" width="0.3" height="15.0" fill="rgb(235,133,28)" rx="2" ry="2" />
<text  x="970.51" y="1727.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Pipeline&gt;::~shared_ptr (32,396,115 samples, 0.06%)</title><rect x="357.5" y="1765" width="0.7" height="15.0" fill="rgb(216,140,5)" rx="2" ry="2" />
<text  x="360.47" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::PipelineInitializeEvent&gt;::destroy&lt;duckdb::PipelineInitializeEvent&gt; (21,206,866 samples, 0.04%)</title><rect x="356.7" y="1669" width="0.5" height="15.0" fill="rgb(227,155,22)" rx="2" ry="2" />
<text  x="359.73" y="1679.5" ></text>
</g>
<g >
<title>io_schedule (13,650,334 samples, 0.03%)</title><rect x="249.3" y="1573" width="0.3" height="15.0" fill="rgb(229,3,35)" rx="2" ry="2" />
<text  x="252.26" y="1583.5" ></text>
</g>
<g >
<title>duckdb::DistinctStatistics::~DistinctStatistics (8,860,189 samples, 0.02%)</title><rect x="236.6" y="1253" width="0.2" height="15.0" fill="rgb(210,202,47)" rx="2" ry="2" />
<text  x="239.57" y="1263.5" ></text>
</g>
<g >
<title>duckdb::PlanDeserializationState::PlanDeserializationState (7,537,643 samples, 0.01%)</title><rect x="641.8" y="1861" width="0.1" height="15.0" fill="rgb(214,227,27)" rx="2" ry="2" />
<text  x="644.75" y="1871.5" ></text>
</g>
<g >
<title>duckdb::VectorMetaData::VectorMetaData (7,624,630 samples, 0.01%)</title><rect x="383.3" y="1797" width="0.2" height="15.0" fill="rgb(209,180,7)" rx="2" ry="2" />
<text  x="386.34" y="1807.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ConcurrentQueue, std::default_delete&lt;duckdb::ConcurrentQueue&gt; &gt;::_M_ptr (18,002,443 samples, 0.04%)</title><rect x="506.8" y="1845" width="0.5" height="15.0" fill="rgb(252,89,41)" rx="2" ry="2" />
<text  x="509.84" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (7,340,018 samples, 0.01%)</title><rect x="401.7" y="1477" width="0.1" height="15.0" fill="rgb(216,169,2)" rx="2" ry="2" />
<text  x="404.66" y="1487.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (18,120,938 samples, 0.04%)</title><rect x="107.3" y="1573" width="0.4" height="15.0" fill="rgb(240,21,7)" rx="2" ry="2" />
<text  x="110.29" y="1583.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::StandardColumnData&gt;::shared_ptr&lt;std::allocator&lt;duckdb::StandardColumnData&gt;, duckdb::BlockManager&amp;, duckdb::DataTableInfo&amp;, unsigned long&amp;, unsigned long&amp;, duckdb::LogicalType const&amp;, duckdb::optional_ptr&lt;duckdb::ColumnData&gt;&amp;&gt; (101,168,420 samples, 0.20%)</title><rect x="453.1" y="1637" width="2.3" height="15.0" fill="rgb(242,204,6)" rx="2" ry="2" />
<text  x="456.11" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (13,292,497 samples, 0.03%)</title><rect x="301.9" y="1701" width="0.3" height="15.0" fill="rgb(228,96,24)" rx="2" ry="2" />
<text  x="304.92" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_dalloc_event (23,137,821 samples, 0.05%)</title><rect x="334.3" y="1317" width="0.5" height="15.0" fill="rgb(212,106,8)" rx="2" ry="2" />
<text  x="337.29" y="1327.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Pin (10,078,554 samples, 0.02%)</title><rect x="449.7" y="1669" width="0.2" height="15.0" fill="rgb(237,25,38)" rx="2" ry="2" />
<text  x="452.66" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (10,608,724 samples, 0.02%)</title><rect x="1017.0" y="1429" width="0.2" height="15.0" fill="rgb(251,122,16)" rx="2" ry="2" />
<text  x="1019.99" y="1439.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt; &gt; (27,735,361 samples, 0.05%)</title><rect x="478.9" y="1733" width="0.6" height="15.0" fill="rgb(254,181,34)" rx="2" ry="2" />
<text  x="481.88" y="1743.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::PreparedStatementData, duckdb::StatementType&amp;&gt; (35,216,331 samples, 0.07%)</title><rect x="1040.5" y="1893" width="0.8" height="15.0" fill="rgb(206,187,48)" rx="2" ry="2" />
<text  x="1043.52" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (4,853,048 samples, 0.01%)</title><rect x="680.7" y="1749" width="0.1" height="15.0" fill="rgb(205,220,8)" rx="2" ry="2" />
<text  x="683.71" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Optimizer::Optimizer (2,004,712,499 samples, 3.91%)</title><rect x="782.8" y="1893" width="46.2" height="15.0" fill="rgb(238,73,16)" rx="2" ry="2" />
<text  x="785.85" y="1903.5" >duck..</text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ConjunctionSimplificationRule, duckdb::ExpressionRewriter&amp;&gt; (75,351,192 samples, 0.15%)</title><rect x="792.5" y="1877" width="1.7" height="15.0" fill="rgb(249,228,5)" rx="2" ry="2" />
<text  x="795.50" y="1887.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, true&gt;::vector (17,592,867 samples, 0.03%)</title><rect x="561.5" y="1781" width="0.4" height="15.0" fill="rgb(215,222,47)" rx="2" ry="2" />
<text  x="564.49" y="1791.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperator (42,208,545 samples, 0.08%)</title><rect x="848.8" y="1845" width="1.0" height="15.0" fill="rgb(216,58,7)" rx="2" ry="2" />
<text  x="851.82" y="1855.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::Execute (2,887,094,323 samples, 5.63%)</title><rect x="419.2" y="1861" width="66.4" height="15.0" fill="rgb(245,123,51)" rx="2" ry="2" />
<text  x="422.21" y="1871.5" >duckdb:..</text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (103,219,329 samples, 0.20%)</title><rect x="762.4" y="1781" width="2.4" height="15.0" fill="rgb(240,199,49)" rx="2" ry="2" />
<text  x="765.38" y="1791.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::QueryProfiler::TreeNode&gt; (10,256,855 samples, 0.02%)</title><rect x="1086.6" y="1829" width="0.2" height="15.0" fill="rgb(223,0,35)" rx="2" ry="2" />
<text  x="1089.61" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Expression const*, std::allocator&lt;duckdb::Expression const*&gt; &gt;::emplace_back&lt;duckdb::Expression const*&gt; (22,831,209 samples, 0.04%)</title><rect x="904.8" y="1717" width="0.5" height="15.0" fill="rgb(232,44,34)" rx="2" ry="2" />
<text  x="907.77" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::ExpressionBinder&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::ExpressionBinder&gt; &gt; &gt;::emplace_back&lt;std::reference_wrapper&lt;duckdb::ExpressionBinder&gt; &gt; (22,348,213 samples, 0.04%)</title><rect x="936.3" y="1669" width="0.5" height="15.0" fill="rgb(214,49,22)" rx="2" ry="2" />
<text  x="939.29" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ValidityMask::~ValidityMask (10,282,095 samples, 0.02%)</title><rect x="481.1" y="1621" width="0.3" height="15.0" fill="rgb(219,183,54)" rx="2" ry="2" />
<text  x="484.12" y="1631.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt; &gt;::find (8,569,324 samples, 0.02%)</title><rect x="943.0" y="1685" width="0.2" height="15.0" fill="rgb(213,14,46)" rx="2" ry="2" />
<text  x="945.96" y="1695.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;duckdb::Optimizer::Optimize (5,137,365 samples, 0.01%)</title><rect x="782.0" y="1845" width="0.1" height="15.0" fill="rgb(208,33,9)" rx="2" ry="2" />
<text  x="784.99" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::~_Hashtable_alloc (5,522,049 samples, 0.01%)</title><rect x="699.9" y="1797" width="0.2" height="15.0" fill="rgb(247,60,31)" rx="2" ry="2" />
<text  x="702.95" y="1807.5" ></text>
</g>
<g >
<title>duckdb::AttachedDatabase::GetTransactionManager (4,977,335 samples, 0.01%)</title><rect x="996.1" y="1685" width="0.1" height="15.0" fill="rgb(229,90,1)" rx="2" ry="2" />
<text  x="999.10" y="1695.5" ></text>
</g>
<g >
<title>duckdb::CycleCounter::BeginSample (6,840,714 samples, 0.01%)</title><rect x="898.4" y="1717" width="0.2" height="15.0" fill="rgb(215,34,5)" rx="2" ry="2" />
<text  x="901.42" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (9,916,935 samples, 0.02%)</title><rect x="831.9" y="1557" width="0.2" height="15.0" fill="rgb(233,60,1)" rx="2" ry="2" />
<text  x="834.87" y="1567.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ecache_dalloc (72,107,613 samples, 0.14%)</title><rect x="346.6" y="693" width="1.6" height="15.0" fill="rgb(206,175,51)" rx="2" ry="2" />
<text  x="349.59" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt;::~vector (37,126,024 samples, 0.07%)</title><rect x="1036.0" y="1781" width="0.9" height="15.0" fill="rgb(216,207,34)" rx="2" ry="2" />
<text  x="1039.01" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ComparisonExpressionMatcher, std::default_delete&lt;duckdb::ComparisonExpressionMatcher&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ComparisonExpressionMatcher&gt;, void&gt; (7,679,691 samples, 0.01%)</title><rect x="791.6" y="1813" width="0.2" height="15.0" fill="rgb(235,184,29)" rx="2" ry="2" />
<text  x="794.63" y="1823.5" ></text>
</g>
<g >
<title>duckdb::DistributivityRule::~DistributivityRule (7,613,631 samples, 0.01%)</title><rect x="831.2" y="1701" width="0.2" height="15.0" fill="rgb(233,87,22)" rx="2" ry="2" />
<text  x="834.22" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::Query (40,048,737,944 samples, 78.08%)</title><rect x="186.7" y="1989" width="921.4" height="15.0" fill="rgb(223,37,14)" rx="2" ry="2" />
<text  x="189.70" y="1999.5" >duckdb::ClientContext::Query</text>
</g>
<g >
<title>duckdb::Transformer::TransformConstant (78,066,799 samples, 0.15%)</title><rect x="528.0" y="1717" width="1.8" height="15.0" fill="rgb(238,16,16)" rx="2" ry="2" />
<text  x="531.02" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (10,359,514 samples, 0.02%)</title><rect x="1002.8" y="1637" width="0.2" height="15.0" fill="rgb(247,151,5)" rx="2" ry="2" />
<text  x="1005.76" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::max_size (6,851,511 samples, 0.01%)</title><rect x="894.5" y="1685" width="0.2" height="15.0" fill="rgb(249,44,19)" rx="2" ry="2" />
<text  x="897.50" y="1695.5" ></text>
</g>
<g >
<title>asan.module_ctor (23,207,918 samples, 0.05%)</title><rect x="1175.3" y="2037" width="0.6" height="15.0" fill="rgb(228,188,21)" rx="2" ry="2" />
<text  x="1178.34" y="2047.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (12,328,873 samples, 0.02%)</title><rect x="1045.1" y="1877" width="0.3" height="15.0" fill="rgb(215,8,50)" rx="2" ry="2" />
<text  x="1048.10" y="1887.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (4,705,739 samples, 0.01%)</title><rect x="594.3" y="1701" width="0.1" height="15.0" fill="rgb(232,157,31)" rx="2" ry="2" />
<text  x="597.30" y="1711.5" ></text>
</g>
<g >
<title>duckdb::PipelineTask::ExecuteTask (4,195,055,651 samples, 8.18%)</title><rect x="405.3" y="1877" width="96.5" height="15.0" fill="rgb(217,159,29)" rx="2" ry="2" />
<text  x="408.27" y="1887.5" >duckdb::Pip..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::HTTPState&gt;::construct&lt;duckdb::HTTPState&gt; (6,506,338 samples, 0.01%)</title><rect x="359.5" y="1781" width="0.1" height="15.0" fill="rgb(246,173,9)" rx="2" ry="2" />
<text  x="362.46" y="1791.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::Execute (235,033,761 samples, 0.46%)</title><rect x="101.7" y="1813" width="5.4" height="15.0" fill="rgb(233,146,0)" rx="2" ry="2" />
<text  x="104.74" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (4,917,632 samples, 0.01%)</title><rect x="388.1" y="1861" width="0.1" height="15.0" fill="rgb(254,19,8)" rx="2" ry="2" />
<text  x="391.09" y="1871.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_Vector_impl::~_Vector_impl (5,262,338 samples, 0.01%)</title><rect x="604.2" y="1717" width="0.1" height="15.0" fill="rgb(211,83,46)" rx="2" ry="2" />
<text  x="607.20" y="1727.5" ></text>
</g>
<g >
<title>__sanitizer::mem_is_zero (30,977,344 samples, 0.06%)</title><rect x="1174.4" y="2037" width="0.8" height="15.0" fill="rgb(208,76,40)" rx="2" ry="2" />
<text  x="1177.45" y="2047.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, duckdb::EntryValue&gt;::~pair (9,284,106 samples, 0.02%)</title><rect x="1117.6" y="805" width="0.2" height="15.0" fill="rgb(218,146,42)" rx="2" ry="2" />
<text  x="1120.55" y="815.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_dalloc_event (22,782,113 samples, 0.04%)</title><rect x="1123.9" y="1525" width="0.5" height="15.0" fill="rgb(219,83,36)" rx="2" ry="2" />
<text  x="1126.87" y="1535.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::get (10,124,469 samples, 0.02%)</title><rect x="555.4" y="1781" width="0.2" height="15.0" fill="rgb(233,156,47)" rx="2" ry="2" />
<text  x="558.37" y="1791.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_codepoint (12,469,335 samples, 0.02%)</title><rect x="602.0" y="1733" width="0.3" height="15.0" fill="rgb(250,101,45)" rx="2" ry="2" />
<text  x="605.02" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;::~unique_ptr (26,152,165 samples, 0.05%)</title><rect x="483.9" y="1637" width="0.6" height="15.0" fill="rgb(253,228,24)" rx="2" ry="2" />
<text  x="486.91" y="1647.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::BlockHandle&gt;::destroy&lt;duckdb::BlockHandle&gt; (340,722,421 samples, 0.66%)</title><rect x="342.2" y="1013" width="7.8" height="15.0" fill="rgb(248,98,33)" rx="2" ry="2" />
<text  x="345.16" y="1023.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::QueueProducerToken, std::default_delete&lt;duckdb::QueueProducerToken&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::QueueProducerToken&gt; &gt; (6,161,976 samples, 0.01%)</title><rect x="1090.7" y="1797" width="0.1" height="15.0" fill="rgb(222,10,46)" rx="2" ry="2" />
<text  x="1093.65" y="1807.5" ></text>
</g>
<g >
<title>duckdb::DatabaseManager::Get (8,770,734 samples, 0.02%)</title><rect x="320.6" y="1813" width="0.2" height="15.0" fill="rgb(231,183,48)" rx="2" ry="2" />
<text  x="323.64" y="1823.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*&gt; (6,940,816 samples, 0.01%)</title><rect x="830.0" y="1525" width="0.1" height="15.0" fill="rgb(213,124,12)" rx="2" ry="2" />
<text  x="832.95" y="1535.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::InterruptDoneSignalState&gt; (22,120,733 samples, 0.04%)</title><rect x="364.7" y="1877" width="0.5" height="15.0" fill="rgb(214,120,43)" rx="2" ry="2" />
<text  x="367.70" y="1887.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::LocalTableStorage, std::allocator&lt;duckdb::LocalTableStorage&gt;,  (23,487,570 samples, 0.05%)</title><rect x="102.1" y="1621" width="0.5" height="15.0" fill="rgb(236,94,37)" rx="2" ry="2" />
<text  x="105.09" y="1631.5" ></text>
</g>
<g >
<title>[unknown] (5,780,606 samples, 0.01%)</title><rect x="11.3" y="117" width="0.1" height="15.0" fill="rgb(218,163,10)" rx="2" ry="2" />
<text  x="14.25" y="127.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Task,  (22,722,331 samples, 0.04%)</title><rect x="1060.2" y="1797" width="0.5" height="15.0" fill="rgb(230,139,34)" rx="2" ry="2" />
<text  x="1063.21" y="1807.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::VectorCache (99,842,504 samples, 0.19%)</title><rect x="492.3" y="1781" width="2.3" height="15.0" fill="rgb(230,115,19)" rx="2" ry="2" />
<text  x="495.29" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (7,542,766 samples, 0.01%)</title><rect x="924.7" y="1813" width="0.2" height="15.0" fill="rgb(210,182,49)" rx="2" ry="2" />
<text  x="927.71" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr (7,572,685 samples, 0.01%)</title><rect x="817.9" y="1749" width="0.2" height="15.0" fill="rgb(224,62,28)" rx="2" ry="2" />
<text  x="820.89" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ifree (50,165,804 samples, 0.10%)</title><rect x="1123.2" y="1541" width="1.2" height="15.0" fill="rgb(250,171,7)" rx="2" ry="2" />
<text  x="1126.24" y="1551.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6,596,369 samples, 0.01%)</title><rect x="1023.3" y="1797" width="0.1" height="15.0" fill="rgb(228,225,7)" rx="2" ry="2" />
<text  x="1026.26" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (61,042,060 samples, 0.12%)</title><rect x="297.4" y="1557" width="1.4" height="15.0" fill="rgb(241,152,37)" rx="2" ry="2" />
<text  x="300.35" y="1567.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt; (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1285" width="0.3" height="15.0" fill="rgb(246,227,54)" rx="2" ry="2" />
<text  x="1120.47" y="1295.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::get (6,152,980 samples, 0.01%)</title><rect x="827.7" y="1749" width="0.1" height="15.0" fill="rgb(224,41,9)" rx="2" ry="2" />
<text  x="830.67" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1637" width="0.1" height="15.0" fill="rgb(251,212,37)" rx="2" ry="2" />
<text  x="14.25" y="1647.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;,  (6,472,199 samples, 0.01%)</title><rect x="37.2" y="2021" width="0.1" height="15.0" fill="rgb(230,203,9)" rx="2" ry="2" />
<text  x="40.17" y="2031.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::operator= (16,565,032 samples, 0.03%)</title><rect x="946.6" y="1701" width="0.4" height="15.0" fill="rgb(226,25,11)" rx="2" ry="2" />
<text  x="949.62" y="1711.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::ActiveQueryContext*, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt; (4,910,843 samples, 0.01%)</title><rect x="514.4" y="1845" width="0.1" height="15.0" fill="rgb(246,7,25)" rx="2" ry="2" />
<text  x="517.37" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (48,665,942 samples, 0.09%)</title><rect x="718.1" y="1781" width="1.1" height="15.0" fill="rgb(221,120,30)" rx="2" ry="2" />
<text  x="721.05" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::atomic&lt;bool&gt; [], std::default_delete&lt;std::atomic&lt;bool&gt; []&gt; &gt;::operator bool (4,514,798 samples, 0.01%)</title><rect x="432.7" y="1717" width="0.1" height="15.0" fill="rgb(236,185,46)" rx="2" ry="2" />
<text  x="435.72" y="1727.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::~DataChunk (7,660,380 samples, 0.01%)</title><rect x="106.8" y="1701" width="0.2" height="15.0" fill="rgb(235,53,10)" rx="2" ry="2" />
<text  x="109.84" y="1711.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::HTTPState&gt; &gt;::destroy&lt;duckdb::HTTPState&gt; (8,076,784 samples, 0.02%)</title><rect x="360.0" y="1797" width="0.1" height="15.0" fill="rgb(241,70,9)" rx="2" ry="2" />
<text  x="362.95" y="1807.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (20,906,515 samples, 0.04%)</title><rect x="168.7" y="2005" width="0.5" height="15.0" fill="rgb(209,54,3)" rx="2" ry="2" />
<text  x="171.69" y="2015.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (5,832,203 samples, 0.01%)</title><rect x="295.6" y="1653" width="0.1" height="15.0" fill="rgb(206,127,47)" rx="2" ry="2" />
<text  x="298.56" y="1663.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, true&gt;::~vector (20,636,374 samples, 0.04%)</title><rect x="561.9" y="1781" width="0.5" height="15.0" fill="rgb(226,158,8)" rx="2" ry="2" />
<text  x="564.89" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::BindExpression (37,083,739 samples, 0.07%)</title><rect x="933.8" y="1669" width="0.9" height="15.0" fill="rgb(234,82,26)" rx="2" ry="2" />
<text  x="936.84" y="1679.5" ></text>
</g>
<g >
<title>duckdb::PipelineInitializeEvent::Schedule (151,397,537 samples, 0.30%)</title><rect x="1057.9" y="1829" width="3.5" height="15.0" fill="rgb(245,102,19)" rx="2" ry="2" />
<text  x="1060.92" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt;, true&gt;::unique_ptr&lt;duckdb::ArenaAllocatorData, std::default_delete&lt;std::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt; &gt; &gt;, void&gt; (8,400,007 samples, 0.02%)</title><rect x="998.1" y="1605" width="0.2" height="15.0" fill="rgb(237,66,28)" rx="2" ry="2" />
<text  x="1001.13" y="1615.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (9,931,588 samples, 0.02%)</title><rect x="724.5" y="1637" width="0.2" height="15.0" fill="rgb(234,74,30)" rx="2" ry="2" />
<text  x="727.50" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::CatalogLookup, std::allocator&lt;duckdb::CatalogLookup&gt; &gt;::emplace_back&lt;duckdb::Catalog&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (8,858,930 samples, 0.02%)</title><rect x="1010.0" y="1781" width="0.2" height="15.0" fill="rgb(251,61,17)" rx="2" ry="2" />
<text  x="1013.02" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ConstantFoldingExpressionMatcher::ConstantFoldingExpressionMatcher (13,632,720 samples, 0.03%)</title><rect x="794.5" y="1829" width="0.3" height="15.0" fill="rgb(223,117,21)" rx="2" ry="2" />
<text  x="797.46" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BoundColumnRefExpression::Equals (8,139,555 samples, 0.02%)</title><rect x="589.9" y="1845" width="0.2" height="15.0" fill="rgb(214,63,28)" rx="2" ry="2" />
<text  x="592.87" y="1855.5" ></text>
</g>
<g >
<title>dequeue_entity (11,057,973 samples, 0.02%)</title><rect x="74.9" y="1845" width="0.3" height="15.0" fill="rgb(234,100,1)" rx="2" ry="2" />
<text  x="77.90" y="1855.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (8,201,588 samples, 0.02%)</title><rect x="1181.7" y="2037" width="0.2" height="15.0" fill="rgb(240,109,4)" rx="2" ry="2" />
<text  x="1184.66" y="2047.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, duckdb::Rule*, std::default_delete&lt;duckdb::Rule&gt; &gt;::_Tuple_impl&lt;duckdb::Rule*&amp;, std::default_delete&lt;duckdb::EnumComparisonRule&gt;, void&gt; (4,636,851 samples, 0.01%)</title><rect x="822.9" y="1813" width="0.1" height="15.0" fill="rgb(226,146,42)" rx="2" ry="2" />
<text  x="825.90" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt; &gt;::~unique_ptr (13,559,473 samples, 0.03%)</title><rect x="1117.5" y="981" width="0.3" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1120.49" y="991.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformStatement (597,651,967 samples, 1.17%)</title><rect x="525.6" y="1877" width="13.7" height="15.0" fill="rgb(232,62,43)" rx="2" ry="2" />
<text  x="528.55" y="1887.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ParsedExpression&gt;::operator (7,183,966 samples, 0.01%)</title><rect x="935.1" y="1653" width="0.2" height="15.0" fill="rgb(215,204,25)" rx="2" ry="2" />
<text  x="938.12" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt;::max_size (6,198,818 samples, 0.01%)</title><rect x="827.9" y="1813" width="0.2" height="15.0" fill="rgb(251,131,28)" rx="2" ry="2" />
<text  x="830.92" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::operator* (6,058,600 samples, 0.01%)</title><rect x="770.2" y="1813" width="0.1" height="15.0" fill="rgb(222,86,11)" rx="2" ry="2" />
<text  x="773.19" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::vector (6,502,218 samples, 0.01%)</title><rect x="575.4" y="1781" width="0.2" height="15.0" fill="rgb(214,171,42)" rx="2" ry="2" />
<text  x="578.41" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::unique_ptr (5,131,177 samples, 0.01%)</title><rect x="597.3" y="1749" width="0.1" height="15.0" fill="rgb(238,226,24)" rx="2" ry="2" />
<text  x="600.28" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::LockContext (6,994,749 samples, 0.01%)</title><rect x="516.2" y="1973" width="0.2" height="15.0" fill="rgb(234,59,53)" rx="2" ry="2" />
<text  x="519.25" y="1983.5" ></text>
</g>
<g >
<title>duckdb::Binder::~Binder (100,190,171 samples, 0.20%)</title><rect x="1016.3" y="1717" width="2.3" height="15.0" fill="rgb(227,10,5)" rx="2" ry="2" />
<text  x="1019.28" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*&gt; (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1541" width="0.3" height="15.0" fill="rgb(244,93,12)" rx="2" ry="2" />
<text  x="835.82" y="1551.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*&gt; (35,077,907 samples, 0.07%)</title><rect x="1036.1" y="1749" width="0.8" height="15.0" fill="rgb(250,207,10)" rx="2" ry="2" />
<text  x="1039.06" y="1759.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt; (4,659,199 samples, 0.01%)</title><rect x="552.1" y="1749" width="0.1" height="15.0" fill="rgb(225,72,48)" rx="2" ry="2" />
<text  x="555.07" y="1759.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (9,115,055 samples, 0.02%)</title><rect x="1076.1" y="1717" width="0.2" height="15.0" fill="rgb(219,46,6)" rx="2" ry="2" />
<text  x="1079.10" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (15,240,205 samples, 0.03%)</title><rect x="727.5" y="1653" width="0.3" height="15.0" fill="rgb(247,99,18)" rx="2" ry="2" />
<text  x="730.47" y="1663.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (462,098,995 samples, 0.90%)</title><rect x="1131.8" y="2037" width="10.6" height="15.0" fill="rgb(252,153,22)" rx="2" ry="2" />
<text  x="1134.79" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&amp;&gt; (28,789,864 samples, 0.06%)</title><rect x="488.8" y="1733" width="0.6" height="15.0" fill="rgb(222,192,29)" rx="2" ry="2" />
<text  x="491.75" y="1743.5" ></text>
</g>
<g >
<title>duckdb::BufferedFileWriter::GetFileSize (5,754,279 samples, 0.01%)</title><rect x="253.0" y="1749" width="0.1" height="15.0" fill="rgb(220,227,12)" rx="2" ry="2" />
<text  x="255.98" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (6,778,156 samples, 0.01%)</title><rect x="623.2" y="1733" width="0.2" height="15.0" fill="rgb(219,188,14)" rx="2" ry="2" />
<text  x="626.21" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::pop_back (6,215,417 samples, 0.01%)</title><rect x="774.9" y="1861" width="0.2" height="15.0" fill="rgb(251,153,12)" rx="2" ry="2" />
<text  x="777.93" y="1871.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionState, duckdb::BoundConstantExpression const&amp;, duckdb::ExpressionExecutorState&amp;&gt; (5,671,118 samples, 0.01%)</title><rect x="490.0" y="1701" width="0.1" height="15.0" fill="rgb(231,52,40)" rx="2" ry="2" />
<text  x="492.97" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_salloc (4,352,124 samples, 0.01%)</title><rect x="239.8" y="421" width="0.1" height="15.0" fill="rgb(211,88,1)" rx="2" ry="2" />
<text  x="242.84" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt; &gt; (12,340,593 samples, 0.02%)</title><rect x="1088.7" y="1781" width="0.3" height="15.0" fill="rgb(209,9,3)" rx="2" ry="2" />
<text  x="1091.68" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (4,428,535 samples, 0.01%)</title><rect x="91.0" y="1989" width="0.1" height="15.0" fill="rgb(209,161,24)" rx="2" ry="2" />
<text  x="93.95" y="1999.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (5,843,030 samples, 0.01%)</title><rect x="498.7" y="1397" width="0.1" height="15.0" fill="rgb(205,36,7)" rx="2" ry="2" />
<text  x="501.68" y="1407.5" ></text>
</g>
<g >
<title>duckdb::Optimizer::RunOptimizer (5,692,743,725 samples, 11.10%)</title><rect x="644.3" y="1877" width="130.9" height="15.0" fill="rgb(235,128,49)" rx="2" ry="2" />
<text  x="647.26" y="1887.5" >duckdb::Optimize..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, unsigned long, true&gt;::_S_equals (9,731,739 samples, 0.02%)</title><rect x="1002.8" y="1621" width="0.2" height="15.0" fill="rgb(221,174,32)" rx="2" ry="2" />
<text  x="1005.76" y="1631.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (348,066,787 samples, 0.68%)</title><rect x="342.0" y="1061" width="8.0" height="15.0" fill="rgb(225,176,7)" rx="2" ry="2" />
<text  x="345.02" y="1071.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (620,798,029 samples, 1.21%)</title><rect x="337.3" y="1765" width="14.3" height="15.0" fill="rgb(211,34,8)" rx="2" ry="2" />
<text  x="340.33" y="1775.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::SpecificExpressionTypeMatcher&gt; &gt; (6,121,290 samples, 0.01%)</title><rect x="799.5" y="1813" width="0.1" height="15.0" fill="rgb(242,97,15)" rx="2" ry="2" />
<text  x="802.47" y="1823.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::RenderTreeNode*, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::tuple&lt;duckdb::RenderTreeNode*, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; (4,561,343 samples, 0.01%)</title><rect x="623.2" y="1685" width="0.1" height="15.0" fill="rgb(250,116,18)" rx="2" ry="2" />
<text  x="626.24" y="1695.5" ></text>
</g>
<g >
<title>std::swap&lt;duckdb::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics&gt;, false&gt; &gt; (7,097,016 samples, 0.01%)</title><rect x="443.4" y="1605" width="0.2" height="15.0" fill="rgb(252,158,53)" rx="2" ry="2" />
<text  x="446.39" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBottomLayer (92,698,648 samples, 0.18%)</title><rect x="554.7" y="1813" width="2.1" height="15.0" fill="rgb(219,12,51)" rx="2" ry="2" />
<text  x="557.68" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt;::push_back (10,675,153 samples, 0.02%)</title><rect x="1012.1" y="1813" width="0.2" height="15.0" fill="rgb(237,170,20)" rx="2" ry="2" />
<text  x="1015.09" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (182,591,681 samples, 0.36%)</title><rect x="665.0" y="1765" width="4.2" height="15.0" fill="rgb(243,221,29)" rx="2" ry="2" />
<text  x="668.04" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::SplitStringBuffer (17,277,071 samples, 0.03%)</title><rect x="573.1" y="1781" width="0.4" height="15.0" fill="rgb(213,88,34)" rx="2" ry="2" />
<text  x="576.09" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::resize (81,478,313 samples, 0.16%)</title><rect x="577.0" y="1797" width="1.9" height="15.0" fill="rgb(246,153,44)" rx="2" ry="2" />
<text  x="579.98" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt; &gt;::unique_ptr (6,590,586 samples, 0.01%)</title><rect x="917.7" y="1685" width="0.2" height="15.0" fill="rgb(213,67,46)" rx="2" ry="2" />
<text  x="920.75" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Binder,  (117,415,303 samples, 0.23%)</title><rect x="1016.0" y="1813" width="2.7" height="15.0" fill="rgb(207,90,6)" rx="2" ry="2" />
<text  x="1018.97" y="1823.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::vector (8,627,094 samples, 0.02%)</title><rect x="577.7" y="1701" width="0.2" height="15.0" fill="rgb(252,99,41)" rx="2" ry="2" />
<text  x="580.74" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ecache_alloc (87,419,105 samples, 0.17%)</title><rect x="875.7" y="1269" width="2.0" height="15.0" fill="rgb(225,83,4)" rx="2" ry="2" />
<text  x="878.73" y="1279.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (49,932,279 samples, 0.10%)</title><rect x="380.0" y="1717" width="1.1" height="15.0" fill="rgb(232,190,43)" rx="2" ry="2" />
<text  x="383.00" y="1727.5" ></text>
</g>
<g >
<title>futex_wait_queue_me (15,877,356 samples, 0.03%)</title><rect x="505.7" y="1733" width="0.4" height="15.0" fill="rgb(221,85,41)" rx="2" ry="2" />
<text  x="508.70" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::~vector (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1573" width="0.3" height="15.0" fill="rgb(232,166,39)" rx="2" ry="2" />
<text  x="835.82" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt;, std::allocator&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; &gt;::push_back (20,080,133 samples, 0.04%)</title><rect x="992.2" y="1637" width="0.4" height="15.0" fill="rgb(254,47,36)" rx="2" ry="2" />
<text  x="995.19" y="1647.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::MaterializedQueryResult&gt;::operator (165,702,024 samples, 0.32%)</title><rect x="1121.3" y="1973" width="3.8" height="15.0" fill="rgb(241,218,45)" rx="2" ry="2" />
<text  x="1124.28" y="1983.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt;::unique_ptr&lt;duckdb::ValidityScanState, std::default_delete&lt;duckdb::ValidityScanState&gt;, void&gt; (5,385,258 samples, 0.01%)</title><rect x="214.5" y="1573" width="0.1" height="15.0" fill="rgb(250,117,22)" rx="2" ry="2" />
<text  x="217.47" y="1583.5" ></text>
</g>
<g >
<title>duckdb::ExpressionRewriter::VisitOperator (341,118,250 samples, 0.67%)</title><rect x="735.9" y="1813" width="7.8" height="15.0" fill="rgb(237,107,15)" rx="2" ry="2" />
<text  x="738.90" y="1823.5" ></text>
</g>
<g >
<title>duckdb::DuckDBAssertInternal (23,540,671 samples, 0.05%)</title><rect x="282.8" y="1557" width="0.5" height="15.0" fill="rgb(216,143,11)" rx="2" ry="2" />
<text  x="285.79" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::insert (18,455,334 samples, 0.04%)</title><rect x="801.7" y="1797" width="0.4" height="15.0" fill="rgb(228,14,5)" rx="2" ry="2" />
<text  x="804.67" y="1807.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::GetRootSegment (5,296,159 samples, 0.01%)</title><rect x="226.0" y="1701" width="0.1" height="15.0" fill="rgb(223,74,52)" rx="2" ry="2" />
<text  x="229.02" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (22,610,892 samples, 0.04%)</title><rect x="806.2" y="1829" width="0.5" height="15.0" fill="rgb(220,79,48)" rx="2" ry="2" />
<text  x="809.17" y="1839.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;,  (11,825,966 samples, 0.02%)</title><rect x="211.9" y="1605" width="0.3" height="15.0" fill="rgb(230,176,13)" rx="2" ry="2" />
<text  x="214.92" y="1615.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalInsert, std::default_delete&lt;duckdb::LogicalInsert&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::LogicalInsert&gt;, void&gt; (7,662,926 samples, 0.01%)</title><rect x="1013.4" y="1813" width="0.2" height="15.0" fill="rgb(231,155,9)" rx="2" ry="2" />
<text  x="1016.38" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (4,559,828 samples, 0.01%)</title><rect x="325.8" y="1301" width="0.1" height="15.0" fill="rgb(217,121,45)" rx="2" ry="2" />
<text  x="328.76" y="1311.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (83,910,897 samples, 0.16%)</title><rect x="333.5" y="1493" width="1.9" height="15.0" fill="rgb(240,56,42)" rx="2" ry="2" />
<text  x="336.45" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (5,044,584 samples, 0.01%)</title><rect x="378.4" y="1861" width="0.1" height="15.0" fill="rgb(213,32,48)" rx="2" ry="2" />
<text  x="381.43" y="1871.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::MetaPipeline&gt; &gt;::construct&lt;duckdb::MetaPipeline, duckdb::Executor&amp;, duckdb::PipelineBuildState&amp;, decltype (101,849,600 samples, 0.20%)</title><rect x="1093.3" y="1765" width="2.4" height="15.0" fill="rgb(248,58,4)" rx="2" ry="2" />
<text  x="1096.32" y="1775.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (40,974,832 samples, 0.08%)</title><rect x="43.1" y="1989" width="1.0" height="15.0" fill="rgb(232,228,20)" rx="2" ry="2" />
<text  x="46.14" y="1999.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::_M_ptr (4,611,331 samples, 0.01%)</title><rect x="827.7" y="1733" width="0.1" height="15.0" fill="rgb(221,90,11)" rx="2" ry="2" />
<text  x="830.67" y="1743.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt;*&gt; (29,295,516 samples, 0.06%)</title><rect x="236.2" y="1461" width="0.7" height="15.0" fill="rgb(247,185,26)" rx="2" ry="2" />
<text  x="239.24" y="1471.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_gc_dalloc_event_handler (6,832,039 samples, 0.01%)</title><rect x="349.1" y="773" width="0.2" height="15.0" fill="rgb(244,157,4)" rx="2" ry="2" />
<text  x="352.12" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (36,327,342 samples, 0.07%)</title><rect x="817.7" y="1829" width="0.8" height="15.0" fill="rgb(222,201,40)" rx="2" ry="2" />
<text  x="820.68" y="1839.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt;, duckdb::LogicalType*, duckdb::LogicalType&gt; (8,678,068 samples, 0.02%)</title><rect x="99.2" y="1733" width="0.2" height="15.0" fill="rgb(221,30,14)" rx="2" ry="2" />
<text  x="102.20" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::~vector (9,066,496 samples, 0.02%)</title><rect x="980.7" y="1701" width="0.2" height="15.0" fill="rgb(242,207,17)" rx="2" ry="2" />
<text  x="983.68" y="1711.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt;, duckdb::LogicalType*&gt; (6,612,930 samples, 0.01%)</title><rect x="99.3" y="1717" width="0.1" height="15.0" fill="rgb(235,194,1)" rx="2" ry="2" />
<text  x="102.25" y="1727.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::VectorBuffer, unsigned long&gt; (39,896,161 samples, 0.08%)</title><rect x="901.3" y="1637" width="0.9" height="15.0" fill="rgb(239,96,0)" rx="2" ry="2" />
<text  x="904.25" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (4,579,134 samples, 0.01%)</title><rect x="829.8" y="1493" width="0.1" height="15.0" fill="rgb(249,72,21)" rx="2" ry="2" />
<text  x="832.76" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::~vector (5,917,989 samples, 0.01%)</title><rect x="1075.5" y="1733" width="0.1" height="15.0" fill="rgb(232,51,11)" rx="2" ry="2" />
<text  x="1078.49" y="1743.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::FileBuffer (102,282,273 samples, 0.20%)</title><rect x="436.7" y="1621" width="2.4" height="15.0" fill="rgb(250,201,44)" rx="2" ry="2" />
<text  x="439.75" y="1631.5" ></text>
</g>
<g >
<title>dl_main (268,948,599 samples, 0.52%)</title><rect x="68.3" y="2005" width="6.2" height="15.0" fill="rgb(226,96,44)" rx="2" ry="2" />
<text  x="71.31" y="2015.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::~unique_ptr (33,788,092 samples, 0.07%)</title><rect x="1036.1" y="1701" width="0.7" height="15.0" fill="rgb(210,210,1)" rx="2" ry="2" />
<text  x="1039.07" y="1711.5" ></text>
</g>
<g >
<title>page_remove_rmap (9,270,471 samples, 0.02%)</title><rect x="1178.3" y="1861" width="0.2" height="15.0" fill="rgb(222,123,31)" rx="2" ry="2" />
<text  x="1181.33" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, std::shared_ptr&lt;duckdb::BoundParameterData&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, std::shared_ptr&lt;duckdb::BoundParameterData&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::operator= (5,968,721 samples, 0.01%)</title><rect x="1041.8" y="1877" width="0.1" height="15.0" fill="rgb(217,219,17)" rx="2" ry="2" />
<text  x="1044.77" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (13,222,607 samples, 0.03%)</title><rect x="908.8" y="1717" width="0.3" height="15.0" fill="rgb(210,141,2)" rx="2" ry="2" />
<text  x="911.76" y="1727.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::ColumnDataAllocator&gt;::construct&lt;duckdb::ColumnDataAllocator, duckdb::Allocator&amp;&gt; (6,324,777 samples, 0.01%)</title><rect x="386.8" y="1781" width="0.1" height="15.0" fill="rgb(232,158,15)" rx="2" ry="2" />
<text  x="389.79" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt; &gt;::~unique_ptr (26,537,337 samples, 0.05%)</title><rect x="499.9" y="1509" width="0.6" height="15.0" fill="rgb(248,142,50)" rx="2" ry="2" />
<text  x="502.86" y="1519.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (17,870,062 samples, 0.03%)</title><rect x="834.5" y="1765" width="0.4" height="15.0" fill="rgb(247,148,19)" rx="2" ry="2" />
<text  x="837.52" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VersionNode,  (4,886,258 samples, 0.01%)</title><rect x="416.1" y="1669" width="0.1" height="15.0" fill="rgb(232,25,23)" rx="2" ry="2" />
<text  x="419.11" y="1679.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;::destroy&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt; (5,402,715 samples, 0.01%)</title><rect x="374.8" y="1669" width="0.1" height="15.0" fill="rgb(216,210,5)" rx="2" ry="2" />
<text  x="377.78" y="1679.5" ></text>
</g>
<g >
<title>duckdb::EntryIndex::~EntryIndex (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1541" width="1.9" height="15.0" fill="rgb(242,45,52)" rx="2" ry="2" />
<text  x="1120.81" y="1551.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::operator= (6,058,239 samples, 0.01%)</title><rect x="751.3" y="1781" width="0.2" height="15.0" fill="rgb(221,172,3)" rx="2" ry="2" />
<text  x="754.32" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::InitializeChunkState (4,649,959 samples, 0.01%)</title><rect x="106.0" y="1717" width="0.1" height="15.0" fill="rgb(217,219,31)" rx="2" ry="2" />
<text  x="109.04" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; (11,066,648 samples, 0.02%)</title><rect x="490.6" y="1733" width="0.3" height="15.0" fill="rgb(249,82,8)" rx="2" ry="2" />
<text  x="493.64" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (6,859,303 samples, 0.01%)</title><rect x="705.2" y="1813" width="0.1" height="15.0" fill="rgb(231,60,31)" rx="2" ry="2" />
<text  x="708.15" y="1823.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (14,329,563 samples, 0.03%)</title><rect x="916.0" y="1381" width="0.3" height="15.0" fill="rgb(222,132,1)" rx="2" ry="2" />
<text  x="918.96" y="1391.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::~vector (5,604,867 samples, 0.01%)</title><rect x="906.8" y="1493" width="0.2" height="15.0" fill="rgb(219,49,25)" rx="2" ry="2" />
<text  x="909.83" y="1503.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateExpression (31,139,147 samples, 0.06%)</title><rect x="766.1" y="1717" width="0.7" height="15.0" fill="rgb(218,48,37)" rx="2" ry="2" />
<text  x="769.08" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::FilterPushdown::Filter, std::default_delete&lt;duckdb::FilterPushdown::Filter&gt;, true&gt;, true&gt;::~vector (5,485,122 samples, 0.01%)</title><rect x="748.1" y="1701" width="0.1" height="15.0" fill="rgb(237,118,45)" rx="2" ry="2" />
<text  x="751.12" y="1711.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::AllocatedData*, duckdb::AllocatedData&gt; (70,487,734 samples, 0.14%)</title><rect x="1123.1" y="1701" width="1.6" height="15.0" fill="rgb(225,40,54)" rx="2" ry="2" />
<text  x="1126.11" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (6,641,801 samples, 0.01%)</title><rect x="246.2" y="1733" width="0.2" height="15.0" fill="rgb(229,29,14)" rx="2" ry="2" />
<text  x="249.20" y="1743.5" ></text>
</g>
<g >
<title>duckdb::DataTable::GetTypes (18,775,637 samples, 0.04%)</title><rect x="423.3" y="1605" width="0.4" height="15.0" fill="rgb(232,9,24)" rx="2" ry="2" />
<text  x="426.30" y="1615.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc (11,290,008 samples, 0.02%)</title><rect x="221.9" y="1349" width="0.2" height="15.0" fill="rgb(214,4,52)" rx="2" ry="2" />
<text  x="224.87" y="1359.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ClientContext&gt;::shared_ptr&lt;duckdb::ClientContext, void&gt; (6,177,346 samples, 0.01%)</title><rect x="996.5" y="1605" width="0.1" height="15.0" fill="rgb(227,38,30)" rx="2" ry="2" />
<text  x="999.48" y="1615.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::ColumnDataAllocator, std::allocator&lt;duckdb::ColumnDataAllocator&gt;, duckdb::ClientContext&amp;, duckdb::ColumnDataAllocatorType&amp;&gt; (22,274,872 samples, 0.04%)</title><rect x="911.6" y="1733" width="0.5" height="15.0" fill="rgb(222,166,43)" rx="2" ry="2" />
<text  x="914.55" y="1743.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;, unsigned long&amp;&gt; (55,600,347 samples, 0.11%)</title><rect x="899.6" y="1589" width="1.3" height="15.0" fill="rgb(211,174,50)" rx="2" ry="2" />
<text  x="902.58" y="1599.5" ></text>
</g>
<g >
<title>alloc_pages_vma (22,690,782 samples, 0.04%)</title><rect x="73.1" y="1861" width="0.6" height="15.0" fill="rgb(207,41,49)" rx="2" ry="2" />
<text  x="76.14" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (15,936,810 samples, 0.03%)</title><rect x="831.7" y="1653" width="0.4" height="15.0" fill="rgb(222,8,35)" rx="2" ry="2" />
<text  x="834.74" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::release (10,181,910 samples, 0.02%)</title><rect x="795.3" y="1813" width="0.2" height="15.0" fill="rgb(225,49,22)" rx="2" ry="2" />
<text  x="798.29" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt; &gt;::~unique_ptr (80,459,589 samples, 0.16%)</title><rect x="325.1" y="1573" width="1.9" height="15.0" fill="rgb(225,228,50)" rx="2" ry="2" />
<text  x="328.11" y="1583.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt;, true&gt;::~unique_ptr (8,460,147 samples, 0.02%)</title><rect x="832.6" y="1589" width="0.2" height="15.0" fill="rgb(251,95,25)" rx="2" ry="2" />
<text  x="835.56" y="1599.5" ></text>
</g>
<g >
<title>wake_up_q (18,590,852 samples, 0.04%)</title><rect x="1058.7" y="1653" width="0.4" height="15.0" fill="rgb(247,42,28)" rx="2" ry="2" />
<text  x="1061.68" y="1663.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (6,870,871 samples, 0.01%)</title><rect x="44.3" y="1973" width="0.2" height="15.0" fill="rgb(241,229,23)" rx="2" ry="2" />
<text  x="47.34" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (7,392,488 samples, 0.01%)</title><rect x="959.9" y="1573" width="0.2" height="15.0" fill="rgb(214,149,9)" rx="2" ry="2" />
<text  x="962.93" y="1583.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::Rule*, std::default_delete&lt;duckdb::Rule&gt; &gt;::tuple&lt;duckdb::Rule*&amp;, std::default_delete&lt;duckdb::EnumComparisonRule&gt;, true&gt; (7,693,106 samples, 0.01%)</title><rect x="822.9" y="1829" width="0.1" height="15.0" fill="rgb(252,176,14)" rx="2" ry="2" />
<text  x="825.86" y="1839.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateStatistics (77,870,460 samples, 0.15%)</title><rect x="766.0" y="1733" width="1.8" height="15.0" fill="rgb(247,170,50)" rx="2" ry="2" />
<text  x="768.96" y="1743.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::HTTPState&gt; (13,219,191 samples, 0.03%)</title><rect x="516.5" y="1925" width="0.3" height="15.0" fill="rgb(250,110,9)" rx="2" ry="2" />
<text  x="519.49" y="1935.5" ></text>
</g>
<g >
<title>duckdb::DatabaseInstance::~DatabaseInstance (100,574,591 samples, 0.20%)</title><rect x="1117.4" y="1877" width="2.3" height="15.0" fill="rgb(218,94,8)" rx="2" ry="2" />
<text  x="1120.43" y="1887.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_dalloc_event (33,139,711 samples, 0.06%)</title><rect x="482.4" y="1381" width="0.8" height="15.0" fill="rgb(238,137,34)" rx="2" ry="2" />
<text  x="485.42" y="1391.5" ></text>
</g>
<g >
<title>duckdb::JoinRelationSetManager::~JoinRelationSetManager (5,973,836 samples, 0.01%)</title><rect x="756.2" y="1765" width="0.1" height="15.0" fill="rgb(206,9,13)" rx="2" ry="2" />
<text  x="759.18" y="1775.5" ></text>
</g>
<g >
<title>jbd2_log_wait_commit (9,871,560 samples, 0.02%)</title><rect x="252.3" y="1621" width="0.2" height="15.0" fill="rgb(241,225,31)" rx="2" ry="2" />
<text  x="255.26" y="1631.5" ></text>
</g>
<g >
<title>handle_mm_fault (233,978,275 samples, 0.46%)</title><rect x="162.5" y="1957" width="5.4" height="15.0" fill="rgb(210,208,44)" rx="2" ry="2" />
<text  x="165.55" y="1967.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::Rule&gt;::operator (170,733,807 samples, 0.33%)</title><rect x="829.4" y="1733" width="3.9" height="15.0" fill="rgb(219,67,8)" rx="2" ry="2" />
<text  x="832.41" y="1743.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionRootInfo, duckdb::ExpressionExecutorState&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (50,822,048 samples, 0.10%)</title><rect x="477.5" y="1765" width="1.1" height="15.0" fill="rgb(246,98,1)" rx="2" ry="2" />
<text  x="480.48" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1429" width="0.1" height="15.0" fill="rgb(235,208,13)" rx="2" ry="2" />
<text  x="14.25" y="1439.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::ExpressionExecutor (6,056,025 samples, 0.01%)</title><rect x="107.8" y="1749" width="0.2" height="15.0" fill="rgb(225,83,33)" rx="2" ry="2" />
<text  x="110.84" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt;::reset (5,220,473 samples, 0.01%)</title><rect x="225.7" y="1669" width="0.1" height="15.0" fill="rgb(234,119,27)" rx="2" ry="2" />
<text  x="228.69" y="1679.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (6,505,865 samples, 0.01%)</title><rect x="1140.3" y="1877" width="0.2" height="15.0" fill="rgb(222,98,16)" rx="2" ry="2" />
<text  x="1143.32" y="1887.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt; &gt; (5,567,792 samples, 0.01%)</title><rect x="815.4" y="1813" width="0.1" height="15.0" fill="rgb(249,212,41)" rx="2" ry="2" />
<text  x="818.37" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;*, std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, void, bool&gt; (5,090,743 samples, 0.01%)</title><rect x="553.2" y="1765" width="0.1" height="15.0" fill="rgb(250,135,22)" rx="2" ry="2" />
<text  x="556.17" y="1775.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionExecutorInfo, duckdb::ExpressionExecutor&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, int&amp;&gt; (99,198,802 samples, 0.19%)</title><rect x="477.4" y="1797" width="2.3" height="15.0" fill="rgb(235,219,44)" rx="2" ry="2" />
<text  x="480.41" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::vector (4,449,643 samples, 0.01%)</title><rect x="611.9" y="1765" width="0.1" height="15.0" fill="rgb(252,180,44)" rx="2" ry="2" />
<text  x="614.89" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_ctx_get (7,724,886 samples, 0.02%)</title><rect x="392.4" y="1445" width="0.1" height="15.0" fill="rgb(247,209,12)" rx="2" ry="2" />
<text  x="395.37" y="1455.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ChunkMetaData, true&gt;::vector (5,029,954 samples, 0.01%)</title><rect x="868.0" y="1717" width="0.1" height="15.0" fill="rgb(218,71,54)" rx="2" ry="2" />
<text  x="871.02" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::EmptyNeedleRemovalRule, std::default_delete&lt;duckdb::EmptyNeedleRemovalRule&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::EmptyNeedleRemovalRule&gt;, void&gt; (5,808,878 samples, 0.01%)</title><rect x="802.7" y="1845" width="0.1" height="15.0" fill="rgb(212,221,35)" rx="2" ry="2" />
<text  x="805.69" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Deserializer::Read&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (14,332,332 samples, 0.03%)</title><rect x="585.7" y="1813" width="0.3" height="15.0" fill="rgb(242,128,17)" rx="2" ry="2" />
<text  x="588.66" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt;::~unique_ptr (18,951,943 samples, 0.04%)</title><rect x="288.0" y="1477" width="0.4" height="15.0" fill="rgb(233,10,54)" rx="2" ry="2" />
<text  x="290.98" y="1487.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::size (10,270,551 samples, 0.02%)</title><rect x="609.3" y="1717" width="0.2" height="15.0" fill="rgb(241,28,2)" rx="2" ry="2" />
<text  x="612.31" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::StorageCommitState, std::default_delete&lt;duckdb::StorageCommitState&gt; &gt;::~unique_ptr (5,300,629 samples, 0.01%)</title><rect x="318.8" y="1813" width="0.1" height="15.0" fill="rgb(221,224,8)" rx="2" ry="2" />
<text  x="321.81" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt; &gt; (5,165,636 samples, 0.01%)</title><rect x="629.8" y="1621" width="0.1" height="15.0" fill="rgb(216,202,24)" rx="2" ry="2" />
<text  x="632.76" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt; &gt; (27,346,373 samples, 0.05%)</title><rect x="531.8" y="1733" width="0.6" height="15.0" fill="rgb(250,37,17)" rx="2" ry="2" />
<text  x="534.81" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_range_initialize&lt;unsigned long const*&gt; (79,957,389 samples, 0.16%)</title><rect x="651.5" y="1717" width="1.8" height="15.0" fill="rgb(210,51,8)" rx="2" ry="2" />
<text  x="654.50" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ArenaChunk::~ArenaChunk (75,797,689 samples, 0.15%)</title><rect x="325.2" y="1541" width="1.7" height="15.0" fill="rgb(250,51,47)" rx="2" ry="2" />
<text  x="328.19" y="1551.5" ></text>
</g>
<g >
<title>std::operator&amp; (225,646,132 samples, 0.44%)</title><rect x="138.0" y="1829" width="5.2" height="15.0" fill="rgb(243,213,8)" rx="2" ry="2" />
<text  x="141.00" y="1839.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::Append (5,584,676 samples, 0.01%)</title><rect x="105.4" y="1685" width="0.1" height="15.0" fill="rgb(249,77,24)" rx="2" ry="2" />
<text  x="108.39" y="1695.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::InitializeAppend (842,434,206 samples, 1.64%)</title><rect x="432.9" y="1733" width="19.4" height="15.0" fill="rgb(247,5,43)" rx="2" ry="2" />
<text  x="435.87" y="1743.5" ></text>
</g>
<g >
<title>__do_munmap (90,090,452 samples, 0.18%)</title><rect x="1171.1" y="1909" width="2.0" height="15.0" fill="rgb(226,30,40)" rx="2" ry="2" />
<text  x="1174.05" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::begin (6,043,077 samples, 0.01%)</title><rect x="671.2" y="1781" width="0.2" height="15.0" fill="rgb(236,70,26)" rx="2" ry="2" />
<text  x="674.23" y="1791.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::BaseStatistics (4,870,636 samples, 0.01%)</title><rect x="454.1" y="1429" width="0.2" height="15.0" fill="rgb(221,228,5)" rx="2" ry="2" />
<text  x="457.15" y="1439.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::~vector (6,817,589 samples, 0.01%)</title><rect x="223.0" y="1701" width="0.2" height="15.0" fill="rgb(233,87,13)" rx="2" ry="2" />
<text  x="226.00" y="1711.5" ></text>
</g>
<g >
<title>duckdb::FieldReader::ReadRequired&lt;duckdb::ExtraTypeInfoType&gt; (7,416,420 samples, 0.01%)</title><rect x="586.4" y="1781" width="0.2" height="15.0" fill="rgb(237,75,26)" rx="2" ry="2" />
<text  x="589.43" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_free (55,802,777 samples, 0.11%)</title><rect x="896.2" y="1461" width="1.3" height="15.0" fill="rgb(249,181,8)" rx="2" ry="2" />
<text  x="899.24" y="1471.5" ></text>
</g>
<g >
<title>duckdb::JoinOrderOptimizer::JoinOrderOptimizer (10,051,640 samples, 0.02%)</title><rect x="753.5" y="1781" width="0.2" height="15.0" fill="rgb(241,85,53)" rx="2" ry="2" />
<text  x="756.47" y="1791.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::_M_deleter (5,428,833 samples, 0.01%)</title><rect x="771.2" y="1765" width="0.1" height="15.0" fill="rgb(229,82,16)" rx="2" ry="2" />
<text  x="774.17" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::operator= (4,543,127 samples, 0.01%)</title><rect x="727.0" y="1589" width="0.1" height="15.0" fill="rgb(208,150,7)" rx="2" ry="2" />
<text  x="730.01" y="1599.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RegexOptimizationRule, duckdb::ExpressionRewriter&amp;&gt; (72,247,106 samples, 0.14%)</title><rect x="819.0" y="1877" width="1.7" height="15.0" fill="rgb(214,77,14)" rx="2" ry="2" />
<text  x="822.05" y="1887.5" ></text>
</g>
<g >
<title>duckdb::Event::SetTasks (60,704,664 samples, 0.12%)</title><rect x="1058.0" y="1813" width="1.4" height="15.0" fill="rgb(225,154,19)" rx="2" ry="2" />
<text  x="1060.99" y="1823.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (5,544,701 samples, 0.01%)</title><rect x="102.3" y="1445" width="0.1" height="15.0" fill="rgb(213,14,13)" rx="2" ry="2" />
<text  x="105.28" y="1455.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1557" width="0.3" height="15.0" fill="rgb(232,125,6)" rx="2" ry="2" />
<text  x="835.82" y="1567.5" ></text>
</g>
<g >
<title>duckdb::InsertStatement::InsertStatement (29,936,106 samples, 0.06%)</title><rect x="537.2" y="1813" width="0.7" height="15.0" fill="rgb(220,140,26)" rx="2" ry="2" />
<text  x="540.19" y="1823.5" ></text>
</g>
<g >
<title>duckdb::QueryNode::~QueryNode (6,790,951 samples, 0.01%)</title><rect x="1038.6" y="1653" width="0.1" height="15.0" fill="rgb(225,224,10)" rx="2" ry="2" />
<text  x="1041.59" y="1663.5" ></text>
</g>
<g >
<title>std::operator==&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; (5,653,737 samples, 0.01%)</title><rect x="1103.2" y="1893" width="0.1" height="15.0" fill="rgb(213,87,47)" rx="2" ry="2" />
<text  x="1106.19" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::_M_move_assign (4,987,080 samples, 0.01%)</title><rect x="965.7" y="1717" width="0.1" height="15.0" fill="rgb(237,146,12)" rx="2" ry="2" />
<text  x="968.72" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (7,309,693 samples, 0.01%)</title><rect x="887.4" y="1669" width="0.2" height="15.0" fill="rgb(210,58,41)" rx="2" ry="2" />
<text  x="890.43" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_impl (4,529,163 samples, 0.01%)</title><rect x="193.3" y="1477" width="0.1" height="15.0" fill="rgb(254,129,39)" rx="2" ry="2" />
<text  x="196.31" y="1487.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::clear (6,376,603 samples, 0.01%)</title><rect x="337.7" y="1637" width="0.2" height="15.0" fill="rgb(224,65,42)" rx="2" ry="2" />
<text  x="340.74" y="1647.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt; &gt;::operator= (10,272,431 samples, 0.02%)</title><rect x="909.7" y="1749" width="0.2" height="15.0" fill="rgb(239,125,50)" rx="2" ry="2" />
<text  x="912.69" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt; &gt;::release (4,679,722 samples, 0.01%)</title><rect x="799.3" y="1813" width="0.1" height="15.0" fill="rgb(240,153,3)" rx="2" ry="2" />
<text  x="802.31" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (7,362,137 samples, 0.01%)</title><rect x="863.1" y="1701" width="0.2" height="15.0" fill="rgb(210,110,49)" rx="2" ry="2" />
<text  x="866.11" y="1711.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (14,875,632 samples, 0.03%)</title><rect x="1139.0" y="1909" width="0.4" height="15.0" fill="rgb(230,212,37)" rx="2" ry="2" />
<text  x="1142.03" y="1919.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundReferenceExpression, std::default_delete&lt;duckdb::BoundReferenceExpression&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BoundReferenceExpression&gt;, void&gt; (4,512,442 samples, 0.01%)</title><rect x="845.0" y="1685" width="0.1" height="15.0" fill="rgb(237,187,10)" rx="2" ry="2" />
<text  x="847.96" y="1695.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::WriteField&lt;unsigned long&gt; (6,460,862 samples, 0.01%)</title><rect x="590.4" y="1829" width="0.2" height="15.0" fill="rgb(208,204,40)" rx="2" ry="2" />
<text  x="593.43" y="1839.5" ></text>
</g>
<g >
<title>blk_mq_get_request (6,036,035 samples, 0.01%)</title><rect x="251.1" y="1509" width="0.1" height="15.0" fill="rgb(252,228,31)" rx="2" ry="2" />
<text  x="254.10" y="1519.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::HasSegment (8,255,858 samples, 0.02%)</title><rect x="286.4" y="1589" width="0.2" height="15.0" fill="rgb(239,132,9)" rx="2" ry="2" />
<text  x="289.40" y="1599.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformStatementInternal (602,464,833 samples, 1.17%)</title><rect x="525.5" y="1893" width="13.8" height="15.0" fill="rgb(244,89,9)" rx="2" ry="2" />
<text  x="528.49" y="1903.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::Verify (10,800,043 samples, 0.02%)</title><rect x="850.6" y="1861" width="0.2" height="15.0" fill="rgb(209,32,16)" rx="2" ry="2" />
<text  x="853.56" y="1871.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnDataCopyFunction, true&gt;::~vector (4,657,413 samples, 0.01%)</title><rect x="910.3" y="1701" width="0.1" height="15.0" fill="rgb(250,94,21)" rx="2" ry="2" />
<text  x="913.26" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnAppendState [], std::default_delete&lt;duckdb::ColumnAppendState []&gt; &gt;::operator= (4,930,210 samples, 0.01%)</title><rect x="198.6" y="1701" width="0.1" height="15.0" fill="rgb(224,40,19)" rx="2" ry="2" />
<text  x="201.60" y="1711.5" ></text>
</g>
<g >
<title>duckdb::make_unsafe_uniq_array&lt;duckdb::ColumnScanState&gt; (5,826,105 samples, 0.01%)</title><rect x="299.4" y="1669" width="0.2" height="15.0" fill="rgb(244,162,44)" rx="2" ry="2" />
<text  x="302.42" y="1679.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long&gt; (5,134,723 samples, 0.01%)</title><rect x="840.2" y="1765" width="0.1" height="15.0" fill="rgb(251,35,34)" rx="2" ry="2" />
<text  x="843.22" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::unique_ptr&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;duckdb::BoundColumnRefExpression&gt;, void&gt; (12,398,689 samples, 0.02%)</title><rect x="952.2" y="1605" width="0.3" height="15.0" fill="rgb(217,189,4)" rx="2" ry="2" />
<text  x="955.19" y="1615.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt;::deallocate (5,262,655 samples, 0.01%)</title><rect x="38.6" y="2021" width="0.1" height="15.0" fill="rgb(215,1,49)" rx="2" ry="2" />
<text  x="41.60" y="2031.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (4,769,172 samples, 0.01%)</title><rect x="991.5" y="1573" width="0.1" height="15.0" fill="rgb(246,131,40)" rx="2" ry="2" />
<text  x="994.51" y="1583.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_allocate (8,434,315 samples, 0.02%)</title><rect x="651.6" y="1701" width="0.2" height="15.0" fill="rgb(234,157,3)" rx="2" ry="2" />
<text  x="654.63" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ChunkMetaData::~ChunkMetaData (8,589,302 samples, 0.02%)</title><rect x="341.0" y="1093" width="0.2" height="15.0" fill="rgb(234,109,47)" rx="2" ry="2" />
<text  x="343.97" y="1103.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (4,539,924 samples, 0.01%)</title><rect x="764.9" y="1765" width="0.1" height="15.0" fill="rgb(219,130,21)" rx="2" ry="2" />
<text  x="767.86" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt;, true&gt;::reset (808,924,603 samples, 1.58%)</title><rect x="333.1" y="1877" width="18.6" height="15.0" fill="rgb(217,138,3)" rx="2" ry="2" />
<text  x="336.12" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_node_ptr (5,264,126 samples, 0.01%)</title><rect x="670.7" y="1717" width="0.1" height="15.0" fill="rgb(242,210,54)" rx="2" ry="2" />
<text  x="673.72" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (40,381,030 samples, 0.08%)</title><rect x="467.2" y="1765" width="1.0" height="15.0" fill="rgb(212,127,42)" rx="2" ry="2" />
<text  x="470.24" y="1775.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnBinding, true&gt;::operator= (5,275,187 samples, 0.01%)</title><rect x="846.0" y="1829" width="0.1" height="15.0" fill="rgb(245,61,29)" rx="2" ry="2" />
<text  x="849.01" y="1839.5" ></text>
</g>
<g >
<title>duckdb::MaterializedQueryResult::~MaterializedQueryResult (165,702,024 samples, 0.32%)</title><rect x="1121.3" y="1957" width="3.8" height="15.0" fill="rgb(235,2,3)" rx="2" ry="2" />
<text  x="1124.28" y="1967.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::push_back (15,198,715 samples, 0.03%)</title><rect x="536.0" y="1765" width="0.3" height="15.0" fill="rgb(241,206,50)" rx="2" ry="2" />
<text  x="538.96" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::Execute (223,654,316 samples, 0.44%)</title><rect x="898.2" y="1765" width="5.2" height="15.0" fill="rgb(213,56,5)" rx="2" ry="2" />
<text  x="901.21" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1349" width="0.1" height="15.0" fill="rgb(208,93,47)" rx="2" ry="2" />
<text  x="14.25" y="1359.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::operator= (9,269,355 samples, 0.02%)</title><rect x="935.1" y="1685" width="0.2" height="15.0" fill="rgb(248,123,41)" rx="2" ry="2" />
<text  x="938.09" y="1695.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~_Vector_base (13,125,084 samples, 0.03%)</title><rect x="673.8" y="1765" width="0.3" height="15.0" fill="rgb(232,113,45)" rx="2" ry="2" />
<text  x="676.82" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::push_back (28,002,199 samples, 0.05%)</title><rect x="1079.7" y="1797" width="0.7" height="15.0" fill="rgb(254,39,20)" rx="2" ry="2" />
<text  x="1082.74" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_alloc (83,478,069 samples, 0.16%)</title><rect x="873.0" y="1445" width="1.9" height="15.0" fill="rgb(236,169,47)" rx="2" ry="2" />
<text  x="876.02" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (34,398,915 samples, 0.07%)</title><rect x="1000.2" y="1669" width="0.8" height="15.0" fill="rgb(245,122,3)" rx="2" ry="2" />
<text  x="1003.16" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::unique_ptr&lt;duckdb::BoundExpression, std::default_delete&lt;duckdb::BoundExpression&gt;, void&gt; (12,183,298 samples, 0.02%)</title><rect x="935.3" y="1685" width="0.3" height="15.0" fill="rgb(235,60,26)" rx="2" ry="2" />
<text  x="938.33" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned char [], std::default_delete&lt;unsigned char []&gt; &gt;::~unique_ptr (4,541,631 samples, 0.01%)</title><rect x="585.8" y="1781" width="0.2" height="15.0" fill="rgb(242,192,11)" rx="2" ry="2" />
<text  x="588.85" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, unsigned long, std::__detail::_Identity, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (12,974,928 samples, 0.03%)</title><rect x="666.2" y="1685" width="0.3" height="15.0" fill="rgb(238,1,27)" rx="2" ry="2" />
<text  x="669.18" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (27,201,619 samples, 0.05%)</title><rect x="415.4" y="1621" width="0.7" height="15.0" fill="rgb(248,181,17)" rx="2" ry="2" />
<text  x="418.44" y="1631.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt; &gt;::unique_ptr&lt;duckdb::PhysicalInsert, std::default_delete&lt;duckdb::PhysicalInsert&gt;, void&gt; (8,022,172 samples, 0.02%)</title><rect x="858.8" y="1813" width="0.1" height="15.0" fill="rgb(231,33,11)" rx="2" ry="2" />
<text  x="861.75" y="1823.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::HTTPState,  (9,261,264 samples, 0.02%)</title><rect x="516.8" y="1893" width="0.2" height="15.0" fill="rgb(247,3,45)" rx="2" ry="2" />
<text  x="519.81" y="1903.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (6,549,825 samples, 0.01%)</title><rect x="556.0" y="1797" width="0.2" height="15.0" fill="rgb(225,17,21)" rx="2" ry="2" />
<text  x="559.00" y="1807.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ParsedExpression&gt;::operator (4,406,029 samples, 0.01%)</title><rect x="948.4" y="1589" width="0.1" height="15.0" fill="rgb(225,181,11)" rx="2" ry="2" />
<text  x="951.40" y="1599.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;, true&gt;::~vector (30,287,219 samples, 0.06%)</title><rect x="915.8" y="1701" width="0.7" height="15.0" fill="rgb(248,10,38)" rx="2" ry="2" />
<text  x="918.78" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundCastData, std::default_delete&lt;duckdb::BoundCastData&gt; &gt;::release (8,664,384 samples, 0.02%)</title><rect x="932.7" y="1621" width="0.2" height="15.0" fill="rgb(205,180,53)" rx="2" ry="2" />
<text  x="935.69" y="1631.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::idalloctm (12,889,637 samples, 0.03%)</title><rect x="334.0" y="1317" width="0.3" height="15.0" fill="rgb(247,209,37)" rx="2" ry="2" />
<text  x="336.99" y="1327.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Event*, std::allocator&lt;duckdb::Event*&gt; &gt;::~vector (6,564,262 samples, 0.01%)</title><rect x="1057.2" y="1797" width="0.2" height="15.0" fill="rgb(224,142,24)" rx="2" ry="2" />
<text  x="1060.21" y="1807.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::~DataChunk (6,188,702 samples, 0.01%)</title><rect x="484.1" y="1493" width="0.2" height="15.0" fill="rgb(219,99,22)" rx="2" ry="2" />
<text  x="487.13" y="1503.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_remap (9,550,420 samples, 0.02%)</title><rect x="875.4" y="1317" width="0.2" height="15.0" fill="rgb(233,118,25)" rx="2" ry="2" />
<text  x="878.41" y="1327.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long&gt;::allocate (24,718,871 samples, 0.05%)</title><rect x="46.1" y="2021" width="0.6" height="15.0" fill="rgb(220,220,4)" rx="2" ry="2" />
<text  x="49.11" y="2031.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned char [], std::default_delete&lt;unsigned char&gt;, false&gt;::~unique_ptr (4,541,631 samples, 0.01%)</title><rect x="585.8" y="1797" width="0.2" height="15.0" fill="rgb(243,199,29)" rx="2" ry="2" />
<text  x="588.85" y="1807.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::~LocalStorage (9,850,047 samples, 0.02%)</title><rect x="327.2" y="1573" width="0.3" height="15.0" fill="rgb(253,14,1)" rx="2" ry="2" />
<text  x="330.24" y="1583.5" ></text>
</g>
<g >
<title>duckdb::DistinctStatistics::Update (24,608,757 samples, 0.05%)</title><rect x="228.7" y="1621" width="0.6" height="15.0" fill="rgb(243,102,37)" rx="2" ry="2" />
<text  x="231.72" y="1631.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (4,717,026 samples, 0.01%)</title><rect x="780.7" y="1813" width="0.1" height="15.0" fill="rgb(241,172,24)" rx="2" ry="2" />
<text  x="783.65" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ThreadContext::~ThreadContext (4,900,080 samples, 0.01%)</title><rect x="108.7" y="1765" width="0.1" height="15.0" fill="rgb(252,14,23)" rx="2" ry="2" />
<text  x="111.70" y="1775.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::operator= (5,625,965 samples, 0.01%)</title><rect x="468.7" y="1765" width="0.1" height="15.0" fill="rgb(239,148,4)" rx="2" ry="2" />
<text  x="471.69" y="1775.5" ></text>
</g>
<g >
<title>dequeue_task_fair (15,397,978 samples, 0.03%)</title><rect x="74.8" y="1861" width="0.4" height="15.0" fill="rgb(226,189,22)" rx="2" ry="2" />
<text  x="77.80" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::DuckTransaction&gt;, void&gt; (6,303,764 samples, 0.01%)</title><rect x="999.2" y="1653" width="0.2" height="15.0" fill="rgb(207,17,18)" rx="2" ry="2" />
<text  x="1002.23" y="1663.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::ScheduleTask (45,314,940 samples, 0.09%)</title><rect x="1058.3" y="1797" width="1.0" height="15.0" fill="rgb(238,209,22)" rx="2" ry="2" />
<text  x="1061.27" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (6,911,864 samples, 0.01%)</title><rect x="465.8" y="1797" width="0.2" height="15.0" fill="rgb(213,175,31)" rx="2" ry="2" />
<text  x="468.83" y="1807.5" ></text>
</g>
<g >
<title>duckdb::CommonSubExpressionOptimizer::VisitOperator (28,780,021 samples, 0.06%)</title><rect x="729.2" y="1717" width="0.6" height="15.0" fill="rgb(242,36,40)" rx="2" ry="2" />
<text  x="732.18" y="1727.5" ></text>
</g>
<g >
<title>duckdb::StringStats::CreateEmpty (6,936,024 samples, 0.01%)</title><rect x="454.1" y="1445" width="0.2" height="15.0" fill="rgb(248,47,9)" rx="2" ry="2" />
<text  x="457.15" y="1455.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (8,052,670 samples, 0.02%)</title><rect x="498.7" y="1413" width="0.2" height="15.0" fill="rgb(213,128,19)" rx="2" ry="2" />
<text  x="501.68" y="1423.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderTopLayer (16,218,682 samples, 0.03%)</title><rect x="640.4" y="1765" width="0.4" height="15.0" fill="rgb(205,119,1)" rx="2" ry="2" />
<text  x="643.43" y="1775.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetMapping (13,343,780 samples, 0.03%)</title><rect x="1005.9" y="1717" width="0.3" height="15.0" fill="rgb(223,39,47)" rx="2" ry="2" />
<text  x="1008.88" y="1727.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::ReallocBuffer (287,233,729 samples, 0.56%)</title><rect x="872.7" y="1573" width="6.6" height="15.0" fill="rgb(226,103,52)" rx="2" ry="2" />
<text  x="875.72" y="1583.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (7,304,050 samples, 0.01%)</title><rect x="1023.2" y="1813" width="0.2" height="15.0" fill="rgb(207,48,15)" rx="2" ry="2" />
<text  x="1026.25" y="1823.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::Binder, std::allocator&lt;duckdb::Binder&gt;,  (116,025,550 samples, 0.23%)</title><rect x="1016.0" y="1765" width="2.7" height="15.0" fill="rgb(249,199,7)" rx="2" ry="2" />
<text  x="1018.98" y="1775.5" ></text>
</g>
<g >
<title>duckdb::LengthFun::RegisterFunction (5,576,296 samples, 0.01%)</title><rect x="1111.3" y="1877" width="0.2" height="15.0" fill="rgb(211,204,40)" rx="2" ry="2" />
<text  x="1114.34" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::ReferenceEquality&lt;duckdb::SchemaCatalogEntry&gt;, duckdb::ReferenceHashFunction&lt;duckdb::SchemaCatalogEntry&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (13,310,539 samples, 0.03%)</title><rect x="1008.2" y="1749" width="0.3" height="15.0" fill="rgb(233,77,38)" rx="2" ry="2" />
<text  x="1011.22" y="1759.5" ></text>
</g>
<g >
<title>new_sync_write (55,813,649 samples, 0.11%)</title><rect x="247.5" y="1605" width="1.3" height="15.0" fill="rgb(249,207,11)" rx="2" ry="2" />
<text  x="250.51" y="1615.5" ></text>
</g>
<g >
<title>std::function&lt;void  (22,200,323 samples, 0.04%)</title><rect x="595.3" y="1669" width="0.5" height="15.0" fill="rgb(247,60,15)" rx="2" ry="2" />
<text  x="598.28" y="1679.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, true&gt;::vector (6,991,802 samples, 0.01%)</title><rect x="626.8" y="1749" width="0.2" height="15.0" fill="rgb(229,52,6)" rx="2" ry="2" />
<text  x="629.80" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnAppendState, std::allocator&lt;duckdb::ColumnAppendState&gt; &gt;::emplace_back&lt;duckdb::ColumnAppendState&gt; (23,978,012 samples, 0.05%)</title><rect x="197.8" y="1685" width="0.6" height="15.0" fill="rgb(222,182,24)" rx="2" ry="2" />
<text  x="200.82" y="1695.5" ></text>
</g>
<g >
<title>__asan::AsanChunk::UsedSize (22,756,810 samples, 0.04%)</title><rect x="31.6" y="2021" width="0.5" height="15.0" fill="rgb(207,165,43)" rx="2" ry="2" />
<text  x="34.62" y="2031.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::unique_ptr (7,478,821 samples, 0.01%)</title><rect x="835.2" y="1781" width="0.2" height="15.0" fill="rgb(232,163,26)" rx="2" ry="2" />
<text  x="838.25" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (58,122,308 samples, 0.11%)</title><rect x="325.3" y="1461" width="1.3" height="15.0" fill="rgb(249,27,43)" rx="2" ry="2" />
<text  x="328.31" y="1471.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Rule&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; &gt;::push_back (48,584,901 samples, 0.09%)</title><rect x="737.3" y="1701" width="1.1" height="15.0" fill="rgb(219,102,2)" rx="2" ry="2" />
<text  x="740.28" y="1711.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*, std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt; &gt;::operator++ (6,749,175 samples, 0.01%)</title><rect x="647.8" y="1797" width="0.2" height="15.0" fill="rgb(208,151,47)" rx="2" ry="2" />
<text  x="650.81" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::~vector (6,251,799 samples, 0.01%)</title><rect x="106.9" y="1669" width="0.1" height="15.0" fill="rgb(216,90,17)" rx="2" ry="2" />
<text  x="109.87" y="1679.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (5,280,133 samples, 0.01%)</title><rect x="949.6" y="1669" width="0.2" height="15.0" fill="rgb(233,130,30)" rx="2" ry="2" />
<text  x="952.65" y="1679.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (29,295,516 samples, 0.06%)</title><rect x="236.2" y="1397" width="0.7" height="15.0" fill="rgb(245,61,24)" rx="2" ry="2" />
<text  x="239.24" y="1407.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (10,277,097 samples, 0.02%)</title><rect x="292.7" y="1637" width="0.3" height="15.0" fill="rgb(253,4,23)" rx="2" ry="2" />
<text  x="295.74" y="1647.5" ></text>
</g>
<g >
<title>duckdb::Deserializer::Read&lt;unsigned int&gt; (5,224,341 samples, 0.01%)</title><rect x="585.7" y="1797" width="0.1" height="15.0" fill="rgb(206,178,41)" rx="2" ry="2" />
<text  x="588.66" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::idalloctm (10,757,547 samples, 0.02%)</title><rect x="498.4" y="1429" width="0.3" height="15.0" fill="rgb(251,85,35)" rx="2" ry="2" />
<text  x="501.42" y="1439.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SegmentStatistics, std::default_delete&lt;duckdb::SegmentStatistics&gt;, true&gt;::operator= (11,232,499 samples, 0.02%)</title><rect x="454.4" y="1509" width="0.3" height="15.0" fill="rgb(217,67,6)" rx="2" ry="2" />
<text  x="457.42" y="1519.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (66,222,774 samples, 0.13%)</title><rect x="366.7" y="1557" width="1.5" height="15.0" fill="rgb(217,136,23)" rx="2" ry="2" />
<text  x="369.71" y="1567.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::_M_realloc_insert&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; (17,292,060 samples, 0.03%)</title><rect x="1094.8" y="1685" width="0.4" height="15.0" fill="rgb(205,221,13)" rx="2" ry="2" />
<text  x="1097.79" y="1695.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (9,438,159 samples, 0.02%)</title><rect x="1025.2" y="1797" width="0.2" height="15.0" fill="rgb(249,25,48)" rx="2" ry="2" />
<text  x="1028.20" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Vector::Slice (97,327,546 samples, 0.19%)</title><rect x="293.5" y="1685" width="2.3" height="15.0" fill="rgb(218,162,4)" rx="2" ry="2" />
<text  x="296.52" y="1695.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::BlockHandle, std::allocator&lt;duckdb::BlockHandle&gt;,  (85,945,020 samples, 0.17%)</title><rect x="241.9" y="693" width="2.0" height="15.0" fill="rgb(253,198,22)" rx="2" ry="2" />
<text  x="244.87" y="703.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt; &gt;::unique_ptr (7,807,132 samples, 0.02%)</title><rect x="441.6" y="1509" width="0.2" height="15.0" fill="rgb(252,50,51)" rx="2" ry="2" />
<text  x="444.58" y="1519.5" ></text>
</g>
<g >
<title>duckdb::CardinalityEstimator::CardinalityEstimator (8,480,906 samples, 0.02%)</title><rect x="752.0" y="1797" width="0.2" height="15.0" fill="rgb(226,7,31)" rx="2" ry="2" />
<text  x="755.00" y="1807.5" ></text>
</g>
<g >
<title>duckdb::SelectNode::~SelectNode (21,594,706 samples, 0.04%)</title><rect x="1038.5" y="1685" width="0.5" height="15.0" fill="rgb(248,118,6)" rx="2" ry="2" />
<text  x="1041.48" y="1695.5" ></text>
</g>
<g >
<title>duckdb::TableStatistics::InitializeEmpty (13,279,706 samples, 0.03%)</title><rect x="102.2" y="1541" width="0.3" height="15.0" fill="rgb(244,5,22)" rx="2" ry="2" />
<text  x="105.16" y="1551.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::shared_ptr&lt;duckdb::Event&gt;, true&gt;::clear (100,465,497 samples, 0.20%)</title><rect x="355.1" y="1877" width="2.3" height="15.0" fill="rgb(225,190,16)" rx="2" ry="2" />
<text  x="358.09" y="1887.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt;, true&gt;::operator= (4,850,208 samples, 0.01%)</title><rect x="544.3" y="1893" width="0.1" height="15.0" fill="rgb(231,86,28)" rx="2" ry="2" />
<text  x="547.26" y="1903.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::operator= (8,740,620 samples, 0.02%)</title><rect x="981.8" y="1797" width="0.2" height="15.0" fill="rgb(236,227,16)" rx="2" ry="2" />
<text  x="984.82" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::emplace_back&lt;std::weak_ptr&lt;duckdb::Pipeline&gt; &gt; (23,562,376 samples, 0.05%)</title><rect x="1079.8" y="1781" width="0.6" height="15.0" fill="rgb(237,17,27)" rx="2" ry="2" />
<text  x="1082.82" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::emplace_back&lt;duckdb::VectorCache&amp;&gt; (38,345,472 samples, 0.07%)</title><rect x="893.2" y="1749" width="0.9" height="15.0" fill="rgb(216,191,1)" rx="2" ry="2" />
<text  x="896.20" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ChunkMetaData*&gt; (10,951,999 samples, 0.02%)</title><rect x="341.0" y="1141" width="0.2" height="15.0" fill="rgb(245,217,26)" rx="2" ry="2" />
<text  x="343.95" y="1151.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_fetch_impl (4,471,322 samples, 0.01%)</title><rect x="892.0" y="1445" width="0.1" height="15.0" fill="rgb(208,96,45)" rx="2" ry="2" />
<text  x="894.98" y="1455.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::PipelineCompleteEvent,  (19,460,676 samples, 0.04%)</title><rect x="1049.4" y="1765" width="0.4" height="15.0" fill="rgb(247,23,30)" rx="2" ry="2" />
<text  x="1052.39" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt; &gt; (25,912,501 samples, 0.05%)</title><rect x="816.9" y="1781" width="0.6" height="15.0" fill="rgb(209,27,32)" rx="2" ry="2" />
<text  x="819.91" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ValidityInitScan (19,904,920 samples, 0.04%)</title><rect x="268.1" y="1589" width="0.4" height="15.0" fill="rgb(221,75,7)" rx="2" ry="2" />
<text  x="271.07" y="1599.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (5,311,516 samples, 0.01%)</title><rect x="430.0" y="1477" width="0.1" height="15.0" fill="rgb(208,187,2)" rx="2" ry="2" />
<text  x="432.98" y="1487.5" ></text>
</g>
<g >
<title>__schedule (12,190,850 samples, 0.02%)</title><rect x="249.3" y="1541" width="0.3" height="15.0" fill="rgb(218,129,13)" rx="2" ry="2" />
<text  x="252.29" y="1551.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt; &gt;::operator= (12,360,496 samples, 0.02%)</title><rect x="799.2" y="1829" width="0.3" height="15.0" fill="rgb(227,208,12)" rx="2" ry="2" />
<text  x="802.18" y="1839.5" ></text>
</g>
<g >
<title>duckdb::string_location_t::string_location_t (10,776,518 samples, 0.02%)</title><rect x="281.6" y="1525" width="0.2" height="15.0" fill="rgb(222,170,11)" rx="2" ry="2" />
<text  x="284.58" y="1535.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_free (55,364,133 samples, 0.11%)</title><rect x="325.3" y="1429" width="1.3" height="15.0" fill="rgb(210,112,31)" rx="2" ry="2" />
<text  x="328.32" y="1439.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (10,837,699 samples, 0.02%)</title><rect x="1074.4" y="1637" width="0.2" height="15.0" fill="rgb(238,227,21)" rx="2" ry="2" />
<text  x="1077.39" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1061" width="0.1" height="15.0" fill="rgb(236,110,41)" rx="2" ry="2" />
<text  x="14.25" y="1071.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::GlobalSourceState&gt;::operator (14,357,427 samples, 0.03%)</title><rect x="356.1" y="1461" width="0.3" height="15.0" fill="rgb(232,182,45)" rx="2" ry="2" />
<text  x="359.12" y="1471.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (11,047,913 samples, 0.02%)</title><rect x="292.7" y="1653" width="0.3" height="15.0" fill="rgb(212,158,41)" rx="2" ry="2" />
<text  x="295.74" y="1663.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::extent_deactivate_locked_impl (28,972,723 samples, 0.06%)</title><rect x="347.0" y="645" width="0.7" height="15.0" fill="rgb(207,87,16)" rx="2" ry="2" />
<text  x="349.99" y="655.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::vector (13,735,986 samples, 0.03%)</title><rect x="389.5" y="1909" width="0.4" height="15.0" fill="rgb(227,71,22)" rx="2" ry="2" />
<text  x="392.54" y="1919.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_dalloc_event (13,770,605 samples, 0.03%)</title><rect x="325.9" y="1381" width="0.4" height="15.0" fill="rgb(249,177,9)" rx="2" ry="2" />
<text  x="328.94" y="1391.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ResultModifier, std::default_delete&lt;duckdb::ResultModifier&gt;, true&gt;, true&gt;::~vector (4,582,560 samples, 0.01%)</title><rect x="1038.6" y="1637" width="0.1" height="15.0" fill="rgb(213,52,28)" rx="2" ry="2" />
<text  x="1041.62" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (6,516,403 samples, 0.01%)</title><rect x="832.1" y="1493" width="0.2" height="15.0" fill="rgb(241,193,53)" rx="2" ry="2" />
<text  x="835.14" y="1503.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::~unique_ptr (6,618,687 samples, 0.01%)</title><rect x="1077.9" y="1653" width="0.1" height="15.0" fill="rgb(228,162,9)" rx="2" ry="2" />
<text  x="1080.89" y="1663.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::InitializeChunk (273,368,461 samples, 0.53%)</title><rect x="365.6" y="1893" width="6.2" height="15.0" fill="rgb(235,108,8)" rx="2" ry="2" />
<text  x="368.56" y="1903.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (14,986,915 samples, 0.03%)</title><rect x="1016.9" y="1445" width="0.3" height="15.0" fill="rgb(208,117,34)" rx="2" ry="2" />
<text  x="1019.89" y="1455.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::WriteString (6,749,000 samples, 0.01%)</title><rect x="593.5" y="1845" width="0.1" height="15.0" fill="rgb(237,123,38)" rx="2" ry="2" />
<text  x="596.48" y="1855.5" ></text>
</g>
<g >
<title>operator new (7,441,485 samples, 0.01%)</title><rect x="1180.1" y="2037" width="0.2" height="15.0" fill="rgb(238,136,46)" rx="2" ry="2" />
<text  x="1183.10" y="2047.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;::unique_ptr&lt;duckdb::PhysicalColumnDataScan, std::default_delete&lt;std::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt; &gt; &gt;, void&gt; (10,601,436 samples, 0.02%)</title><rect x="916.5" y="1781" width="0.3" height="15.0" fill="rgb(232,70,21)" rx="2" ry="2" />
<text  x="919.53" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt;, true&gt;::operator= (7,021,654 samples, 0.01%)</title><rect x="797.5" y="1845" width="0.1" height="15.0" fill="rgb(207,191,1)" rx="2" ry="2" />
<text  x="800.48" y="1855.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (10,132,467 samples, 0.02%)</title><rect x="374.7" y="1733" width="0.3" height="15.0" fill="rgb(205,3,2)" rx="2" ry="2" />
<text  x="377.73" y="1743.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (5,283,085 samples, 0.01%)</title><rect x="85.5" y="2021" width="0.1" height="15.0" fill="rgb(241,37,3)" rx="2" ry="2" />
<text  x="88.46" y="2031.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::StandardColumnData&gt;::destroy&lt;duckdb::StandardColumnData&gt; (261,937,092 samples, 0.51%)</title><rect x="238.2" y="1029" width="6.0" height="15.0" fill="rgb(205,15,12)" rx="2" ry="2" />
<text  x="241.15" y="1039.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::SelectionData,  (9,305,222 samples, 0.02%)</title><rect x="315.5" y="1525" width="0.2" height="15.0" fill="rgb(211,121,1)" rx="2" ry="2" />
<text  x="318.50" y="1535.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::MergeIntoStatistics (9,478,100 samples, 0.02%)</title><rect x="230.9" y="1653" width="0.3" height="15.0" fill="rgb(240,18,26)" rx="2" ry="2" />
<text  x="233.94" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::RegexOptimizationRule, std::default_delete&lt;duckdb::RegexOptimizationRule&gt;, void&gt; (6,918,458 samples, 0.01%)</title><rect x="824.7" y="1861" width="0.1" height="15.0" fill="rgb(213,76,8)" rx="2" ry="2" />
<text  x="827.68" y="1871.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (14,684,299 samples, 0.03%)</title><rect x="844.0" y="1749" width="0.3" height="15.0" fill="rgb(214,150,14)" rx="2" ry="2" />
<text  x="847.01" y="1759.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::SwizzleMetaData, std::allocator&lt;duckdb::SwizzleMetaData&gt; &gt;::_Vector_base (4,607,957 samples, 0.01%)</title><rect x="884.6" y="1605" width="0.1" height="15.0" fill="rgb(215,151,44)" rx="2" ry="2" />
<text  x="887.60" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TableStatistics::GetLock (12,218,392 samples, 0.02%)</title><rect x="463.2" y="1749" width="0.3" height="15.0" fill="rgb(234,133,10)" rx="2" ry="2" />
<text  x="466.22" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::DistributivityRule, std::default_delete&lt;duckdb::DistributivityRule&gt;, void&gt; (8,656,436 samples, 0.02%)</title><rect x="822.4" y="1861" width="0.2" height="15.0" fill="rgb(232,208,11)" rx="2" ry="2" />
<text  x="825.36" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_allocate_node&lt;unsigned long const&amp;&gt; (34,597,700 samples, 0.07%)</title><rect x="657.4" y="1701" width="0.8" height="15.0" fill="rgb(237,48,27)" rx="2" ry="2" />
<text  x="660.39" y="1711.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~_Vector_base (5,395,821 samples, 0.01%)</title><rect x="575.8" y="1669" width="0.1" height="15.0" fill="rgb(211,20,15)" rx="2" ry="2" />
<text  x="578.81" y="1679.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::HTTPState,  (9,915,819 samples, 0.02%)</title><rect x="516.8" y="1909" width="0.2" height="15.0" fill="rgb(221,97,7)" rx="2" ry="2" />
<text  x="519.79" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_relocate (25,324,597 samples, 0.05%)</title><rect x="1074.2" y="1701" width="0.6" height="15.0" fill="rgb(205,170,35)" rx="2" ry="2" />
<text  x="1077.20" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_S_relocate (8,254,739 samples, 0.02%)</title><rect x="578.3" y="1765" width="0.1" height="15.0" fill="rgb(205,204,30)" rx="2" ry="2" />
<text  x="581.26" y="1775.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ColumnAppendState []&gt;::operator (28,010,475 samples, 0.05%)</title><rect x="233.6" y="1717" width="0.7" height="15.0" fill="rgb(232,39,15)" rx="2" ry="2" />
<text  x="236.63" y="1727.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::VectorCacheBuffer (73,882,413 samples, 0.14%)</title><rect x="486.8" y="1589" width="1.7" height="15.0" fill="rgb(217,113,12)" rx="2" ry="2" />
<text  x="489.81" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::ComparisonExpressionMatcher, std::default_delete&lt;duckdb::ComparisonExpressionMatcher&gt;, void&gt; (5,477,147 samples, 0.01%)</title><rect x="804.8" y="1829" width="0.1" height="15.0" fill="rgb(248,149,47)" rx="2" ry="2" />
<text  x="807.77" y="1839.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned long const*, unsigned long*&gt; (17,258,816 samples, 0.03%)</title><rect x="661.4" y="1685" width="0.4" height="15.0" fill="rgb(215,122,17)" rx="2" ry="2" />
<text  x="664.43" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::empty (5,609,733 samples, 0.01%)</title><rect x="969.8" y="1749" width="0.2" height="15.0" fill="rgb(239,194,10)" rx="2" ry="2" />
<text  x="972.83" y="1759.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::QueryProfiler&gt;::operator= (7,331,267 samples, 0.01%)</title><rect x="354.2" y="1877" width="0.2" height="15.0" fill="rgb(234,97,31)" rx="2" ry="2" />
<text  x="357.23" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::size (11,167,180 samples, 0.02%)</title><rect x="567.9" y="1733" width="0.3" height="15.0" fill="rgb(223,113,19)" rx="2" ry="2" />
<text  x="570.93" y="1743.5" ></text>
</g>
<g >
<title>ata_scsi_queuecmd (16,222,366 samples, 0.03%)</title><rect x="249.9" y="1381" width="0.4" height="15.0" fill="rgb(240,22,43)" rx="2" ry="2" />
<text  x="252.95" y="1391.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::Resize (290,225,903 samples, 0.57%)</title><rect x="872.7" y="1589" width="6.6" height="15.0" fill="rgb(225,86,32)" rx="2" ry="2" />
<text  x="875.65" y="1599.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt;, true&gt;::operator (56,490,242 samples, 0.11%)</title><rect x="509.6" y="1909" width="1.3" height="15.0" fill="rgb(223,3,40)" rx="2" ry="2" />
<text  x="512.63" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::max_size (8,218,255 samples, 0.02%)</title><rect x="629.0" y="1701" width="0.1" height="15.0" fill="rgb(237,147,20)" rx="2" ry="2" />
<text  x="631.95" y="1711.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::ScalarFunction const*, std::vector&lt;duckdb::ScalarFunction, std::allocator&lt;duckdb::ScalarFunction&gt; &gt; &gt;, duckdb::ScalarFunction*&gt; (6,378,611 samples, 0.01%)</title><rect x="1114.8" y="1733" width="0.2" height="15.0" fill="rgb(235,150,22)" rx="2" ry="2" />
<text  x="1117.81" y="1743.5" ></text>
</g>
<g >
<title>duckdb::PrivateAllocatorData::~PrivateAllocatorData (10,460,100 samples, 0.02%)</title><rect x="324.7" y="1493" width="0.2" height="15.0" fill="rgb(242,130,20)" rx="2" ry="2" />
<text  x="327.70" y="1503.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::Verify (46,387,115 samples, 0.09%)</title><rect x="849.9" y="1877" width="1.1" height="15.0" fill="rgb(229,186,29)" rx="2" ry="2" />
<text  x="852.90" y="1887.5" ></text>
</g>
<g >
<title>duckdb::RowGroupSegmentTree::RowGroupSegmentTree (7,242,415 samples, 0.01%)</title><rect x="429.5" y="1333" width="0.2" height="15.0" fill="rgb(249,195,17)" rx="2" ry="2" />
<text  x="432.51" y="1343.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::ClientLockWrapper, std::allocator&lt;duckdb::ClientLockWrapper&gt; &gt;::~_Vector_base (6,087,523 samples, 0.01%)</title><rect x="330.1" y="1797" width="0.1" height="15.0" fill="rgb(254,35,37)" rx="2" ry="2" />
<text  x="333.07" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::PendingStatementOrPreparedStatementInternal (7,990,876 samples, 0.02%)</title><rect x="1109.3" y="1893" width="0.2" height="15.0" fill="rgb(227,124,13)" rx="2" ry="2" />
<text  x="1112.34" y="1903.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*&gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;*&gt; (6,683,555 samples, 0.01%)</title><rect x="1084.6" y="1765" width="0.2" height="15.0" fill="rgb(220,8,25)" rx="2" ry="2" />
<text  x="1087.63" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalExpressionScan, std::default_delete&lt;duckdb::PhysicalExpressionScan&gt; &gt;::~unique_ptr (58,729,172 samples, 0.11%)</title><rect x="915.1" y="1765" width="1.4" height="15.0" fill="rgb(207,43,31)" rx="2" ry="2" />
<text  x="918.14" y="1775.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::~vector (7,874,439 samples, 0.02%)</title><rect x="351.2" y="1685" width="0.2" height="15.0" fill="rgb(218,157,1)" rx="2" ry="2" />
<text  x="354.17" y="1695.5" ></text>
</g>
<g >
<title>pthread_getspecific (9,574,014 samples, 0.02%)</title><rect x="12.3" y="1973" width="0.3" height="15.0" fill="rgb(252,40,48)" rx="2" ry="2" />
<text  x="15.35" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::ExpressionBinder&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::ExpressionBinder&gt; &gt; &gt;::_M_realloc_insert&lt;std::reference_wrapper&lt;duckdb::ExpressionBinder&gt; &gt; (17,393,997 samples, 0.03%)</title><rect x="936.4" y="1653" width="0.4" height="15.0" fill="rgb(219,206,43)" rx="2" ry="2" />
<text  x="939.37" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (6,868,706 samples, 0.01%)</title><rect x="574.4" y="1749" width="0.2" height="15.0" fill="rgb(208,157,43)" rx="2" ry="2" />
<text  x="577.40" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LikeOptimizationRule, std::default_delete&lt;duckdb::LikeOptimizationRule&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::LikeOptimizationRule&gt;, void&gt; (4,725,732 samples, 0.01%)</title><rect x="813.8" y="1861" width="0.1" height="15.0" fill="rgb(230,128,41)" rx="2" ry="2" />
<text  x="816.79" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt; &gt;::operator= (8,820,707 samples, 0.02%)</title><rect x="867.5" y="1669" width="0.2" height="15.0" fill="rgb(211,51,52)" rx="2" ry="2" />
<text  x="870.54" y="1679.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Pipeline&gt; &gt;::destroy&lt;duckdb::Pipeline&gt; (23,822,335 samples, 0.05%)</title><rect x="356.1" y="1541" width="0.5" height="15.0" fill="rgb(209,177,49)" rx="2" ry="2" />
<text  x="359.09" y="1551.5" ></text>
</g>
<g >
<title>__do_page_fault (283,977,041 samples, 0.55%)</title><rect x="161.6" y="1989" width="6.5" height="15.0" fill="rgb(229,224,21)" rx="2" ry="2" />
<text  x="164.59" y="1999.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::ScanVector&lt;true, true&gt; (869,233,880 samples, 1.69%)</title><rect x="267.1" y="1637" width="20.0" height="15.0" fill="rgb(240,85,45)" rx="2" ry="2" />
<text  x="270.10" y="1647.5" ></text>
</g>
<g >
<title>duckdb::BoundConstantExpression::~BoundConstantExpression (5,959,088 samples, 0.01%)</title><rect x="350.6" y="1461" width="0.1" height="15.0" fill="rgb(212,166,49)" rx="2" ry="2" />
<text  x="353.59" y="1471.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned char [], std::default_delete&lt;unsigned char&gt;, false&gt;::operator= (8,574,518 samples, 0.02%)</title><rect x="584.7" y="1829" width="0.2" height="15.0" fill="rgb(247,27,46)" rx="2" ry="2" />
<text  x="587.71" y="1839.5" ></text>
</g>
<g >
<title>std::swap&lt;duckdb::LogicalType&gt; (4,941,572 samples, 0.01%)</title><rect x="442.4" y="1637" width="0.1" height="15.0" fill="rgb(205,110,12)" rx="2" ry="2" />
<text  x="445.38" y="1647.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::AppendData (47,230,020 samples, 0.09%)</title><rect x="461.4" y="1701" width="1.0" height="15.0" fill="rgb(240,16,30)" rx="2" ry="2" />
<text  x="464.35" y="1711.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::VectorCache (7,529,307 samples, 0.01%)</title><rect x="108.1" y="1749" width="0.2" height="15.0" fill="rgb(214,64,9)" rx="2" ry="2" />
<text  x="111.08" y="1759.5" ></text>
</g>
<g >
<title>error_entry (9,479,886 samples, 0.02%)</title><rect x="1134.2" y="2021" width="0.2" height="15.0" fill="rgb(233,39,8)" rx="2" ry="2" />
<text  x="1137.22" y="2031.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::release (12,833,708 samples, 0.03%)</title><rect x="826.5" y="1781" width="0.3" height="15.0" fill="rgb(244,73,43)" rx="2" ry="2" />
<text  x="829.46" y="1791.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;duckdb::ColumnScanState*, unsigned long&gt; (4,408,619 samples, 0.01%)</title><rect x="223.8" y="1621" width="0.1" height="15.0" fill="rgb(213,34,21)" rx="2" ry="2" />
<text  x="226.78" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::resize (24,151,128 samples, 0.05%)</title><rect x="639.8" y="1749" width="0.6" height="15.0" fill="rgb(230,142,4)" rx="2" ry="2" />
<text  x="642.82" y="1759.5" ></text>
</g>
<g >
<title>duckdb::DuckDBAssertInternal (4,984,074 samples, 0.01%)</title><rect x="514.0" y="1893" width="0.1" height="15.0" fill="rgb(232,15,49)" rx="2" ry="2" />
<text  x="516.97" y="1903.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::NextGraphemeCluster (28,717,310 samples, 0.06%)</title><rect x="625.7" y="1749" width="0.7" height="15.0" fill="rgb(212,72,17)" rx="2" ry="2" />
<text  x="628.73" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (13,299,563 samples, 0.03%)</title><rect x="85.6" y="1989" width="0.3" height="15.0" fill="rgb(206,165,51)" rx="2" ry="2" />
<text  x="88.59" y="1999.5" ></text>
</g>
<g >
<title>duckdb::grapheme_break_simple (7,644,404 samples, 0.01%)</title><rect x="601.8" y="1717" width="0.2" height="15.0" fill="rgb(216,172,51)" rx="2" ry="2" />
<text  x="604.82" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Connection::Query (40,071,903,635 samples, 78.13%)</title><rect x="186.6" y="2005" width="921.8" height="15.0" fill="rgb(250,186,31)" rx="2" ry="2" />
<text  x="189.55" y="2015.5" >duckdb::Connection::Query</text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ArithmeticSimplificationRule, std::default_delete&lt;duckdb::ArithmeticSimplificationRule&gt; &gt;::__uniq_ptr_impl (5,550,122 samples, 0.01%)</title><rect x="790.2" y="1829" width="0.1" height="15.0" fill="rgb(212,114,51)" rx="2" ry="2" />
<text  x="793.18" y="1839.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;, true&gt;::operator[] (6,374,796 samples, 0.01%)</title><rect x="1082.5" y="1829" width="0.2" height="15.0" fill="rgb(251,7,4)" rx="2" ry="2" />
<text  x="1085.51" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::~unique_ptr (7,417,792 samples, 0.01%)</title><rect x="955.4" y="1637" width="0.2" height="15.0" fill="rgb(240,111,11)" rx="2" ry="2" />
<text  x="958.39" y="1647.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::GetGlobalSinkState (149,230,096 samples, 0.29%)</title><rect x="96.6" y="1813" width="3.4" height="15.0" fill="rgb(231,5,19)" rx="2" ry="2" />
<text  x="99.56" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::CaseExpressionMatcher, std::default_delete&lt;duckdb::CaseExpressionMatcher&gt;, void&gt; (7,214,716 samples, 0.01%)</title><rect x="791.0" y="1829" width="0.1" height="15.0" fill="rgb(237,193,12)" rx="2" ry="2" />
<text  x="793.98" y="1839.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;duckdb::ClientContext&gt;::shared_from_this (6,886,405 samples, 0.01%)</title><rect x="996.5" y="1621" width="0.1" height="15.0" fill="rgb(238,220,51)" rx="2" ry="2" />
<text  x="999.47" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Rule&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; &gt;::max_size (7,008,879 samples, 0.01%)</title><rect x="737.9" y="1637" width="0.1" height="15.0" fill="rgb(233,35,52)" rx="2" ry="2" />
<text  x="740.89" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_S_do_relocate (4,391,850 samples, 0.01%)</title><rect x="617.6" y="1733" width="0.1" height="15.0" fill="rgb(233,129,33)" rx="2" ry="2" />
<text  x="620.60" y="1743.5" ></text>
</g>
<g >
<title>duckdb::MoveConstantsRule::~MoveConstantsRule (14,971,845 samples, 0.03%)</title><rect x="832.8" y="1701" width="0.4" height="15.0" fill="rgb(223,144,38)" rx="2" ry="2" />
<text  x="835.82" y="1711.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::EntryValue, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt; &gt;::erase (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1525" width="1.9" height="15.0" fill="rgb(226,120,48)" rx="2" ry="2" />
<text  x="1120.81" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt; &gt; &gt;::_M_check_len (5,988,097 samples, 0.01%)</title><rect x="540.0" y="1861" width="0.2" height="15.0" fill="rgb(237,80,9)" rx="2" ry="2" />
<text  x="543.05" y="1871.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; (21,088,921 samples, 0.04%)</title><rect x="906.6" y="1669" width="0.5" height="15.0" fill="rgb(233,164,7)" rx="2" ry="2" />
<text  x="909.65" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (10,725,523 samples, 0.02%)</title><rect x="391.5" y="1413" width="0.3" height="15.0" fill="rgb(232,128,41)" rx="2" ry="2" />
<text  x="394.52" y="1423.5" ></text>
</g>
<g >
<title>std::function&lt;void  (6,870,731 samples, 0.01%)</title><rect x="728.7" y="1717" width="0.2" height="15.0" fill="rgb(226,209,53)" rx="2" ry="2" />
<text  x="731.71" y="1727.5" ></text>
</g>
<g >
<title>do_page_fault (83,836,890 samples, 0.16%)</title><rect x="72.2" y="1957" width="2.0" height="15.0" fill="rgb(221,185,4)" rx="2" ry="2" />
<text  x="75.23" y="1967.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::operator= (10,487,020 samples, 0.02%)</title><rect x="847.1" y="1813" width="0.2" height="15.0" fill="rgb(216,131,27)" rx="2" ry="2" />
<text  x="850.06" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (11,312,581 samples, 0.02%)</title><rect x="817.1" y="1749" width="0.2" height="15.0" fill="rgb(226,227,41)" rx="2" ry="2" />
<text  x="820.08" y="1759.5" ></text>
</g>
<g >
<title>std::mutex::lock (4,381,112 samples, 0.01%)</title><rect x="506.4" y="1861" width="0.1" height="15.0" fill="rgb(213,177,39)" rx="2" ry="2" />
<text  x="509.38" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (7,459,525 samples, 0.01%)</title><rect x="575.8" y="1685" width="0.1" height="15.0" fill="rgb(238,26,13)" rx="2" ry="2" />
<text  x="578.77" y="1695.5" ></text>
</g>
<g >
<title>__handle_mm_fault (12,765,116 samples, 0.02%)</title><rect x="1131.4" y="1941" width="0.3" height="15.0" fill="rgb(241,23,7)" rx="2" ry="2" />
<text  x="1134.39" y="1951.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_cleanup_wrapper (15,562,518 samples, 0.03%)</title><rect x="19.4" y="1989" width="0.3" height="15.0" fill="rgb(211,33,12)" rx="2" ry="2" />
<text  x="22.38" y="1999.5" ></text>
</g>
<g >
<title>duckdb::DuckTransactionManager::CanCheckpoint (36,119,603 samples, 0.07%)</title><rect x="319.1" y="1829" width="0.8" height="15.0" fill="rgb(240,14,15)" rx="2" ry="2" />
<text  x="322.07" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::End (6,782,330 samples, 0.01%)</title><rect x="466.2" y="1797" width="0.1" height="15.0" fill="rgb(246,73,18)" rx="2" ry="2" />
<text  x="469.18" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, unsigned long, std::__detail::_Identity, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (13,159,223 samples, 0.03%)</title><rect x="677.3" y="1701" width="0.3" height="15.0" fill="rgb(220,37,8)" rx="2" ry="2" />
<text  x="680.35" y="1711.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::BlockHandle,  (6,574,573 samples, 0.01%)</title><rect x="446.8" y="1653" width="0.2" height="15.0" fill="rgb(211,122,22)" rx="2" ry="2" />
<text  x="449.83" y="1663.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::~shared_ptr (97,081,972 samples, 0.19%)</title><rect x="481.5" y="1621" width="2.2" height="15.0" fill="rgb(222,89,24)" rx="2" ry="2" />
<text  x="484.51" y="1631.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::EmptyNeedleRemovalRule, std::default_delete&lt;duckdb::EmptyNeedleRemovalRule&gt;, void&gt; (8,677,509 samples, 0.02%)</title><rect x="822.6" y="1861" width="0.2" height="15.0" fill="rgb(206,83,24)" rx="2" ry="2" />
<text  x="825.57" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CompressedSegmentState, std::default_delete&lt;duckdb::CompressedSegmentState&gt; &gt;::operator= (19,403,147 samples, 0.04%)</title><rect x="445.3" y="1621" width="0.5" height="15.0" fill="rgb(239,76,47)" rx="2" ry="2" />
<text  x="448.35" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::emplace_back&lt;duckdb::VectorCache&amp;&gt; (20,652,118 samples, 0.04%)</title><rect x="219.7" y="1701" width="0.5" height="15.0" fill="rgb(228,91,11)" rx="2" ry="2" />
<text  x="222.71" y="1711.5" ></text>
</g>
<g >
<title>__gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char&gt; (8,356,434 samples, 0.02%)</title><rect x="1125.2" y="1989" width="0.2" height="15.0" fill="rgb(226,222,8)" rx="2" ry="2" />
<text  x="1128.19" y="1999.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (87,170,835 samples, 0.17%)</title><rect x="437.0" y="1525" width="2.0" height="15.0" fill="rgb(206,142,42)" rx="2" ry="2" />
<text  x="439.95" y="1535.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::GetLocalSourceState (8,970,264 samples, 0.02%)</title><rect x="491.9" y="1829" width="0.2" height="15.0" fill="rgb(221,67,7)" rx="2" ry="2" />
<text  x="494.86" y="1839.5" ></text>
</g>
<g >
<title>duckdb::DatabaseInstance::Initialize (387,637,081 samples, 0.76%)</title><rect x="1108.5" y="1989" width="8.9" height="15.0" fill="rgb(243,24,48)" rx="2" ry="2" />
<text  x="1111.48" y="1999.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_salloc (6,436,538 samples, 0.01%)</title><rect x="896.6" y="1349" width="0.2" height="15.0" fill="rgb(251,176,42)" rx="2" ry="2" />
<text  x="899.63" y="1359.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Pin (6,709,236 samples, 0.01%)</title><rect x="214.1" y="1589" width="0.1" height="15.0" fill="rgb(244,182,36)" rx="2" ry="2" />
<text  x="217.05" y="1599.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;duckdb::Binding&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;duckdb::Binding&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::operator= (6,271,204 samples, 0.01%)</title><rect x="985.3" y="1637" width="0.1" height="15.0" fill="rgb(207,212,25)" rx="2" ry="2" />
<text  x="988.29" y="1647.5" ></text>
</g>
<g >
<title>do_user_addr_fault (17,825,799 samples, 0.03%)</title><rect x="1131.3" y="1973" width="0.4" height="15.0" fill="rgb(214,24,11)" rx="2" ry="2" />
<text  x="1134.29" y="1983.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::SegmentTree (7,729,164 samples, 0.02%)</title><rect x="453.5" y="1493" width="0.2" height="15.0" fill="rgb(207,43,2)" rx="2" ry="2" />
<text  x="456.50" y="1503.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (10,307,140 samples, 0.02%)</title><rect x="325.9" y="1333" width="0.3" height="15.0" fill="rgb(229,27,26)" rx="2" ry="2" />
<text  x="328.94" y="1343.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::StandardColumnData&gt;::construct&lt;duckdb::StandardColumnData, duckdb::BlockManager&amp;, duckdb::DataTableInfo&amp;, unsigned long&amp;, unsigned long&amp;, duckdb::LogicalType const&amp;, duckdb::optional_ptr&lt;duckdb::ColumnData&gt;&amp;&gt; (88,217,643 samples, 0.17%)</title><rect x="453.2" y="1557" width="2.1" height="15.0" fill="rgb(240,209,43)" rx="2" ry="2" />
<text  x="456.24" y="1567.5" ></text>
</g>
<g >
<title>__gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char&gt; (8,039,426 samples, 0.02%)</title><rect x="880.1" y="1605" width="0.2" height="15.0" fill="rgb(236,67,35)" rx="2" ry="2" />
<text  x="883.12" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (83,787,149 samples, 0.16%)</title><rect x="621.2" y="1765" width="2.0" height="15.0" fill="rgb(231,18,19)" rx="2" ry="2" />
<text  x="624.22" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (57,436,491 samples, 0.11%)</title><rect x="595.1" y="1701" width="1.3" height="15.0" fill="rgb(254,145,20)" rx="2" ry="2" />
<text  x="598.11" y="1711.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::HTTPState&gt;::construct&lt;duckdb::HTTPState&gt; (5,542,040 samples, 0.01%)</title><rect x="1040.3" y="1781" width="0.1" height="15.0" fill="rgb(238,19,24)" rx="2" ry="2" />
<text  x="1043.30" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1045" width="0.3" height="15.0" fill="rgb(207,124,20)" rx="2" ry="2" />
<text  x="1120.47" y="1055.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::~unique_ptr (15,896,497 samples, 0.03%)</title><rect x="581.6" y="1749" width="0.4" height="15.0" fill="rgb(205,58,4)" rx="2" ry="2" />
<text  x="584.59" y="1759.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::Register&lt;duckdb::PragmaQueries&gt; (7,182,260 samples, 0.01%)</title><rect x="1110.7" y="1893" width="0.1" height="15.0" fill="rgb(246,205,34)" rx="2" ry="2" />
<text  x="1113.66" y="1903.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt;, true&gt;::operator= (4,595,361 samples, 0.01%)</title><rect x="819.7" y="1845" width="0.1" height="15.0" fill="rgb(229,68,36)" rx="2" ry="2" />
<text  x="822.68" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Event::Event (5,055,890 samples, 0.01%)</title><rect x="1050.1" y="1653" width="0.2" height="15.0" fill="rgb(222,197,5)" rx="2" ry="2" />
<text  x="1053.15" y="1663.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Task,  (22,942,961 samples, 0.04%)</title><rect x="144.5" y="1845" width="0.5" height="15.0" fill="rgb(229,147,26)" rx="2" ry="2" />
<text  x="147.51" y="1855.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::EndOperator (36,969,748 samples, 0.07%)</title><rect x="420.1" y="1829" width="0.9" height="15.0" fill="rgb(235,119,1)" rx="2" ry="2" />
<text  x="423.11" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ChunkMetaData, std::allocator&lt;duckdb::ChunkMetaData&gt; &gt;::push_back (28,591,437 samples, 0.06%)</title><rect x="383.7" y="1893" width="0.7" height="15.0" fill="rgb(226,181,35)" rx="2" ry="2" />
<text  x="386.75" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt; &gt;::~unique_ptr (24,854,382 samples, 0.05%)</title><rect x="483.9" y="1621" width="0.6" height="15.0" fill="rgb(244,81,42)" rx="2" ry="2" />
<text  x="486.94" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;duckdb::ColumnBinding, std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (44,053,302 samples, 0.09%)</title><rect x="762.9" y="1653" width="1.0" height="15.0" fill="rgb(233,1,6)" rx="2" ry="2" />
<text  x="765.87" y="1663.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (28,169,386 samples, 0.05%)</title><rect x="750.6" y="1733" width="0.6" height="15.0" fill="rgb(208,220,48)" rx="2" ry="2" />
<text  x="753.58" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::AllocatedData, std::allocator&lt;duckdb::AllocatedData&gt; &gt;::push_back (30,951,233 samples, 0.06%)</title><rect x="382.0" y="1829" width="0.7" height="15.0" fill="rgb(235,199,44)" rx="2" ry="2" />
<text  x="385.03" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (11,054,290 samples, 0.02%)</title><rect x="37.6" y="2005" width="0.2" height="15.0" fill="rgb(252,173,19)" rx="2" ry="2" />
<text  x="40.59" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (10,022,942 samples, 0.02%)</title><rect x="89.4" y="2005" width="0.2" height="15.0" fill="rgb(225,226,15)" rx="2" ry="2" />
<text  x="92.38" y="2015.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr (5,300,909 samples, 0.01%)</title><rect x="806.4" y="1765" width="0.1" height="15.0" fill="rgb(247,72,51)" rx="2" ry="2" />
<text  x="809.38" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::GetScheduler (8,338,796 samples, 0.02%)</title><rect x="854.1" y="1813" width="0.2" height="15.0" fill="rgb(216,172,24)" rx="2" ry="2" />
<text  x="857.14" y="1823.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_deallocate (7,578,022 samples, 0.01%)</title><rect x="662.6" y="1733" width="0.1" height="15.0" fill="rgb(223,121,25)" rx="2" ry="2" />
<text  x="665.55" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (4,498,107 samples, 0.01%)</title><rect x="1121.5" y="1829" width="0.1" height="15.0" fill="rgb(209,135,19)" rx="2" ry="2" />
<text  x="1124.53" y="1839.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (8,534,671 samples, 0.02%)</title><rect x="315.5" y="1509" width="0.2" height="15.0" fill="rgb(247,185,27)" rx="2" ry="2" />
<text  x="318.52" y="1519.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&amp;&gt; (33,095,301 samples, 0.06%)</title><rect x="893.3" y="1733" width="0.8" height="15.0" fill="rgb(209,66,48)" rx="2" ry="2" />
<text  x="896.30" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_default_append (21,906,837 samples, 0.04%)</title><rect x="631.8" y="1749" width="0.5" height="15.0" fill="rgb(245,9,26)" rx="2" ry="2" />
<text  x="634.77" y="1759.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::Executor&gt;::operator (172,672,464 samples, 0.34%)</title><rect x="333.3" y="1781" width="3.9" height="15.0" fill="rgb(208,146,30)" rx="2" ry="2" />
<text  x="336.26" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;::operator++ (5,860,077 samples, 0.01%)</title><rect x="649.0" y="1781" width="0.2" height="15.0" fill="rgb(230,118,41)" rx="2" ry="2" />
<text  x="652.02" y="1791.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::HasSegment (17,896,226 samples, 0.03%)</title><rect x="286.3" y="1605" width="0.4" height="15.0" fill="rgb(216,176,53)" rx="2" ry="2" />
<text  x="289.34" y="1615.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::RowGroupCollection&gt;::shared_ptr&lt;std::allocator&lt;duckdb::RowGroupCollection&gt;, std::shared_ptr&lt;duckdb::DataTableInfo&gt;&amp;, duckdb::BlockManager&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, long const&amp;, int&gt; (5,370,940 samples, 0.01%)</title><rect x="102.5" y="1525" width="0.1" height="15.0" fill="rgb(234,139,13)" rx="2" ry="2" />
<text  x="105.50" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::~vector (10,203,340 samples, 0.02%)</title><rect x="948.4" y="1701" width="0.2" height="15.0" fill="rgb(237,33,39)" rx="2" ry="2" />
<text  x="951.35" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ManyFunctionMatcher, std::default_delete&lt;duckdb::ManyFunctionMatcher&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ManyFunctionMatcher&gt;, void&gt; (4,757,745 samples, 0.01%)</title><rect x="785.0" y="1813" width="0.1" height="15.0" fill="rgb(254,158,35)" rx="2" ry="2" />
<text  x="788.04" y="1823.5" ></text>
</g>
<g >
<title>duckdb::CreateIndexScanState::~CreateIndexScanState (55,394,132 samples, 0.11%)</title><rect x="287.6" y="1717" width="1.3" height="15.0" fill="rgb(224,219,34)" rx="2" ry="2" />
<text  x="290.64" y="1727.5" ></text>
</g>
<g >
<title>duckdb::SelectBinder::~SelectBinder (13,127,743 samples, 0.03%)</title><rect x="962.9" y="1749" width="0.3" height="15.0" fill="rgb(219,129,54)" rx="2" ry="2" />
<text  x="965.93" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Task&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; &gt;::emplace_back&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; (6,491,853 samples, 0.01%)</title><rect x="95.9" y="1717" width="0.2" height="15.0" fill="rgb(240,87,21)" rx="2" ry="2" />
<text  x="98.92" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::operator= (5,550,929 samples, 0.01%)</title><rect x="960.8" y="1717" width="0.2" height="15.0" fill="rgb(245,155,47)" rx="2" ry="2" />
<text  x="963.83" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_S_check_init_len (10,454,747 samples, 0.02%)</title><rect x="661.9" y="1717" width="0.3" height="15.0" fill="rgb(244,66,20)" rx="2" ry="2" />
<text  x="664.93" y="1727.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::~unordered_set (5,699,892 samples, 0.01%)</title><rect x="341.0" y="1077" width="0.2" height="15.0" fill="rgb(215,127,25)" rx="2" ry="2" />
<text  x="344.04" y="1087.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::SelectionData, unsigned long&amp;&gt; (11,634,700 samples, 0.02%)</title><rect x="315.5" y="1573" width="0.2" height="15.0" fill="rgb(207,55,45)" rx="2" ry="2" />
<text  x="318.46" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt; &gt;::~unique_ptr (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1589" width="1.9" height="15.0" fill="rgb(206,222,53)" rx="2" ry="2" />
<text  x="1120.81" y="1599.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::HyperLogLog, std::default_delete&lt;duckdb::HyperLogLog&gt;, true&gt;::~unique_ptr (8,860,189 samples, 0.02%)</title><rect x="236.6" y="1237" width="0.2" height="15.0" fill="rgb(249,194,5)" rx="2" ry="2" />
<text  x="239.57" y="1247.5" ></text>
</g>
<g >
<title>duckdb::BufferPool::EvictBlocks (9,976,764 samples, 0.02%)</title><rect x="879.8" y="1621" width="0.2" height="15.0" fill="rgb(245,0,42)" rx="2" ry="2" />
<text  x="882.76" y="1631.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::FetchInternal (8,051,338,764 samples, 15.70%)</title><rect x="187.9" y="1925" width="185.2" height="15.0" fill="rgb(232,165,51)" rx="2" ry="2" />
<text  x="190.87" y="1935.5" >duckdb::ClientContext::F..</text>
</g>
<g >
<title>sync_regs (5,723,088 samples, 0.01%)</title><rect x="169.2" y="2021" width="0.1" height="15.0" fill="rgb(226,110,37)" rx="2" ry="2" />
<text  x="172.17" y="2031.5" ></text>
</g>
<g >
<title>std::copy&lt;unsigned long const*, unsigned long*&gt; (14,410,719 samples, 0.03%)</title><rect x="672.7" y="1685" width="0.4" height="15.0" fill="rgb(236,187,20)" rx="2" ry="2" />
<text  x="675.74" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt;, false&gt;::operator= (4,404,070 samples, 0.01%)</title><rect x="194.5" y="1733" width="0.1" height="15.0" fill="rgb(219,197,18)" rx="2" ry="2" />
<text  x="197.46" y="1743.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::PipelineInitializeTask&gt;::operator (11,202,979 samples, 0.02%)</title><rect x="144.7" y="1781" width="0.3" height="15.0" fill="rgb(211,40,14)" rx="2" ry="2" />
<text  x="147.70" y="1791.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::SingleFileStorageCommitState, std::default_delete&lt;duckdb::SingleFileStorageCommitState&gt; &gt;::__uniq_ptr_impl (8,584,768 samples, 0.02%)</title><rect x="253.2" y="1749" width="0.2" height="15.0" fill="rgb(226,54,47)" rx="2" ry="2" />
<text  x="256.22" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt;, false&gt;::unique_ptr (6,226,927 samples, 0.01%)</title><rect x="997.9" y="1605" width="0.1" height="15.0" fill="rgb(215,146,38)" rx="2" ry="2" />
<text  x="1000.88" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (34,317,140 samples, 0.07%)</title><rect x="991.4" y="1621" width="0.8" height="15.0" fill="rgb(228,202,29)" rx="2" ry="2" />
<text  x="994.38" y="1631.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::Expression&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::Expression&gt; const, duckdb::CSENode&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Expression&gt; const, duckdb::CSENode&gt; &gt;, std::__detail::_Select1st, duckdb::ExpressionEquality&lt;duckdb::Expression&gt;, duckdb::ExpressionHashFunction&lt;duckdb::Expression&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (5,272,915 samples, 0.01%)</title><rect x="728.5" y="1685" width="0.1" height="15.0" fill="rgb(209,36,13)" rx="2" ry="2" />
<text  x="731.52" y="1695.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (16,230,032 samples, 0.03%)</title><rect x="921.8" y="1813" width="0.3" height="15.0" fill="rgb(226,192,38)" rx="2" ry="2" />
<text  x="924.75" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (25,862,582 samples, 0.05%)</title><rect x="612.7" y="1749" width="0.6" height="15.0" fill="rgb(238,11,19)" rx="2" ry="2" />
<text  x="615.70" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_free (40,504,128 samples, 0.08%)</title><rect x="498.2" y="1477" width="0.9" height="15.0" fill="rgb(236,194,8)" rx="2" ry="2" />
<text  x="501.16" y="1487.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::StringScanState&gt; (17,767,274 samples, 0.03%)</title><rect x="213.1" y="1589" width="0.4" height="15.0" fill="rgb(229,72,15)" rx="2" ry="2" />
<text  x="216.08" y="1599.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (60,672,311 samples, 0.12%)</title><rect x="717.8" y="1797" width="1.4" height="15.0" fill="rgb(217,157,10)" rx="2" ry="2" />
<text  x="720.78" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::isalloc (6,865,883 samples, 0.01%)</title><rect x="890.9" y="1445" width="0.2" height="15.0" fill="rgb(223,164,10)" rx="2" ry="2" />
<text  x="893.90" y="1455.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc_large (10,894,702 samples, 0.02%)</title><rect x="482.1" y="1349" width="0.3" height="15.0" fill="rgb(232,77,8)" rx="2" ry="2" />
<text  x="485.13" y="1359.5" ></text>
</g>
<g >
<title>duckdb::UnnestRewriterPlanUpdater::~UnnestRewriterPlanUpdater (9,500,749 samples, 0.02%)</title><rect x="769.3" y="1797" width="0.2" height="15.0" fill="rgb(243,11,9)" rx="2" ry="2" />
<text  x="772.31" y="1807.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::PhysicalOperator&gt; (56,492,363 samples, 0.11%)</title><rect x="834.3" y="1813" width="1.3" height="15.0" fill="rgb(216,87,12)" rx="2" ry="2" />
<text  x="837.32" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::Destroy (12,254,864 samples, 0.02%)</title><rect x="288.1" y="1397" width="0.3" height="15.0" fill="rgb(223,17,52)" rx="2" ry="2" />
<text  x="291.08" y="1407.5" ></text>
</g>
<g >
<title>duckdb::AssignSharedPointer&lt;duckdb::VectorBuffer&gt; (24,619,006 samples, 0.05%)</title><rect x="292.0" y="1653" width="0.6" height="15.0" fill="rgb(225,222,24)" rx="2" ry="2" />
<text  x="295.04" y="1663.5" ></text>
</g>
<g >
<title>std::operator&amp; (27,796,713 samples, 0.05%)</title><rect x="413.8" y="1637" width="0.6" height="15.0" fill="rgb(240,17,3)" rx="2" ry="2" />
<text  x="416.77" y="1647.5" ></text>
</g>
<g >
<title>duckdb::ConstantFoldingRule::~ConstantFoldingRule (9,785,031 samples, 0.02%)</title><rect x="830.8" y="1717" width="0.2" height="15.0" fill="rgb(227,94,19)" rx="2" ry="2" />
<text  x="833.82" y="1727.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;::operator (7,418,395 samples, 0.01%)</title><rect x="1077.9" y="1685" width="0.1" height="15.0" fill="rgb(213,48,53)" rx="2" ry="2" />
<text  x="1080.87" y="1695.5" ></text>
</g>
<g >
<title>duckdb::RowGroupSegmentTree::~RowGroupSegmentTree (347,133,355 samples, 0.68%)</title><rect x="237.4" y="1429" width="8.0" height="15.0" fill="rgb(220,180,42)" rx="2" ry="2" />
<text  x="240.42" y="1439.5" ></text>
</g>
<g >
<title>duckdb::CompressionAppendState::~CompressionAppendState (11,268,147 samples, 0.02%)</title><rect x="233.7" y="1637" width="0.3" height="15.0" fill="rgb(245,213,45)" rx="2" ry="2" />
<text  x="236.71" y="1647.5" ></text>
</g>
<g >
<title>duckdb::Optimizer::Verify (241,980,906 samples, 0.47%)</title><rect x="775.2" y="1877" width="5.6" height="15.0" fill="rgb(229,138,7)" rx="2" ry="2" />
<text  x="778.23" y="1887.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::PhysicalExpressionScan, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, duckdb::vector&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;, true&gt;, unsigned long&amp;&gt; (38,986,684 samples, 0.08%)</title><rect x="913.5" y="1781" width="0.9" height="15.0" fill="rgb(251,171,31)" rx="2" ry="2" />
<text  x="916.46" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ChunkVectorInfo::GetSelVector (5,212,725 samples, 0.01%)</title><rect x="200.1" y="1669" width="0.1" height="15.0" fill="rgb(217,148,50)" rx="2" ry="2" />
<text  x="203.06" y="1679.5" ></text>
</g>
<g >
<title>duckdb::Parser::ParseQuery (1,052,583,362 samples, 2.05%)</title><rect x="517.2" y="1941" width="24.3" height="15.0" fill="rgb(244,46,8)" rx="2" ry="2" />
<text  x="520.24" y="1951.5" >d..</text>
</g>
<g >
<title>__x64_sys_fsync (149,554,036 samples, 0.29%)</title><rect x="249.1" y="1701" width="3.5" height="15.0" fill="rgb(227,36,32)" rx="2" ry="2" />
<text  x="252.12" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnScanState [], std::default_delete&lt;duckdb::ColumnScanState []&gt; &gt;::operator= (7,232,018 samples, 0.01%)</title><rect x="224.7" y="1685" width="0.1" height="15.0" fill="rgb(207,135,23)" rx="2" ry="2" />
<text  x="227.65" y="1695.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (11,471,957 samples, 0.02%)</title><rect x="849.2" y="1733" width="0.2" height="15.0" fill="rgb(241,90,21)" rx="2" ry="2" />
<text  x="852.16" y="1743.5" ></text>
</g>
<g >
<title>duckdb::WriteAheadLog::WriteSetTable (14,752,675 samples, 0.03%)</title><rect x="316.8" y="1733" width="0.3" height="15.0" fill="rgb(215,100,41)" rx="2" ry="2" />
<text  x="319.79" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (5,094,704 samples, 0.01%)</title><rect x="222.2" y="1333" width="0.1" height="15.0" fill="rgb(251,156,40)" rx="2" ry="2" />
<text  x="225.16" y="1343.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (10,277,097 samples, 0.02%)</title><rect x="292.7" y="1621" width="0.3" height="15.0" fill="rgb(205,154,2)" rx="2" ry="2" />
<text  x="295.74" y="1631.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::Executor, duckdb::ClientContext&amp;&gt; (40,267,127 samples, 0.08%)</title><rect x="1099.2" y="1893" width="0.9" height="15.0" fill="rgb(212,82,15)" rx="2" ry="2" />
<text  x="1102.15" y="1903.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::BoundTableRef&gt;::operator (8,274,466 samples, 0.02%)</title><rect x="980.3" y="1685" width="0.2" height="15.0" fill="rgb(241,190,15)" rx="2" ry="2" />
<text  x="983.32" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::release (17,199,918 samples, 0.03%)</title><rect x="771.3" y="1781" width="0.4" height="15.0" fill="rgb(214,36,7)" rx="2" ry="2" />
<text  x="774.31" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_fetch (4,468,507 samples, 0.01%)</title><rect x="488.0" y="1461" width="0.1" height="15.0" fill="rgb(207,138,36)" rx="2" ry="2" />
<text  x="490.99" y="1471.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::EmptyNeedleRemovalRule, std::default_delete&lt;duckdb::EmptyNeedleRemovalRule&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::EmptyNeedleRemovalRule&gt;, void&gt; (5,808,878 samples, 0.01%)</title><rect x="802.7" y="1861" width="0.1" height="15.0" fill="rgb(248,210,4)" rx="2" ry="2" />
<text  x="805.69" y="1871.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Reset (21,853,820 samples, 0.04%)</title><rect x="419.4" y="1845" width="0.5" height="15.0" fill="rgb(233,82,2)" rx="2" ry="2" />
<text  x="422.38" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;, true&gt;::~vector (22,986,002 samples, 0.04%)</title><rect x="1096.2" y="1733" width="0.5" height="15.0" fill="rgb(211,202,31)" rx="2" ry="2" />
<text  x="1099.17" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PipelineExecutor, std::default_delete&lt;duckdb::PipelineExecutor&gt;, true&gt;::reset (158,693,666 samples, 0.31%)</title><rect x="497.9" y="1861" width="3.6" height="15.0" fill="rgb(249,157,10)" rx="2" ry="2" />
<text  x="500.88" y="1871.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::ToStream (324,152,975 samples, 0.63%)</title><rect x="1070.2" y="1781" width="7.5" height="15.0" fill="rgb(209,24,23)" rx="2" ry="2" />
<text  x="1073.24" y="1791.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::FunctionExpressionMatcher (6,176,992 samples, 0.01%)</title><rect x="784.5" y="1829" width="0.1" height="15.0" fill="rgb(220,193,7)" rx="2" ry="2" />
<text  x="787.47" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::operator (4,589,420 samples, 0.01%)</title><rect x="743.4" y="1797" width="0.1" height="15.0" fill="rgb(246,86,42)" rx="2" ry="2" />
<text  x="746.43" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::push_back (13,275,144 samples, 0.03%)</title><rect x="220.2" y="1701" width="0.3" height="15.0" fill="rgb(206,95,48)" rx="2" ry="2" />
<text  x="223.20" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnDataCopyFunction, std::allocator&lt;duckdb::ColumnDataCopyFunction&gt; &gt;::~vector (6,713,839 samples, 0.01%)</title><rect x="1121.9" y="1845" width="0.2" height="15.0" fill="rgb(235,170,25)" rx="2" ry="2" />
<text  x="1124.93" y="1855.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::OrderedAggregateOptimizer, duckdb::ExpressionRewriter&amp;&gt; (16,946,870 samples, 0.03%)</title><rect x="818.7" y="1877" width="0.3" height="15.0" fill="rgb(253,177,32)" rx="2" ry="2" />
<text  x="821.66" y="1887.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::InitializeAppend (79,389,713 samples, 0.15%)</title><rect x="102.8" y="1685" width="1.8" height="15.0" fill="rgb(221,37,20)" rx="2" ry="2" />
<text  x="105.81" y="1695.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::Sink (1,934,684,451 samples, 3.77%)</title><rect x="421.0" y="1829" width="44.5" height="15.0" fill="rgb(234,128,43)" rx="2" ry="2" />
<text  x="423.96" y="1839.5" >duck..</text>
</g>
<g >
<title>duckdb::DuckDBAssertInternal (5,930,663 samples, 0.01%)</title><rect x="660.0" y="1781" width="0.1" height="15.0" fill="rgb(229,170,33)" rx="2" ry="2" />
<text  x="663.01" y="1791.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::SegmentStatistics, duckdb::LogicalType&amp;&gt; (30,176,387 samples, 0.06%)</title><rect x="453.7" y="1509" width="0.7" height="15.0" fill="rgb(244,41,52)" rx="2" ry="2" />
<text  x="456.72" y="1519.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;unsigned int, std::default_delete&lt;unsigned int []&gt; &gt;::_M_ptr (211,399,709 samples, 0.41%)</title><rect x="306.6" y="1509" width="4.9" height="15.0" fill="rgb(231,153,16)" rx="2" ry="2" />
<text  x="309.60" y="1519.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RenderTreeNode&gt;, void&gt; (8,225,516 samples, 0.02%)</title><rect x="551.5" y="1733" width="0.2" height="15.0" fill="rgb(238,173,6)" rx="2" ry="2" />
<text  x="554.55" y="1743.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::ResetFromCache (41,621,432 samples, 0.08%)</title><rect x="292.0" y="1669" width="1.0" height="15.0" fill="rgb(243,18,48)" rx="2" ry="2" />
<text  x="295.04" y="1679.5" ></text>
</g>
<g >
<title>__lsan::ForEachChunk (9,021,364 samples, 0.02%)</title><rect x="1127.3" y="2037" width="0.2" height="15.0" fill="rgb(212,162,16)" rx="2" ry="2" />
<text  x="1130.32" y="2047.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt; &gt;::unique_ptr&lt;duckdb::ArenaAllocatorData, std::default_delete&lt;duckdb::ArenaAllocatorData&gt;, void&gt; (8,400,007 samples, 0.02%)</title><rect x="998.1" y="1589" width="0.2" height="15.0" fill="rgb(220,106,21)" rx="2" ry="2" />
<text  x="1001.13" y="1599.5" ></text>
</g>
<g >
<title>duckdb::ExpressionHeuristics::VisitOperator (44,339,822 samples, 0.09%)</title><rect x="734.3" y="1765" width="1.1" height="15.0" fill="rgb(245,223,19)" rx="2" ry="2" />
<text  x="737.33" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::EqualOrNullSimplification, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (8,301,593 samples, 0.02%)</title><rect x="823.2" y="1877" width="0.2" height="15.0" fill="rgb(205,148,26)" rx="2" ry="2" />
<text  x="826.22" y="1887.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::find (9,536,834 samples, 0.02%)</title><rect x="960.3" y="1621" width="0.2" height="15.0" fill="rgb(217,229,26)" rx="2" ry="2" />
<text  x="963.31" y="1631.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::BlockHandle&gt;::~shared_ptr (348,066,787 samples, 0.68%)</title><rect x="342.0" y="1109" width="8.0" height="15.0" fill="rgb(246,201,33)" rx="2" ry="2" />
<text  x="345.02" y="1119.5" ></text>
</g>
<g >
<title>duckdb::BufferPool::EvictBlocks (6,935,557 samples, 0.01%)</title><rect x="439.6" y="1637" width="0.2" height="15.0" fill="rgb(221,116,18)" rx="2" ry="2" />
<text  x="442.59" y="1647.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Executor, std::default_delete&lt;duckdb::Executor&gt; &gt;::get (5,197,249 samples, 0.01%)</title><rect x="512.2" y="1909" width="0.2" height="15.0" fill="rgb(212,208,20)" rx="2" ry="2" />
<text  x="515.24" y="1919.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_fastpath (8,550,690 samples, 0.02%)</title><rect x="483.3" y="1413" width="0.2" height="15.0" fill="rgb(211,123,6)" rx="2" ry="2" />
<text  x="486.29" y="1423.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; (31,490,367 samples, 0.06%)</title><rect x="1122.2" y="1829" width="0.7" height="15.0" fill="rgb(245,158,35)" rx="2" ry="2" />
<text  x="1125.15" y="1839.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionMatcher&gt;::operator (30,962,599 samples, 0.06%)</title><rect x="829.5" y="1637" width="0.8" height="15.0" fill="rgb(238,64,35)" rx="2" ry="2" />
<text  x="832.55" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (4,428,535 samples, 0.01%)</title><rect x="91.0" y="2005" width="0.1" height="15.0" fill="rgb(246,12,45)" rx="2" ry="2" />
<text  x="93.95" y="2015.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt;, true&gt;::~vector (12,165,082 samples, 0.02%)</title><rect x="758.5" y="1781" width="0.3" height="15.0" fill="rgb(249,171,17)" rx="2" ry="2" />
<text  x="761.55" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (6,086,534 samples, 0.01%)</title><rect x="107.3" y="1429" width="0.1" height="15.0" fill="rgb(242,20,9)" rx="2" ry="2" />
<text  x="110.29" y="1439.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::AppendSegment (62,661,967 samples, 0.12%)</title><rect x="447.2" y="1685" width="1.4" height="15.0" fill="rgb(227,15,53)" rx="2" ry="2" />
<text  x="450.16" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_realloc_insert&lt;unsigned long&amp;, unsigned long&amp;&gt; (41,523,488 samples, 0.08%)</title><rect x="838.1" y="1781" width="1.0" height="15.0" fill="rgb(233,185,31)" rx="2" ry="2" />
<text  x="841.10" y="1791.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::~StandardColumnData (259,728,932 samples, 0.51%)</title><rect x="238.2" y="1013" width="6.0" height="15.0" fill="rgb(241,207,22)" rx="2" ry="2" />
<text  x="241.19" y="1023.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnScanState [], std::default_delete&lt;duckdb::ColumnScanState&gt;, false&gt;::~unique_ptr (43,576,102 samples, 0.08%)</title><rect x="287.7" y="1669" width="1.0" height="15.0" fill="rgb(251,60,8)" rx="2" ry="2" />
<text  x="290.66" y="1679.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::StartPhase (89,816,413 samples, 0.18%)</title><rect x="1023.9" y="1861" width="2.1" height="15.0" fill="rgb(221,132,22)" rx="2" ry="2" />
<text  x="1026.89" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (5,152,824 samples, 0.01%)</title><rect x="967.1" y="1733" width="0.2" height="15.0" fill="rgb(222,137,47)" rx="2" ry="2" />
<text  x="970.15" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (7,595,564 samples, 0.01%)</title><rect x="38.8" y="2005" width="0.1" height="15.0" fill="rgb(235,197,23)" rx="2" ry="2" />
<text  x="41.76" y="2015.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::GlobalSourceState, std::default_delete&lt;duckdb::GlobalSourceState&gt;, true&gt;::operator= (9,857,430 samples, 0.02%)</title><rect x="92.6" y="1717" width="0.2" height="15.0" fill="rgb(207,152,15)" rx="2" ry="2" />
<text  x="95.61" y="1727.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::SQLStatement&gt;::operator (63,639,057 samples, 0.12%)</title><rect x="1037.9" y="1861" width="1.5" height="15.0" fill="rgb(233,213,52)" rx="2" ry="2" />
<text  x="1040.93" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::MoveConstantsRule, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (16,991,370 samples, 0.03%)</title><rect x="823.9" y="1877" width="0.4" height="15.0" fill="rgb(234,12,27)" rx="2" ry="2" />
<text  x="826.91" y="1887.5" ></text>
</g>
<g >
<title>on_each_cpu_cond_mask (8,409,674 samples, 0.02%)</title><rect x="167.7" y="1845" width="0.1" height="15.0" fill="rgb(243,193,17)" rx="2" ry="2" />
<text  x="170.65" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (63,749,513 samples, 0.12%)</title><rect x="492.7" y="1525" width="1.5" height="15.0" fill="rgb(211,156,17)" rx="2" ry="2" />
<text  x="495.75" y="1535.5" ></text>
</g>
<g >
<title>duckdb::Vector::Vector (18,211,237 samples, 0.04%)</title><rect x="402.8" y="1733" width="0.4" height="15.0" fill="rgb(214,158,34)" rx="2" ry="2" />
<text  x="405.81" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_impl (6,824,337 samples, 0.01%)</title><rect x="325.9" y="1317" width="0.2" height="15.0" fill="rgb(233,21,3)" rx="2" ry="2" />
<text  x="328.94" y="1327.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::EndPhase (53,831,719 samples, 0.10%)</title><rect x="1032.1" y="1893" width="1.3" height="15.0" fill="rgb(222,229,45)" rx="2" ry="2" />
<text  x="1035.12" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt; &gt; &gt;::resize (18,656,282 samples, 0.04%)</title><rect x="480.2" y="1797" width="0.4" height="15.0" fill="rgb(206,187,4)" rx="2" ry="2" />
<text  x="483.15" y="1807.5" ></text>
</g>
<g >
<title>std::function&lt;void  (29,892,875 samples, 0.06%)</title><rect x="548.5" y="1605" width="0.7" height="15.0" fill="rgb(221,108,0)" rx="2" ry="2" />
<text  x="551.52" y="1615.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_malloc (16,647,309 samples, 0.03%)</title><rect x="103.2" y="1381" width="0.4" height="15.0" fill="rgb(234,26,23)" rx="2" ry="2" />
<text  x="106.17" y="1391.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorCacheBuffer,  (18,788,291 samples, 0.04%)</title><rect x="107.3" y="1637" width="0.4" height="15.0" fill="rgb(231,168,34)" rx="2" ry="2" />
<text  x="110.28" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (8,774,021 samples, 0.02%)</title><rect x="675.5" y="1765" width="0.2" height="15.0" fill="rgb(227,39,31)" rx="2" ry="2" />
<text  x="678.45" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::NumberOfThreads (6,623,716 samples, 0.01%)</title><rect x="854.3" y="1813" width="0.2" height="15.0" fill="rgb(234,122,6)" rx="2" ry="2" />
<text  x="857.33" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (5,721,012 samples, 0.01%)</title><rect x="36.5" y="2005" width="0.1" height="15.0" fill="rgb(215,42,53)" rx="2" ry="2" />
<text  x="39.51" y="2015.5" ></text>
</g>
<g >
<title>duckdb::InsertBinder::BindExpression (43,858,876 samples, 0.09%)</title><rect x="933.7" y="1701" width="1.0" height="15.0" fill="rgb(238,133,8)" rx="2" ry="2" />
<text  x="936.70" y="1711.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::RegisterOperators (16,758,999 samples, 0.03%)</title><rect x="1110.1" y="1909" width="0.3" height="15.0" fill="rgb(233,203,1)" rx="2" ry="2" />
<text  x="1113.05" y="1919.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; (12,373,593 samples, 0.02%)</title><rect x="755.0" y="1701" width="0.3" height="15.0" fill="rgb(210,228,28)" rx="2" ry="2" />
<text  x="758.01" y="1711.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::PipelineFinishEvent, std::allocator&lt;duckdb::PipelineFinishEvent&gt;,  (40,527,806 samples, 0.08%)</title><rect x="355.7" y="1701" width="0.9" height="15.0" fill="rgb(241,108,40)" rx="2" ry="2" />
<text  x="358.70" y="1711.5" ></text>
</g>
<g >
<title>duckdb::BaseQueryResult::BaseQueryResult (5,966,247 samples, 0.01%)</title><rect x="387.8" y="1877" width="0.1" height="15.0" fill="rgb(232,151,40)" rx="2" ry="2" />
<text  x="390.75" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;duckdb::ColumnBinding, true&gt; &gt; &gt;::operator (4,632,837 samples, 0.01%)</title><rect x="725.7" y="1589" width="0.1" height="15.0" fill="rgb(243,14,36)" rx="2" ry="2" />
<text  x="728.66" y="1599.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::Pipeline, std::allocator&lt;duckdb::Pipeline&gt;,  (25,978,764 samples, 0.05%)</title><rect x="356.0" y="1557" width="0.6" height="15.0" fill="rgb(229,219,31)" rx="2" ry="2" />
<text  x="359.04" y="1567.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ConjunctionExpressionMatcher, std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt; &gt;::__uniq_ptr_impl (6,945,615 samples, 0.01%)</title><rect x="792.8" y="1797" width="0.1" height="15.0" fill="rgb(230,93,51)" rx="2" ry="2" />
<text  x="795.76" y="1807.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (8,808,730 samples, 0.02%)</title><rect x="1175.6" y="2021" width="0.2" height="15.0" fill="rgb(211,191,13)" rx="2" ry="2" />
<text  x="1178.56" y="2031.5" ></text>
</g>
<g >
<title>account_page_dirtied (4,428,383 samples, 0.01%)</title><rect x="248.6" y="1445" width="0.1" height="15.0" fill="rgb(242,115,47)" rx="2" ry="2" />
<text  x="251.56" y="1455.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::ToStream (223,583,282 samples, 0.44%)</title><rect x="836.0" y="1845" width="5.2" height="15.0" fill="rgb(239,5,17)" rx="2" ry="2" />
<text  x="839.03" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::~vector (4,652,359 samples, 0.01%)</title><rect x="639.4" y="1653" width="0.1" height="15.0" fill="rgb(230,224,49)" rx="2" ry="2" />
<text  x="642.39" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::push_back (13,615,612 samples, 0.03%)</title><rect x="802.4" y="1845" width="0.3" height="15.0" fill="rgb(232,194,21)" rx="2" ry="2" />
<text  x="805.36" y="1855.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateTree (90,047,237 samples, 0.18%)</title><rect x="833.9" y="1845" width="2.1" height="15.0" fill="rgb(230,42,16)" rx="2" ry="2" />
<text  x="836.94" y="1855.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::FileBuffer, duckdb::Allocator&amp;, duckdb::FileBufferType&amp;, unsigned long&amp;&gt; (109,661,204 samples, 0.21%)</title><rect x="436.7" y="1637" width="2.5" height="15.0" fill="rgb(226,154,4)" rx="2" ry="2" />
<text  x="439.68" y="1647.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::CreateTree (168,281,031 samples, 0.33%)</title><rect x="1085.4" y="1845" width="3.9" height="15.0" fill="rgb(224,33,8)" rx="2" ry="2" />
<text  x="1088.40" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (9,526,251 samples, 0.02%)</title><rect x="243.1" y="453" width="0.3" height="15.0" fill="rgb(251,135,50)" rx="2" ry="2" />
<text  x="246.13" y="463.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::Append (161,344,065 samples, 0.31%)</title><rect x="862.7" y="1781" width="3.8" height="15.0" fill="rgb(238,26,30)" rx="2" ry="2" />
<text  x="865.74" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (35,386,134 samples, 0.07%)</title><rect x="13.9" y="1989" width="0.8" height="15.0" fill="rgb(250,175,30)" rx="2" ry="2" />
<text  x="16.87" y="1999.5" ></text>
</g>
<g >
<title>duckdb::PreservedError::operator bool (4,991,883 samples, 0.01%)</title><rect x="514.9" y="1909" width="0.1" height="15.0" fill="rgb(239,221,24)" rx="2" ry="2" />
<text  x="517.87" y="1919.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;duckdb::ColumnBinding const&amp;&gt;, std::tuple&lt;&gt; &gt; (9,840,018 samples, 0.02%)</title><rect x="763.5" y="1621" width="0.3" height="15.0" fill="rgb(229,35,12)" rx="2" ry="2" />
<text  x="766.53" y="1631.5" ></text>
</g>
<g >
<title>duckdb::CleanupState::~CleanupState (22,321,608 samples, 0.04%)</title><rect x="321.4" y="1781" width="0.5" height="15.0" fill="rgb(252,218,46)" rx="2" ry="2" />
<text  x="324.39" y="1791.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::FinalizeAppend (545,169,100 samples, 1.06%)</title><rect x="406.1" y="1717" width="12.5" height="15.0" fill="rgb(232,101,16)" rx="2" ry="2" />
<text  x="409.05" y="1727.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::~FunctionExpressionMatcher (27,373,808 samples, 0.05%)</title><rect x="829.6" y="1605" width="0.6" height="15.0" fill="rgb(207,122,0)" rx="2" ry="2" />
<text  x="832.60" y="1615.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::operator unsigned long (8,023,597 samples, 0.02%)</title><rect x="511.7" y="1909" width="0.1" height="15.0" fill="rgb(235,153,8)" rx="2" ry="2" />
<text  x="514.66" y="1919.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (15,362,036 samples, 0.03%)</title><rect x="714.9" y="1829" width="0.4" height="15.0" fill="rgb(211,91,8)" rx="2" ry="2" />
<text  x="717.93" y="1839.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorBuffer&gt; &gt;::construct&lt;duckdb::VectorBuffer, unsigned long&gt; (14,636,145 samples, 0.03%)</title><rect x="901.7" y="1525" width="0.3" height="15.0" fill="rgb(209,45,42)" rx="2" ry="2" />
<text  x="904.67" y="1535.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::GetScheduler (5,516,183 samples, 0.01%)</title><rect x="509.4" y="1909" width="0.1" height="15.0" fill="rgb(212,56,22)" rx="2" ry="2" />
<text  x="512.41" y="1919.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; &gt;::~unordered_map (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1125" width="0.3" height="15.0" fill="rgb(223,162,37)" rx="2" ry="2" />
<text  x="1120.47" y="1135.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt;, duckdb::LogicalType*&gt; (7,947,554 samples, 0.02%)</title><rect x="1045.2" y="1829" width="0.2" height="15.0" fill="rgb(210,109,30)" rx="2" ry="2" />
<text  x="1048.19" y="1839.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::Pipeline, std::allocator&lt;duckdb::Pipeline&gt;,  (19,936,299 samples, 0.04%)</title><rect x="1093.9" y="1621" width="0.5" height="15.0" fill="rgb(234,134,7)" rx="2" ry="2" />
<text  x="1096.91" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::_M_realloc_insert&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; (12,046,035 samples, 0.02%)</title><rect x="1066.1" y="1717" width="0.3" height="15.0" fill="rgb(216,129,40)" rx="2" ry="2" />
<text  x="1069.09" y="1727.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::Register&lt;duckdb::PragmaFunctions&gt; (9,585,929 samples, 0.02%)</title><rect x="1110.4" y="1893" width="0.3" height="15.0" fill="rgb(234,194,34)" rx="2" ry="2" />
<text  x="1113.44" y="1903.5" ></text>
</g>
<g >
<title>duckdb::SelectionVector::~SelectionVector (10,036,289 samples, 0.02%)</title><rect x="292.3" y="1509" width="0.2" height="15.0" fill="rgb(215,75,23)" rx="2" ry="2" />
<text  x="295.26" y="1519.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::SelectStatement, std::default_delete&lt;duckdb::SelectStatement&gt; &gt;::__uniq_ptr_impl (6,652,359 samples, 0.01%)</title><rect x="536.7" y="1749" width="0.1" height="15.0" fill="rgb(223,218,48)" rx="2" ry="2" />
<text  x="539.66" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;::unique_ptr (5,821,708 samples, 0.01%)</title><rect x="490.7" y="1669" width="0.1" height="15.0" fill="rgb(213,121,37)" rx="2" ry="2" />
<text  x="493.67" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_nodes (32,662,323 samples, 0.06%)</title><rect x="670.1" y="1733" width="0.8" height="15.0" fill="rgb(218,73,7)" rx="2" ry="2" />
<text  x="673.15" y="1743.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (10,493,887 samples, 0.02%)</title><rect x="631.1" y="1685" width="0.3" height="15.0" fill="rgb(229,91,9)" rx="2" ry="2" />
<text  x="634.14" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_fastpath (9,873,202 samples, 0.02%)</title><rect x="298.3" y="1381" width="0.2" height="15.0" fill="rgb(211,65,5)" rx="2" ry="2" />
<text  x="301.25" y="1391.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*&gt; (8,211,913 samples, 0.02%)</title><rect x="830.0" y="1541" width="0.1" height="15.0" fill="rgb(227,149,40)" rx="2" ry="2" />
<text  x="832.95" y="1551.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (8,772,813 samples, 0.02%)</title><rect x="701.1" y="1845" width="0.2" height="15.0" fill="rgb(208,90,19)" rx="2" ry="2" />
<text  x="704.08" y="1855.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (21,637,559 samples, 0.04%)</title><rect x="729.3" y="1685" width="0.5" height="15.0" fill="rgb(228,124,1)" rx="2" ry="2" />
<text  x="732.34" y="1695.5" ></text>
</g>
<g >
<title>duckdb::DuckCatalog::~DuckCatalog (15,089,061 samples, 0.03%)</title><rect x="1117.5" y="1669" width="0.3" height="15.0" fill="rgb(212,54,46)" rx="2" ry="2" />
<text  x="1120.47" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::reserve (4,461,324 samples, 0.01%)</title><rect x="358.5" y="1877" width="0.1" height="15.0" fill="rgb(244,2,12)" rx="2" ry="2" />
<text  x="361.47" y="1887.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (44,300,533 samples, 0.09%)</title><rect x="725.1" y="1749" width="1.0" height="15.0" fill="rgb(216,167,26)" rx="2" ry="2" />
<text  x="728.09" y="1759.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (19,327,164 samples, 0.04%)</title><rect x="1034.3" y="1877" width="0.4" height="15.0" fill="rgb(216,119,24)" rx="2" ry="2" />
<text  x="1037.29" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::emplace_back&lt;unsigned long&amp;, unsigned long&amp;&gt; (362,845,747 samples, 0.71%)</title><rect x="562.9" y="1781" width="8.4" height="15.0" fill="rgb(215,186,37)" rx="2" ry="2" />
<text  x="565.90" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TaskScheduler, std::default_delete&lt;duckdb::TaskScheduler&gt;, true&gt;::operator* (27,016,328 samples, 0.05%)</title><rect x="502.5" y="1845" width="0.6" height="15.0" fill="rgb(230,165,29)" rx="2" ry="2" />
<text  x="505.52" y="1855.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::ColumnDataAllocator&gt; &gt;::construct&lt;duckdb::ColumnDataAllocator, duckdb::Allocator&amp;&gt; (7,767,028 samples, 0.02%)</title><rect x="386.8" y="1797" width="0.2" height="15.0" fill="rgb(243,68,44)" rx="2" ry="2" />
<text  x="389.79" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::~vector (7,874,439 samples, 0.02%)</title><rect x="351.2" y="1669" width="0.2" height="15.0" fill="rgb(235,206,7)" rx="2" ry="2" />
<text  x="354.17" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::operator= (4,739,804 samples, 0.01%)</title><rect x="785.4" y="1845" width="0.1" height="15.0" fill="rgb(213,144,15)" rx="2" ry="2" />
<text  x="788.43" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;duckdb::CompressionType, std::pair&lt;duckdb::CompressionType const, std::map&lt;duckdb::PhysicalType, duckdb::CompressionFunction, std::less&lt;duckdb::PhysicalType&gt;, std::allocator&lt;std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;duckdb::CompressionType const, std::map&lt;duckdb::PhysicalType, duckdb::CompressionFunction, std::less&lt;duckdb::PhysicalType&gt;, std::allocator&lt;std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt; &gt; &gt; &gt; &gt;, std::less&lt;duckdb::CompressionType&gt;, std::allocator&lt;std::pair&lt;duckdb::CompressionType const, std::map&lt;duckdb::PhysicalType, duckdb::CompressionFunction, std::less&lt;duckdb::PhysicalType&gt;, std::allocator&lt;std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt; &gt; &gt; &gt; &gt; &gt;::find (18,607,924 samples, 0.04%)</title><rect x="435.1" y="1621" width="0.4" height="15.0" fill="rgb(227,223,31)" rx="2" ry="2" />
<text  x="438.06" y="1631.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::~BufferHandle (45,927,718 samples, 0.09%)</title><rect x="861.6" y="1621" width="1.1" height="15.0" fill="rgb(212,59,7)" rx="2" ry="2" />
<text  x="864.60" y="1631.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalExpressionGet, std::default_delete&lt;duckdb::LogicalExpressionGet&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::LogicalExpressionGet&gt;, void&gt; (6,470,479 samples, 0.01%)</title><rect x="975.6" y="1717" width="0.1" height="15.0" fill="rgb(251,214,32)" rx="2" ry="2" />
<text  x="978.56" y="1727.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::end (8,865,520 samples, 0.02%)</title><rect x="663.5" y="1781" width="0.2" height="15.0" fill="rgb(232,161,5)" rx="2" ry="2" />
<text  x="666.52" y="1791.5" ></text>
</g>
<g >
<title>duckdb::BlockHandle::BlockHandle (10,203,431 samples, 0.02%)</title><rect x="441.3" y="1525" width="0.2" height="15.0" fill="rgb(246,26,18)" rx="2" ry="2" />
<text  x="444.26" y="1535.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::~AllocatedData (64,354,442 samples, 0.13%)</title><rect x="896.2" y="1525" width="1.5" height="15.0" fill="rgb(210,126,14)" rx="2" ry="2" />
<text  x="899.22" y="1535.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::ColumnDataAllocator (4,800,834 samples, 0.01%)</title><rect x="386.8" y="1765" width="0.1" height="15.0" fill="rgb(205,219,19)" rx="2" ry="2" />
<text  x="389.79" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Binder::CastLogicalOperatorToTypes (11,264,917 samples, 0.02%)</title><rect x="984.4" y="1829" width="0.2" height="15.0" fill="rgb(230,39,12)" rx="2" ry="2" />
<text  x="987.38" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, unsigned long, std::__detail::_Identity, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (4,453,477 samples, 0.01%)</title><rect x="688.5" y="1781" width="0.2" height="15.0" fill="rgb(205,148,24)" rx="2" ry="2" />
<text  x="691.55" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (78,833,861 samples, 0.15%)</title><rect x="486.7" y="1621" width="1.8" height="15.0" fill="rgb(215,43,49)" rx="2" ry="2" />
<text  x="489.69" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LogicalProjection::GetTableIndex (80,549,090 samples, 0.16%)</title><rect x="671.6" y="1797" width="1.9" height="15.0" fill="rgb(207,106,4)" rx="2" ry="2" />
<text  x="674.64" y="1807.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Pipeline&gt; &gt;::destroy&lt;duckdb::Pipeline&gt; (25,762,272 samples, 0.05%)</title><rect x="357.6" y="1685" width="0.6" height="15.0" fill="rgb(250,91,12)" rx="2" ry="2" />
<text  x="360.60" y="1695.5" ></text>
</g>
<g >
<title>do_page_fault (18,557,475 samples, 0.04%)</title><rect x="1131.3" y="2005" width="0.4" height="15.0" fill="rgb(216,0,35)" rx="2" ry="2" />
<text  x="1134.29" y="2015.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QualifyBinder, std::default_delete&lt;duckdb::QualifyBinder&gt;, true&gt;::unique_ptr (5,702,229 samples, 0.01%)</title><rect x="964.9" y="1749" width="0.1" height="15.0" fill="rgb(215,54,40)" rx="2" ry="2" />
<text  x="967.90" y="1759.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_allocate (11,531,195 samples, 0.02%)</title><rect x="84.2" y="2021" width="0.3" height="15.0" fill="rgb(218,52,17)" rx="2" ry="2" />
<text  x="87.19" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (8,133,776 samples, 0.02%)</title><rect x="472.0" y="1701" width="0.2" height="15.0" fill="rgb(253,127,29)" rx="2" ry="2" />
<text  x="474.97" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::BeginTransactionInternal (85,044,135 samples, 0.17%)</title><rect x="542.6" y="1909" width="1.9" height="15.0" fill="rgb(223,61,25)" rx="2" ry="2" />
<text  x="545.56" y="1919.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt;*&gt; (29,295,516 samples, 0.06%)</title><rect x="236.2" y="1477" width="0.7" height="15.0" fill="rgb(238,203,32)" rx="2" ry="2" />
<text  x="239.24" y="1487.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (23,939,969 samples, 0.05%)</title><rect x="843.9" y="1797" width="0.5" height="15.0" fill="rgb(254,165,7)" rx="2" ry="2" />
<text  x="846.86" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (19,764,879 samples, 0.04%)</title><rect x="1050.0" y="1749" width="0.4" height="15.0" fill="rgb(211,99,25)" rx="2" ry="2" />
<text  x="1052.96" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::ConstantFoldingExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (20,717,105 samples, 0.04%)</title><rect x="795.6" y="1845" width="0.4" height="15.0" fill="rgb(221,133,53)" rx="2" ry="2" />
<text  x="798.55" y="1855.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::__uniq_ptr_impl (4,852,905 samples, 0.01%)</title><rect x="986.4" y="1781" width="0.2" height="15.0" fill="rgb(205,121,10)" rx="2" ry="2" />
<text  x="989.44" y="1791.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::insert (35,110,848 samples, 0.07%)</title><rect x="1018.9" y="1829" width="0.8" height="15.0" fill="rgb(222,211,14)" rx="2" ry="2" />
<text  x="1021.94" y="1839.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::unordered_set (18,742,955 samples, 0.04%)</title><rect x="695.8" y="1813" width="0.4" height="15.0" fill="rgb(251,107,49)" rx="2" ry="2" />
<text  x="698.79" y="1823.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::PipelineCompleteEvent, std::allocator&lt;duckdb::PipelineCompleteEvent&gt;, duckdb::Executor&amp;, bool&amp;&gt; (20,838,144 samples, 0.04%)</title><rect x="1049.4" y="1797" width="0.4" height="15.0" fill="rgb(217,11,41)" rx="2" ry="2" />
<text  x="1052.36" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned char [], std::default_delete&lt;unsigned char&gt;, false&gt;::operator= (5,741,100 samples, 0.01%)</title><rect x="591.1" y="1733" width="0.1" height="15.0" fill="rgb(234,143,17)" rx="2" ry="2" />
<text  x="594.08" y="1743.5" ></text>
</g>
<g >
<title>pthread_getspecific (26,441,839 samples, 0.05%)</title><rect x="21.1" y="2005" width="0.6" height="15.0" fill="rgb(213,87,18)" rx="2" ry="2" />
<text  x="24.12" y="2015.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, false&gt; &gt;::construct&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;duckdb::AttachedDatabase*&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (4,783,757 samples, 0.01%)</title><rect x="991.9" y="1573" width="0.1" height="15.0" fill="rgb(213,76,22)" rx="2" ry="2" />
<text  x="994.87" y="1583.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt;, true&gt;::operator= (18,199,386 samples, 0.04%)</title><rect x="786.6" y="1845" width="0.4" height="15.0" fill="rgb(216,45,41)" rx="2" ry="2" />
<text  x="789.61" y="1855.5" ></text>
</g>
<g >
<title>__vma_adjust (11,008,335 samples, 0.02%)</title><rect x="1173.6" y="1893" width="0.3" height="15.0" fill="rgb(209,77,5)" rx="2" ry="2" />
<text  x="1176.60" y="1903.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorBuffer, std::allocator&lt;duckdb::VectorBuffer&gt;,  (19,244,068 samples, 0.04%)</title><rect x="901.6" y="1541" width="0.4" height="15.0" fill="rgb(226,189,35)" rx="2" ry="2" />
<text  x="904.56" y="1551.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; (10,968,509 samples, 0.02%)</title><rect x="328.2" y="1781" width="0.2" height="15.0" fill="rgb(207,33,43)" rx="2" ry="2" />
<text  x="331.16" y="1791.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Pin (6,766,568 samples, 0.01%)</title><rect x="196.8" y="1653" width="0.2" height="15.0" fill="rgb(227,198,20)" rx="2" ry="2" />
<text  x="199.84" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; (184,878,097 samples, 0.36%)</title><rect x="829.2" y="1781" width="4.2" height="15.0" fill="rgb(218,195,44)" rx="2" ry="2" />
<text  x="832.18" y="1791.5" ></text>
</g>
<g >
<title>duckdb::LogicalDummyScan::ResolveTypes (22,283,139 samples, 0.04%)</title><rect x="847.5" y="1813" width="0.5" height="15.0" fill="rgb(248,117,0)" rx="2" ry="2" />
<text  x="850.53" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (10,494,159 samples, 0.02%)</title><rect x="896.9" y="1397" width="0.3" height="15.0" fill="rgb(238,186,8)" rx="2" ry="2" />
<text  x="899.92" y="1407.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;*&gt; (27,220,437 samples, 0.05%)</title><rect x="499.8" y="1557" width="0.7" height="15.0" fill="rgb(253,140,2)" rx="2" ry="2" />
<text  x="502.84" y="1567.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_default_append (71,450,513 samples, 0.14%)</title><rect x="577.1" y="1781" width="1.6" height="15.0" fill="rgb(236,176,54)" rx="2" ry="2" />
<text  x="580.06" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::StorageCommitState, std::default_delete&lt;duckdb::StorageCommitState&gt; &gt;::release (5,163,779 samples, 0.01%)</title><rect x="318.0" y="1781" width="0.1" height="15.0" fill="rgb(248,203,16)" rx="2" ry="2" />
<text  x="320.98" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::~unique_ptr (5,098,222 samples, 0.01%)</title><rect x="948.4" y="1605" width="0.1" height="15.0" fill="rgb(207,78,35)" rx="2" ry="2" />
<text  x="951.38" y="1615.5" ></text>
</g>
<g >
<title>duckdb::AdjustTextForRendering (97,717,311 samples, 0.19%)</title><rect x="636.7" y="1749" width="2.2" height="15.0" fill="rgb(216,187,45)" rx="2" ry="2" />
<text  x="639.69" y="1759.5" ></text>
</g>
<g >
<title>duckdb::JoinOrderOptimizer::Optimize (337,910,299 samples, 0.66%)</title><rect x="752.8" y="1813" width="7.8" height="15.0" fill="rgb(222,202,54)" rx="2" ry="2" />
<text  x="755.82" y="1823.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::lcons (4,505,495 samples, 0.01%)</title><rect x="523.7" y="1861" width="0.1" height="15.0" fill="rgb(217,14,33)" rx="2" ry="2" />
<text  x="526.74" y="1871.5" ></text>
</g>
<g >
<title>duckdb::CollectionScanState::Initialize (35,123,850 samples, 0.07%)</title><rect x="299.0" y="1685" width="0.9" height="15.0" fill="rgb(208,107,34)" rx="2" ry="2" />
<text  x="302.05" y="1695.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::Reset (68,624,384 samples, 0.13%)</title><rect x="1123.1" y="1621" width="1.6" height="15.0" fill="rgb(238,171,10)" rx="2" ry="2" />
<text  x="1126.14" y="1631.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::UsingColumnSet, std::default_delete&lt;duckdb::UsingColumnSet&gt;, true&gt;, true&gt;::~vector (4,394,789 samples, 0.01%)</title><rect x="1016.3" y="1685" width="0.1" height="15.0" fill="rgb(220,129,40)" rx="2" ry="2" />
<text  x="1019.28" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (7,009,467 samples, 0.01%)</title><rect x="229.5" y="1637" width="0.2" height="15.0" fill="rgb(223,214,54)" rx="2" ry="2" />
<text  x="232.52" y="1647.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, unsigned long&amp;, unsigned long&amp;&gt; (19,320,257 samples, 0.04%)</title><rect x="566.4" y="1749" width="0.5" height="15.0" fill="rgb(236,63,1)" rx="2" ry="2" />
<text  x="569.44" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ExpressionHeuristics::Rewrite (56,076,673 samples, 0.11%)</title><rect x="734.2" y="1813" width="1.3" height="15.0" fill="rgb(227,47,54)" rx="2" ry="2" />
<text  x="737.21" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ClientContextLock, std::default_delete&lt;duckdb::ClientContextLock&gt; &gt;::~unique_ptr (5,086,743 samples, 0.01%)</title><rect x="1106.7" y="1957" width="0.1" height="15.0" fill="rgb(247,220,54)" rx="2" ry="2" />
<text  x="1109.66" y="1967.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::operator= (5,344,547 samples, 0.01%)</title><rect x="1014.6" y="1829" width="0.1" height="15.0" fill="rgb(207,192,45)" rx="2" ry="2" />
<text  x="1017.56" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BoundConstantExpression::BoundConstantExpression (7,162,828 samples, 0.01%)</title><rect x="934.1" y="1637" width="0.1" height="15.0" fill="rgb(226,76,14)" rx="2" ry="2" />
<text  x="937.07" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (7,047,815 samples, 0.01%)</title><rect x="1003.0" y="1669" width="0.2" height="15.0" fill="rgb(205,0,41)" rx="2" ry="2" />
<text  x="1006.03" y="1679.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (12,428,098 samples, 0.02%)</title><rect x="712.4" y="1829" width="0.3" height="15.0" fill="rgb(227,34,44)" rx="2" ry="2" />
<text  x="715.42" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt;::unique_ptr&lt;duckdb::ValidityScanState, std::default_delete&lt;duckdb::ValidityScanState&gt;, void&gt; (4,445,000 samples, 0.01%)</title><rect x="268.3" y="1557" width="0.1" height="15.0" fill="rgb(233,152,17)" rx="2" ry="2" />
<text  x="271.34" y="1567.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::isalloc (7,629,284 samples, 0.01%)</title><rect x="487.6" y="1445" width="0.2" height="15.0" fill="rgb(208,55,47)" rx="2" ry="2" />
<text  x="490.61" y="1455.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (22,814,729 samples, 0.04%)</title><rect x="41.9" y="2021" width="0.5" height="15.0" fill="rgb(242,74,24)" rx="2" ry="2" />
<text  x="44.88" y="2031.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundExpressionListRef, std::default_delete&lt;duckdb::BoundExpressionListRef&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BoundExpressionListRef&gt;, void&gt; (4,967,526 samples, 0.01%)</title><rect x="937.9" y="1701" width="0.2" height="15.0" fill="rgb(208,226,23)" rx="2" ry="2" />
<text  x="940.94" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (21,969,620 samples, 0.04%)</title><rect x="331.0" y="1829" width="0.5" height="15.0" fill="rgb(218,107,37)" rx="2" ry="2" />
<text  x="333.97" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1381" width="0.1" height="15.0" fill="rgb(212,0,34)" rx="2" ry="2" />
<text  x="14.25" y="1391.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1685" width="0.1" height="15.0" fill="rgb(237,160,37)" rx="2" ry="2" />
<text  x="14.25" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (10,304,547 samples, 0.02%)</title><rect x="1015.5" y="1813" width="0.3" height="15.0" fill="rgb(211,41,5)" rx="2" ry="2" />
<text  x="1018.53" y="1823.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (5,839,878 samples, 0.01%)</title><rect x="11.8" y="1973" width="0.1" height="15.0" fill="rgb(205,15,16)" rx="2" ry="2" />
<text  x="14.81" y="1983.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ExtraValueInfo,  (9,272,827 samples, 0.02%)</title><rect x="528.5" y="1653" width="0.3" height="15.0" fill="rgb(226,121,23)" rx="2" ry="2" />
<text  x="531.54" y="1663.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::iallocztm (4,547,528 samples, 0.01%)</title><rect x="289.7" y="1365" width="0.1" height="15.0" fill="rgb(223,50,3)" rx="2" ry="2" />
<text  x="292.74" y="1375.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (7,413,524 samples, 0.01%)</title><rect x="166.0" y="1893" width="0.1" height="15.0" fill="rgb(246,98,46)" rx="2" ry="2" />
<text  x="168.96" y="1903.5" ></text>
</g>
<g >
<title>exit_mmap (92,489,977 samples, 0.18%)</title><rect x="1177.6" y="1941" width="2.1" height="15.0" fill="rgb(250,6,27)" rx="2" ry="2" />
<text  x="1180.60" y="1951.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::resize (22,311,502 samples, 0.04%)</title><rect x="840.1" y="1813" width="0.5" height="15.0" fill="rgb(226,183,33)" rx="2" ry="2" />
<text  x="843.09" y="1823.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;*, std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;*, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt; &gt; &gt; (4,561,790 samples, 0.01%)</title><rect x="1065.0" y="1717" width="0.1" height="15.0" fill="rgb(234,44,47)" rx="2" ry="2" />
<text  x="1067.99" y="1727.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::PipelineEvent, std::allocator&lt;duckdb::PipelineEvent&gt;,  (11,876,649 samples, 0.02%)</title><rect x="1050.0" y="1733" width="0.3" height="15.0" fill="rgb(246,22,29)" rx="2" ry="2" />
<text  x="1053.04" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TableRef, std::default_delete&lt;duckdb::TableRef&gt;, true&gt;::~unique_ptr (34,642,152 samples, 0.07%)</title><rect x="971.6" y="1765" width="0.8" height="15.0" fill="rgb(214,211,11)" rx="2" ry="2" />
<text  x="974.57" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (15,179,793 samples, 0.03%)</title><rect x="669.4" y="1733" width="0.4" height="15.0" fill="rgb(241,4,30)" rx="2" ry="2" />
<text  x="672.43" y="1743.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionInfo&gt;::operator (5,087,607 samples, 0.01%)</title><rect x="500.1" y="1269" width="0.1" height="15.0" fill="rgb(212,6,25)" rx="2" ry="2" />
<text  x="503.11" y="1279.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CastFunctionSet, std::default_delete&lt;duckdb::CastFunctionSet&gt;, true&gt;::operator* (4,829,818 samples, 0.01%)</title><rect x="933.2" y="1685" width="0.1" height="15.0" fill="rgb(241,104,22)" rx="2" ry="2" />
<text  x="936.21" y="1695.5" ></text>
</g>
<g >
<title>duckdb::PhysicalColumnDataScanState::~PhysicalColumnDataScanState (13,706,739 samples, 0.03%)</title><rect x="356.1" y="1445" width="0.3" height="15.0" fill="rgb(211,16,3)" rx="2" ry="2" />
<text  x="359.12" y="1455.5" ></text>
</g>
<g >
<title>jbd2_log_start_commit (6,623,851 samples, 0.01%)</title><rect x="252.1" y="1621" width="0.2" height="15.0" fill="rgb(228,139,49)" rx="2" ry="2" />
<text  x="255.11" y="1631.5" ></text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (7,641,959 samples, 0.01%)</title><rect x="22.3" y="2005" width="0.2" height="15.0" fill="rgb(211,121,8)" rx="2" ry="2" />
<text  x="25.31" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_realloc_insert&lt;unsigned long const&amp;&gt; (10,041,955 samples, 0.02%)</title><rect x="1056.3" y="1781" width="0.2" height="15.0" fill="rgb(221,144,23)" rx="2" ry="2" />
<text  x="1059.26" y="1791.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::LocalStorage&gt;::operator (11,402,788 samples, 0.02%)</title><rect x="327.2" y="1589" width="0.3" height="15.0" fill="rgb(227,2,0)" rx="2" ry="2" />
<text  x="330.22" y="1599.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt; (31,522,561 samples, 0.06%)</title><rect x="499.8" y="1669" width="0.7" height="15.0" fill="rgb(229,133,19)" rx="2" ry="2" />
<text  x="502.80" y="1679.5" ></text>
</g>
<g >
<title>duckdb::Binder::ReplaceStarExpression (52,745,845 samples, 0.10%)</title><rect x="945.9" y="1717" width="1.2" height="15.0" fill="rgb(238,118,47)" rx="2" ry="2" />
<text  x="948.90" y="1727.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Event&gt;::~shared_ptr (96,255,609 samples, 0.19%)</title><rect x="355.2" y="1765" width="2.2" height="15.0" fill="rgb(249,160,27)" rx="2" ry="2" />
<text  x="358.15" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTree&lt;duckdb::LogicalOperator&gt; (76,779,782 samples, 0.15%)</title><rect x="634.3" y="1765" width="1.8" height="15.0" fill="rgb(249,1,44)" rx="2" ry="2" />
<text  x="637.32" y="1775.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (92,048,930 samples, 0.18%)</title><rect x="738.7" y="1669" width="2.1" height="15.0" fill="rgb(212,71,24)" rx="2" ry="2" />
<text  x="741.68" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::PhysicalIndex, std::allocator&lt;duckdb::PhysicalIndex&gt; &gt;::~vector (4,363,204 samples, 0.01%)</title><rect x="350.4" y="1589" width="0.1" height="15.0" fill="rgb(229,116,27)" rx="2" ry="2" />
<text  x="353.41" y="1599.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; (4,374,259 samples, 0.01%)</title><rect x="1083.4" y="1781" width="0.1" height="15.0" fill="rgb(222,27,16)" rx="2" ry="2" />
<text  x="1086.39" y="1791.5" ></text>
</g>
<g >
<title>get_vma_policy.part.0 (4,638,917 samples, 0.01%)</title><rect x="1138.9" y="1909" width="0.1" height="15.0" fill="rgb(241,37,43)" rx="2" ry="2" />
<text  x="1141.93" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (12,181,607 samples, 0.02%)</title><rect x="779.1" y="1797" width="0.3" height="15.0" fill="rgb(208,176,36)" rx="2" ry="2" />
<text  x="782.15" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_data_init (9,161,984 samples, 0.02%)</title><rect x="107.4" y="1381" width="0.2" height="15.0" fill="rgb(205,89,31)" rx="2" ry="2" />
<text  x="110.43" y="1391.5" ></text>
</g>
<g >
<title>duckdb::DuckCatalog::GetSchema (12,768,049 samples, 0.02%)</title><rect x="1115.1" y="1877" width="0.3" height="15.0" fill="rgb(212,190,17)" rx="2" ry="2" />
<text  x="1118.10" y="1887.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_gc_dalloc_event_handler (11,566,916 samples, 0.02%)</title><rect x="1124.1" y="1477" width="0.2" height="15.0" fill="rgb(228,148,3)" rx="2" ry="2" />
<text  x="1127.06" y="1487.5" ></text>
</g>
<g >
<title>pthread_getspecific (33,515,357 samples, 0.07%)</title><rect x="15.2" y="1989" width="0.8" height="15.0" fill="rgb(238,163,47)" rx="2" ry="2" />
<text  x="18.21" y="1999.5" ></text>
</g>
<g >
<title>__x64_sys_futex (17,788,829 samples, 0.03%)</title><rect x="94.0" y="1605" width="0.4" height="15.0" fill="rgb(226,7,23)" rx="2" ry="2" />
<text  x="96.99" y="1615.5" ></text>
</g>
<g >
<title>duckdb::Planner::CreatePlan (4,459,674,342 samples, 8.69%)</title><rect x="925.0" y="1893" width="102.6" height="15.0" fill="rgb(210,221,2)" rx="2" ry="2" />
<text  x="928.04" y="1903.5" >duckdb::Plan..</text>
</g>
<g >
<title>duckdb::CollectionScanState::~CollectionScanState (41,285,430 samples, 0.08%)</title><rect x="226.5" y="1717" width="1.0" height="15.0" fill="rgb(210,30,51)" rx="2" ry="2" />
<text  x="229.53" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::ReferenceEquality&lt;duckdb::SchemaCatalogEntry&gt;, duckdb::ReferenceHashFunction&lt;duckdb::SchemaCatalogEntry&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, true&gt; &gt; &gt; &gt; (42,022,057 samples, 0.08%)</title><rect x="1007.1" y="1733" width="0.9" height="15.0" fill="rgb(233,169,32)" rx="2" ry="2" />
<text  x="1010.06" y="1743.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::SingleJoinRelation&gt; &gt; (5,363,952 samples, 0.01%)</title><rect x="755.1" y="1637" width="0.1" height="15.0" fill="rgb(245,112,18)" rx="2" ry="2" />
<text  x="758.06" y="1647.5" ></text>
</g>
<g >
<title>duckdb::HyperLogLog::ProcessEntries (9,118,920 samples, 0.02%)</title><rect x="229.0" y="1605" width="0.2" height="15.0" fill="rgb(253,154,44)" rx="2" ry="2" />
<text  x="232.02" y="1615.5" ></text>
</g>
<g >
<title>duckdb::CastExpressionMatcher::~CastExpressionMatcher (7,650,732 samples, 0.01%)</title><rect x="831.9" y="1445" width="0.2" height="15.0" fill="rgb(219,1,23)" rx="2" ry="2" />
<text  x="834.93" y="1455.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt; &gt;::release (4,412,177 samples, 0.01%)</title><rect x="322.8" y="1781" width="0.1" height="15.0" fill="rgb(244,175,19)" rx="2" ry="2" />
<text  x="325.75" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::RowGroupCollection&gt; &gt;::destroy&lt;duckdb::RowGroupCollection&gt; (408,435,323 samples, 0.80%)</title><rect x="236.2" y="1589" width="9.4" height="15.0" fill="rgb(236,23,34)" rx="2" ry="2" />
<text  x="239.17" y="1599.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (11,050,616 samples, 0.02%)</title><rect x="595.4" y="1605" width="0.3" height="15.0" fill="rgb(217,167,14)" rx="2" ry="2" />
<text  x="598.43" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="165" width="0.1" height="15.0" fill="rgb(234,154,41)" rx="2" ry="2" />
<text  x="14.25" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::~vector (6,829,682 samples, 0.01%)</title><rect x="531.5" y="1733" width="0.2" height="15.0" fill="rgb(249,92,49)" rx="2" ry="2" />
<text  x="534.51" y="1743.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::ToString[abi:cxx11] (1,158,693,749 samples, 2.26%)</title><rect x="594.0" y="1861" width="26.6" height="15.0" fill="rgb(238,52,15)" rx="2" ry="2" />
<text  x="596.99" y="1871.5" >d..</text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::unique_ptr (6,780,668 samples, 0.01%)</title><rect x="623.4" y="1733" width="0.2" height="15.0" fill="rgb(206,101,8)" rx="2" ry="2" />
<text  x="626.43" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_dalloc_small (8,707,069 samples, 0.02%)</title><rect x="242.9" y="437" width="0.2" height="15.0" fill="rgb(243,52,25)" rx="2" ry="2" />
<text  x="245.88" y="447.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;::~unique_ptr (8,895,623 samples, 0.02%)</title><rect x="1089.4" y="1653" width="0.2" height="15.0" fill="rgb(252,143,50)" rx="2" ry="2" />
<text  x="1092.44" y="1663.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (4,769,213 samples, 0.01%)</title><rect x="666.9" y="1653" width="0.1" height="15.0" fill="rgb(247,209,22)" rx="2" ry="2" />
<text  x="669.89" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1029" width="0.1" height="15.0" fill="rgb(214,18,54)" rx="2" ry="2" />
<text  x="14.25" y="1039.5" ></text>
</g>
<g >
<title>duckdb_fsst_create (36,438,808 samples, 0.07%)</title><rect x="1118.2" y="1061" width="0.9" height="15.0" fill="rgb(222,29,7)" rx="2" ry="2" />
<text  x="1121.22" y="1071.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (22,075,070 samples, 0.04%)</title><rect x="1123.9" y="1509" width="0.5" height="15.0" fill="rgb(220,211,11)" rx="2" ry="2" />
<text  x="1126.89" y="1519.5" ></text>
</g>
<g >
<title>activate_task (10,947,621 samples, 0.02%)</title><rect x="1058.8" y="1605" width="0.2" height="15.0" fill="rgb(207,160,53)" rx="2" ry="2" />
<text  x="1061.80" y="1615.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::Destroy (6,965,855 samples, 0.01%)</title><rect x="444.8" y="1605" width="0.2" height="15.0" fill="rgb(209,138,15)" rx="2" ry="2" />
<text  x="447.79" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (44,751,583 samples, 0.09%)</title><rect x="469.7" y="1733" width="1.1" height="15.0" fill="rgb(249,130,15)" rx="2" ry="2" />
<text  x="472.72" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::PhysicalIndex, true&gt;::~vector (5,956,755 samples, 0.01%)</title><rect x="857.6" y="1813" width="0.2" height="15.0" fill="rgb(246,137,32)" rx="2" ry="2" />
<text  x="860.63" y="1823.5" ></text>
</g>
<g >
<title>do_exit (93,290,928 samples, 0.18%)</title><rect x="1177.6" y="1973" width="2.1" height="15.0" fill="rgb(218,206,7)" rx="2" ry="2" />
<text  x="1180.60" y="1983.5" ></text>
</g>
<g >
<title>unmap_page_range (89,296,689 samples, 0.17%)</title><rect x="1177.7" y="1893" width="2.0" height="15.0" fill="rgb(209,9,30)" rx="2" ry="2" />
<text  x="1180.67" y="1903.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::EmptyNeedleRemovalRule, std::default_delete&lt;duckdb::EmptyNeedleRemovalRule&gt; &gt;::__uniq_ptr_impl (5,026,459 samples, 0.01%)</title><rect x="802.7" y="1829" width="0.1" height="15.0" fill="rgb(246,22,20)" rx="2" ry="2" />
<text  x="805.71" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_no_sample (7,390,397 samples, 0.01%)</title><rect x="193.0" y="1541" width="0.2" height="15.0" fill="rgb(213,95,21)" rx="2" ry="2" />
<text  x="196.04" y="1551.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderTopLayer (22,779,435 samples, 0.04%)</title><rect x="632.4" y="1781" width="0.5" height="15.0" fill="rgb(218,119,23)" rx="2" ry="2" />
<text  x="635.40" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_alloc_event (23,663,510 samples, 0.05%)</title><rect x="380.6" y="1701" width="0.5" height="15.0" fill="rgb(216,169,36)" rx="2" ry="2" />
<text  x="383.59" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ifree (25,915,838 samples, 0.05%)</title><rect x="297.6" y="1365" width="0.6" height="15.0" fill="rgb(252,79,43)" rx="2" ry="2" />
<text  x="300.59" y="1375.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_metadata_read (7,539,005 samples, 0.01%)</title><rect x="1123.6" y="1413" width="0.1" height="15.0" fill="rgb(211,103,53)" rx="2" ry="2" />
<text  x="1126.56" y="1423.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (158,894,513 samples, 0.31%)</title><rect x="1170.5" y="1989" width="3.6" height="15.0" fill="rgb(234,188,12)" rx="2" ry="2" />
<text  x="1173.46" y="1999.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::ColumnDataAllocator, duckdb::ClientContext&amp;, duckdb::ColumnDataAllocatorType&amp;&gt; (27,604,202 samples, 0.05%)</title><rect x="98.1" y="1749" width="0.6" height="15.0" fill="rgb(225,5,5)" rx="2" ry="2" />
<text  x="101.05" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_dalloc_event (9,526,251 samples, 0.02%)</title><rect x="243.1" y="469" width="0.3" height="15.0" fill="rgb(253,114,3)" rx="2" ry="2" />
<text  x="246.13" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::PipelineFinishEvent, std::allocator&lt;duckdb::PipelineFinishEvent&gt;,  (7,499,307 samples, 0.01%)</title><rect x="1050.8" y="1733" width="0.2" height="15.0" fill="rgb(226,135,43)" rx="2" ry="2" />
<text  x="1053.78" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::AllocatedData, true&gt;::~vector (8,262,196 samples, 0.02%)</title><rect x="338.7" y="1365" width="0.2" height="15.0" fill="rgb(227,20,25)" rx="2" ry="2" />
<text  x="341.72" y="1375.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_move_assign (8,225,424 samples, 0.02%)</title><rect x="301.7" y="1653" width="0.2" height="15.0" fill="rgb(236,228,20)" rx="2" ry="2" />
<text  x="304.71" y="1663.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ColumnStatistics,  (5,544,701 samples, 0.01%)</title><rect x="102.3" y="1461" width="0.1" height="15.0" fill="rgb(246,124,12)" rx="2" ry="2" />
<text  x="105.28" y="1471.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Event*, std::allocator&lt;duckdb::Event*&gt; &gt;::_M_realloc_insert&lt;duckdb::Event*&gt; (24,510,120 samples, 0.05%)</title><rect x="1046.6" y="1765" width="0.5" height="15.0" fill="rgb(234,208,38)" rx="2" ry="2" />
<text  x="1049.58" y="1775.5" ></text>
</g>
<g >
<title>duckdb::HasUniqueIndexes (6,299,490 samples, 0.01%)</title><rect x="464.3" y="1765" width="0.2" height="15.0" fill="rgb(240,181,50)" rx="2" ry="2" />
<text  x="467.31" y="1775.5" ></text>
</g>
<g >
<title>duckdb::DataTable::FinalizeLocalAppend (41,400,184 samples, 0.08%)</title><rect x="100.7" y="1717" width="1.0" height="15.0" fill="rgb(206,102,37)" rx="2" ry="2" />
<text  x="103.72" y="1727.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::PipelineFinishEvent&gt;::shared_ptr&lt;std::allocator&lt;duckdb::PipelineFinishEvent&gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (23,585,378 samples, 0.05%)</title><rect x="1050.6" y="1781" width="0.6" height="15.0" fill="rgb(239,171,13)" rx="2" ry="2" />
<text  x="1053.61" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Executor, std::default_delete&lt;duckdb::Executor&gt;, true&gt;::~unique_ptr (177,090,522 samples, 0.35%)</title><rect x="333.2" y="1813" width="4.1" height="15.0" fill="rgb(222,93,0)" rx="2" ry="2" />
<text  x="336.21" y="1823.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*, duckdb::Vector&gt; (7,242,694 samples, 0.01%)</title><rect x="108.5" y="1717" width="0.2" height="15.0" fill="rgb(246,186,30)" rx="2" ry="2" />
<text  x="111.52" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt; const&amp;, std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::operator= (6,779,781 samples, 0.01%)</title><rect x="1034.4" y="1813" width="0.2" height="15.0" fill="rgb(205,161,7)" rx="2" ry="2" />
<text  x="1037.41" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RowGroupCollection, std::default_delete&lt;duckdb::RowGroupCollection&gt;, true&gt;::~unique_ptr (6,226,070 samples, 0.01%)</title><rect x="484.6" y="1749" width="0.2" height="15.0" fill="rgb(240,172,16)" rx="2" ry="2" />
<text  x="487.65" y="1759.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::unordered_set (6,263,506 samples, 0.01%)</title><rect x="785.1" y="1829" width="0.2" height="15.0" fill="rgb(210,229,53)" rx="2" ry="2" />
<text  x="788.14" y="1839.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::AllocateData (558,665,012 samples, 1.09%)</title><rect x="870.0" y="1717" width="12.9" height="15.0" fill="rgb(209,225,20)" rx="2" ry="2" />
<text  x="873.00" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_check_len (6,273,405 samples, 0.01%)</title><rect x="572.7" y="1733" width="0.2" height="15.0" fill="rgb(212,0,4)" rx="2" ry="2" />
<text  x="575.71" y="1743.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::~unordered_set (67,819,231 samples, 0.13%)</title><rect x="698.5" y="1829" width="1.6" height="15.0" fill="rgb(232,83,0)" rx="2" ry="2" />
<text  x="701.55" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (122,961,602 samples, 0.24%)</title><rect x="717.3" y="1829" width="2.8" height="15.0" fill="rgb(219,86,6)" rx="2" ry="2" />
<text  x="720.31" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (83,529,229 samples, 0.16%)</title><rect x="890.2" y="1477" width="1.9" height="15.0" fill="rgb(205,5,36)" rx="2" ry="2" />
<text  x="893.20" y="1487.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::MetaPipeline, duckdb::Executor&amp;, duckdb::PipelineBuildState&amp;, duckdb::PhysicalOperator*&gt; (44,540,516 samples, 0.09%)</title><rect x="1080.7" y="1813" width="1.0" height="15.0" fill="rgb(231,50,40)" rx="2" ry="2" />
<text  x="1083.71" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ComparisonSimplificationRule::~ComparisonSimplificationRule (6,219,530 samples, 0.01%)</title><rect x="830.4" y="1717" width="0.2" height="15.0" fill="rgb(239,212,26)" rx="2" ry="2" />
<text  x="833.41" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::vector (8,166,384 samples, 0.02%)</title><rect x="949.6" y="1717" width="0.2" height="15.0" fill="rgb(240,58,48)" rx="2" ry="2" />
<text  x="952.58" y="1727.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::SegmentIterationHelper::SegmentIterator::operator++ (4,928,600 samples, 0.01%)</title><rect x="416.8" y="1637" width="0.1" height="15.0" fill="rgb(244,216,23)" rx="2" ry="2" />
<text  x="419.78" y="1647.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::AppendRowGroup (21,016,831 samples, 0.04%)</title><rect x="104.7" y="1701" width="0.5" height="15.0" fill="rgb(226,38,19)" rx="2" ry="2" />
<text  x="107.72" y="1711.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::~LogicalOperator (14,033,945 samples, 0.03%)</title><rect x="1036.5" y="1429" width="0.3" height="15.0" fill="rgb(251,146,24)" rx="2" ry="2" />
<text  x="1039.45" y="1439.5" ></text>
</g>
<g >
<title>duckdb::Catalog::GetCatalogTransaction (265,890,308 samples, 0.52%)</title><rect x="995.8" y="1765" width="6.1" height="15.0" fill="rgb(247,70,36)" rx="2" ry="2" />
<text  x="998.79" y="1775.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::insert (307,749,392 samples, 0.60%)</title><rect x="688.7" y="1813" width="7.1" height="15.0" fill="rgb(243,184,29)" rx="2" ry="2" />
<text  x="691.71" y="1823.5" ></text>
</g>
<g >
<title>duckdb::FilterPushdown::Rewrite (17,147,080 samples, 0.03%)</title><rect x="747.3" y="1717" width="0.4" height="15.0" fill="rgb(205,35,52)" rx="2" ry="2" />
<text  x="750.31" y="1727.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::BufferHandle, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt; &gt;::find (10,509,499 samples, 0.02%)</title><rect x="863.1" y="1733" width="0.2" height="15.0" fill="rgb(224,41,13)" rx="2" ry="2" />
<text  x="866.06" y="1743.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ColumnDataRowCollection, std::default_delete&lt;duckdb::ColumnDataRowCollection&gt; &gt;::__uniq_ptr_impl (4,452,230 samples, 0.01%)</title><rect x="388.3" y="1861" width="0.1" height="15.0" fill="rgb(234,22,40)" rx="2" ry="2" />
<text  x="391.30" y="1871.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::PipelineExecutor (54,707,680 samples, 0.11%)</title><rect x="107.2" y="1813" width="1.3" height="15.0" fill="rgb(245,145,40)" rx="2" ry="2" />
<text  x="110.20" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::unique_ptr&lt;duckdb::IntegerTypeMatcher, std::default_delete&lt;duckdb::IntegerTypeMatcher&gt;, void&gt; (6,119,877 samples, 0.01%)</title><rect x="816.3" y="1829" width="0.1" height="15.0" fill="rgb(239,219,16)" rx="2" ry="2" />
<text  x="819.26" y="1839.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;,  (5,888,177 samples, 0.01%)</title><rect x="895.4" y="1557" width="0.1" height="15.0" fill="rgb(252,109,35)" rx="2" ry="2" />
<text  x="898.35" y="1567.5" ></text>
</g>
<g >
<title>duckdb::Vector::GetValue (17,491,239 samples, 0.03%)</title><rect x="1119.8" y="1973" width="0.4" height="15.0" fill="rgb(235,89,29)" rx="2" ry="2" />
<text  x="1122.80" y="1983.5" ></text>
</g>
<g >
<title>duckdb::ExpressionIterator::EnumerateChildren (11,281,338 samples, 0.02%)</title><rect x="583.7" y="1829" width="0.3" height="15.0" fill="rgb(208,23,31)" rx="2" ry="2" />
<text  x="586.71" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::~unique_ptr (13,590,659 samples, 0.03%)</title><rect x="633.6" y="1717" width="0.3" height="15.0" fill="rgb(242,180,37)" rx="2" ry="2" />
<text  x="636.62" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::unique_ptr (9,529,688 samples, 0.02%)</title><rect x="856.8" y="1813" width="0.3" height="15.0" fill="rgb(231,175,21)" rx="2" ry="2" />
<text  x="859.83" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ParsedExpression::IsWindow (7,969,115 samples, 0.02%)</title><rect x="962.0" y="1749" width="0.2" height="15.0" fill="rgb(208,166,29)" rx="2" ry="2" />
<text  x="964.98" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;::operator= (13,828,185 samples, 0.03%)</title><rect x="966.3" y="1733" width="0.3" height="15.0" fill="rgb(252,12,21)" rx="2" ry="2" />
<text  x="969.28" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ParsedExpression::Hash (5,812,615 samples, 0.01%)</title><rect x="956.6" y="1605" width="0.1" height="15.0" fill="rgb(252,147,12)" rx="2" ry="2" />
<text  x="959.55" y="1615.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (4,715,471 samples, 0.01%)</title><rect x="1119.2" y="1061" width="0.1" height="15.0" fill="rgb(243,220,45)" rx="2" ry="2" />
<text  x="1122.18" y="1071.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ChunkMetaData, std::allocator&lt;duckdb::ChunkMetaData&gt; &gt;::emplace_back&lt;duckdb::ChunkMetaData&gt; (27,831,444 samples, 0.05%)</title><rect x="383.8" y="1877" width="0.6" height="15.0" fill="rgb(237,89,1)" rx="2" ry="2" />
<text  x="386.76" y="1887.5" ></text>
</g>
<g >
<title>duckdb::ValidityColumnData::~ValidityColumnData (117,494,882 samples, 0.23%)</title><rect x="241.5" y="997" width="2.7" height="15.0" fill="rgb(206,196,29)" rx="2" ry="2" />
<text  x="244.46" y="1007.5" ></text>
</g>
<g >
<title>duckdb::LogicalType::Deserialize (32,217,502 samples, 0.06%)</title><rect x="586.2" y="1813" width="0.8" height="15.0" fill="rgb(254,220,52)" rx="2" ry="2" />
<text  x="589.23" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::AllocateVectorInternal (47,005,831 samples, 0.09%)</title><rect x="863.4" y="1717" width="1.1" height="15.0" fill="rgb(247,218,6)" rx="2" ry="2" />
<text  x="866.40" y="1727.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::~AllocatedData (4,965,859 samples, 0.01%)</title><rect x="106.9" y="1445" width="0.1" height="15.0" fill="rgb(242,23,48)" rx="2" ry="2" />
<text  x="109.89" y="1455.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (4,568,616 samples, 0.01%)</title><rect x="788.7" y="1717" width="0.1" height="15.0" fill="rgb(235,205,20)" rx="2" ry="2" />
<text  x="791.68" y="1727.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;duckdb::UnifiedVectorFormat*, unsigned long, duckdb::UnifiedVectorFormat&gt; (4,415,801 samples, 0.01%)</title><rect x="385.1" y="1877" width="0.1" height="15.0" fill="rgb(227,183,23)" rx="2" ry="2" />
<text  x="388.15" y="1887.5" ></text>
</g>
<g >
<title>duckdb::Executor::VerifyPipeline (686,831,063 samples, 1.34%)</title><rect x="1063.2" y="1845" width="15.8" height="15.0" fill="rgb(217,108,12)" rx="2" ry="2" />
<text  x="1066.16" y="1855.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, std::shared_ptr&lt;duckdb::ColumnDataCollection&gt;, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, std::shared_ptr&lt;duckdb::ColumnDataCollection&gt; &gt; &gt; &gt;::~unordered_map (4,870,202 samples, 0.01%)</title><rect x="924.9" y="1877" width="0.1" height="15.0" fill="rgb(227,131,36)" rx="2" ry="2" />
<text  x="927.91" y="1887.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt;, true&gt;::~vector (34,483,883 samples, 0.07%)</title><rect x="236.2" y="1525" width="0.8" height="15.0" fill="rgb(233,70,20)" rx="2" ry="2" />
<text  x="239.19" y="1535.5" ></text>
</g>
<g >
<title>duckdb::BoundQueryNode::~BoundQueryNode (10,888,175 samples, 0.02%)</title><rect x="980.0" y="1717" width="0.3" height="15.0" fill="rgb(228,73,0)" rx="2" ry="2" />
<text  x="983.02" y="1727.5" ></text>
</g>
<g >
<title>duckdb::MetaTransaction::Commit[abi:cxx11] (6,213,944,855 samples, 12.11%)</title><rect x="188.5" y="1861" width="143.0" height="15.0" fill="rgb(217,99,26)" rx="2" ry="2" />
<text  x="191.54" y="1871.5" >duckdb::MetaTransa..</text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::BufferHandle, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt; &gt;::~unordered_map (53,795,681 samples, 0.10%)</title><rect x="861.4" y="1749" width="1.3" height="15.0" fill="rgb(235,10,9)" rx="2" ry="2" />
<text  x="864.42" y="1759.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::ScanKeywordLookup (43,789,258 samples, 0.09%)</title><rect x="521.8" y="1829" width="1.0" height="15.0" fill="rgb(219,178,41)" rx="2" ry="2" />
<text  x="524.82" y="1839.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::PushFinalize (24,274,938 samples, 0.05%)</title><rect x="106.5" y="1797" width="0.6" height="15.0" fill="rgb(205,213,49)" rx="2" ry="2" />
<text  x="109.54" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_alloc (6,728,753 samples, 0.01%)</title><rect x="289.6" y="1381" width="0.1" height="15.0" fill="rgb(232,116,13)" rx="2" ry="2" />
<text  x="292.57" y="1391.5" ></text>
</g>
<g >
<title>__sanitizer::RunFreeHooks (18,991,672 samples, 0.04%)</title><rect x="1145.6" y="2037" width="0.4" height="15.0" fill="rgb(213,117,54)" rx="2" ry="2" />
<text  x="1148.57" y="2047.5" ></text>
</g>
<g >
<title>do_user_addr_fault (4,811,192 samples, 0.01%)</title><rect x="1175.6" y="1957" width="0.1" height="15.0" fill="rgb(231,83,8)" rx="2" ry="2" />
<text  x="1178.60" y="1967.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::FunctionExpressionMatcher, std::default_delete&lt;duckdb::FunctionExpressionMatcher&gt;, void&gt; (6,832,384 samples, 0.01%)</title><rect x="797.3" y="1829" width="0.1" height="15.0" fill="rgb(225,116,6)" rx="2" ry="2" />
<text  x="800.25" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (6,166,407 samples, 0.01%)</title><rect x="914.1" y="1749" width="0.2" height="15.0" fill="rgb(217,86,49)" rx="2" ry="2" />
<text  x="917.15" y="1759.5" ></text>
</g>
<g >
<title>duckdb::PrivateAllocatorData::PrivateAllocatorData (4,781,012 samples, 0.01%)</title><rect x="997.5" y="1573" width="0.1" height="15.0" fill="rgb(220,103,36)" rx="2" ry="2" />
<text  x="1000.46" y="1583.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::ColumnDataAllocator, std::allocator&lt;duckdb::ColumnDataAllocator&gt;,  (14,468,120 samples, 0.03%)</title><rect x="911.7" y="1669" width="0.3" height="15.0" fill="rgb(220,190,1)" rx="2" ry="2" />
<text  x="914.66" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable (11,785,285 samples, 0.02%)</title><rect x="885.4" y="1637" width="0.3" height="15.0" fill="rgb(222,152,46)" rx="2" ry="2" />
<text  x="888.43" y="1647.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCopy&lt;long&gt; (12,659,703 samples, 0.02%)</title><rect x="375.1" y="1909" width="0.3" height="15.0" fill="rgb(205,176,41)" rx="2" ry="2" />
<text  x="378.14" y="1919.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::PendingQueryInternal (18,349,454 samples, 0.04%)</title><rect x="1108.8" y="1909" width="0.5" height="15.0" fill="rgb(225,107,0)" rx="2" ry="2" />
<text  x="1111.84" y="1919.5" ></text>
</g>
<g >
<title>duckdb::ExpressionInfo::ExpressionInfo (5,539,790 samples, 0.01%)</title><rect x="477.8" y="1717" width="0.2" height="15.0" fill="rgb(247,221,18)" rx="2" ry="2" />
<text  x="480.82" y="1727.5" ></text>
</g>
<g >
<title>operator new (5,902,128 samples, 0.01%)</title><rect x="82.9" y="2021" width="0.1" height="15.0" fill="rgb(248,198,42)" rx="2" ry="2" />
<text  x="85.89" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Binding&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Binding&gt; &gt; &gt;::emplace_back&lt;std::reference_wrapper&lt;duckdb::Binding&gt; &gt; (23,509,380 samples, 0.05%)</title><rect x="928.4" y="1685" width="0.6" height="15.0" fill="rgb(249,6,36)" rx="2" ry="2" />
<text  x="931.41" y="1695.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; (26,152,165 samples, 0.05%)</title><rect x="483.9" y="1653" width="0.6" height="15.0" fill="rgb(235,205,17)" rx="2" ry="2" />
<text  x="486.91" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::max_size (25,027,294 samples, 0.05%)</title><rect x="608.7" y="1717" width="0.6" height="15.0" fill="rgb(251,159,12)" rx="2" ry="2" />
<text  x="611.74" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (23,712,155 samples, 0.05%)</title><rect x="734.5" y="1701" width="0.5" height="15.0" fill="rgb(218,167,26)" rx="2" ry="2" />
<text  x="737.49" y="1711.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::Scan (202,752,773 samples, 0.40%)</title><rect x="212.2" y="1685" width="4.7" height="15.0" fill="rgb(224,30,3)" rx="2" ry="2" />
<text  x="215.21" y="1695.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::~VectorCacheBuffer (63,237,212 samples, 0.12%)</title><rect x="221.5" y="1493" width="1.4" height="15.0" fill="rgb(242,41,17)" rx="2" ry="2" />
<text  x="224.49" y="1503.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::unique_ptr (45,660,393 samples, 0.09%)</title><rect x="770.7" y="1797" width="1.0" height="15.0" fill="rgb(231,67,9)" rx="2" ry="2" />
<text  x="773.66" y="1807.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_Tuple_impl (6,058,922 samples, 0.01%)</title><rect x="709.1" y="1765" width="0.1" height="15.0" fill="rgb(242,204,15)" rx="2" ry="2" />
<text  x="712.09" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; &gt;::~vector (450,190,090 samples, 0.88%)</title><rect x="339.9" y="1573" width="10.3" height="15.0" fill="rgb(244,77,27)" rx="2" ry="2" />
<text  x="342.86" y="1583.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::Pipeline&gt;, duckdb::ReferenceHashFunction&lt;duckdb::Pipeline&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::emplace&lt;std::pair&lt;duckdb::Pipeline&amp;, duckdb::PipelineEventStack&gt; &gt; (46,631,542 samples, 0.09%)</title><rect x="1052.3" y="1797" width="1.1" height="15.0" fill="rgb(207,111,13)" rx="2" ry="2" />
<text  x="1055.34" y="1807.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ArithmeticSimplificationRule, duckdb::ExpressionRewriter&amp;&gt; (282,464,248 samples, 0.55%)</title><rect x="784.0" y="1877" width="6.5" height="15.0" fill="rgb(244,186,47)" rx="2" ry="2" />
<text  x="786.95" y="1887.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ManyFunctionMatcher, std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (15,682,456 samples, 0.03%)</title><rect x="785.0" y="1845" width="0.4" height="15.0" fill="rgb(207,182,42)" rx="2" ry="2" />
<text  x="788.02" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Vector::Vector (23,669,119 samples, 0.05%)</title><rect x="893.4" y="1685" width="0.5" height="15.0" fill="rgb(228,144,5)" rx="2" ry="2" />
<text  x="896.40" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::operator (80,662,589 samples, 0.16%)</title><rect x="692.5" y="1765" width="1.9" height="15.0" fill="rgb(248,66,37)" rx="2" ry="2" />
<text  x="695.55" y="1775.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (6,496,290 samples, 0.01%)</title><rect x="868.6" y="1733" width="0.1" height="15.0" fill="rgb(241,103,42)" rx="2" ry="2" />
<text  x="871.56" y="1743.5" ></text>
</g>
<g >
<title>__do_page_fault (4,811,192 samples, 0.01%)</title><rect x="1175.6" y="1973" width="0.1" height="15.0" fill="rgb(206,221,0)" rx="2" ry="2" />
<text  x="1178.60" y="1983.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::Vector*&gt; (65,319,458 samples, 0.13%)</title><rect x="497.9" y="1717" width="1.5" height="15.0" fill="rgb(219,162,12)" rx="2" ry="2" />
<text  x="500.94" y="1727.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::SelectionData&gt;::~shared_ptr (8,011,328 samples, 0.02%)</title><rect x="296.8" y="1653" width="0.2" height="15.0" fill="rgb(252,152,1)" rx="2" ry="2" />
<text  x="299.84" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundExpressionListRef, std::default_delete&lt;duckdb::BoundExpressionListRef&gt;, true&gt;::operator (6,470,500 samples, 0.01%)</title><rect x="938.2" y="1733" width="0.1" height="15.0" fill="rgb(245,143,39)" rx="2" ry="2" />
<text  x="941.15" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (6,000,786 samples, 0.01%)</title><rect x="939.0" y="1701" width="0.1" height="15.0" fill="rgb(244,137,20)" rx="2" ry="2" />
<text  x="941.99" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,384,743 samples, 0.02%)</title><rect x="613.6" y="1717" width="0.2" height="15.0" fill="rgb(230,94,12)" rx="2" ry="2" />
<text  x="616.60" y="1727.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::~AllocatedData (81,008,022 samples, 0.16%)</title><rect x="481.7" y="1493" width="1.9" height="15.0" fill="rgb(216,75,50)" rx="2" ry="2" />
<text  x="484.73" y="1503.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderTopLayer (20,748,361 samples, 0.04%)</title><rect x="1076.7" y="1765" width="0.5" height="15.0" fill="rgb(225,76,26)" rx="2" ry="2" />
<text  x="1079.71" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::~unique_ptr (6,493,856 samples, 0.01%)</title><rect x="841.2" y="1781" width="0.2" height="15.0" fill="rgb(243,155,35)" rx="2" ry="2" />
<text  x="844.24" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Transaction::Get (18,788,816 samples, 0.04%)</title><rect x="421.8" y="1717" width="0.4" height="15.0" fill="rgb(212,103,46)" rx="2" ry="2" />
<text  x="424.79" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (53,246,562 samples, 0.10%)</title><rect x="296.0" y="1701" width="1.3" height="15.0" fill="rgb(250,19,20)" rx="2" ry="2" />
<text  x="299.04" y="1711.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (31,285,763 samples, 0.06%)</title><rect x="750.6" y="1765" width="0.7" height="15.0" fill="rgb(239,104,7)" rx="2" ry="2" />
<text  x="753.56" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Binder::Binder (45,500,700 samples, 0.09%)</title><rect x="984.9" y="1685" width="1.1" height="15.0" fill="rgb(247,208,20)" rx="2" ry="2" />
<text  x="987.93" y="1695.5" ></text>
</g>
<g >
<title>do_anonymous_page (8,926,579 samples, 0.02%)</title><rect x="413.6" y="1541" width="0.2" height="15.0" fill="rgb(219,61,49)" rx="2" ry="2" />
<text  x="416.56" y="1551.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;,  (20,202,348 samples, 0.04%)</title><rect x="473.8" y="1621" width="0.4" height="15.0" fill="rgb(235,54,22)" rx="2" ry="2" />
<text  x="476.77" y="1631.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (5,910,742 samples, 0.01%)</title><rect x="44.2" y="1973" width="0.1" height="15.0" fill="rgb(236,175,43)" rx="2" ry="2" />
<text  x="47.18" y="1983.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Event,  (96,255,609 samples, 0.19%)</title><rect x="355.2" y="1749" width="2.2" height="15.0" fill="rgb(248,137,6)" rx="2" ry="2" />
<text  x="358.15" y="1759.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (8,262,654 samples, 0.02%)</title><rect x="248.0" y="1477" width="0.2" height="15.0" fill="rgb(228,42,0)" rx="2" ry="2" />
<text  x="251.02" y="1487.5" ></text>
</g>
<g >
<title>duckdb::PipelineFinishEvent::FinishEvent (572,595,763 samples, 1.12%)</title><rect x="405.8" y="1797" width="13.1" height="15.0" fill="rgb(214,62,37)" rx="2" ry="2" />
<text  x="408.75" y="1807.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, unsigned long const*, unsigned long*&gt; (12,086,662 samples, 0.02%)</title><rect x="684.6" y="1685" width="0.3" height="15.0" fill="rgb(229,21,29)" rx="2" ry="2" />
<text  x="687.61" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::begin (6,100,054 samples, 0.01%)</title><rect x="711.7" y="1845" width="0.1" height="15.0" fill="rgb(244,104,2)" rx="2" ry="2" />
<text  x="714.71" y="1855.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (145,517,407 samples, 0.28%)</title><rect x="217.2" y="1717" width="3.3" height="15.0" fill="rgb(239,221,31)" rx="2" ry="2" />
<text  x="220.16" y="1727.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (6,043,559 samples, 0.01%)</title><rect x="22.6" y="2005" width="0.1" height="15.0" fill="rgb(244,225,3)" rx="2" ry="2" />
<text  x="25.57" y="2015.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::ConstantExpressionMatcher, std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt;, void&gt; (9,191,281 samples, 0.02%)</title><rect x="785.6" y="1829" width="0.2" height="15.0" fill="rgb(238,108,1)" rx="2" ry="2" />
<text  x="788.56" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~vector (18,854,318 samples, 0.04%)</title><rect x="662.3" y="1765" width="0.5" height="15.0" fill="rgb(223,65,31)" rx="2" ry="2" />
<text  x="665.35" y="1775.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;, unsigned long&amp;&gt; (455,714,400 samples, 0.89%)</title><rect x="256.2" y="1621" width="10.5" height="15.0" fill="rgb(223,169,24)" rx="2" ry="2" />
<text  x="259.23" y="1631.5" ></text>
</g>
<g >
<title>duckdb::BufferedSerializer::~BufferedSerializer (5,999,626 samples, 0.01%)</title><rect x="591.7" y="1733" width="0.1" height="15.0" fill="rgb(253,146,46)" rx="2" ry="2" />
<text  x="594.66" y="1743.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringbuf (11,443,262 samples, 0.02%)</title><rect x="88.4" y="2021" width="0.3" height="15.0" fill="rgb(247,157,27)" rx="2" ry="2" />
<text  x="91.41" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (29,619,005 samples, 0.06%)</title><rect x="789.3" y="1813" width="0.7" height="15.0" fill="rgb(206,28,20)" rx="2" ry="2" />
<text  x="792.32" y="1823.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;duckdb::Event&gt;::shared_from_this (4,391,727 samples, 0.01%)</title><rect x="1046.3" y="1797" width="0.1" height="15.0" fill="rgb(243,26,47)" rx="2" ry="2" />
<text  x="1049.32" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (5,737,865 samples, 0.01%)</title><rect x="76.1" y="2005" width="0.2" height="15.0" fill="rgb(216,72,28)" rx="2" ry="2" />
<text  x="79.12" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnDataCopyFunction, std::allocator&lt;duckdb::ColumnDataCopyFunction&gt; &gt;::reserve (6,650,913 samples, 0.01%)</title><rect x="386.3" y="1877" width="0.1" height="15.0" fill="rgb(222,70,38)" rx="2" ry="2" />
<text  x="389.25" y="1887.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::IsEmpty (5,735,524 samples, 0.01%)</title><rect x="458.7" y="1733" width="0.1" height="15.0" fill="rgb(252,14,31)" rx="2" ry="2" />
<text  x="461.69" y="1743.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;duckdb::Event&gt;::_M_weak_assign&lt;duckdb::PipelineInitializeEvent&gt; (7,093,359 samples, 0.01%)</title><rect x="1051.9" y="1733" width="0.2" height="15.0" fill="rgb(239,176,42)" rx="2" ry="2" />
<text  x="1054.94" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt;, std::allocator&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt; &gt; &gt;::emplace_back&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt; &gt; (16,984,645 samples, 0.03%)</title><rect x="456.9" y="1685" width="0.4" height="15.0" fill="rgb(216,205,34)" rx="2" ry="2" />
<text  x="459.88" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Executor::ScheduleEvents (750,345,927 samples, 1.46%)</title><rect x="1045.7" y="1861" width="17.3" height="15.0" fill="rgb(239,46,25)" rx="2" ry="2" />
<text  x="1048.70" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TypeMatcherId, std::default_delete&lt;duckdb::TypeMatcherId&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::TypeMatcherId&gt;, void&gt; (8,471,811 samples, 0.02%)</title><rect x="803.8" y="1813" width="0.2" height="15.0" fill="rgb(217,133,3)" rx="2" ry="2" />
<text  x="806.83" y="1823.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::unique_ptr&lt;duckdb::QueryGraph::QueryEdge, std::default_delete&lt;duckdb::QueryGraph::QueryEdge&gt;, true&gt;, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::unique_ptr&lt;duckdb::QueryGraph::QueryEdge, std::default_delete&lt;duckdb::QueryGraph::QueryEdge&gt;, true&gt; &gt; &gt; &gt;::~unordered_map (10,217,927 samples, 0.02%)</title><rect x="756.5" y="1733" width="0.2" height="15.0" fill="rgb(228,49,16)" rx="2" ry="2" />
<text  x="759.47" y="1743.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (52,359,466 samples, 0.10%)</title><rect x="844.6" y="1813" width="1.2" height="15.0" fill="rgb(232,35,9)" rx="2" ry="2" />
<text  x="847.58" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::unique_ptr&lt;duckdb::BoundConstantExpression, std::default_delete&lt;std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt; &gt;, void&gt; (5,677,981 samples, 0.01%)</title><rect x="934.5" y="1653" width="0.1" height="15.0" fill="rgb(221,211,45)" rx="2" ry="2" />
<text  x="937.52" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::operator= (5,988,373 samples, 0.01%)</title><rect x="621.3" y="1733" width="0.1" height="15.0" fill="rgb(241,51,38)" rx="2" ry="2" />
<text  x="624.30" y="1743.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::~FunctionExpressionMatcher (6,105,032 samples, 0.01%)</title><rect x="833.2" y="1621" width="0.1" height="15.0" fill="rgb(221,150,11)" rx="2" ry="2" />
<text  x="836.20" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (16,250,179 samples, 0.03%)</title><rect x="983.9" y="1781" width="0.4" height="15.0" fill="rgb(220,109,52)" rx="2" ry="2" />
<text  x="986.88" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::InitializeScan (61,648,197 samples, 0.12%)</title><rect x="267.3" y="1605" width="1.4" height="15.0" fill="rgb(253,179,16)" rx="2" ry="2" />
<text  x="270.26" y="1615.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::CreateChildMetaPipeline (122,724,101 samples, 0.24%)</title><rect x="1079.5" y="1829" width="2.8" height="15.0" fill="rgb(233,201,40)" rx="2" ry="2" />
<text  x="1082.52" y="1839.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::DataChunk&gt; (13,598,190 samples, 0.03%)</title><rect x="372.0" y="1893" width="0.3" height="15.0" fill="rgb(242,117,25)" rx="2" ry="2" />
<text  x="375.03" y="1903.5" ></text>
</g>
<g >
<title>duckdb::EntryValue::~EntryValue (9,284,106 samples, 0.02%)</title><rect x="1117.6" y="789" width="0.2" height="15.0" fill="rgb(213,50,15)" rx="2" ry="2" />
<text  x="1120.55" y="799.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_default (45,634,151 samples, 0.09%)</title><rect x="239.6" y="517" width="1.1" height="15.0" fill="rgb(220,123,34)" rx="2" ry="2" />
<text  x="242.65" y="527.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (23,637,570 samples, 0.05%)</title><rect x="103.0" y="1445" width="0.6" height="15.0" fill="rgb(215,52,12)" rx="2" ry="2" />
<text  x="106.04" y="1455.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperator (5,630,675 samples, 0.01%)</title><rect x="729.2" y="1653" width="0.1" height="15.0" fill="rgb(250,124,41)" rx="2" ry="2" />
<text  x="732.18" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (51,854,306 samples, 0.10%)</title><rect x="861.5" y="1701" width="1.2" height="15.0" fill="rgb(221,134,52)" rx="2" ry="2" />
<text  x="864.47" y="1711.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ClientContext,  (6,042,075 samples, 0.01%)</title><rect x="396.3" y="1925" width="0.1" height="15.0" fill="rgb(241,78,41)" rx="2" ry="2" />
<text  x="399.26" y="1935.5" ></text>
</g>
<g >
<title>duckdb::WhereBinder::~WhereBinder (5,826,977 samples, 0.01%)</title><rect x="961.6" y="1733" width="0.1" height="15.0" fill="rgb(242,125,38)" rx="2" ry="2" />
<text  x="964.61" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnScanState, true&gt;::~vector (22,931,499 samples, 0.04%)</title><rect x="226.8" y="1637" width="0.5" height="15.0" fill="rgb(244,106,51)" rx="2" ry="2" />
<text  x="229.76" y="1647.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (14,042,098 samples, 0.03%)</title><rect x="721.3" y="1829" width="0.3" height="15.0" fill="rgb(218,143,54)" rx="2" ry="2" />
<text  x="724.30" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::emplace_back&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; (10,744,329 samples, 0.02%)</title><rect x="1081.3" y="1653" width="0.3" height="15.0" fill="rgb(211,154,17)" rx="2" ry="2" />
<text  x="1084.31" y="1663.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (7,178,423 samples, 0.01%)</title><rect x="921.8" y="1765" width="0.2" height="15.0" fill="rgb(235,182,26)" rx="2" ry="2" />
<text  x="924.82" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_no_sample (6,003,148 samples, 0.01%)</title><rect x="289.7" y="1381" width="0.2" height="15.0" fill="rgb(233,219,7)" rx="2" ry="2" />
<text  x="292.72" y="1391.5" ></text>
</g>
<g >
<title>duckdb::ColumnRefExpression::~ColumnRefExpression (4,406,029 samples, 0.01%)</title><rect x="948.4" y="1557" width="0.1" height="15.0" fill="rgb(216,193,50)" rx="2" ry="2" />
<text  x="951.40" y="1567.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ColumnRefExpression, std::default_delete&lt;duckdb::ColumnRefExpression&gt; &gt;::__uniq_ptr_impl (6,545,002 samples, 0.01%)</title><rect x="958.8" y="1605" width="0.2" height="15.0" fill="rgb(248,91,0)" rx="2" ry="2" />
<text  x="961.80" y="1615.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (5,417,488 samples, 0.01%)</title><rect x="687.5" y="1797" width="0.1" height="15.0" fill="rgb(211,76,41)" rx="2" ry="2" />
<text  x="690.51" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::ConstantFoldingRule, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (9,164,042 samples, 0.02%)</title><rect x="822.0" y="1877" width="0.2" height="15.0" fill="rgb(240,109,33)" rx="2" ry="2" />
<text  x="824.99" y="1887.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;, true&gt;::back (4,376,086 samples, 0.01%)</title><rect x="1080.5" y="1813" width="0.1" height="15.0" fill="rgb(217,229,12)" rx="2" ry="2" />
<text  x="1083.45" y="1823.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;std::lock_guard&lt;std::mutex&gt;, std::mutex&amp;&gt; (18,078,152 samples, 0.04%)</title><rect x="328.7" y="1829" width="0.4" height="15.0" fill="rgb(208,76,9)" rx="2" ry="2" />
<text  x="331.69" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Vector&gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (11,387,787 samples, 0.02%)</title><rect x="494.9" y="1733" width="0.2" height="15.0" fill="rgb(221,197,11)" rx="2" ry="2" />
<text  x="497.87" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1477" width="0.3" height="15.0" fill="rgb(217,152,42)" rx="2" ry="2" />
<text  x="1120.47" y="1487.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::shared_ptr&lt;duckdb::Event&gt;*, std::shared_ptr&lt;duckdb::Event&gt;*, std::allocator&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt; &gt; (5,908,024 samples, 0.01%)</title><rect x="1054.1" y="1733" width="0.1" height="15.0" fill="rgb(232,49,38)" rx="2" ry="2" />
<text  x="1057.07" y="1743.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::MetaPipeline, std::allocator&lt;duckdb::MetaPipeline&gt;, duckdb::Executor&amp;, duckdb::PipelineBuildState&amp;, duckdb::PhysicalOperator*&gt; (43,740,306 samples, 0.09%)</title><rect x="1080.7" y="1797" width="1.0" height="15.0" fill="rgb(252,88,41)" rx="2" ry="2" />
<text  x="1083.71" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DistinctStatistics, std::default_delete&lt;duckdb::DistinctStatistics&gt;, true&gt;::~unique_ptr (13,077,021 samples, 0.03%)</title><rect x="236.5" y="1301" width="0.3" height="15.0" fill="rgb(219,196,33)" rx="2" ry="2" />
<text  x="239.49" y="1311.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (261,192,884 samples, 0.51%)</title><rect x="872.9" y="1461" width="6.0" height="15.0" fill="rgb(213,124,50)" rx="2" ry="2" />
<text  x="875.89" y="1471.5" ></text>
</g>
<g >
<title>duckdb::Binder::Bind (2,439,470,021 samples, 4.76%)</title><rect x="926.2" y="1829" width="56.1" height="15.0" fill="rgb(231,112,32)" rx="2" ry="2" />
<text  x="929.22" y="1839.5" >duckd..</text>
</g>
<g >
<title>generic_perform_write (15,728,171 samples, 0.03%)</title><rect x="248.4" y="1557" width="0.4" height="15.0" fill="rgb(238,47,38)" rx="2" ry="2" />
<text  x="251.40" y="1567.5" ></text>
</g>
<g >
<title>duckdb::DependencyManager::AddObject (16,747,506 samples, 0.03%)</title><rect x="1113.8" y="1813" width="0.3" height="15.0" fill="rgb(225,226,39)" rx="2" ry="2" />
<text  x="1116.76" y="1823.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::ResetFromCache (8,265,329 samples, 0.02%)</title><rect x="475.8" y="1733" width="0.1" height="15.0" fill="rgb(209,162,45)" rx="2" ry="2" />
<text  x="478.75" y="1743.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector&gt; (152,973,714 samples, 0.30%)</title><rect x="390.5" y="1781" width="3.5" height="15.0" fill="rgb(220,208,0)" rx="2" ry="2" />
<text  x="393.46" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;::~unique_ptr (575,767,682 samples, 1.12%)</title><rect x="337.9" y="1685" width="13.3" height="15.0" fill="rgb(238,215,36)" rx="2" ry="2" />
<text  x="340.92" y="1695.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::AddChild (7,386,727 samples, 0.01%)</title><rect x="978.1" y="1765" width="0.1" height="15.0" fill="rgb(233,56,27)" rx="2" ry="2" />
<text  x="981.06" y="1775.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::ColumnAppendState*&gt; (4,558,187 samples, 0.01%)</title><rect x="339.6" y="1333" width="0.1" height="15.0" fill="rgb(230,87,27)" rx="2" ry="2" />
<text  x="342.64" y="1343.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ActiveQueryContext&gt;::operator (803,424,467 samples, 1.57%)</title><rect x="333.2" y="1845" width="18.5" height="15.0" fill="rgb(247,119,12)" rx="2" ry="2" />
<text  x="336.21" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, true&gt;::~vector (19,146,016 samples, 0.04%)</title><rect x="1036.4" y="1605" width="0.4" height="15.0" fill="rgb(220,39,31)" rx="2" ry="2" />
<text  x="1039.39" y="1615.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryResult, std::default_delete&lt;duckdb::QueryResult&gt;, true&gt;::unique_ptr&lt;duckdb::MaterializedQueryResult, std::default_delete&lt;std::unique_ptr&lt;duckdb::QueryResult, std::default_delete&lt;duckdb::QueryResult&gt; &gt; &gt;, void&gt; (12,915,088 samples, 0.03%)</title><rect x="395.1" y="1925" width="0.3" height="15.0" fill="rgb(234,204,25)" rx="2" ry="2" />
<text  x="398.13" y="1935.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::BlockMetaData*, duckdb::BlockMetaData&gt; (351,831,442 samples, 0.69%)</title><rect x="342.0" y="1189" width="8.1" height="15.0" fill="rgb(226,210,34)" rx="2" ry="2" />
<text  x="344.97" y="1199.5" ></text>
</g>
<g >
<title>duckdb::ExpressionRewriter::ApplyRules (54,579,917 samples, 0.11%)</title><rect x="741.3" y="1669" width="1.3" height="15.0" fill="rgb(242,61,1)" rx="2" ry="2" />
<text  x="744.34" y="1679.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::BlockHandle,  (6,497,338 samples, 0.01%)</title><rect x="103.7" y="1557" width="0.2" height="15.0" fill="rgb(247,76,47)" rx="2" ry="2" />
<text  x="106.73" y="1567.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt; &gt; &gt;::_M_realloc_insert&lt;&gt; (13,969,350 samples, 0.03%)</title><rect x="759.8" y="1765" width="0.4" height="15.0" fill="rgb(206,61,32)" rx="2" ry="2" />
<text  x="762.83" y="1775.5" ></text>
</g>
<g >
<title>duckdb::EntryIndex::~EntryIndex (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1381" width="0.3" height="15.0" fill="rgb(244,118,39)" rx="2" ry="2" />
<text  x="1120.47" y="1391.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::IntegerTypeMatcher, std::default_delete&lt;duckdb::IntegerTypeMatcher&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::IntegerTypeMatcher&gt;, void&gt; (9,307,127 samples, 0.02%)</title><rect x="784.8" y="1829" width="0.2" height="15.0" fill="rgb(223,146,14)" rx="2" ry="2" />
<text  x="787.78" y="1839.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::GetName[abi:cxx11] (5,052,063 samples, 0.01%)</title><rect x="622.3" y="1717" width="0.1" height="15.0" fill="rgb(213,6,8)" rx="2" ry="2" />
<text  x="625.33" y="1727.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (63,917,622 samples, 0.12%)</title><rect x="498.0" y="1621" width="1.4" height="15.0" fill="rgb(212,160,27)" rx="2" ry="2" />
<text  x="500.97" y="1631.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ClientData, std::default_delete&lt;duckdb::ClientData&gt; &gt;::_M_ptr (4,462,250 samples, 0.01%)</title><rect x="712.9" y="1813" width="0.1" height="15.0" fill="rgb(235,99,2)" rx="2" ry="2" />
<text  x="715.90" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ColumnScanState::~ColumnScanState (40,505,443 samples, 0.08%)</title><rect x="287.7" y="1621" width="0.9" height="15.0" fill="rgb(237,121,43)" rx="2" ry="2" />
<text  x="290.68" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (6,418,628 samples, 0.01%)</title><rect x="954.8" y="1509" width="0.1" height="15.0" fill="rgb(235,178,0)" rx="2" ry="2" />
<text  x="957.75" y="1519.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::CatalogEntry&gt;::operator (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1349" width="1.9" height="15.0" fill="rgb(205,64,7)" rx="2" ry="2" />
<text  x="1120.81" y="1359.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ColumnDataAllocator&gt;::shared_ptr&lt;std::allocator&lt;duckdb::ColumnDataAllocator&gt;, duckdb::ClientContext&amp;, duckdb::ColumnDataAllocatorType&amp;&gt; (20,724,057 samples, 0.04%)</title><rect x="911.6" y="1717" width="0.5" height="15.0" fill="rgb(207,138,33)" rx="2" ry="2" />
<text  x="914.59" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt; &gt;::~unique_ptr (19,587,713 samples, 0.04%)</title><rect x="633.5" y="1781" width="0.5" height="15.0" fill="rgb(235,8,54)" rx="2" ry="2" />
<text  x="636.50" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_bin_flush_stashed (5,186,431 samples, 0.01%)</title><rect x="1124.1" y="1445" width="0.1" height="15.0" fill="rgb(253,129,24)" rx="2" ry="2" />
<text  x="1127.11" y="1455.5" ></text>
</g>
<g >
<title>duckdb::Binding::HasMatchingBinding (12,350,845 samples, 0.02%)</title><rect x="960.2" y="1653" width="0.3" height="15.0" fill="rgb(234,193,1)" rx="2" ry="2" />
<text  x="963.24" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::InsertLocalState, std::default_delete&lt;duckdb::InsertLocalState&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::InsertLocalState&gt;, void&gt; (7,423,169 samples, 0.01%)</title><rect x="491.5" y="1781" width="0.1" height="15.0" fill="rgb(232,203,21)" rx="2" ry="2" />
<text  x="494.45" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (9,808,460 samples, 0.02%)</title><rect x="78.2" y="1989" width="0.2" height="15.0" fill="rgb(250,58,20)" rx="2" ry="2" />
<text  x="81.19" y="1999.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned long [], std::default_delete&lt;unsigned long []&gt; &gt;::get (5,586,958 samples, 0.01%)</title><rect x="900.3" y="1445" width="0.2" height="15.0" fill="rgb(226,138,37)" rx="2" ry="2" />
<text  x="903.33" y="1455.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt;::deallocate (38,447,958 samples, 0.07%)</title><rect x="41.0" y="2021" width="0.9" height="15.0" fill="rgb(210,1,35)" rx="2" ry="2" />
<text  x="43.99" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (9,461,226 samples, 0.02%)</title><rect x="939.4" y="1701" width="0.2" height="15.0" fill="rgb(254,31,12)" rx="2" ry="2" />
<text  x="942.40" y="1711.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;*&gt; (22,538,946 samples, 0.04%)</title><rect x="906.6" y="1701" width="0.5" height="15.0" fill="rgb(242,113,8)" rx="2" ry="2" />
<text  x="909.61" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ScalarFunctionCatalogEntry::ScalarFunctionCatalogEntry (15,952,823 samples, 0.03%)</title><rect x="1114.6" y="1845" width="0.4" height="15.0" fill="rgb(250,23,44)" rx="2" ry="2" />
<text  x="1117.61" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_S_check_init_len (20,816,246 samples, 0.04%)</title><rect x="652.8" y="1701" width="0.5" height="15.0" fill="rgb(220,105,52)" rx="2" ry="2" />
<text  x="655.81" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ValidityScanPartial (174,680,818 samples, 0.34%)</title><rect x="282.2" y="1573" width="4.0" height="15.0" fill="rgb(217,60,53)" rx="2" ry="2" />
<text  x="285.20" y="1583.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::ColumnDataAllocator&gt; &gt;::construct&lt;duckdb::ColumnDataAllocator, duckdb::ClientContext&amp;, duckdb::ColumnDataAllocatorType&amp;&gt; (12,056,105 samples, 0.02%)</title><rect x="98.3" y="1653" width="0.3" height="15.0" fill="rgb(248,152,41)" rx="2" ry="2" />
<text  x="101.27" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ColumnSegment&gt;, void&gt; (11,723,652 samples, 0.02%)</title><rect x="446.1" y="1653" width="0.2" height="15.0" fill="rgb(218,42,35)" rx="2" ry="2" />
<text  x="449.08" y="1663.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::find (46,775,586 samples, 0.09%)</title><rect x="687.6" y="1813" width="1.1" height="15.0" fill="rgb(234,55,5)" rx="2" ry="2" />
<text  x="690.63" y="1823.5" ></text>
</g>
<g >
<title>duckdb::CreateColumnInternal&lt;std::shared_ptr&lt;duckdb::ColumnData&gt;, duckdb::SharedConstructor&gt; (8,249,785 samples, 0.02%)</title><rect x="104.7" y="1653" width="0.2" height="15.0" fill="rgb(234,115,50)" rx="2" ry="2" />
<text  x="107.72" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int []&gt; &gt;::get (255,202,311 samples, 0.50%)</title><rect x="260.1" y="1477" width="5.9" height="15.0" fill="rgb(241,67,49)" rx="2" ry="2" />
<text  x="263.12" y="1487.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (5,010,823 samples, 0.01%)</title><rect x="381.0" y="1637" width="0.1" height="15.0" fill="rgb(208,67,14)" rx="2" ry="2" />
<text  x="384.00" y="1647.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderNode (17,276,376 samples, 0.03%)</title><rect x="551.5" y="1765" width="0.4" height="15.0" fill="rgb(239,184,50)" rx="2" ry="2" />
<text  x="554.51" y="1775.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::DuckTransaction, duckdb::DuckTransactionManager&amp;, duckdb::ClientContext&amp;, unsigned long&amp;, unsigned long&amp;&gt; (134,391,388 samples, 0.26%)</title><rect x="996.3" y="1669" width="3.1" height="15.0" fill="rgb(240,94,53)" rx="2" ry="2" />
<text  x="999.30" y="1679.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (6,874,726 samples, 0.01%)</title><rect x="1182.9" y="2021" width="0.2" height="15.0" fill="rgb(224,220,17)" rx="2" ry="2" />
<text  x="1185.90" y="2031.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ifree (223,308,066 samples, 0.44%)</title><rect x="344.3" y="837" width="5.2" height="15.0" fill="rgb(216,76,49)" rx="2" ry="2" />
<text  x="347.34" y="847.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_realloc_insert&lt;unsigned long&amp;, unsigned long&amp;&gt; (107,243,392 samples, 0.21%)</title><rect x="627.8" y="1733" width="2.4" height="15.0" fill="rgb(208,82,20)" rx="2" ry="2" />
<text  x="630.78" y="1743.5" ></text>
</g>
<g >
<title>duckdb::SimpleFunction::SimpleFunction (5,591,374 samples, 0.01%)</title><rect x="1114.8" y="1669" width="0.2" height="15.0" fill="rgb(251,227,42)" rx="2" ry="2" />
<text  x="1117.83" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (6,091,515 samples, 0.01%)</title><rect x="664.3" y="1749" width="0.2" height="15.0" fill="rgb(232,163,26)" rx="2" ry="2" />
<text  x="667.32" y="1759.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ColumnSegment&gt;::operator (92,143,706 samples, 0.18%)</title><rect x="241.8" y="789" width="2.1" height="15.0" fill="rgb(244,89,50)" rx="2" ry="2" />
<text  x="244.77" y="799.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::operator= (5,308,274 samples, 0.01%)</title><rect x="257.2" y="1493" width="0.1" height="15.0" fill="rgb(228,68,19)" rx="2" ry="2" />
<text  x="260.23" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::push_back (23,398,874 samples, 0.05%)</title><rect x="806.1" y="1845" width="0.6" height="15.0" fill="rgb(234,101,29)" rx="2" ry="2" />
<text  x="809.15" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (6,094,658 samples, 0.01%)</title><rect x="221.9" y="1285" width="0.1" height="15.0" fill="rgb(253,157,15)" rx="2" ry="2" />
<text  x="224.90" y="1295.5" ></text>
</g>
<g >
<title>duckdb::PostgresParser::Parse (302,238,188 samples, 0.59%)</title><rect x="517.9" y="1925" width="7.0" height="15.0" fill="rgb(231,225,26)" rx="2" ry="2" />
<text  x="520.90" y="1935.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::Binder, std::allocator&lt;duckdb::Binder&gt;, bool, duckdb::ClientContext&amp;, std::shared_ptr&lt;duckdb::Binder&gt;, bool&amp;&gt; (64,433,366 samples, 0.13%)</title><rect x="984.8" y="1797" width="1.5" height="15.0" fill="rgb(237,172,48)" rx="2" ry="2" />
<text  x="987.79" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (7,680,010 samples, 0.01%)</title><rect x="487.8" y="1397" width="0.2" height="15.0" fill="rgb(242,72,23)" rx="2" ry="2" />
<text  x="490.79" y="1407.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_ctx_get (4,449,250 samples, 0.01%)</title><rect x="498.7" y="1365" width="0.1" height="15.0" fill="rgb(235,1,9)" rx="2" ry="2" />
<text  x="501.72" y="1375.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::~unordered_set (61,298,850 samples, 0.12%)</title><rect x="681.7" y="1797" width="1.4" height="15.0" fill="rgb(213,81,7)" rx="2" ry="2" />
<text  x="684.65" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PipelineExecutor, std::default_delete&lt;duckdb::PipelineExecutor&gt; &gt;::~unique_ptr (138,984,258 samples, 0.27%)</title><rect x="333.3" y="1733" width="3.2" height="15.0" fill="rgb(228,139,10)" rx="2" ry="2" />
<text  x="336.31" y="1743.5" ></text>
</g>
<g >
<title>duckdb::BaseQueryResult::BaseQueryResult (19,265,001 samples, 0.04%)</title><rect x="1100.2" y="1861" width="0.4" height="15.0" fill="rgb(205,64,6)" rx="2" ry="2" />
<text  x="1103.18" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (13,108,906 samples, 0.03%)</title><rect x="1002.7" y="1653" width="0.3" height="15.0" fill="rgb(218,157,54)" rx="2" ry="2" />
<text  x="1005.69" y="1663.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, std::shared_ptr&lt;duckdb::QueryProfiler&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long, std::shared_ptr&lt;duckdb::QueryProfiler&gt; &gt;, unsigned long, std::shared_ptr&lt;duckdb::QueryProfiler&gt; &gt; (4,421,707 samples, 0.01%)</title><rect x="352.3" y="1861" width="0.1" height="15.0" fill="rgb(241,110,10)" rx="2" ry="2" />
<text  x="355.26" y="1871.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (12,754,108 samples, 0.02%)</title><rect x="1182.4" y="2021" width="0.3" height="15.0" fill="rgb(233,93,38)" rx="2" ry="2" />
<text  x="1185.37" y="2031.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateStatistics (11,213,153 samples, 0.02%)</title><rect x="766.8" y="1701" width="0.3" height="15.0" fill="rgb(232,139,4)" rx="2" ry="2" />
<text  x="769.80" y="1711.5" ></text>
</g>
<g >
<title>duckdb::LogicalType::LogicalType (4,473,904 samples, 0.01%)</title><rect x="951.5" y="1621" width="0.1" height="15.0" fill="rgb(233,155,31)" rx="2" ry="2" />
<text  x="954.53" y="1631.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt; &gt;::unique_ptr (8,391,100 samples, 0.02%)</title><rect x="377.1" y="1797" width="0.2" height="15.0" fill="rgb(227,225,50)" rx="2" ry="2" />
<text  x="380.14" y="1807.5" ></text>
</g>
<g >
<title>duckdb::DatePartSimplificationRule::DatePartSimplificationRule (88,385,660 samples, 0.17%)</title><rect x="796.5" y="1861" width="2.0" height="15.0" fill="rgb(217,115,35)" rx="2" ry="2" />
<text  x="799.46" y="1871.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::FetchFromSource (148,042,563 samples, 0.29%)</title><rect x="361.1" y="1877" width="3.4" height="15.0" fill="rgb(246,161,16)" rx="2" ry="2" />
<text  x="364.10" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, unsigned long, std::__detail::_Identity, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (4,449,006 samples, 0.01%)</title><rect x="664.1" y="1733" width="0.1" height="15.0" fill="rgb(254,2,35)" rx="2" ry="2" />
<text  x="667.06" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (37,419,717 samples, 0.07%)</title><rect x="499.7" y="1733" width="0.9" height="15.0" fill="rgb(230,60,52)" rx="2" ry="2" />
<text  x="502.71" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TableRef, std::default_delete&lt;duckdb::TableRef&gt;, true&gt;::unique_ptr&lt;duckdb::ExpressionListRef, std::default_delete&lt;std::unique_ptr&lt;duckdb::TableRef, std::default_delete&lt;duckdb::TableRef&gt; &gt; &gt;, void&gt; (10,161,825 samples, 0.02%)</title><rect x="531.3" y="1749" width="0.2" height="15.0" fill="rgb(213,51,41)" rx="2" ry="2" />
<text  x="534.28" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt; &gt;::unique_ptr (17,440,524 samples, 0.03%)</title><rect x="322.5" y="1797" width="0.4" height="15.0" fill="rgb(215,190,49)" rx="2" ry="2" />
<text  x="325.45" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Deserializer::Read&lt;unsigned int&gt; (5,326,146 samples, 0.01%)</title><rect x="588.2" y="1829" width="0.1" height="15.0" fill="rgb(224,157,16)" rx="2" ry="2" />
<text  x="591.21" y="1839.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;::operator (22,056,679 samples, 0.04%)</title><rect x="500.0" y="1493" width="0.5" height="15.0" fill="rgb(240,173,11)" rx="2" ry="2" />
<text  x="502.96" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_realloc_insert&lt;unsigned long const&amp;&gt; (4,368,152 samples, 0.01%)</title><rect x="1055.2" y="1765" width="0.1" height="15.0" fill="rgb(231,41,21)" rx="2" ry="2" />
<text  x="1058.16" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::SelectionData&gt; &gt;::construct&lt;duckdb::SelectionData, unsigned long&amp;&gt; (7,006,343 samples, 0.01%)</title><rect x="315.5" y="1477" width="0.2" height="15.0" fill="rgb(215,54,33)" rx="2" ry="2" />
<text  x="318.53" y="1487.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::BlockHandle&gt;::~shared_ptr (87,531,616 samples, 0.17%)</title><rect x="241.9" y="757" width="2.0" height="15.0" fill="rgb(211,42,6)" rx="2" ry="2" />
<text  x="244.86" y="767.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::InitializeScan (127,132,190 samples, 0.25%)</title><rect x="223.3" y="1733" width="3.0" height="15.0" fill="rgb(218,127,0)" rx="2" ry="2" />
<text  x="226.34" y="1743.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::HasNode (7,411,975 samples, 0.01%)</title><rect x="618.4" y="1781" width="0.1" height="15.0" fill="rgb(212,189,27)" rx="2" ry="2" />
<text  x="621.35" y="1791.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::TransactionManager, std::default_delete&lt;duckdb::TransactionManager&gt; &gt;::_M_ptr (6,043,845 samples, 0.01%)</title><rect x="188.6" y="1797" width="0.2" height="15.0" fill="rgb(219,214,36)" rx="2" ry="2" />
<text  x="191.65" y="1807.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::GetTaskFromProducer (185,732,840 samples, 0.36%)</title><rect x="503.5" y="1893" width="4.2" height="15.0" fill="rgb(226,222,50)" rx="2" ry="2" />
<text  x="506.45" y="1903.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::allocated (80,543,219 samples, 0.16%)</title><rect x="1128.0" y="2037" width="1.9" height="15.0" fill="rgb(248,139,45)" rx="2" ry="2" />
<text  x="1131.04" y="2047.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::HTTPState&gt;::shared_ptr&lt;std::allocator&lt;duckdb::HTTPState&gt;&gt; (10,022,357 samples, 0.02%)</title><rect x="516.5" y="1893" width="0.3" height="15.0" fill="rgb(232,73,34)" rx="2" ry="2" />
<text  x="519.53" y="1903.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (6,581,602 samples, 0.01%)</title><rect x="193.3" y="1509" width="0.1" height="15.0" fill="rgb(211,66,31)" rx="2" ry="2" />
<text  x="196.29" y="1519.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (76,131,749 samples, 0.15%)</title><rect x="400.8" y="1749" width="1.7" height="15.0" fill="rgb(209,179,28)" rx="2" ry="2" />
<text  x="403.78" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5,017,457 samples, 0.01%)</title><rect x="466.9" y="1733" width="0.2" height="15.0" fill="rgb(219,166,21)" rx="2" ry="2" />
<text  x="469.94" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (14,027,822 samples, 0.03%)</title><rect x="908.7" y="1733" width="0.4" height="15.0" fill="rgb(224,79,51)" rx="2" ry="2" />
<text  x="911.74" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ManyFunctionMatcher::~ManyFunctionMatcher (4,509,912 samples, 0.01%)</title><rect x="832.9" y="1349" width="0.1" height="15.0" fill="rgb(236,199,12)" rx="2" ry="2" />
<text  x="835.94" y="1359.5" ></text>
</g>
<g >
<title>duckdb::PipelineEvent::Schedule (208,168,143 samples, 0.41%)</title><rect x="91.5" y="1781" width="4.8" height="15.0" fill="rgb(220,17,49)" rx="2" ry="2" />
<text  x="94.50" y="1791.5" ></text>
</g>
<g >
<title>ext4_writepages (108,333,656 samples, 0.21%)</title><rect x="249.6" y="1589" width="2.5" height="15.0" fill="rgb(254,104,16)" rx="2" ry="2" />
<text  x="252.59" y="1599.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::try_dequeue&lt;duckdb::BufferEvictionNode&gt; (6,149,135 samples, 0.01%)</title><rect x="242.3" y="613" width="0.1" height="15.0" fill="rgb(213,39,31)" rx="2" ry="2" />
<text  x="245.31" y="623.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::NodeStatistics, std::default_delete&lt;duckdb::NodeStatistics&gt;, true&gt;::unique_ptr (7,651,611 samples, 0.01%)</title><rect x="767.4" y="1717" width="0.2" height="15.0" fill="rgb(206,178,14)" rx="2" ry="2" />
<text  x="770.44" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; const, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, duckdb::CatalogEntryHashFunction, duckdb::CatalogEntryEquality, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; const, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, duckdb::CatalogEntryHashFunction, duckdb::CatalogEntryEquality, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CatalogEntryEquality, duckdb::CatalogEntryHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (4,784,159 samples, 0.01%)</title><rect x="1114.0" y="1781" width="0.1" height="15.0" fill="rgb(227,11,53)" rx="2" ry="2" />
<text  x="1116.96" y="1791.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::~VectorCacheBuffer (132,880,539 samples, 0.26%)</title><rect x="390.9" y="1637" width="3.0" height="15.0" fill="rgb(243,51,11)" rx="2" ry="2" />
<text  x="393.89" y="1647.5" ></text>
</g>
<g >
<title>duckdb::Binder::CreatePlan (172,421,544 samples, 0.34%)</title><rect x="974.0" y="1765" width="3.9" height="15.0" fill="rgb(238,7,26)" rx="2" ry="2" />
<text  x="976.96" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::GetTaskFromProducer (9,656,817 samples, 0.02%)</title><rect x="354.8" y="1861" width="0.2" height="15.0" fill="rgb(232,220,1)" rx="2" ry="2" />
<text  x="357.80" y="1871.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnBinding, true&gt;::operator= (16,256,206 samples, 0.03%)</title><rect x="843.4" y="1765" width="0.4" height="15.0" fill="rgb(227,36,8)" rx="2" ry="2" />
<text  x="846.38" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (7,404,955 samples, 0.01%)</title><rect x="949.6" y="1701" width="0.2" height="15.0" fill="rgb(240,109,38)" rx="2" ry="2" />
<text  x="952.60" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ColumnRefExpression::Copy (21,360,151 samples, 0.04%)</title><rect x="949.4" y="1749" width="0.5" height="15.0" fill="rgb(224,203,53)" rx="2" ry="2" />
<text  x="952.43" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt;, false&gt;::operator= (6,333,596 samples, 0.01%)</title><rect x="377.5" y="1829" width="0.2" height="15.0" fill="rgb(233,146,42)" rx="2" ry="2" />
<text  x="380.53" y="1839.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt;*&gt; (339,350,470 samples, 0.66%)</title><rect x="237.5" y="1349" width="7.8" height="15.0" fill="rgb(233,109,11)" rx="2" ry="2" />
<text  x="240.47" y="1359.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt;::~unique_ptr (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1445" width="0.3" height="15.0" fill="rgb(210,90,4)" rx="2" ry="2" />
<text  x="1120.47" y="1455.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt; &gt; &gt;::push_back (24,876,303 samples, 0.05%)</title><rect x="1081.8" y="1813" width="0.5" height="15.0" fill="rgb(209,57,49)" rx="2" ry="2" />
<text  x="1084.75" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CompressedSegmentState, std::default_delete&lt;duckdb::CompressedSegmentState&gt;, true&gt;::~unique_ptr (30,997,037 samples, 0.06%)</title><rect x="238.4" y="773" width="0.7" height="15.0" fill="rgb(229,225,36)" rx="2" ry="2" />
<text  x="241.37" y="783.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;,  (10,826,048 samples, 0.02%)</title><rect x="374.7" y="1749" width="0.3" height="15.0" fill="rgb(222,167,7)" rx="2" ry="2" />
<text  x="377.72" y="1759.5" ></text>
</g>
<g >
<title>unmap_single_vma (89,296,689 samples, 0.17%)</title><rect x="1177.7" y="1909" width="2.0" height="15.0" fill="rgb(244,40,9)" rx="2" ry="2" />
<text  x="1180.67" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt; &gt;::_M_deallocate_node (44,131,018 samples, 0.09%)</title><rect x="469.7" y="1717" width="1.1" height="15.0" fill="rgb(205,74,27)" rx="2" ry="2" />
<text  x="472.74" y="1727.5" ></text>
</g>
<g >
<title>std::function&lt;void  (41,267,291 samples, 0.08%)</title><rect x="725.2" y="1717" width="0.9" height="15.0" fill="rgb(248,64,10)" rx="2" ry="2" />
<text  x="728.16" y="1727.5" ></text>
</g>
<g >
<title>rmqueue (16,926,520 samples, 0.03%)</title><rect x="165.4" y="1845" width="0.4" height="15.0" fill="rgb(207,149,52)" rx="2" ry="2" />
<text  x="168.38" y="1855.5" ></text>
</g>
<g >
<title>duckdb::QueryGraph::QueryGraph (4,501,568 samples, 0.01%)</title><rect x="752.4" y="1797" width="0.1" height="15.0" fill="rgb(231,50,49)" rx="2" ry="2" />
<text  x="755.38" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::ColumnDataCollectionSegment (4,597,871 samples, 0.01%)</title><rect x="866.6" y="1749" width="0.1" height="15.0" fill="rgb(223,31,28)" rx="2" ry="2" />
<text  x="869.58" y="1759.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, unsigned long&amp;&gt; (22,396,758 samples, 0.04%)</title><rect x="473.7" y="1669" width="0.5" height="15.0" fill="rgb(238,83,17)" rx="2" ry="2" />
<text  x="476.72" y="1679.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ReplaceBinding, true&gt;::~vector (8,695,716 samples, 0.02%)</title><rect x="769.3" y="1781" width="0.2" height="15.0" fill="rgb(252,137,37)" rx="2" ry="2" />
<text  x="772.31" y="1791.5" ></text>
</g>
<g >
<title>perf_iterate_sb (5,475,837 samples, 0.01%)</title><rect x="1173.3" y="1893" width="0.2" height="15.0" fill="rgb(218,169,31)" rx="2" ry="2" />
<text  x="1176.35" y="1903.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (14,714,004 samples, 0.03%)</title><rect x="466.9" y="1765" width="0.3" height="15.0" fill="rgb(209,213,8)" rx="2" ry="2" />
<text  x="469.85" y="1775.5" ></text>
</g>
<g >
<title>duckdb::BinaryData::BinaryData (7,941,660 samples, 0.02%)</title><rect x="585.2" y="1845" width="0.1" height="15.0" fill="rgb(230,8,11)" rx="2" ry="2" />
<text  x="588.16" y="1855.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (5,110,682 samples, 0.01%)</title><rect x="1171.7" y="1861" width="0.1" height="15.0" fill="rgb(246,172,30)" rx="2" ry="2" />
<text  x="1174.71" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt;, true&gt;::operator= (8,389,282 samples, 0.02%)</title><rect x="815.8" y="1845" width="0.2" height="15.0" fill="rgb(229,202,46)" rx="2" ry="2" />
<text  x="818.79" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt; &gt; (15,917,742 samples, 0.03%)</title><rect x="569.3" y="1653" width="0.4" height="15.0" fill="rgb(209,32,2)" rx="2" ry="2" />
<text  x="572.33" y="1663.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;::operator (15,276,163 samples, 0.03%)</title><rect x="620.0" y="1717" width="0.4" height="15.0" fill="rgb(245,212,10)" rx="2" ry="2" />
<text  x="623.04" y="1727.5" ></text>
</g>
<g >
<title>find_vma (5,795,317 samples, 0.01%)</title><rect x="1172.0" y="1893" width="0.1" height="15.0" fill="rgb(227,106,10)" rx="2" ry="2" />
<text  x="1174.96" y="1903.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_dalloc_large (15,466,704 samples, 0.03%)</title><rect x="391.5" y="1461" width="0.4" height="15.0" fill="rgb(226,199,36)" rx="2" ry="2" />
<text  x="394.51" y="1471.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (5,228,335 samples, 0.01%)</title><rect x="1023.6" y="1781" width="0.1" height="15.0" fill="rgb(229,50,51)" rx="2" ry="2" />
<text  x="1026.57" y="1791.5" ></text>
</g>
<g >
<title>generic_write_end (8,933,939 samples, 0.02%)</title><rect x="248.5" y="1525" width="0.2" height="15.0" fill="rgb(227,127,18)" rx="2" ry="2" />
<text  x="251.51" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_node_ptr (18,270,810 samples, 0.04%)</title><rect x="670.2" y="1701" width="0.4" height="15.0" fill="rgb(250,218,23)" rx="2" ry="2" />
<text  x="673.20" y="1711.5" ></text>
</g>
<g >
<title>duckdb::PhysicalExpressionScan::~PhysicalExpressionScan (55,183,185 samples, 0.11%)</title><rect x="915.2" y="1717" width="1.3" height="15.0" fill="rgb(223,48,41)" rx="2" ry="2" />
<text  x="918.22" y="1727.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::ProgressBar*, std::default_delete&lt;duckdb::ProgressBar&gt; &gt; (19,351,436 samples, 0.04%)</title><rect x="512.7" y="1861" width="0.4" height="15.0" fill="rgb(233,93,12)" rx="2" ry="2" />
<text  x="515.68" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::~_Hashtable_alloc (5,267,722 samples, 0.01%)</title><rect x="697.4" y="1781" width="0.1" height="15.0" fill="rgb(224,115,15)" rx="2" ry="2" />
<text  x="700.37" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundQueryNode, std::default_delete&lt;duckdb::BoundQueryNode&gt;, true&gt;::operator= (17,089,605 samples, 0.03%)</title><rect x="972.8" y="1781" width="0.4" height="15.0" fill="rgb(225,11,12)" rx="2" ry="2" />
<text  x="975.84" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::~unique_ptr (70,719,888 samples, 0.14%)</title><rect x="1035.7" y="1893" width="1.7" height="15.0" fill="rgb(219,227,24)" rx="2" ry="2" />
<text  x="1038.75" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics []&gt; &gt;::unique_ptr (6,221,529 samples, 0.01%)</title><rect x="433.9" y="1605" width="0.1" height="15.0" fill="rgb(208,20,37)" rx="2" ry="2" />
<text  x="436.90" y="1615.5" ></text>
</g>
<g >
<title>duckdb::LogicalInsert::~LogicalInsert (63,556,725 samples, 0.12%)</title><rect x="1035.9" y="1845" width="1.5" height="15.0" fill="rgb(239,167,50)" rx="2" ry="2" />
<text  x="1038.90" y="1855.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::HTTPState&gt;::operator= (9,915,819 samples, 0.02%)</title><rect x="516.8" y="1925" width="0.2" height="15.0" fill="rgb(229,200,16)" rx="2" ry="2" />
<text  x="519.79" y="1935.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::AttachedDatabase&gt;::operator (15,089,061 samples, 0.03%)</title><rect x="1117.5" y="1765" width="0.3" height="15.0" fill="rgb(224,82,28)" rx="2" ry="2" />
<text  x="1120.47" y="1775.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::~vector (20,413,237 samples, 0.04%)</title><rect x="662.3" y="1781" width="0.5" height="15.0" fill="rgb(238,36,27)" rx="2" ry="2" />
<text  x="665.31" y="1791.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Event*, true&gt;::~vector (7,363,471 samples, 0.01%)</title><rect x="1057.2" y="1813" width="0.2" height="15.0" fill="rgb(242,167,32)" rx="2" ry="2" />
<text  x="1060.19" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::~vector (17,517,683 samples, 0.03%)</title><rect x="562.0" y="1765" width="0.4" height="15.0" fill="rgb(205,166,42)" rx="2" ry="2" />
<text  x="564.96" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (6,738,284 samples, 0.01%)</title><rect x="969.7" y="1717" width="0.1" height="15.0" fill="rgb(251,228,39)" rx="2" ry="2" />
<text  x="972.65" y="1727.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (51,707,065 samples, 0.10%)</title><rect x="844.6" y="1781" width="1.2" height="15.0" fill="rgb(250,86,49)" rx="2" ry="2" />
<text  x="847.59" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (16,829,821 samples, 0.03%)</title><rect x="959.9" y="1621" width="0.3" height="15.0" fill="rgb(222,167,6)" rx="2" ry="2" />
<text  x="962.86" y="1631.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (2,354,839,056 samples, 4.59%)</title><rect x="91.1" y="1941" width="54.2" height="15.0" fill="rgb(219,171,15)" rx="2" ry="2" />
<text  x="94.10" y="1951.5" >std::..</text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (5,646,698 samples, 0.01%)</title><rect x="106.9" y="1557" width="0.1" height="15.0" fill="rgb(233,136,52)" rx="2" ry="2" />
<text  x="109.87" y="1567.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocate (71,332,395 samples, 0.14%)</title><rect x="217.6" y="1525" width="1.7" height="15.0" fill="rgb(254,66,22)" rx="2" ry="2" />
<text  x="220.63" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;, std::allocator&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt; &gt; &gt;::emplace_back&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt; &gt; (29,370,856 samples, 0.06%)</title><rect x="447.6" y="1637" width="0.7" height="15.0" fill="rgb(207,27,45)" rx="2" ry="2" />
<text  x="450.64" y="1647.5" ></text>
</g>
<g >
<title>duckdb::BoundStatement::operator= (15,742,651 samples, 0.03%)</title><rect x="986.7" y="1829" width="0.4" height="15.0" fill="rgb(234,81,22)" rx="2" ry="2" />
<text  x="989.70" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BoundSelectNode::BoundSelectNode (24,572,700 samples, 0.05%)</title><rect x="963.3" y="1733" width="0.5" height="15.0" fill="rgb(243,157,14)" rx="2" ry="2" />
<text  x="966.28" y="1743.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (51,367,091 samples, 0.10%)</title><rect x="1096.0" y="1829" width="1.2" height="15.0" fill="rgb(243,178,30)" rx="2" ry="2" />
<text  x="1099.03" y="1839.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::enqueue&lt; (8,718,328 samples, 0.02%)</title><rect x="870.7" y="1589" width="0.2" height="15.0" fill="rgb(206,62,3)" rx="2" ry="2" />
<text  x="873.66" y="1599.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::ColumnBinding, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt;, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt; &gt; &gt;::operator[] (48,560,263 samples, 0.09%)</title><rect x="762.8" y="1669" width="1.1" height="15.0" fill="rgb(250,111,14)" rx="2" ry="2" />
<text  x="765.80" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Task&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; &gt;::~vector (8,416,734 samples, 0.02%)</title><rect x="1059.8" y="1797" width="0.2" height="15.0" fill="rgb(213,219,18)" rx="2" ry="2" />
<text  x="1062.85" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::SelectionData&gt;::construct&lt;duckdb::SelectionData, unsigned long&amp;&gt; (448,881,762 samples, 0.88%)</title><rect x="256.3" y="1525" width="10.3" height="15.0" fill="rgb(208,129,3)" rx="2" ry="2" />
<text  x="259.30" y="1535.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::TaskScheduler*, std::default_delete&lt;duckdb::TaskScheduler&gt; &gt; (11,364,089 samples, 0.02%)</title><rect x="502.8" y="1797" width="0.3" height="15.0" fill="rgb(246,113,49)" rx="2" ry="2" />
<text  x="505.81" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; (34,340,794 samples, 0.07%)</title><rect x="827.0" y="1813" width="0.8" height="15.0" fill="rgb(248,27,23)" rx="2" ry="2" />
<text  x="830.04" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformStatementInternal (583,431,529 samples, 1.14%)</title><rect x="525.7" y="1861" width="13.4" height="15.0" fill="rgb(250,0,41)" rx="2" ry="2" />
<text  x="528.68" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::AllocatedData, std::allocator&lt;duckdb::AllocatedData&gt; &gt;::~vector (73,263,554 samples, 0.14%)</title><rect x="1123.1" y="1717" width="1.7" height="15.0" fill="rgb(217,178,17)" rx="2" ry="2" />
<text  x="1126.11" y="1727.5" ></text>
</g>
<g >
<title>do_page_fault (283,977,041 samples, 0.55%)</title><rect x="161.6" y="2005" width="6.5" height="15.0" fill="rgb(209,20,52)" rx="2" ry="2" />
<text  x="164.59" y="2015.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_trigger (18,540,167 samples, 0.04%)</title><rect x="349.0" y="789" width="0.5" height="15.0" fill="rgb(215,44,54)" rx="2" ry="2" />
<text  x="352.04" y="799.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;::~pair (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1013" width="0.3" height="15.0" fill="rgb(222,85,20)" rx="2" ry="2" />
<text  x="1120.47" y="1023.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (6,356,705 samples, 0.01%)</title><rect x="289.9" y="1365" width="0.1" height="15.0" fill="rgb(233,34,41)" rx="2" ry="2" />
<text  x="292.86" y="1375.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (15,263,896 samples, 0.03%)</title><rect x="696.3" y="1765" width="0.3" height="15.0" fill="rgb(224,126,26)" rx="2" ry="2" />
<text  x="699.29" y="1775.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::operator= (10,408,117 samples, 0.02%)</title><rect x="981.6" y="1797" width="0.2" height="15.0" fill="rgb(226,98,38)" rx="2" ry="2" />
<text  x="984.57" y="1807.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::VectorCache*&gt; (99,312,401 samples, 0.19%)</title><rect x="481.5" y="1669" width="2.2" height="15.0" fill="rgb(232,74,38)" rx="2" ry="2" />
<text  x="484.46" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1093" width="0.1" height="15.0" fill="rgb(237,1,30)" rx="2" ry="2" />
<text  x="14.25" y="1103.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::ResetFromCache (13,974,388 samples, 0.03%)</title><rect x="894.8" y="1749" width="0.3" height="15.0" fill="rgb(231,51,1)" rx="2" ry="2" />
<text  x="897.81" y="1759.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::IsEnabled (5,218,074 samples, 0.01%)</title><rect x="704.3" y="1845" width="0.1" height="15.0" fill="rgb(251,152,33)" rx="2" ry="2" />
<text  x="707.27" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::operator= (9,648,887 samples, 0.02%)</title><rect x="981.6" y="1781" width="0.2" height="15.0" fill="rgb(221,51,24)" rx="2" ry="2" />
<text  x="984.58" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (5,914,968 samples, 0.01%)</title><rect x="923.7" y="1797" width="0.1" height="15.0" fill="rgb(231,152,42)" rx="2" ry="2" />
<text  x="926.67" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::ArithmeticSimplificationRule, std::default_delete&lt;duckdb::ArithmeticSimplificationRule&gt;, void&gt; (11,569,745 samples, 0.02%)</title><rect x="821.0" y="1861" width="0.3" height="15.0" fill="rgb(211,54,27)" rx="2" ry="2" />
<text  x="824.03" y="1871.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::FetchString (184,328,641 samples, 0.36%)</title><rect x="275.9" y="1541" width="4.2" height="15.0" fill="rgb(242,139,9)" rx="2" ry="2" />
<text  x="278.86" y="1551.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (6,056,586 samples, 0.01%)</title><rect x="757.9" y="1765" width="0.1" height="15.0" fill="rgb(250,136,13)" rx="2" ry="2" />
<text  x="760.86" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (4,465,057 samples, 0.01%)</title><rect x="986.9" y="1797" width="0.1" height="15.0" fill="rgb(209,73,32)" rx="2" ry="2" />
<text  x="989.94" y="1807.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::VectorCache, true&gt;::~vector (5,495,054 samples, 0.01%)</title><rect x="298.8" y="1701" width="0.1" height="15.0" fill="rgb(234,89,41)" rx="2" ry="2" />
<text  x="301.82" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::vector (4,632,110 samples, 0.01%)</title><rect x="532.1" y="1653" width="0.1" height="15.0" fill="rgb(223,154,18)" rx="2" ry="2" />
<text  x="535.06" y="1663.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; &gt;::find (27,948,724 samples, 0.05%)</title><rect x="1002.6" y="1701" width="0.7" height="15.0" fill="rgb(212,125,27)" rx="2" ry="2" />
<text  x="1005.63" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (7,695,788 samples, 0.02%)</title><rect x="788.6" y="1749" width="0.2" height="15.0" fill="rgb(233,57,1)" rx="2" ry="2" />
<text  x="791.63" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_realloc_insert&lt;duckdb::LogicalType const&amp;&gt; (17,741,055 samples, 0.03%)</title><rect x="969.1" y="1733" width="0.4" height="15.0" fill="rgb(215,76,29)" rx="2" ry="2" />
<text  x="972.07" y="1743.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;duckdb::Optimizer::Optimize (7,510,389 samples, 0.01%)</title><rect x="772.5" y="1829" width="0.2" height="15.0" fill="rgb(218,83,34)" rx="2" ry="2" />
<text  x="775.52" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::unique_ptr (11,023,324 samples, 0.02%)</title><rect x="530.2" y="1653" width="0.3" height="15.0" fill="rgb(217,173,20)" rx="2" ry="2" />
<text  x="533.22" y="1663.5" ></text>
</g>
<g >
<title>duckdb::VectorBuffer::VectorBuffer (12,404,459 samples, 0.02%)</title><rect x="901.7" y="1493" width="0.3" height="15.0" fill="rgb(249,147,39)" rx="2" ry="2" />
<text  x="904.71" y="1503.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (52,837,475 samples, 0.10%)</title><rect x="247.5" y="1573" width="1.3" height="15.0" fill="rgb(243,75,24)" rx="2" ry="2" />
<text  x="250.55" y="1583.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::begin (7,224,818 samples, 0.01%)</title><rect x="687.1" y="1813" width="0.1" height="15.0" fill="rgb(242,91,8)" rx="2" ry="2" />
<text  x="690.07" y="1823.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (5,137,671 samples, 0.01%)</title><rect x="820.1" y="1797" width="0.1" height="15.0" fill="rgb(211,208,34)" rx="2" ry="2" />
<text  x="823.11" y="1807.5" ></text>
</g>
<g >
<title>duckdb::UnnestRewriter::FindCandidates (7,016,598 samples, 0.01%)</title><rect x="768.9" y="1765" width="0.2" height="15.0" fill="rgb(209,7,3)" rx="2" ry="2" />
<text  x="771.94" y="1775.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long, std::deque&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;::~stack (6,437,056 samples, 0.01%)</title><rect x="336.3" y="1685" width="0.1" height="15.0" fill="rgb(237,76,44)" rx="2" ry="2" />
<text  x="339.29" y="1695.5" ></text>
</g>
<g >
<title>duckdb::FoldableConstantMatcher::FoldableConstantMatcher (12,249,610 samples, 0.02%)</title><rect x="794.5" y="1813" width="0.3" height="15.0" fill="rgb(241,31,37)" rx="2" ry="2" />
<text  x="797.49" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_free (5,844,664 samples, 0.01%)</title><rect x="896.4" y="1413" width="0.1" height="15.0" fill="rgb(218,151,11)" rx="2" ry="2" />
<text  x="899.38" y="1423.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (46,284,187 samples, 0.09%)</title><rect x="469.7" y="1749" width="1.1" height="15.0" fill="rgb(230,194,51)" rx="2" ry="2" />
<text  x="472.69" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Rule::~Rule (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1685" width="0.3" height="15.0" fill="rgb(231,135,42)" rx="2" ry="2" />
<text  x="835.82" y="1695.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (93,443,577 samples, 0.18%)</title><rect x="890.1" y="1541" width="2.1" height="15.0" fill="rgb(228,70,16)" rx="2" ry="2" />
<text  x="893.07" y="1551.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (87,531,616 samples, 0.17%)</title><rect x="241.9" y="725" width="2.0" height="15.0" fill="rgb(234,174,35)" rx="2" ry="2" />
<text  x="244.86" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Binder&gt; &gt;::construct&lt;duckdb::Binder, bool, duckdb::ClientContext&amp;, std::shared_ptr&lt;duckdb::Binder&gt;, bool&amp;&gt; (53,621,333 samples, 0.10%)</title><rect x="1028.1" y="1765" width="1.2" height="15.0" fill="rgb(235,157,18)" rx="2" ry="2" />
<text  x="1031.07" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformValuesList (208,632,489 samples, 0.41%)</title><rect x="527.7" y="1765" width="4.8" height="15.0" fill="rgb(238,112,35)" rx="2" ry="2" />
<text  x="530.66" y="1775.5" ></text>
</g>
<g >
<title>ext4_do_update_inode (7,490,284 samples, 0.01%)</title><rect x="248.0" y="1461" width="0.2" height="15.0" fill="rgb(253,86,22)" rx="2" ry="2" />
<text  x="251.04" y="1471.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::SelectionData,  (5,233,612 samples, 0.01%)</title><rect x="211.7" y="1621" width="0.1" height="15.0" fill="rgb(211,7,41)" rx="2" ry="2" />
<text  x="214.67" y="1631.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (5,398,013 samples, 0.01%)</title><rect x="547.2" y="1685" width="0.1" height="15.0" fill="rgb(229,204,28)" rx="2" ry="2" />
<text  x="550.20" y="1695.5" ></text>
</g>
<g >
<title>duckdb::BlockHandle::Load (11,548,957 samples, 0.02%)</title><rect x="196.2" y="1637" width="0.2" height="15.0" fill="rgb(222,190,31)" rx="2" ry="2" />
<text  x="199.17" y="1647.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorToString[abi:cxx11] (5,983,498 samples, 0.01%)</title><rect x="551.3" y="1733" width="0.1" height="15.0" fill="rgb(250,14,30)" rx="2" ry="2" />
<text  x="554.27" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::operator (43,812,849 samples, 0.09%)</title><rect x="657.3" y="1717" width="1.0" height="15.0" fill="rgb(224,34,9)" rx="2" ry="2" />
<text  x="660.28" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Executor::ExecuteTask (4,882,638,517 samples, 9.52%)</title><rect x="397.0" y="1909" width="112.3" height="15.0" fill="rgb(221,210,50)" rx="2" ry="2" />
<text  x="399.99" y="1919.5" >duckdb::Execu..</text>
</g>
<g >
<title>std::vector&lt;duckdb::BoundColumnRefExpression*, std::allocator&lt;duckdb::BoundColumnRefExpression*&gt; &gt;::_M_check_len (4,619,269 samples, 0.01%)</title><rect x="764.2" y="1621" width="0.1" height="15.0" fill="rgb(251,112,29)" rx="2" ry="2" />
<text  x="767.18" y="1631.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ColumnScanState, std::default_delete&lt;duckdb::ColumnScanState []&gt; &gt;::__uniq_ptr_impl (5,108,184 samples, 0.01%)</title><rect x="224.5" y="1653" width="0.1" height="15.0" fill="rgb(238,172,15)" rx="2" ry="2" />
<text  x="227.48" y="1663.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_Vector_base (14,738,617 samples, 0.03%)</title><rect x="561.5" y="1749" width="0.4" height="15.0" fill="rgb(224,1,2)" rx="2" ry="2" />
<text  x="564.54" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7,284,146 samples, 0.01%)</title><rect x="958.4" y="1621" width="0.1" height="15.0" fill="rgb(220,143,25)" rx="2" ry="2" />
<text  x="961.37" y="1631.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*&gt; (11,214,182 samples, 0.02%)</title><rect x="575.7" y="1733" width="0.2" height="15.0" fill="rgb(243,36,22)" rx="2" ry="2" />
<text  x="578.68" y="1743.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::Reset (47,550,188 samples, 0.09%)</title><rect x="297.5" y="1445" width="1.1" height="15.0" fill="rgb(214,171,13)" rx="2" ry="2" />
<text  x="300.48" y="1455.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::~VectorCache (97,857,256 samples, 0.19%)</title><rect x="481.5" y="1637" width="2.2" height="15.0" fill="rgb(212,7,49)" rx="2" ry="2" />
<text  x="484.49" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::push_back (7,396,166 samples, 0.01%)</title><rect x="977.3" y="1733" width="0.2" height="15.0" fill="rgb(218,62,26)" rx="2" ry="2" />
<text  x="980.35" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (10,307,140 samples, 0.02%)</title><rect x="325.9" y="1349" width="0.3" height="15.0" fill="rgb(246,213,10)" rx="2" ry="2" />
<text  x="328.94" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_buckets (6,586,936 samples, 0.01%)</title><rect x="682.0" y="1733" width="0.1" height="15.0" fill="rgb(249,189,36)" rx="2" ry="2" />
<text  x="684.97" y="1743.5" ></text>
</g>
<g >
<title>duckdb::RemoveUnusedColumns::VisitReplace (74,841,135 samples, 0.15%)</title><rect x="762.7" y="1685" width="1.7" height="15.0" fill="rgb(229,144,0)" rx="2" ry="2" />
<text  x="765.70" y="1695.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::ColumnAppendState&gt; &gt;::construct&lt;duckdb::ColumnAppendState, duckdb::ColumnAppendState&gt; (14,731,884 samples, 0.03%)</title><rect x="197.9" y="1653" width="0.3" height="15.0" fill="rgb(254,24,12)" rx="2" ry="2" />
<text  x="200.90" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (4,362,555 samples, 0.01%)</title><rect x="654.6" y="1733" width="0.1" height="15.0" fill="rgb(227,142,38)" rx="2" ry="2" />
<text  x="657.64" y="1743.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::Destroy (12,284,190 samples, 0.02%)</title><rect x="339.3" y="1301" width="0.2" height="15.0" fill="rgb(216,107,25)" rx="2" ry="2" />
<text  x="342.25" y="1311.5" ></text>
</g>
<g >
<title>duckdb::CaseInsensitiveStringHashFunction::operator (6,656,559 samples, 0.01%)</title><rect x="373.8" y="1845" width="0.1" height="15.0" fill="rgb(218,194,38)" rx="2" ry="2" />
<text  x="376.79" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;unsigned long, false&gt;, true&gt;::~vector (9,647,082 samples, 0.02%)</title><rect x="980.9" y="1717" width="0.2" height="15.0" fill="rgb(206,202,20)" rx="2" ry="2" />
<text  x="983.89" y="1727.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (19,434,767 samples, 0.04%)</title><rect x="107.3" y="1701" width="0.4" height="15.0" fill="rgb(215,59,49)" rx="2" ry="2" />
<text  x="110.26" y="1711.5" ></text>
</g>
<g >
<title>std::chrono::time_point&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::time_since_epoch (4,604,515 samples, 0.01%)</title><rect x="715.2" y="1813" width="0.1" height="15.0" fill="rgb(210,82,6)" rx="2" ry="2" />
<text  x="718.18" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (57,709,017 samples, 0.11%)</title><rect x="217.8" y="1429" width="1.3" height="15.0" fill="rgb(224,62,52)" rx="2" ry="2" />
<text  x="220.78" y="1439.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (91,737,592 samples, 0.18%)</title><rect x="762.5" y="1717" width="2.1" height="15.0" fill="rgb(222,113,17)" rx="2" ry="2" />
<text  x="765.51" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegmentTree::ColumnSegmentTree (8,381,963 samples, 0.02%)</title><rect x="453.5" y="1509" width="0.2" height="15.0" fill="rgb(252,79,48)" rx="2" ry="2" />
<text  x="456.50" y="1519.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Task,  (21,077,076 samples, 0.04%)</title><rect x="508.5" y="1893" width="0.5" height="15.0" fill="rgb(225,228,44)" rx="2" ry="2" />
<text  x="511.54" y="1903.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, duckdb::LogicalOperator*, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::_Tuple_impl&lt;duckdb::LogicalOperator*&amp;, std::default_delete&lt;duckdb::LogicalOperator&gt;, void&gt; (5,185,013 samples, 0.01%)</title><rect x="770.9" y="1749" width="0.2" height="15.0" fill="rgb(241,203,14)" rx="2" ry="2" />
<text  x="773.94" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ConstantFoldingExpressionMatcher::Match (4,610,510 samples, 0.01%)</title><rect x="741.6" y="1653" width="0.1" height="15.0" fill="rgb(253,131,17)" rx="2" ry="2" />
<text  x="744.64" y="1663.5" ></text>
</g>
<g >
<title>ext4_io_submit (27,639,805 samples, 0.05%)</title><rect x="250.8" y="1573" width="0.6" height="15.0" fill="rgb(229,147,40)" rx="2" ry="2" />
<text  x="253.79" y="1583.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, void&gt; (5,981,775 samples, 0.01%)</title><rect x="868.4" y="1733" width="0.1" height="15.0" fill="rgb(222,155,19)" rx="2" ry="2" />
<text  x="871.39" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Vector, true&gt;::~vector (79,905,719 samples, 0.16%)</title><rect x="221.2" y="1717" width="1.8" height="15.0" fill="rgb(254,213,11)" rx="2" ry="2" />
<text  x="224.16" y="1727.5" ></text>
</g>
<g >
<title>duckdb::BindContext::GetBinding (15,165,714 samples, 0.03%)</title><rect x="954.6" y="1589" width="0.3" height="15.0" fill="rgb(236,32,32)" rx="2" ry="2" />
<text  x="957.59" y="1599.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (78,752,782 samples, 0.15%)</title><rect x="660.4" y="1765" width="1.8" height="15.0" fill="rgb(212,70,41)" rx="2" ry="2" />
<text  x="663.39" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (25,978,764 samples, 0.05%)</title><rect x="356.0" y="1589" width="0.6" height="15.0" fill="rgb(245,106,26)" rx="2" ry="2" />
<text  x="359.04" y="1599.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::ActiveQueryContext*, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt; (4,892,318 samples, 0.01%)</title><rect x="512.1" y="1861" width="0.1" height="15.0" fill="rgb(249,193,0)" rx="2" ry="2" />
<text  x="515.13" y="1871.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::RenderTree (35,203,120 samples, 0.07%)</title><rect x="552.6" y="1781" width="0.8" height="15.0" fill="rgb(246,29,9)" rx="2" ry="2" />
<text  x="555.58" y="1791.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, duckdb::EntryValue&gt;::~pair (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1413" width="1.9" height="15.0" fill="rgb(213,98,3)" rx="2" ry="2" />
<text  x="1120.81" y="1423.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (70,115,247 samples, 0.14%)</title><rect x="221.3" y="1541" width="1.6" height="15.0" fill="rgb(229,180,29)" rx="2" ry="2" />
<text  x="224.34" y="1551.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (45,260,236 samples, 0.09%)</title><rect x="1141.2" y="2021" width="1.0" height="15.0" fill="rgb(213,137,48)" rx="2" ry="2" />
<text  x="1144.19" y="2031.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ValidityScanState, std::default_delete&lt;duckdb::ValidityScanState&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ValidityScanState&gt;, void&gt; (6,972,191 samples, 0.01%)</title><rect x="214.3" y="1557" width="0.2" height="15.0" fill="rgb(252,23,35)" rx="2" ry="2" />
<text  x="217.29" y="1567.5" ></text>
</g>
<g >
<title>duckdb::BasePipelineEvent::BasePipelineEvent (5,783,351 samples, 0.01%)</title><rect x="1050.1" y="1669" width="0.2" height="15.0" fill="rgb(249,21,36)" rx="2" ry="2" />
<text  x="1053.13" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::~ColumnSegment (128,268,513 samples, 0.25%)</title><rect x="238.3" y="789" width="2.9" height="15.0" fill="rgb(229,87,8)" rx="2" ry="2" />
<text  x="241.29" y="799.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::VectorCacheBuffer (65,839,245 samples, 0.13%)</title><rect x="401.0" y="1637" width="1.5" height="15.0" fill="rgb(243,33,45)" rx="2" ry="2" />
<text  x="403.98" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::insert (29,413,558 samples, 0.06%)</title><rect x="816.9" y="1797" width="0.6" height="15.0" fill="rgb(208,139,41)" rx="2" ry="2" />
<text  x="819.86" y="1807.5" ></text>
</g>
<g >
<title>vsnprintf (6,611,466 samples, 0.01%)</title><rect x="1125.2" y="1973" width="0.2" height="15.0" fill="rgb(248,172,21)" rx="2" ry="2" />
<text  x="1128.23" y="1983.5" ></text>
</g>
<g >
<title>duckdb::Executor::VerifyScheduledEventsInternal (86,750,772 samples, 0.17%)</title><rect x="1054.5" y="1813" width="2.0" height="15.0" fill="rgb(244,3,24)" rx="2" ry="2" />
<text  x="1057.52" y="1823.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt; (95,887,577 samples, 0.19%)</title><rect x="309.3" y="1477" width="2.2" height="15.0" fill="rgb(212,71,7)" rx="2" ry="2" />
<text  x="312.26" y="1487.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::witness_lock (4,348,721 samples, 0.01%)</title><rect x="877.5" y="1221" width="0.1" height="15.0" fill="rgb(207,193,43)" rx="2" ry="2" />
<text  x="880.53" y="1231.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; &gt;::find (15,752,192 samples, 0.03%)</title><rect x="1043.8" y="1829" width="0.3" height="15.0" fill="rgb(247,95,5)" rx="2" ry="2" />
<text  x="1046.76" y="1839.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector&gt; (20,479,122 samples, 0.04%)</title><rect x="895.3" y="1685" width="0.5" height="15.0" fill="rgb(225,86,5)" rx="2" ry="2" />
<text  x="898.32" y="1695.5" ></text>
</g>
<g >
<title>__strlen_sse2 (4,408,372 samples, 0.01%)</title><rect x="22.1" y="1989" width="0.1" height="15.0" fill="rgb(246,20,19)" rx="2" ry="2" />
<text  x="25.12" y="1999.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::pai_dalloc (82,642,516 samples, 0.16%)</title><rect x="346.4" y="725" width="1.9" height="15.0" fill="rgb(246,1,36)" rx="2" ry="2" />
<text  x="349.45" y="735.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::Render (1,149,585,816 samples, 2.24%)</title><rect x="594.0" y="1829" width="26.5" height="15.0" fill="rgb(246,225,7)" rx="2" ry="2" />
<text  x="597.04" y="1839.5" >d..</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*&gt; (6,516,403 samples, 0.01%)</title><rect x="832.1" y="1525" width="0.2" height="15.0" fill="rgb(230,170,21)" rx="2" ry="2" />
<text  x="835.14" y="1535.5" ></text>
</g>
<g >
<title>duckdb::LogicalDummyScan::GetName[abi:cxx11] (5,166,174 samples, 0.01%)</title><rect x="595.4" y="1589" width="0.2" height="15.0" fill="rgb(243,226,33)" rx="2" ry="2" />
<text  x="598.45" y="1599.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::Initialize (64,295,564 samples, 0.13%)</title><rect x="899.5" y="1637" width="1.5" height="15.0" fill="rgb(213,192,47)" rx="2" ry="2" />
<text  x="902.48" y="1647.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::GetName[abi:cxx11] (5,273,833 samples, 0.01%)</title><rect x="1067.2" y="1621" width="0.2" height="15.0" fill="rgb(222,102,17)" rx="2" ry="2" />
<text  x="1070.24" y="1631.5" ></text>
</g>
<g >
<title>page_fault (23,092,365 samples, 0.05%)</title><rect x="55.9" y="2005" width="0.5" height="15.0" fill="rgb(230,228,8)" rx="2" ry="2" />
<text  x="58.85" y="2015.5" ></text>
</g>
<g >
<title>duckdb::unsafe_get_property (11,665,803 samples, 0.02%)</title><rect x="559.9" y="1733" width="0.3" height="15.0" fill="rgb(239,67,46)" rx="2" ry="2" />
<text  x="562.90" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (93,443,577 samples, 0.18%)</title><rect x="890.1" y="1509" width="2.1" height="15.0" fill="rgb(220,215,39)" rx="2" ry="2" />
<text  x="893.07" y="1519.5" ></text>
</g>
<g >
<title>_dl_relocate_object (203,804,821 samples, 0.40%)</title><rect x="69.8" y="1989" width="4.7" height="15.0" fill="rgb(223,113,31)" rx="2" ry="2" />
<text  x="72.81" y="1999.5" ></text>
</g>
<g >
<title>duckdb::DuckSchemaEntry::AddEntry (67,065,923 samples, 0.13%)</title><rect x="1112.9" y="1861" width="1.5" height="15.0" fill="rgb(217,126,45)" rx="2" ry="2" />
<text  x="1115.90" y="1871.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (4,568,228 samples, 0.01%)</title><rect x="289.6" y="1365" width="0.1" height="15.0" fill="rgb(222,64,10)" rx="2" ry="2" />
<text  x="292.60" y="1375.5" ></text>
</g>
<g >
<title>duckdb::Transformer::~Transformer (19,933,226 samples, 0.04%)</title><rect x="540.6" y="1925" width="0.5" height="15.0" fill="rgb(240,100,22)" rx="2" ry="2" />
<text  x="543.63" y="1935.5" ></text>
</g>
<g >
<title>unmap_vmas (89,296,689 samples, 0.17%)</title><rect x="1177.7" y="1925" width="2.0" height="15.0" fill="rgb(236,76,11)" rx="2" ry="2" />
<text  x="1180.67" y="1935.5" ></text>
</g>
<g >
<title>duckdb::SelectionData::SelectionData (407,800,126 samples, 0.80%)</title><rect x="302.6" y="1557" width="9.4" height="15.0" fill="rgb(224,138,12)" rx="2" ry="2" />
<text  x="305.62" y="1567.5" ></text>
</g>
<g >
<title>std::function&lt;void  (9,768,482 samples, 0.02%)</title><rect x="750.0" y="1733" width="0.2" height="15.0" fill="rgb(212,17,46)" rx="2" ry="2" />
<text  x="753.02" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Transaction::Get (173,255,092 samples, 0.34%)</title><rect x="988.7" y="1685" width="4.0" height="15.0" fill="rgb(244,148,49)" rx="2" ry="2" />
<text  x="991.74" y="1695.5" ></text>
</g>
<g >
<title>__strlen_sse2 (4,677,067 samples, 0.01%)</title><rect x="22.0" y="1989" width="0.1" height="15.0" fill="rgb(252,67,3)" rx="2" ry="2" />
<text  x="24.96" y="1999.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutorState::ExpressionExecutorState (5,126,882 samples, 0.01%)</title><rect x="904.4" y="1717" width="0.1" height="15.0" fill="rgb(205,195,46)" rx="2" ry="2" />
<text  x="907.35" y="1727.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::_M_ptr (8,141,778 samples, 0.02%)</title><rect x="642.2" y="1829" width="0.2" height="15.0" fill="rgb(210,90,34)" rx="2" ry="2" />
<text  x="645.25" y="1839.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::_Vector_impl::_Vector_impl (5,026,654 samples, 0.01%)</title><rect x="940.0" y="1605" width="0.1" height="15.0" fill="rgb(236,104,26)" rx="2" ry="2" />
<text  x="942.95" y="1615.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::unique_ptr&lt;duckdb::BoundReferenceExpression, std::default_delete&lt;std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt; &gt;, void&gt; (12,167,029 samples, 0.02%)</title><rect x="845.2" y="1717" width="0.2" height="15.0" fill="rgb(229,152,11)" rx="2" ry="2" />
<text  x="848.17" y="1727.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorCacheBuffer,  (83,127,502 samples, 0.16%)</title><rect x="486.7" y="1669" width="1.9" height="15.0" fill="rgb(207,40,52)" rx="2" ry="2" />
<text  x="489.66" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalProjection, std::default_delete&lt;duckdb::LogicalProjection&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::LogicalProjection&gt;, void&gt; (5,060,748 samples, 0.01%)</title><rect x="978.4" y="1749" width="0.1" height="15.0" fill="rgb(229,20,11)" rx="2" ry="2" />
<text  x="981.37" y="1759.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::Iterate&lt;duckdb::LogicalOperator&gt; (25,332,350 samples, 0.05%)</title><rect x="595.2" y="1685" width="0.6" height="15.0" fill="rgb(215,19,9)" rx="2" ry="2" />
<text  x="598.21" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ColumnRefExpression::Copy (29,185,500 samples, 0.06%)</title><rect x="945.9" y="1701" width="0.7" height="15.0" fill="rgb(228,173,6)" rx="2" ry="2" />
<text  x="948.93" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::get (4,437,698 samples, 0.01%)</title><rect x="770.2" y="1797" width="0.1" height="15.0" fill="rgb(249,40,32)" rx="2" ry="2" />
<text  x="773.23" y="1807.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::SelectionData&gt;::~shared_ptr (10,036,289 samples, 0.02%)</title><rect x="292.3" y="1493" width="0.2" height="15.0" fill="rgb(237,97,13)" rx="2" ry="2" />
<text  x="295.26" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Task&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; &gt;::push_back (25,390,733 samples, 0.05%)</title><rect x="1060.8" y="1813" width="0.6" height="15.0" fill="rgb(231,209,42)" rx="2" ry="2" />
<text  x="1063.77" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::~unique_ptr (15,119,712 samples, 0.03%)</title><rect x="633.6" y="1733" width="0.3" height="15.0" fill="rgb(216,154,45)" rx="2" ry="2" />
<text  x="636.58" y="1743.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::Render (305,818,692 samples, 0.60%)</title><rect x="634.3" y="1797" width="7.0" height="15.0" fill="rgb(215,35,47)" rx="2" ry="2" />
<text  x="637.30" y="1807.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::Destroy (4,551,527 samples, 0.01%)</title><rect x="226.6" y="1541" width="0.1" height="15.0" fill="rgb(221,13,45)" rx="2" ry="2" />
<text  x="229.62" y="1551.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::MergeIntoStatistics (5,973,958 samples, 0.01%)</title><rect x="230.9" y="1637" width="0.2" height="15.0" fill="rgb(249,176,45)" rx="2" ry="2" />
<text  x="233.94" y="1647.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*&gt; (8,939,247 samples, 0.02%)</title><rect x="1036.5" y="1349" width="0.2" height="15.0" fill="rgb(223,196,20)" rx="2" ry="2" />
<text  x="1039.47" y="1359.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::CastExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (10,781,174 samples, 0.02%)</title><rect x="804.5" y="1845" width="0.3" height="15.0" fill="rgb(240,207,5)" rx="2" ry="2" />
<text  x="807.52" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::end (5,327,616 samples, 0.01%)</title><rect x="630.3" y="1733" width="0.1" height="15.0" fill="rgb(243,5,40)" rx="2" ry="2" />
<text  x="633.28" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1413" width="0.1" height="15.0" fill="rgb(233,116,43)" rx="2" ry="2" />
<text  x="14.25" y="1423.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_range_initialize&lt;unsigned long const*&gt; (52,694,411 samples, 0.10%)</title><rect x="684.2" y="1765" width="1.2" height="15.0" fill="rgb(239,93,47)" rx="2" ry="2" />
<text  x="687.19" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ConstantFoldingExpressionMatcher, std::default_delete&lt;duckdb::ConstantFoldingExpressionMatcher&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConstantFoldingExpressionMatcher&gt;, void&gt; (11,528,487 samples, 0.02%)</title><rect x="794.8" y="1829" width="0.3" height="15.0" fill="rgb(238,191,48)" rx="2" ry="2" />
<text  x="797.83" y="1839.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::PullFinalize (6,092,263 samples, 0.01%)</title><rect x="371.9" y="1893" width="0.1" height="15.0" fill="rgb(205,196,23)" rx="2" ry="2" />
<text  x="374.89" y="1903.5" ></text>
</g>
<g >
<title>duckdb::AttachedDatabase::~AttachedDatabase (15,089,061 samples, 0.03%)</title><rect x="1117.5" y="1733" width="0.3" height="15.0" fill="rgb(247,133,16)" rx="2" ry="2" />
<text  x="1120.47" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_do_assert_mapped (8,588,105 samples, 0.02%)</title><rect x="346.7" y="645" width="0.2" height="15.0" fill="rgb(239,168,12)" rx="2" ry="2" />
<text  x="349.72" y="655.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::FileBuffer&gt;, void&gt; (5,294,331 samples, 0.01%)</title><rect x="879.4" y="1589" width="0.1" height="15.0" fill="rgb(206,9,30)" rx="2" ry="2" />
<text  x="882.36" y="1599.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;*&gt; (14,626,886 samples, 0.03%)</title><rect x="500.0" y="1397" width="0.3" height="15.0" fill="rgb(208,34,39)" rx="2" ry="2" />
<text  x="502.99" y="1407.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::FilterPushdown::Filter, std::default_delete&lt;duckdb::FilterPushdown::Filter&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::FilterPushdown::Filter, std::default_delete&lt;duckdb::FilterPushdown::Filter&gt;, true&gt; &gt; &gt;::~vector (4,680,349 samples, 0.01%)</title><rect x="748.1" y="1685" width="0.1" height="15.0" fill="rgb(234,143,42)" rx="2" ry="2" />
<text  x="751.14" y="1695.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::VectorCache, true&gt;::~vector (11,201,219 samples, 0.02%)</title><rect x="321.5" y="1749" width="0.3" height="15.0" fill="rgb(252,39,36)" rx="2" ry="2" />
<text  x="324.54" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ConcurrentQueue::Enqueue (46,270,553 samples, 0.09%)</title><rect x="93.3" y="1701" width="1.1" height="15.0" fill="rgb(243,13,51)" rx="2" ry="2" />
<text  x="96.33" y="1711.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;*&gt; (132,106,251 samples, 0.26%)</title><rect x="238.2" y="885" width="3.1" height="15.0" fill="rgb(212,204,18)" rx="2" ry="2" />
<text  x="241.24" y="895.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnAppendState, true&gt;::~vector (9,526,286 samples, 0.02%)</title><rect x="234.1" y="1685" width="0.2" height="15.0" fill="rgb(230,11,53)" rx="2" ry="2" />
<text  x="237.05" y="1695.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;, true&gt; &gt;::construct&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;duckdb::ColumnBinding const&amp;&gt;, std::tuple&lt;&gt; &gt; (8,383,638 samples, 0.02%)</title><rect x="763.5" y="1605" width="0.2" height="15.0" fill="rgb(252,154,43)" rx="2" ry="2" />
<text  x="766.54" y="1615.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::Merge (5,973,958 samples, 0.01%)</title><rect x="230.9" y="1621" width="0.2" height="15.0" fill="rgb(241,196,33)" rx="2" ry="2" />
<text  x="233.94" y="1631.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::~ExpressionExecutor (33,497,830 samples, 0.07%)</title><rect x="483.8" y="1749" width="0.8" height="15.0" fill="rgb(227,82,27)" rx="2" ry="2" />
<text  x="486.80" y="1759.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderTopLayer (45,908,932 samples, 0.09%)</title><rect x="618.1" y="1797" width="1.0" height="15.0" fill="rgb(238,3,53)" rx="2" ry="2" />
<text  x="621.09" y="1807.5" ></text>
</g>
<g >
<title>duckdb::DuckTransaction::PushAppend (105,073,387 samples, 0.20%)</title><rect x="192.4" y="1781" width="2.5" height="15.0" fill="rgb(207,148,12)" rx="2" ry="2" />
<text  x="195.45" y="1791.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (6,910,885 samples, 0.01%)</title><rect x="232.9" y="1765" width="0.2" height="15.0" fill="rgb(216,167,40)" rx="2" ry="2" />
<text  x="235.93" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (6,969,218 samples, 0.01%)</title><rect x="707.5" y="1781" width="0.1" height="15.0" fill="rgb(220,154,27)" rx="2" ry="2" />
<text  x="710.48" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DataChunk, std::default_delete&lt;duckdb::DataChunk&gt;, true&gt;::~unique_ptr (4,447,726 samples, 0.01%)</title><rect x="254.2" y="1781" width="0.1" height="15.0" fill="rgb(226,14,2)" rx="2" ry="2" />
<text  x="257.15" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::iallocztm (16,647,309 samples, 0.03%)</title><rect x="103.2" y="1397" width="0.4" height="15.0" fill="rgb(205,181,37)" rx="2" ry="2" />
<text  x="106.17" y="1407.5" ></text>
</g>
<g >
<title>duckdb::Vector::~Vector (152,266,589 samples, 0.30%)</title><rect x="390.5" y="1765" width="3.5" height="15.0" fill="rgb(230,166,32)" rx="2" ry="2" />
<text  x="393.48" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (73,443,928 samples, 0.14%)</title><rect x="437.1" y="1493" width="1.7" height="15.0" fill="rgb(205,114,44)" rx="2" ry="2" />
<text  x="440.14" y="1503.5" ></text>
</g>
<g >
<title>duckdb::FilterPushdown::Rewrite (65,355,617 samples, 0.13%)</title><rect x="747.0" y="1749" width="1.5" height="15.0" fill="rgb(250,157,24)" rx="2" ry="2" />
<text  x="749.96" y="1759.5" ></text>
</g>
<g >
<title>duckdb::DuckDBAssertInternal (20,064,667 samples, 0.04%)</title><rect x="284.9" y="1525" width="0.4" height="15.0" fill="rgb(225,84,39)" rx="2" ry="2" />
<text  x="287.87" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt; (28,476,553 samples, 0.06%)</title><rect x="939.8" y="1701" width="0.7" height="15.0" fill="rgb(251,192,34)" rx="2" ry="2" />
<text  x="942.81" y="1711.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::MaterializedQueryResult, duckdb::StatementType&amp;, duckdb::StatementProperties&amp;, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;&amp;, duckdb::unique_ptr&lt;duckdb::ColumnDataCollection, std::default_delete&lt;duckdb::ColumnDataCollection&gt;, true&gt;, duckdb::ClientProperties&gt; (102,026,983 samples, 0.20%)</title><rect x="387.6" y="1925" width="2.3" height="15.0" fill="rgb(241,135,4)" rx="2" ry="2" />
<text  x="390.59" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::push_back (38,293,242 samples, 0.07%)</title><rect x="789.2" y="1845" width="0.9" height="15.0" fill="rgb(242,151,47)" rx="2" ry="2" />
<text  x="792.18" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_alloc_event (27,054,556 samples, 0.05%)</title><rect x="878.3" y="1445" width="0.6" height="15.0" fill="rgb(208,20,51)" rx="2" ry="2" />
<text  x="881.27" y="1455.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::CatalogSearchEntry const*, std::vector&lt;duckdb::CatalogSearchEntry, std::allocator&lt;duckdb::CatalogSearchEntry&gt; &gt; &gt;, duckdb::CatalogSearchEntry*&gt; (8,923,473 samples, 0.02%)</title><rect x="1008.9" y="1701" width="0.3" height="15.0" fill="rgb(234,98,11)" rx="2" ry="2" />
<text  x="1011.95" y="1711.5" ></text>
</g>
<g >
<title>duckdb::Vector::Serialize (21,975,890 samples, 0.04%)</title><rect x="314.7" y="1637" width="0.6" height="15.0" fill="rgb(251,193,15)" rx="2" ry="2" />
<text  x="317.75" y="1647.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::AppendVersionInfo (34,236,203 samples, 0.07%)</title><rect x="100.7" y="1669" width="0.8" height="15.0" fill="rgb(210,11,21)" rx="2" ry="2" />
<text  x="103.72" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (5,374,120 samples, 0.01%)</title><rect x="47.4" y="2005" width="0.1" height="15.0" fill="rgb(225,47,5)" rx="2" ry="2" />
<text  x="50.40" y="2015.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::operator=&lt;duckdb::VectorCacheBuffer&gt; (6,218,650 samples, 0.01%)</title><rect x="369.5" y="1829" width="0.1" height="15.0" fill="rgb(251,2,40)" rx="2" ry="2" />
<text  x="372.48" y="1839.5" ></text>
</g>
<g >
<title>__schedule (15,077,551 samples, 0.03%)</title><rect x="505.7" y="1701" width="0.4" height="15.0" fill="rgb(247,74,48)" rx="2" ry="2" />
<text  x="508.72" y="1711.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (35,739,981 samples, 0.07%)</title><rect x="87.6" y="2021" width="0.8" height="15.0" fill="rgb(210,41,47)" rx="2" ry="2" />
<text  x="90.58" y="2031.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::AssertNotNull (5,012,530 samples, 0.01%)</title><rect x="303.3" y="1541" width="0.2" height="15.0" fill="rgb(211,147,42)" rx="2" ry="2" />
<text  x="306.35" y="1551.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalIndex, std::allocator&lt;duckdb::LogicalIndex&gt; &gt;::emplace_back&lt;duckdb::LogicalIndex&gt; (26,967,201 samples, 0.05%)</title><rect x="1019.8" y="1813" width="0.6" height="15.0" fill="rgb(227,100,26)" rx="2" ry="2" />
<text  x="1022.80" y="1823.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*&gt; (8,939,247 samples, 0.02%)</title><rect x="1036.5" y="1365" width="0.2" height="15.0" fill="rgb(208,106,46)" rx="2" ry="2" />
<text  x="1039.47" y="1375.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_default_append (24,298,682 samples, 0.05%)</title><rect x="1076.0" y="1733" width="0.6" height="15.0" fill="rgb(220,226,27)" rx="2" ry="2" />
<text  x="1079.04" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Binder*, std::allocator&lt;duckdb::Binder*&gt; &gt;::vector (11,599,051 samples, 0.02%)</title><rect x="965.1" y="1733" width="0.3" height="15.0" fill="rgb(246,130,0)" rx="2" ry="2" />
<text  x="968.13" y="1743.5" ></text>
</g>
<g >
<title>__cxxabiv1::__function_type_info::~__function_type_info (4,567,963 samples, 0.01%)</title><rect x="33.5" y="2021" width="0.1" height="15.0" fill="rgb(242,114,20)" rx="2" ry="2" />
<text  x="36.50" y="2031.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, true&gt;::operator[] (6,719,750 samples, 0.01%)</title><rect x="322.9" y="1813" width="0.1" height="15.0" fill="rgb(252,193,29)" rx="2" ry="2" />
<text  x="325.87" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (269,887,731 samples, 0.53%)</title><rect x="872.9" y="1509" width="6.2" height="15.0" fill="rgb(207,177,11)" rx="2" ry="2" />
<text  x="875.87" y="1519.5" ></text>
</g>
<g >
<title>duckdb::Value::ToString[abi:cxx11] (31,998,844 samples, 0.06%)</title><rect x="1120.4" y="1989" width="0.7" height="15.0" fill="rgb(242,175,42)" rx="2" ry="2" />
<text  x="1123.36" y="1999.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_allocate (16,054,150 samples, 0.03%)</title><rect x="565.7" y="1749" width="0.4" height="15.0" fill="rgb(214,39,8)" rx="2" ry="2" />
<text  x="568.69" y="1759.5" ></text>
</g>
<g >
<title>duckdb::PhysicalPlanGenerator::CreatePlan (69,745,774 samples, 0.14%)</title><rect x="907.8" y="1765" width="1.6" height="15.0" fill="rgb(207,72,8)" rx="2" ry="2" />
<text  x="910.81" y="1775.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (28,147,315 samples, 0.05%)</title><rect x="247.7" y="1509" width="0.7" height="15.0" fill="rgb(217,36,0)" rx="2" ry="2" />
<text  x="250.73" y="1519.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (17,725,076 samples, 0.03%)</title><rect x="1026.0" y="1845" width="0.4" height="15.0" fill="rgb(239,31,18)" rx="2" ry="2" />
<text  x="1028.99" y="1855.5" ></text>
</g>
<g >
<title>duckdb::DatabaseManager::GetDatabase (284,658,489 samples, 0.55%)</title><rect x="988.5" y="1749" width="6.6" height="15.0" fill="rgb(219,130,47)" rx="2" ry="2" />
<text  x="991.52" y="1759.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::BufferHandle, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt; &gt;::find (6,952,021 samples, 0.01%)</title><rect x="887.2" y="1733" width="0.1" height="15.0" fill="rgb(240,181,35)" rx="2" ry="2" />
<text  x="890.15" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::emplace_back&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; (14,426,349 samples, 0.03%)</title><rect x="850.2" y="1829" width="0.3" height="15.0" fill="rgb(230,63,16)" rx="2" ry="2" />
<text  x="853.22" y="1839.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTree&lt;duckdb::LogicalOperator&gt; (191,480,802 samples, 0.37%)</title><rect x="594.1" y="1797" width="4.4" height="15.0" fill="rgb(240,98,25)" rx="2" ry="2" />
<text  x="597.06" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnDataCollection, std::default_delete&lt;duckdb::ColumnDataCollection&gt;, true&gt;::~unique_ptr (425,919,706 samples, 0.83%)</title><rect x="340.4" y="1413" width="9.8" height="15.0" fill="rgb(209,75,3)" rx="2" ry="2" />
<text  x="343.38" y="1423.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_trigger (12,963,621 samples, 0.03%)</title><rect x="380.8" y="1669" width="0.3" height="15.0" fill="rgb(231,151,17)" rx="2" ry="2" />
<text  x="383.83" y="1679.5" ></text>
</g>
<g >
<title>duckdb::CSEReplacementState::~CSEReplacementState (15,996,137 samples, 0.03%)</title><rect x="728.3" y="1733" width="0.4" height="15.0" fill="rgb(220,179,33)" rx="2" ry="2" />
<text  x="731.35" y="1743.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, duckdb::Rule*, false&gt;::_Head_base&lt;duckdb::Rule*&amp;&gt; (6,125,943 samples, 0.01%)</title><rect x="826.2" y="1733" width="0.1" height="15.0" fill="rgb(246,205,2)" rx="2" ry="2" />
<text  x="829.17" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (11,724,519 samples, 0.02%)</title><rect x="1117.5" y="901" width="0.3" height="15.0" fill="rgb(246,166,38)" rx="2" ry="2" />
<text  x="1120.50" y="911.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::BaseStatistics (12,894,049 samples, 0.03%)</title><rect x="443.3" y="1621" width="0.3" height="15.0" fill="rgb(209,15,6)" rx="2" ry="2" />
<text  x="446.26" y="1631.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; (5,130,372 samples, 0.01%)</title><rect x="1048.5" y="1749" width="0.1" height="15.0" fill="rgb(231,54,32)" rx="2" ry="2" />
<text  x="1051.51" y="1759.5" ></text>
</g>
<g >
<title>duckdb::LogicalDummyScan::~LogicalDummyScan (8,939,247 samples, 0.02%)</title><rect x="1036.5" y="1269" width="0.2" height="15.0" fill="rgb(208,215,29)" rx="2" ry="2" />
<text  x="1039.47" y="1279.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (9,836,640 samples, 0.02%)</title><rect x="166.4" y="1877" width="0.3" height="15.0" fill="rgb(212,90,32)" rx="2" ry="2" />
<text  x="169.45" y="1887.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::ResetFromCache (11,233,331 samples, 0.02%)</title><rect x="488.9" y="1637" width="0.3" height="15.0" fill="rgb(245,140,52)" rx="2" ry="2" />
<text  x="491.94" y="1647.5" ></text>
</g>
<g >
<title>file_update_time (32,679,988 samples, 0.06%)</title><rect x="247.6" y="1557" width="0.8" height="15.0" fill="rgb(215,173,34)" rx="2" ry="2" />
<text  x="250.65" y="1567.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (6,353,208 samples, 0.01%)</title><rect x="401.4" y="1477" width="0.1" height="15.0" fill="rgb(207,43,43)" rx="2" ry="2" />
<text  x="404.38" y="1487.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegmentTree::~ColumnSegmentTree (106,552,992 samples, 0.21%)</title><rect x="241.5" y="965" width="2.5" height="15.0" fill="rgb(245,17,13)" rx="2" ry="2" />
<text  x="244.51" y="975.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::_M_ptr (6,609,912 samples, 0.01%)</title><rect x="555.4" y="1765" width="0.2" height="15.0" fill="rgb(246,139,37)" rx="2" ry="2" />
<text  x="558.42" y="1775.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_allocate (4,759,441 samples, 0.01%)</title><rect x="637.8" y="1701" width="0.1" height="15.0" fill="rgb(232,26,49)" rx="2" ry="2" />
<text  x="640.82" y="1711.5" ></text>
</g>
<g >
<title>std::function&lt;void  (136,339,367 samples, 0.27%)</title><rect x="548.0" y="1765" width="3.1" height="15.0" fill="rgb(218,64,39)" rx="2" ry="2" />
<text  x="550.97" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (11,228,760 samples, 0.02%)</title><rect x="536.0" y="1733" width="0.3" height="15.0" fill="rgb(245,83,44)" rx="2" ry="2" />
<text  x="539.02" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_S_check_init_len (7,989,274 samples, 0.02%)</title><rect x="673.2" y="1733" width="0.2" height="15.0" fill="rgb(209,47,45)" rx="2" ry="2" />
<text  x="676.21" y="1743.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (4,513,984 samples, 0.01%)</title><rect x="722.1" y="1861" width="0.1" height="15.0" fill="rgb(230,63,27)" rx="2" ry="2" />
<text  x="725.11" y="1871.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (9,250,726 samples, 0.02%)</title><rect x="292.3" y="1445" width="0.2" height="15.0" fill="rgb(231,105,15)" rx="2" ry="2" />
<text  x="295.27" y="1455.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::LocalTableStorage, std::allocator&lt;duckdb::LocalTableStorage&gt;,  (451,564,822 samples, 0.88%)</title><rect x="235.3" y="1733" width="10.4" height="15.0" fill="rgb(211,56,16)" rx="2" ry="2" />
<text  x="238.33" y="1743.5" ></text>
</g>
<g >
<title>duckdb::DataTable::WriteToLog (2,700,291,510 samples, 5.26%)</title><rect x="255.2" y="1749" width="62.1" height="15.0" fill="rgb(232,204,22)" rx="2" ry="2" />
<text  x="258.19" y="1759.5" >duckdb..</text>
</g>
<g >
<title>duckdb::ColumnData::Scan (195,578,385 samples, 0.38%)</title><rect x="212.3" y="1669" width="4.5" height="15.0" fill="rgb(253,158,7)" rx="2" ry="2" />
<text  x="215.28" y="1679.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::Reset (4,967,666 samples, 0.01%)</title><rect x="220.8" y="1669" width="0.1" height="15.0" fill="rgb(220,78,4)" rx="2" ry="2" />
<text  x="223.77" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_adjust_thresholds_helper (4,410,917 samples, 0.01%)</title><rect x="349.3" y="773" width="0.1" height="15.0" fill="rgb(214,80,22)" rx="2" ry="2" />
<text  x="352.28" y="783.5" ></text>
</g>
<g >
<title>duckdb::MetaTransaction::GetTransaction (246,403,339 samples, 0.48%)</title><rect x="996.0" y="1701" width="5.7" height="15.0" fill="rgb(243,197,28)" rx="2" ry="2" />
<text  x="999.01" y="1711.5" ></text>
</g>
<g >
<title>__x64_sys_futex (42,493,322 samples, 0.08%)</title><rect x="74.6" y="1973" width="1.0" height="15.0" fill="rgb(241,217,4)" rx="2" ry="2" />
<text  x="77.61" y="1983.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundTableRef, std::default_delete&lt;duckdb::BoundTableRef&gt;, true&gt;::~unique_ptr (10,407,431 samples, 0.02%)</title><rect x="980.3" y="1717" width="0.2" height="15.0" fill="rgb(219,54,46)" rx="2" ry="2" />
<text  x="983.27" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::ExecutePendingQueryInternal (7,167,095 samples, 0.01%)</title><rect x="1108.6" y="1909" width="0.2" height="15.0" fill="rgb(205,170,49)" rx="2" ry="2" />
<text  x="1111.62" y="1919.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::operator[] (37,626,655 samples, 0.07%)</title><rect x="753.9" y="1749" width="0.9" height="15.0" fill="rgb(207,87,8)" rx="2" ry="2" />
<text  x="756.92" y="1759.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::ColumnDataAllocator&gt;::destroy&lt;duckdb::ColumnDataAllocator&gt; (14,180,375 samples, 0.03%)</title><rect x="338.7" y="1397" width="0.3" height="15.0" fill="rgb(231,11,14)" rx="2" ry="2" />
<text  x="341.72" y="1407.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned long const*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, unsigned long*&gt; (4,434,648 samples, 0.01%)</title><rect x="228.1" y="1685" width="0.1" height="15.0" fill="rgb(224,100,17)" rx="2" ry="2" />
<text  x="231.11" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::NextGraphemeCluster (74,711,756 samples, 0.15%)</title><rect x="601.1" y="1765" width="1.7" height="15.0" fill="rgb(232,74,18)" rx="2" ry="2" />
<text  x="604.07" y="1775.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::Expression&gt;, unsigned long, duckdb::ExpressionHashFunction&lt;duckdb::Expression&gt;, duckdb::ExpressionEquality&lt;duckdb::Expression&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Expression&gt; const, unsigned long&gt; &gt; &gt;::~unordered_map (7,598,621 samples, 0.01%)</title><rect x="981.2" y="1717" width="0.1" height="15.0" fill="rgb(239,52,5)" rx="2" ry="2" />
<text  x="984.17" y="1727.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::End (4,459,523 samples, 0.01%)</title><rect x="920.2" y="1861" width="0.1" height="15.0" fill="rgb(227,138,43)" rx="2" ry="2" />
<text  x="923.24" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt;, false&gt;::operator= (8,330,555 samples, 0.02%)</title><rect x="997.7" y="1605" width="0.2" height="15.0" fill="rgb(208,207,47)" rx="2" ry="2" />
<text  x="1000.69" y="1615.5" ></text>
</g>
<g >
<title>duckdb::CheckpointWriter::WriteTable (72,983,211 samples, 0.14%)</title><rect x="1117.8" y="1253" width="1.7" height="15.0" fill="rgb(235,134,7)" rx="2" ry="2" />
<text  x="1120.81" y="1263.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::operator= (4,397,082 samples, 0.01%)</title><rect x="375.9" y="1877" width="0.1" height="15.0" fill="rgb(232,213,1)" rx="2" ry="2" />
<text  x="378.91" y="1887.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::ResetFromCache (7,075,396 samples, 0.01%)</title><rect x="494.9" y="1685" width="0.2" height="15.0" fill="rgb(218,176,25)" rx="2" ry="2" />
<text  x="497.89" y="1695.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long&gt; (13,864,865 samples, 0.03%)</title><rect x="617.0" y="1717" width="0.3" height="15.0" fill="rgb(249,71,7)" rx="2" ry="2" />
<text  x="620.01" y="1727.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (5,545,550 samples, 0.01%)</title><rect x="38.9" y="1989" width="0.2" height="15.0" fill="rgb(235,133,20)" rx="2" ry="2" />
<text  x="41.93" y="1999.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;std::shared_ptr&lt;duckdb::Task&gt;, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::try_dequeue&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; (45,232,249 samples, 0.09%)</title><rect x="109.1" y="1861" width="1.0" height="15.0" fill="rgb(205,108,37)" rx="2" ry="2" />
<text  x="112.05" y="1871.5" ></text>
</g>
<g >
<title>duckdb::BufferEvictionNode::BufferEvictionNode (4,362,974 samples, 0.01%)</title><rect x="470.0" y="1589" width="0.1" height="15.0" fill="rgb(207,99,17)" rx="2" ry="2" />
<text  x="473.04" y="1599.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (7,629,284 samples, 0.01%)</title><rect x="487.6" y="1413" width="0.2" height="15.0" fill="rgb(207,84,17)" rx="2" ry="2" />
<text  x="490.61" y="1423.5" ></text>
</g>
<g >
<title>duckdb::Binder::CreatePlan (248,768,601 samples, 0.49%)</title><rect x="973.6" y="1781" width="5.7" height="15.0" fill="rgb(240,29,53)" rx="2" ry="2" />
<text  x="976.60" y="1791.5" ></text>
</g>
<g >
<title>duckdb::DataTable::CommitAppend (26,808,494 samples, 0.05%)</title><rect x="254.6" y="1749" width="0.6" height="15.0" fill="rgb(238,67,46)" rx="2" ry="2" />
<text  x="257.57" y="1759.5" ></text>
</g>
<g >
<title>std::swap&lt;duckdb::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics&gt;, false&gt; &gt; (11,581,442 samples, 0.02%)</title><rect x="442.5" y="1637" width="0.3" height="15.0" fill="rgb(249,106,25)" rx="2" ry="2" />
<text  x="445.49" y="1647.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBottomLayer (28,930,106 samples, 0.06%)</title><rect x="1070.4" y="1765" width="0.6" height="15.0" fill="rgb(226,14,26)" rx="2" ry="2" />
<text  x="1073.38" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ExpressionState::~ExpressionState (15,037,024 samples, 0.03%)</title><rect x="484.1" y="1509" width="0.4" height="15.0" fill="rgb(239,207,27)" rx="2" ry="2" />
<text  x="487.13" y="1519.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt; &gt;::clear (100,465,497 samples, 0.20%)</title><rect x="355.1" y="1861" width="2.3" height="15.0" fill="rgb(232,72,52)" rx="2" ry="2" />
<text  x="358.09" y="1871.5" ></text>
</g>
<g >
<title>duckdb::CaseSimplificationRule::~CaseSimplificationRule (5,209,311 samples, 0.01%)</title><rect x="830.3" y="1717" width="0.1" height="15.0" fill="rgb(227,26,12)" rx="2" ry="2" />
<text  x="833.29" y="1727.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::TableStatisticsLock, std::default_delete&lt;duckdb::TableStatisticsLock&gt; &gt;::__uniq_ptr_impl (7,758,861 samples, 0.02%)</title><rect x="463.3" y="1685" width="0.2" height="15.0" fill="rgb(252,205,45)" rx="2" ry="2" />
<text  x="466.27" y="1695.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt; &gt; &gt;::~_Vector_base (5,262,313 samples, 0.01%)</title><rect x="972.1" y="1653" width="0.2" height="15.0" fill="rgb(229,135,28)" rx="2" ry="2" />
<text  x="975.14" y="1663.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (87,759,926 samples, 0.17%)</title><rect x="492.4" y="1653" width="2.1" height="15.0" fill="rgb(243,95,32)" rx="2" ry="2" />
<text  x="495.45" y="1663.5" ></text>
</g>
<g >
<title>duckdb::BaseQueryResult::~BaseQueryResult (18,632,042 samples, 0.04%)</title><rect x="1121.4" y="1909" width="0.4" height="15.0" fill="rgb(253,54,42)" rx="2" ry="2" />
<text  x="1124.40" y="1919.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::ColumnDataAllocator (9,193,528 samples, 0.02%)</title><rect x="98.3" y="1621" width="0.2" height="15.0" fill="rgb(220,215,51)" rx="2" ry="2" />
<text  x="101.29" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (12,202,757 samples, 0.02%)</title><rect x="228.0" y="1717" width="0.3" height="15.0" fill="rgb(205,59,47)" rx="2" ry="2" />
<text  x="230.98" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_fastpath (9,507,766 samples, 0.02%)</title><rect x="334.8" y="1349" width="0.3" height="15.0" fill="rgb(247,191,28)" rx="2" ry="2" />
<text  x="337.84" y="1359.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::~unique_ptr (33,788,092 samples, 0.07%)</title><rect x="1036.1" y="1685" width="0.7" height="15.0" fill="rgb(226,94,35)" rx="2" ry="2" />
<text  x="1039.07" y="1695.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::shared_ptr&lt;duckdb::VectorBuffer&gt;, true&gt;::vector (5,649,363 samples, 0.01%)</title><rect x="369.0" y="1669" width="0.2" height="15.0" fill="rgb(208,202,41)" rx="2" ry="2" />
<text  x="372.05" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SelectNode, std::default_delete&lt;duckdb::SelectNode&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::SelectNode&gt;, void&gt; (5,767,967 samples, 0.01%)</title><rect x="533.0" y="1749" width="0.1" height="15.0" fill="rgb(218,138,7)" rx="2" ry="2" />
<text  x="535.97" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::unique_ptr&lt;duckdb::BoundReferenceExpression, std::default_delete&lt;duckdb::BoundReferenceExpression&gt;, void&gt; (10,650,589 samples, 0.02%)</title><rect x="845.2" y="1701" width="0.2" height="15.0" fill="rgb(228,88,3)" rx="2" ry="2" />
<text  x="848.20" y="1711.5" ></text>
</g>
<g >
<title>duckdb::SingleFileCheckpointWriter::CreateCheckpoint (82,717,155 samples, 0.16%)</title><rect x="1117.8" y="1285" width="1.9" height="15.0" fill="rgb(233,88,14)" rx="2" ry="2" />
<text  x="1120.81" y="1295.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocator::~ArenaAllocator (107,114,199 samples, 0.21%)</title><rect x="324.5" y="1605" width="2.5" height="15.0" fill="rgb(251,64,43)" rx="2" ry="2" />
<text  x="327.52" y="1615.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::MetaPipeline, std::allocator&lt;duckdb::MetaPipeline&gt;,  (21,475,705 samples, 0.04%)</title><rect x="1096.2" y="1573" width="0.5" height="15.0" fill="rgb(229,221,51)" rx="2" ry="2" />
<text  x="1099.20" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~vector (16,885,264 samples, 0.03%)</title><rect x="673.7" y="1781" width="0.4" height="15.0" fill="rgb(241,181,31)" rx="2" ry="2" />
<text  x="676.73" y="1791.5" ></text>
</g>
<g >
<title>duckdb::SelectionVector::Slice (14,614,101 samples, 0.03%)</title><rect x="315.4" y="1605" width="0.3" height="15.0" fill="rgb(237,215,44)" rx="2" ry="2" />
<text  x="318.41" y="1615.5" ></text>
</g>
<g >
<title>duckdb::FieldReader::ReadRequired&lt;unsigned long&gt; (7,688,908 samples, 0.01%)</title><rect x="586.0" y="1829" width="0.2" height="15.0" fill="rgb(237,53,39)" rx="2" ry="2" />
<text  x="588.99" y="1839.5" ></text>
</g>
<g >
<title>duckdb::ChunkMetaData::ChunkMetaData (5,113,054 samples, 0.01%)</title><rect x="869.6" y="1749" width="0.2" height="15.0" fill="rgb(246,111,18)" rx="2" ry="2" />
<text  x="872.65" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; const, std::unordered_set&lt;duckdb::Dependency, duckdb::DependencyHashFunction, duckdb::DependencyEquality, std::allocator&lt;duckdb::Dependency&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; const, std::unordered_set&lt;duckdb::Dependency, duckdb::DependencyHashFunction, duckdb::DependencyEquality, std::allocator&lt;duckdb::Dependency&gt; &gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CatalogEntryEquality, duckdb::CatalogEntryHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (7,178,319 samples, 0.01%)</title><rect x="1113.8" y="1781" width="0.1" height="15.0" fill="rgb(245,6,48)" rx="2" ry="2" />
<text  x="1116.78" y="1791.5" ></text>
</g>
<g >
<title>do_syscall_64 (47,061,999 samples, 0.09%)</title><rect x="74.5" y="1989" width="1.1" height="15.0" fill="rgb(214,39,3)" rx="2" ry="2" />
<text  x="77.53" y="1999.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::GetMetaPipelines (5,421,747 samples, 0.01%)</title><rect x="1083.0" y="1845" width="0.1" height="15.0" fill="rgb(223,87,51)" rx="2" ry="2" />
<text  x="1085.98" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::~Pipeline (24,979,765 samples, 0.05%)</title><rect x="357.6" y="1653" width="0.6" height="15.0" fill="rgb(244,219,36)" rx="2" ry="2" />
<text  x="360.60" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Index, std::default_delete&lt;duckdb::Index&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Index, std::default_delete&lt;duckdb::Index&gt;, true&gt; &gt; &gt;::~vector (6,810,505 samples, 0.01%)</title><rect x="235.7" y="1637" width="0.1" height="15.0" fill="rgb(237,28,3)" rx="2" ry="2" />
<text  x="238.66" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CatalogEntry, std::default_delete&lt;duckdb::CatalogEntry&gt;, true&gt;::~unique_ptr (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1221" width="0.3" height="15.0" fill="rgb(245,146,11)" rx="2" ry="2" />
<text  x="1120.47" y="1231.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int*, std::shared_ptr&lt;duckdb::VectorBuffer&gt;, std::hash&lt;unsigned int*&gt;, std::equal_to&lt;unsigned int*&gt;, std::allocator&lt;std::pair&lt;unsigned int* const, std::shared_ptr&lt;duckdb::VectorBuffer&gt; &gt; &gt; &gt;::~unordered_map (10,931,458 samples, 0.02%)</title><rect x="293.2" y="1685" width="0.3" height="15.0" fill="rgb(237,146,35)" rx="2" ry="2" />
<text  x="296.22" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalProjection, std::default_delete&lt;duckdb::LogicalProjection&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::LogicalProjection&gt;, void&gt; (4,371,058 samples, 0.01%)</title><rect x="978.4" y="1733" width="0.1" height="15.0" fill="rgb(247,53,3)" rx="2" ry="2" />
<text  x="981.38" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1925" width="0.1" height="15.0" fill="rgb(229,211,8)" rx="2" ry="2" />
<text  x="14.25" y="1935.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocatorData::~ArenaAllocatorData (4,545,601 samples, 0.01%)</title><rect x="340.8" y="1077" width="0.1" height="15.0" fill="rgb(226,132,25)" rx="2" ry="2" />
<text  x="343.78" y="1087.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::AllocatorDebugInfo, std::default_delete&lt;duckdb::AllocatorDebugInfo&gt; &gt;::operator= (6,571,311 samples, 0.01%)</title><rect x="866.9" y="1653" width="0.2" height="15.0" fill="rgb(230,23,41)" rx="2" ry="2" />
<text  x="869.92" y="1663.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (6,891,866 samples, 0.01%)</title><rect x="849.6" y="1765" width="0.1" height="15.0" fill="rgb(215,85,5)" rx="2" ry="2" />
<text  x="852.56" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ColumnStatistics,  (29,295,516 samples, 0.06%)</title><rect x="236.2" y="1413" width="0.7" height="15.0" fill="rgb(242,172,37)" rx="2" ry="2" />
<text  x="239.24" y="1423.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBottomLayer (15,350,009 samples, 0.03%)</title><rect x="636.2" y="1765" width="0.4" height="15.0" fill="rgb(222,34,1)" rx="2" ry="2" />
<text  x="639.20" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Vector::Reinterpret (4,432,541 samples, 0.01%)</title><rect x="293.7" y="1637" width="0.1" height="15.0" fill="rgb(240,181,33)" rx="2" ry="2" />
<text  x="296.65" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (14,845,745 samples, 0.03%)</title><rect x="431.7" y="1701" width="0.3" height="15.0" fill="rgb(247,95,51)" rx="2" ry="2" />
<text  x="434.67" y="1711.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (32,175,145 samples, 0.06%)</title><rect x="734.3" y="1749" width="0.8" height="15.0" fill="rgb(220,192,3)" rx="2" ry="2" />
<text  x="737.35" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (7,690,106 samples, 0.01%)</title><rect x="1025.0" y="1813" width="0.2" height="15.0" fill="rgb(252,121,40)" rx="2" ry="2" />
<text  x="1027.99" y="1823.5" ></text>
</g>
<g >
<title>duckdb::WriteAheadLog::WriteInsert (142,220,979 samples, 0.28%)</title><rect x="312.9" y="1669" width="3.3" height="15.0" fill="rgb(235,157,37)" rx="2" ry="2" />
<text  x="315.94" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (31,923,530 samples, 0.06%)</title><rect x="776.9" y="1765" width="0.7" height="15.0" fill="rgb(221,50,39)" rx="2" ry="2" />
<text  x="779.85" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::emplace_back&lt;duckdb::VectorCache&gt; (13,275,144 samples, 0.03%)</title><rect x="220.2" y="1685" width="0.3" height="15.0" fill="rgb(233,201,23)" rx="2" ry="2" />
<text  x="223.20" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc (10,086,307 samples, 0.02%)</title><rect x="498.4" y="1413" width="0.3" height="15.0" fill="rgb(235,17,11)" rx="2" ry="2" />
<text  x="501.44" y="1423.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;,  (7,741,170 samples, 0.02%)</title><rect x="315.5" y="1493" width="0.2" height="15.0" fill="rgb(238,63,2)" rx="2" ry="2" />
<text  x="318.52" y="1503.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (7,522,673 samples, 0.01%)</title><rect x="325.8" y="1317" width="0.1" height="15.0" fill="rgb(245,51,50)" rx="2" ry="2" />
<text  x="328.76" y="1327.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5,792,127 samples, 0.01%)</title><rect x="422.0" y="1637" width="0.1" height="15.0" fill="rgb(218,41,53)" rx="2" ry="2" />
<text  x="424.98" y="1647.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (9,967,043 samples, 0.02%)</title><rect x="74.2" y="1957" width="0.3" height="15.0" fill="rgb(250,106,37)" rx="2" ry="2" />
<text  x="77.23" y="1967.5" ></text>
</g>
<g >
<title>duckdb::Vector::GetValue (17,491,239 samples, 0.03%)</title><rect x="1119.8" y="1957" width="0.4" height="15.0" fill="rgb(236,52,41)" rx="2" ry="2" />
<text  x="1122.80" y="1967.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryResult, std::default_delete&lt;duckdb::QueryResult&gt;, true&gt;::operator= (16,563,559 samples, 0.03%)</title><rect x="394.6" y="1925" width="0.4" height="15.0" fill="rgb(206,11,24)" rx="2" ry="2" />
<text  x="397.63" y="1935.5" ></text>
</g>
<g >
<title>duckdb::ActiveQueryContext::~ActiveQueryContext (800,589,238 samples, 1.56%)</title><rect x="333.2" y="1829" width="18.4" height="15.0" fill="rgb(223,27,25)" rx="2" ry="2" />
<text  x="336.21" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::operator= (5,903,029 samples, 0.01%)</title><rect x="947.9" y="1685" width="0.1" height="15.0" fill="rgb(217,20,54)" rx="2" ry="2" />
<text  x="950.90" y="1695.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::StandardColumnData&gt;::shared_ptr&lt;std::allocator&lt;duckdb::StandardColumnData&gt;, duckdb::BlockManager&amp;, duckdb::DataTableInfo&amp;, unsigned long&amp;, unsigned long&amp;, duckdb::LogicalType const&amp;, duckdb::optional_ptr&lt;duckdb::ColumnData&gt;&amp;&gt; (7,569,833 samples, 0.01%)</title><rect x="104.7" y="1589" width="0.2" height="15.0" fill="rgb(210,74,37)" rx="2" ry="2" />
<text  x="107.74" y="1599.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (137,806,278 samples, 0.27%)</title><rect x="889.7" y="1653" width="3.2" height="15.0" fill="rgb(214,135,22)" rx="2" ry="2" />
<text  x="892.72" y="1663.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (6,134,481 samples, 0.01%)</title><rect x="743.2" y="1797" width="0.1" height="15.0" fill="rgb(246,91,29)" rx="2" ry="2" />
<text  x="746.20" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned long [], std::default_delete&lt;unsigned long []&gt; &gt;::operator= (5,528,512 samples, 0.01%)</title><rect x="900.1" y="1445" width="0.2" height="15.0" fill="rgb(251,161,46)" rx="2" ry="2" />
<text  x="903.15" y="1455.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::VectorCache*&gt; (88,723,502 samples, 0.17%)</title><rect x="895.9" y="1701" width="2.1" height="15.0" fill="rgb(235,142,16)" rx="2" ry="2" />
<text  x="898.91" y="1711.5" ></text>
</g>
<g >
<title>duckdb::DuckSchemaEntry::AddEntryInternal (4,792,459 samples, 0.01%)</title><rect x="1110.4" y="1781" width="0.1" height="15.0" fill="rgb(222,191,45)" rx="2" ry="2" />
<text  x="1113.44" y="1791.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, true&gt;::~vector (31,385,246 samples, 0.06%)</title><rect x="906.5" y="1749" width="0.7" height="15.0" fill="rgb(209,37,53)" rx="2" ry="2" />
<text  x="909.53" y="1759.5" ></text>
</g>
<g >
<title>__lsan::GetUserBegin (10,457,719 samples, 0.02%)</title><rect x="47.7" y="2021" width="0.3" height="15.0" fill="rgb(240,188,1)" rx="2" ry="2" />
<text  x="50.75" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (12,829,479 samples, 0.03%)</title><rect x="954.2" y="1573" width="0.3" height="15.0" fill="rgb(213,86,17)" rx="2" ry="2" />
<text  x="957.19" y="1583.5" ></text>
</g>
<g >
<title>generic_make_request (26,891,641 samples, 0.05%)</title><rect x="250.8" y="1541" width="0.6" height="15.0" fill="rgb(216,48,19)" rx="2" ry="2" />
<text  x="253.79" y="1551.5" ></text>
</g>
<g >
<title>duckdb::FilterPushdown::GenerateFilters (12,267,372 samples, 0.02%)</title><rect x="746.7" y="1749" width="0.3" height="15.0" fill="rgb(206,101,28)" rx="2" ry="2" />
<text  x="749.68" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (11,246,920 samples, 0.02%)</title><rect x="913.2" y="1765" width="0.2" height="15.0" fill="rgb(245,188,8)" rx="2" ry="2" />
<text  x="916.16" y="1775.5" ></text>
</g>
<g >
<title>duckdb::VectorBuffer::VectorBuffer (4,628,006 samples, 0.01%)</title><rect x="892.5" y="1573" width="0.1" height="15.0" fill="rgb(249,215,52)" rx="2" ry="2" />
<text  x="895.52" y="1583.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::Iterate&lt;duckdb::LogicalOperator&gt; (66,783,926 samples, 0.13%)</title><rect x="594.9" y="1765" width="1.5" height="15.0" fill="rgb(238,32,7)" rx="2" ry="2" />
<text  x="597.89" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt; &gt; &gt;::_M_check_len (8,335,646 samples, 0.02%)</title><rect x="1089.0" y="1781" width="0.2" height="15.0" fill="rgb(209,51,14)" rx="2" ry="2" />
<text  x="1091.96" y="1791.5" ></text>
</g>
<g >
<title>duckdb::JoinRelationSetManager::JoinRelationTreeNode::JoinRelationTreeNode (7,015,352 samples, 0.01%)</title><rect x="752.2" y="1781" width="0.2" height="15.0" fill="rgb(218,133,11)" rx="2" ry="2" />
<text  x="755.20" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::insert (33,687,366 samples, 0.07%)</title><rect x="1019.0" y="1813" width="0.7" height="15.0" fill="rgb(226,210,40)" rx="2" ry="2" />
<text  x="1021.97" y="1823.5" ></text>
</g>
<g >
<title>handle_mm_fault (210,005,354 samples, 0.41%)</title><rect x="1136.1" y="1957" width="4.9" height="15.0" fill="rgb(249,139,9)" rx="2" ry="2" />
<text  x="1139.13" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="629" width="0.1" height="15.0" fill="rgb(249,72,8)" rx="2" ry="2" />
<text  x="14.25" y="639.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*, duckdb::Vector&gt; (155,853,803 samples, 0.30%)</title><rect x="390.4" y="1829" width="3.6" height="15.0" fill="rgb(251,223,19)" rx="2" ry="2" />
<text  x="393.41" y="1839.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (67,363,084 samples, 0.13%)</title><rect x="400.9" y="1669" width="1.6" height="15.0" fill="rgb(231,105,53)" rx="2" ry="2" />
<text  x="403.94" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;unsigned long&gt;::_M_v (5,100,850 samples, 0.01%)</title><rect x="666.3" y="1669" width="0.1" height="15.0" fill="rgb(215,145,23)" rx="2" ry="2" />
<text  x="669.29" y="1679.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::ResetFromCache (13,261,561 samples, 0.03%)</title><rect x="475.6" y="1749" width="0.3" height="15.0" fill="rgb(239,112,8)" rx="2" ry="2" />
<text  x="478.64" y="1759.5" ></text>
</g>
<g >
<title>duckdb::MetaTransaction::ModifyDatabase (8,053,830 samples, 0.02%)</title><rect x="1098.4" y="1893" width="0.2" height="15.0" fill="rgb(206,34,43)" rx="2" ry="2" />
<text  x="1101.44" y="1903.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::operator= (6,831,279 samples, 0.01%)</title><rect x="1039.4" y="1893" width="0.2" height="15.0" fill="rgb(224,122,34)" rx="2" ry="2" />
<text  x="1042.41" y="1903.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutorState::~ExpressionExecutorState (18,880,592 samples, 0.04%)</title><rect x="906.7" y="1605" width="0.4" height="15.0" fill="rgb(242,223,26)" rx="2" ry="2" />
<text  x="909.67" y="1615.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (7,056,459 samples, 0.01%)</title><rect x="735.2" y="1685" width="0.2" height="15.0" fill="rgb(206,2,53)" rx="2" ry="2" />
<text  x="738.19" y="1695.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;duckdb::Binding&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;duckdb::Binding&gt; &gt; &gt; &gt;::operator= (7,766,463 samples, 0.02%)</title><rect x="985.3" y="1653" width="0.1" height="15.0" fill="rgb(250,222,31)" rx="2" ry="2" />
<text  x="988.26" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::operator= (6,779,781 samples, 0.01%)</title><rect x="1034.4" y="1797" width="0.2" height="15.0" fill="rgb(225,123,2)" rx="2" ry="2" />
<text  x="1037.41" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_range_initialize&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; (8,256,354 samples, 0.02%)</title><rect x="1015.6" y="1797" width="0.2" height="15.0" fill="rgb(230,87,21)" rx="2" ry="2" />
<text  x="1018.58" y="1807.5" ></text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (4,571,426 samples, 0.01%)</title><rect x="556.5" y="1797" width="0.1" height="15.0" fill="rgb(223,141,19)" rx="2" ry="2" />
<text  x="559.50" y="1807.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;, duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt; (7,813,966 samples, 0.02%)</title><rect x="939.9" y="1685" width="0.2" height="15.0" fill="rgb(210,33,36)" rx="2" ry="2" />
<text  x="942.92" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::PreservedError, std::allocator&lt;duckdb::PreservedError&gt; &gt;::empty (39,108,454 samples, 0.08%)</title><rect x="398.4" y="1877" width="0.9" height="15.0" fill="rgb(225,149,39)" rx="2" ry="2" />
<text  x="401.42" y="1887.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt; &gt;::~unique_ptr (48,261,202 samples, 0.09%)</title><rect x="340.6" y="1237" width="1.1" height="15.0" fill="rgb(254,120,2)" rx="2" ry="2" />
<text  x="343.63" y="1247.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::AttachedDatabase*, duckdb::Transaction*, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt; &gt;::operator[] (36,583,093 samples, 0.07%)</title><rect x="1000.1" y="1685" width="0.9" height="15.0" fill="rgb(209,186,16)" rx="2" ry="2" />
<text  x="1003.13" y="1695.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (5,479,358 samples, 0.01%)</title><rect x="712.5" y="1813" width="0.1" height="15.0" fill="rgb(234,199,23)" rx="2" ry="2" />
<text  x="715.48" y="1823.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::MoveConstantsRule, duckdb::ExpressionRewriter&amp;&gt; (204,690,711 samples, 0.40%)</title><rect x="813.9" y="1877" width="4.8" height="15.0" fill="rgb(221,182,2)" rx="2" ry="2" />
<text  x="816.95" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Insert&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::CatalogEntryEquality, duckdb::CatalogEntryHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt;, true&gt;::insert (53,992,956 samples, 0.11%)</title><rect x="851.5" y="1813" width="1.2" height="15.0" fill="rgb(224,69,14)" rx="2" ry="2" />
<text  x="854.46" y="1823.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (6,842,132 samples, 0.01%)</title><rect x="108.1" y="1653" width="0.2" height="15.0" fill="rgb(206,181,53)" rx="2" ry="2" />
<text  x="111.09" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ClientContextLock, std::default_delete&lt;duckdb::ClientContextLock&gt;, true&gt;::~unique_ptr (5,086,743 samples, 0.01%)</title><rect x="1106.7" y="1973" width="0.1" height="15.0" fill="rgb(225,217,16)" rx="2" ry="2" />
<text  x="1109.66" y="1983.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::HasChildren&lt;duckdb::LogicalOperator&gt; (4,435,434 samples, 0.01%)</title><rect x="546.6" y="1781" width="0.1" height="15.0" fill="rgb(217,213,43)" rx="2" ry="2" />
<text  x="549.61" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_gc_event_handler (10,513,444 samples, 0.02%)</title><rect x="878.5" y="1397" width="0.3" height="15.0" fill="rgb(220,90,42)" rx="2" ry="2" />
<text  x="881.51" y="1407.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::ColumnDataAllocator&gt;::construct&lt;duckdb::ColumnDataAllocator, duckdb::ClientContext&amp;, duckdb::ColumnDataAllocatorType&amp;&gt; (12,094,630 samples, 0.02%)</title><rect x="911.7" y="1637" width="0.3" height="15.0" fill="rgb(226,116,36)" rx="2" ry="2" />
<text  x="914.69" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::extent_recycle_split (11,129,556 samples, 0.02%)</title><rect x="877.2" y="1237" width="0.3" height="15.0" fill="rgb(253,213,50)" rx="2" ry="2" />
<text  x="880.21" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (15,378,327 samples, 0.03%)</title><rect x="708.0" y="1813" width="0.3" height="15.0" fill="rgb(238,13,17)" rx="2" ry="2" />
<text  x="710.99" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (32,776,834 samples, 0.06%)</title><rect x="677.8" y="1717" width="0.8" height="15.0" fill="rgb(250,25,30)" rx="2" ry="2" />
<text  x="680.84" y="1727.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::VectorCache (167,165,358 samples, 0.33%)</title><rect x="365.8" y="1845" width="3.9" height="15.0" fill="rgb(237,33,31)" rx="2" ry="2" />
<text  x="368.81" y="1855.5" ></text>
</g>
<g >
<title>do_futex (18,777,201 samples, 0.04%)</title><rect x="505.7" y="1765" width="0.4" height="15.0" fill="rgb(233,109,47)" rx="2" ry="2" />
<text  x="508.70" y="1775.5" ></text>
</g>
<g >
<title>lru_add_drain (22,789,587 samples, 0.04%)</title><rect x="1172.3" y="1877" width="0.5" height="15.0" fill="rgb(245,149,46)" rx="2" ry="2" />
<text  x="1175.31" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (6,186,578 samples, 0.01%)</title><rect x="777.7" y="1765" width="0.1" height="15.0" fill="rgb(252,168,20)" rx="2" ry="2" />
<text  x="780.68" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Vector::ResetFromCache (15,733,030 samples, 0.03%)</title><rect x="488.9" y="1669" width="0.3" height="15.0" fill="rgb(237,27,24)" rx="2" ry="2" />
<text  x="491.85" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RenderTree&gt;, void&gt; (4,489,594 samples, 0.01%)</title><rect x="1068.8" y="1717" width="0.1" height="15.0" fill="rgb(226,205,8)" rx="2" ry="2" />
<text  x="1071.80" y="1727.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::SelectionData&gt;::operator= (7,376,832 samples, 0.01%)</title><rect x="211.6" y="1653" width="0.2" height="15.0" fill="rgb(216,142,19)" rx="2" ry="2" />
<text  x="214.63" y="1663.5" ></text>
</g>
<g >
<title>blk_mq_do_dispatch_sched (38,364,840 samples, 0.07%)</title><rect x="249.7" y="1429" width="0.9" height="15.0" fill="rgb(246,122,20)" rx="2" ry="2" />
<text  x="252.70" y="1439.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueueProducerToken, std::default_delete&lt;duckdb::QueueProducerToken&gt; &gt;::unique_ptr (15,307,163 samples, 0.03%)</title><rect x="1090.6" y="1813" width="0.4" height="15.0" fill="rgb(220,40,10)" rx="2" ry="2" />
<text  x="1093.62" y="1823.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::VectorCache, true&gt;::~vector (100,091,365 samples, 0.20%)</title><rect x="481.5" y="1733" width="2.3" height="15.0" fill="rgb(232,204,13)" rx="2" ry="2" />
<text  x="484.46" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt; &gt; (28,632,666 samples, 0.06%)</title><rect x="1088.6" y="1797" width="0.6" height="15.0" fill="rgb(218,208,39)" rx="2" ry="2" />
<text  x="1091.58" y="1807.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (9,054,906 samples, 0.02%)</title><rect x="638.4" y="1637" width="0.2" height="15.0" fill="rgb(237,175,45)" rx="2" ry="2" />
<text  x="641.40" y="1647.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (30,898,848 samples, 0.06%)</title><rect x="146.7" y="1989" width="0.7" height="15.0" fill="rgb(249,208,34)" rx="2" ry="2" />
<text  x="149.68" y="1999.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&amp;&gt; (45,818,043 samples, 0.09%)</title><rect x="369.9" y="1829" width="1.1" height="15.0" fill="rgb(218,191,41)" rx="2" ry="2" />
<text  x="372.93" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_impl (4,909,031 samples, 0.01%)</title><rect x="482.5" y="1317" width="0.1" height="15.0" fill="rgb(252,50,32)" rx="2" ry="2" />
<text  x="485.47" y="1327.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::PrivateAllocatorData&gt;::operator (15,540,046 samples, 0.03%)</title><rect x="324.6" y="1541" width="0.4" height="15.0" fill="rgb(249,127,11)" rx="2" ry="2" />
<text  x="327.62" y="1551.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionState, std::default_delete&lt;duckdb::ExpressionState&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ExpressionState&gt;, void&gt; (4,389,240 samples, 0.01%)</title><rect x="904.4" y="1685" width="0.1" height="15.0" fill="rgb(215,134,11)" rx="2" ry="2" />
<text  x="907.37" y="1695.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (13,825,570 samples, 0.03%)</title><rect x="359.8" y="1829" width="0.3" height="15.0" fill="rgb(228,168,23)" rx="2" ry="2" />
<text  x="362.82" y="1839.5" ></text>
</g>
<g >
<title>ext4_da_write_end (11,289,335 samples, 0.02%)</title><rect x="248.5" y="1541" width="0.2" height="15.0" fill="rgb(235,161,38)" rx="2" ry="2" />
<text  x="251.45" y="1551.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderTopLayer (9,293,352 samples, 0.02%)</title><rect x="78.7" y="2021" width="0.2" height="15.0" fill="rgb(213,175,53)" rx="2" ry="2" />
<text  x="81.71" y="2031.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RowGroup, std::default_delete&lt;duckdb::RowGroup&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RowGroup&gt;, void&gt; (4,461,900 samples, 0.01%)</title><rect x="458.1" y="1717" width="0.1" height="15.0" fill="rgb(215,178,14)" rx="2" ry="2" />
<text  x="461.08" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::Vector*&gt; (89,272,199 samples, 0.17%)</title><rect x="333.4" y="1605" width="2.0" height="15.0" fill="rgb(245,29,6)" rx="2" ry="2" />
<text  x="336.39" y="1615.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformParseTree (661,932,147 samples, 1.29%)</title><rect x="525.1" y="1925" width="15.2" height="15.0" fill="rgb(225,100,19)" rx="2" ry="2" />
<text  x="528.06" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (12,311,360 samples, 0.02%)</title><rect x="930.7" y="1685" width="0.3" height="15.0" fill="rgb(211,79,43)" rx="2" ry="2" />
<text  x="933.70" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_realloc_insert&lt;duckdb::LogicalType const&amp;&gt; (12,558,088 samples, 0.02%)</title><rect x="423.4" y="1573" width="0.3" height="15.0" fill="rgb(252,57,1)" rx="2" ry="2" />
<text  x="426.41" y="1583.5" ></text>
</g>
<g >
<title>duckdb::Optimizer::~Optimizer (202,624,487 samples, 0.40%)</title><rect x="829.1" y="1893" width="4.6" height="15.0" fill="rgb(219,4,2)" rx="2" ry="2" />
<text  x="832.06" y="1903.5" ></text>
</g>
<g >
<title>duckdb::DatePartSimplificationRule::~DatePartSimplificationRule (6,864,701 samples, 0.01%)</title><rect x="831.0" y="1717" width="0.2" height="15.0" fill="rgb(221,117,0)" rx="2" ry="2" />
<text  x="834.04" y="1727.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::GetSegment (25,241,283 samples, 0.05%)</title><rect x="300.1" y="1621" width="0.6" height="15.0" fill="rgb(232,168,26)" rx="2" ry="2" />
<text  x="303.13" y="1631.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::HTTPState, std::allocator&lt;duckdb::HTTPState&gt;,  (10,258,771 samples, 0.02%)</title><rect x="359.4" y="1813" width="0.2" height="15.0" fill="rgb(208,205,49)" rx="2" ry="2" />
<text  x="362.37" y="1823.5" ></text>
</g>
<g >
<title>memcpy (10,836,228 samples, 0.02%)</title><rect x="1179.8" y="2037" width="0.3" height="15.0" fill="rgb(229,110,25)" rx="2" ry="2" />
<text  x="1182.82" y="2047.5" ></text>
</g>
<g >
<title>duckdb::PhysicalPlanGenerator::UseBatchIndex (66,429,873 samples, 0.13%)</title><rect x="853.0" y="1829" width="1.6" height="15.0" fill="rgb(243,181,16)" rx="2" ry="2" />
<text  x="856.05" y="1839.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::DatabaseInstance&gt; &gt;::destroy&lt;duckdb::DatabaseInstance&gt; (100,574,591 samples, 0.20%)</title><rect x="1117.4" y="1909" width="2.3" height="15.0" fill="rgb(247,51,2)" rx="2" ry="2" />
<text  x="1120.43" y="1919.5" ></text>
</g>
<g >
<title>duckdb::ValidityInitSegment (26,225,892 samples, 0.05%)</title><rect x="444.7" y="1637" width="0.6" height="15.0" fill="rgb(252,42,40)" rx="2" ry="2" />
<text  x="447.69" y="1647.5" ></text>
</g>
<g >
<title>submit_bio (27,639,805 samples, 0.05%)</title><rect x="250.8" y="1557" width="0.6" height="15.0" fill="rgb(232,94,16)" rx="2" ry="2" />
<text  x="253.79" y="1567.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (9,101,712 samples, 0.02%)</title><rect x="487.8" y="1429" width="0.2" height="15.0" fill="rgb(206,5,54)" rx="2" ry="2" />
<text  x="490.79" y="1439.5" ></text>
</g>
<g >
<title>__schedule (8,303,164 samples, 0.02%)</title><rect x="252.3" y="1589" width="0.2" height="15.0" fill="rgb(232,118,27)" rx="2" ry="2" />
<text  x="255.30" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1605" width="0.1" height="15.0" fill="rgb(233,17,51)" rx="2" ry="2" />
<text  x="14.25" y="1615.5" ></text>
</g>
<g >
<title>duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;::~SegmentNode (99,210,826 samples, 0.19%)</title><rect x="241.6" y="837" width="2.3" height="15.0" fill="rgb(241,150,20)" rx="2" ry="2" />
<text  x="244.64" y="847.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1653" width="0.1" height="15.0" fill="rgb(210,10,11)" rx="2" ry="2" />
<text  x="14.25" y="1663.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::BoundResultModifier, std::default_delete&lt;duckdb::BoundResultModifier&gt;, true&gt;, true&gt;::~vector (7,943,795 samples, 0.02%)</title><rect x="980.1" y="1701" width="0.1" height="15.0" fill="rgb(208,149,51)" rx="2" ry="2" />
<text  x="983.05" y="1711.5" ></text>
</g>
<g >
<title>duckdb::Vector::ResetFromCache (44,507,227 samples, 0.09%)</title><rect x="292.0" y="1701" width="1.0" height="15.0" fill="rgb(230,31,27)" rx="2" ry="2" />
<text  x="294.97" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Rule&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; &gt;::push_back (4,731,657 samples, 0.01%)</title><rect x="741.1" y="1733" width="0.1" height="15.0" fill="rgb(227,162,1)" rx="2" ry="2" />
<text  x="744.07" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::~vector (161,607,100 samples, 0.32%)</title><rect x="390.4" y="1845" width="3.7" height="15.0" fill="rgb(215,44,43)" rx="2" ry="2" />
<text  x="393.41" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QualifyBinder, std::default_delete&lt;duckdb::QualifyBinder&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::QualifyBinder&gt;, void&gt; (4,963,338 samples, 0.01%)</title><rect x="964.9" y="1733" width="0.1" height="15.0" fill="rgb(212,107,48)" rx="2" ry="2" />
<text  x="967.92" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorMetaData, std::allocator&lt;duckdb::VectorMetaData&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorMetaData const&amp;&gt; (22,643,777 samples, 0.04%)</title><rect x="863.9" y="1685" width="0.6" height="15.0" fill="rgb(241,136,40)" rx="2" ry="2" />
<text  x="866.94" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc (6,657,622 samples, 0.01%)</title><rect x="239.8" y="469" width="0.2" height="15.0" fill="rgb(249,197,34)" rx="2" ry="2" />
<text  x="242.80" y="479.5" ></text>
</g>
<g >
<title>duckdb::BindContext::AddGenericBinding (217,013,397 samples, 0.42%)</title><rect x="927.0" y="1733" width="5.0" height="15.0" fill="rgb(233,207,17)" rx="2" ry="2" />
<text  x="929.99" y="1743.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (55,210,045 samples, 0.11%)</title><rect x="86.3" y="2021" width="1.3" height="15.0" fill="rgb(254,144,30)" rx="2" ry="2" />
<text  x="89.31" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;unsigned long, false&gt;::_Hash_node (5,616,696 samples, 0.01%)</title><rect x="692.9" y="1733" width="0.1" height="15.0" fill="rgb(226,4,15)" rx="2" ry="2" />
<text  x="695.92" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryNode, std::default_delete&lt;duckdb::QueryNode&gt; &gt;::operator= (10,012,739 samples, 0.02%)</title><rect x="534.2" y="1749" width="0.2" height="15.0" fill="rgb(245,205,30)" rx="2" ry="2" />
<text  x="537.16" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ConstantExpressionMatcher, std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt;, void&gt; (6,161,540 samples, 0.01%)</title><rect x="784.3" y="1813" width="0.1" height="15.0" fill="rgb(248,216,18)" rx="2" ry="2" />
<text  x="787.27" y="1823.5" ></text>
</g>
<g >
<title>schedule (8,303,164 samples, 0.02%)</title><rect x="252.3" y="1605" width="0.2" height="15.0" fill="rgb(238,131,0)" rx="2" ry="2" />
<text  x="255.30" y="1615.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (19,838,617 samples, 0.04%)</title><rect x="727.4" y="1733" width="0.5" height="15.0" fill="rgb(248,76,43)" rx="2" ry="2" />
<text  x="730.42" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics&gt;, false&gt;::unique_ptr (20,221,077 samples, 0.04%)</title><rect x="424.2" y="1509" width="0.5" height="15.0" fill="rgb(231,189,12)" rx="2" ry="2" />
<text  x="427.22" y="1519.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::BoundExpressionListRef&gt; (14,043,982 samples, 0.03%)</title><rect x="937.7" y="1733" width="0.4" height="15.0" fill="rgb(238,61,10)" rx="2" ry="2" />
<text  x="940.75" y="1743.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorToString[abi:cxx11] (4,538,801 samples, 0.01%)</title><rect x="548.8" y="1493" width="0.1" height="15.0" fill="rgb(235,41,21)" rx="2" ry="2" />
<text  x="551.77" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LHSBinding, std::allocator&lt;duckdb::LHSBinding&gt; &gt;::~vector (6,880,645 samples, 0.01%)</title><rect x="769.9" y="1781" width="0.2" height="15.0" fill="rgb(245,143,2)" rx="2" ry="2" />
<text  x="772.95" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="549" width="0.1" height="15.0" fill="rgb(206,17,22)" rx="2" ry="2" />
<text  x="14.25" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (5,722,146 samples, 0.01%)</title><rect x="466.9" y="1749" width="0.2" height="15.0" fill="rgb(225,222,17)" rx="2" ry="2" />
<text  x="469.92" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ColumnStatistics::CreateEmptyStats (154,708,425 samples, 0.30%)</title><rect x="423.9" y="1573" width="3.6" height="15.0" fill="rgb(242,200,7)" rx="2" ry="2" />
<text  x="426.93" y="1583.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderNode (4,512,446 samples, 0.01%)</title><rect x="595.6" y="1589" width="0.1" height="15.0" fill="rgb(249,171,16)" rx="2" ry="2" />
<text  x="598.57" y="1599.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::operator[] (19,609,649 samples, 0.04%)</title><rect x="574.9" y="1797" width="0.5" height="15.0" fill="rgb(206,6,12)" rx="2" ry="2" />
<text  x="577.90" y="1807.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::GetRootSegment (9,702,137 samples, 0.02%)</title><rect x="225.5" y="1669" width="0.2" height="15.0" fill="rgb(218,224,32)" rx="2" ry="2" />
<text  x="228.47" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::clear (5,239,352 samples, 0.01%)</title><rect x="802.2" y="1813" width="0.2" height="15.0" fill="rgb(251,144,15)" rx="2" ry="2" />
<text  x="805.24" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt; &gt;::push_back (36,793,934 samples, 0.07%)</title><rect x="939.6" y="1733" width="0.9" height="15.0" fill="rgb(246,12,39)" rx="2" ry="2" />
<text  x="942.63" y="1743.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::SelectionData, unsigned long&amp;&gt; (17,201,285 samples, 0.03%)</title><rect x="296.4" y="1637" width="0.4" height="15.0" fill="rgb(253,209,25)" rx="2" ry="2" />
<text  x="299.43" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::unique_ptr (6,152,496 samples, 0.01%)</title><rect x="749.2" y="1781" width="0.2" height="15.0" fill="rgb(207,116,18)" rx="2" ry="2" />
<text  x="752.23" y="1791.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::find (5,476,868 samples, 0.01%)</title><rect x="778.0" y="1797" width="0.2" height="15.0" fill="rgb(253,135,38)" rx="2" ry="2" />
<text  x="781.03" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt;, true&gt;::~unique_ptr (131,314,279 samples, 0.26%)</title><rect x="238.3" y="837" width="3.0" height="15.0" fill="rgb(210,145,4)" rx="2" ry="2" />
<text  x="241.25" y="847.5" ></text>
</g>
<g >
<title>duckdb::JoinOrderOptimizer::ExtractJoinRelations (315,618,734 samples, 0.62%)</title><rect x="752.9" y="1797" width="7.3" height="15.0" fill="rgb(234,183,37)" rx="2" ry="2" />
<text  x="755.94" y="1807.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ChunkMetaData&gt; (8,589,302 samples, 0.02%)</title><rect x="341.0" y="1109" width="0.2" height="15.0" fill="rgb(207,189,43)" rx="2" ry="2" />
<text  x="343.97" y="1119.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (4,591,780 samples, 0.01%)</title><rect x="688.3" y="1765" width="0.1" height="15.0" fill="rgb(216,101,42)" rx="2" ry="2" />
<text  x="691.31" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;unsigned long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt; &gt; (10,030,035 samples, 0.02%)</title><rect x="779.1" y="1781" width="0.3" height="15.0" fill="rgb(218,225,51)" rx="2" ry="2" />
<text  x="782.15" y="1791.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::GetName[abi:cxx11] (8,202,606 samples, 0.02%)</title><rect x="551.3" y="1749" width="0.2" height="15.0" fill="rgb(237,94,37)" rx="2" ry="2" />
<text  x="554.27" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (25,337,159 samples, 0.05%)</title><rect x="42.4" y="1989" width="0.6" height="15.0" fill="rgb(240,181,45)" rx="2" ry="2" />
<text  x="45.40" y="1999.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;duckdb::OptimizerType, duckdb::OptimizerType, std::_Identity&lt;duckdb::OptimizerType&gt;, std::less&lt;duckdb::OptimizerType&gt;, std::allocator&lt;duckdb::OptimizerType&gt; &gt;::_M_begin (5,953,037 samples, 0.01%)</title><rect x="773.6" y="1829" width="0.1" height="15.0" fill="rgb(210,219,47)" rx="2" ry="2" />
<text  x="776.58" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (4,405,516 samples, 0.01%)</title><rect x="45.8" y="1989" width="0.1" height="15.0" fill="rgb(231,200,23)" rx="2" ry="2" />
<text  x="48.77" y="1999.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;*&gt; (8,791,747 samples, 0.02%)</title><rect x="1036.2" y="1557" width="0.2" height="15.0" fill="rgb(221,159,20)" rx="2" ry="2" />
<text  x="1039.19" y="1567.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::LogicalExpressionGet, unsigned long&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, duckdb::vector&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;, true&gt; &gt; (33,541,621 samples, 0.07%)</title><rect x="975.3" y="1733" width="0.8" height="15.0" fill="rgb(213,54,35)" rx="2" ry="2" />
<text  x="978.33" y="1743.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::pair&lt;unsigned long, unsigned long&gt;*&gt; (4,546,641 samples, 0.01%)</title><rect x="604.0" y="1733" width="0.1" height="15.0" fill="rgb(219,27,30)" rx="2" ry="2" />
<text  x="606.99" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (10,590,084 samples, 0.02%)</title><rect x="1101.4" y="1845" width="0.3" height="15.0" fill="rgb(221,52,51)" rx="2" ry="2" />
<text  x="1104.42" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Catalog::CreatePragmaFunction (5,591,169 samples, 0.01%)</title><rect x="1110.4" y="1829" width="0.2" height="15.0" fill="rgb(217,115,14)" rx="2" ry="2" />
<text  x="1113.44" y="1839.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (9,007,480 samples, 0.02%)</title><rect x="618.7" y="1781" width="0.3" height="15.0" fill="rgb(242,73,0)" rx="2" ry="2" />
<text  x="621.75" y="1791.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (7,807,938 samples, 0.02%)</title><rect x="487.3" y="1429" width="0.2" height="15.0" fill="rgb(225,217,41)" rx="2" ry="2" />
<text  x="490.31" y="1439.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::TreeNode::TreeNode (5,148,548 samples, 0.01%)</title><rect x="1086.6" y="1813" width="0.1" height="15.0" fill="rgb(215,60,30)" rx="2" ry="2" />
<text  x="1089.61" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BoundColumnRefExpression*, std::allocator&lt;duckdb::BoundColumnRefExpression*&gt; &gt;::emplace_back&lt;duckdb::BoundColumnRefExpression*&gt; (22,277,304 samples, 0.04%)</title><rect x="763.9" y="1653" width="0.5" height="15.0" fill="rgb(206,205,17)" rx="2" ry="2" />
<text  x="766.91" y="1663.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, duckdb::TypeMatcher*, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::_Tuple_impl&lt;duckdb::TypeMatcher*&amp;, std::default_delete&lt;duckdb::TypeMatcherId&gt;, void&gt; (5,355,506 samples, 0.01%)</title><rect x="805.6" y="1781" width="0.1" height="15.0" fill="rgb(246,9,26)" rx="2" ry="2" />
<text  x="808.59" y="1791.5" ></text>
</g>
<g >
<title>duckdb::OrderedAggregateOptimizer::OrderedAggregateOptimizer (14,550,643 samples, 0.03%)</title><rect x="818.7" y="1861" width="0.3" height="15.0" fill="rgb(239,78,38)" rx="2" ry="2" />
<text  x="821.66" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Vector&gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (19,607,393 samples, 0.04%)</title><rect x="402.8" y="1749" width="0.4" height="15.0" fill="rgb(213,89,31)" rx="2" ry="2" />
<text  x="405.79" y="1759.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long&gt; (16,985,008 samples, 0.03%)</title><rect x="577.6" y="1733" width="0.4" height="15.0" fill="rgb(209,24,54)" rx="2" ry="2" />
<text  x="580.64" y="1743.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (28,169,386 samples, 0.05%)</title><rect x="750.6" y="1717" width="0.6" height="15.0" fill="rgb(248,223,24)" rx="2" ry="2" />
<text  x="753.58" y="1727.5" ></text>
</g>
<g >
<title>try_to_wake_up (17,791,103 samples, 0.03%)</title><rect x="1058.7" y="1637" width="0.4" height="15.0" fill="rgb(213,134,50)" rx="2" ry="2" />
<text  x="1061.69" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::vector (6,878,183 samples, 0.01%)</title><rect x="617.1" y="1685" width="0.2" height="15.0" fill="rgb(236,2,48)" rx="2" ry="2" />
<text  x="620.12" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Vector::~Vector (88,503,724 samples, 0.17%)</title><rect x="333.4" y="1573" width="2.0" height="15.0" fill="rgb(222,74,2)" rx="2" ry="2" />
<text  x="336.41" y="1583.5" ></text>
</g>
<g >
<title>duckdb::make_uniq_base&lt;duckdb::StandardEntry, duckdb::ScalarFunctionCatalogEntry, duckdb::Catalog&amp;, duckdb::DuckSchemaEntry&amp;, duckdb::CreateScalarFunctionInfo&amp;&gt; (17,546,424 samples, 0.03%)</title><rect x="1114.6" y="1861" width="0.4" height="15.0" fill="rgb(248,8,20)" rx="2" ry="2" />
<text  x="1117.59" y="1871.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (88,046,952 samples, 0.17%)</title><rect x="895.9" y="1621" width="2.1" height="15.0" fill="rgb(237,207,49)" rx="2" ry="2" />
<text  x="898.93" y="1631.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::~vector (5,052,480 samples, 0.01%)</title><rect x="237.0" y="1541" width="0.1" height="15.0" fill="rgb(236,221,36)" rx="2" ry="2" />
<text  x="239.98" y="1551.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::~vector (19,267,544 samples, 0.04%)</title><rect x="673.7" y="1797" width="0.4" height="15.0" fill="rgb(235,54,44)" rx="2" ry="2" />
<text  x="676.68" y="1807.5" ></text>
</g>
<g >
<title>duckdb::DatabaseInstance::GetBufferManager (6,433,738 samples, 0.01%)</title><rect x="434.5" y="1653" width="0.1" height="15.0" fill="rgb(254,23,10)" rx="2" ry="2" />
<text  x="437.46" y="1663.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Expression const*, true&gt;::~vector (5,180,185 samples, 0.01%)</title><rect x="483.8" y="1733" width="0.1" height="15.0" fill="rgb(206,13,19)" rx="2" ry="2" />
<text  x="486.80" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::CatalogEntryEquality, duckdb::CatalogEntryHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_deallocate_buckets (4,451,109 samples, 0.01%)</title><rect x="924.5" y="1813" width="0.1" height="15.0" fill="rgb(254,9,13)" rx="2" ry="2" />
<text  x="927.54" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, void&gt; (4,545,571 samples, 0.01%)</title><rect x="478.5" y="1733" width="0.1" height="15.0" fill="rgb(244,154,4)" rx="2" ry="2" />
<text  x="481.51" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1653" width="1.9" height="15.0" fill="rgb(245,39,53)" rx="2" ry="2" />
<text  x="1120.81" y="1663.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::insert (13,513,343 samples, 0.03%)</title><rect x="778.2" y="1797" width="0.3" height="15.0" fill="rgb(216,131,18)" rx="2" ry="2" />
<text  x="781.16" y="1807.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (70,115,247 samples, 0.14%)</title><rect x="221.3" y="1557" width="1.6" height="15.0" fill="rgb(223,8,42)" rx="2" ry="2" />
<text  x="224.34" y="1567.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::InitializeChunk (11,811,247 samples, 0.02%)</title><rect x="108.1" y="1797" width="0.2" height="15.0" fill="rgb(243,41,46)" rx="2" ry="2" />
<text  x="111.06" y="1807.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::PutMapping (11,193,786 samples, 0.02%)</title><rect x="1113.5" y="1813" width="0.3" height="15.0" fill="rgb(205,196,23)" rx="2" ry="2" />
<text  x="1116.50" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::Verify (236,097,164 samples, 0.46%)</title><rect x="775.3" y="1861" width="5.5" height="15.0" fill="rgb(226,78,45)" rx="2" ry="2" />
<text  x="778.35" y="1871.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::BoundSelectNode, std::default_delete&lt;duckdb::BoundSelectNode&gt; &gt;::_M_ptr (7,793,820 samples, 0.02%)</title><rect x="964.5" y="1717" width="0.2" height="15.0" fill="rgb(231,5,42)" rx="2" ry="2" />
<text  x="967.48" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocatorData::ArenaAllocatorData (4,540,268 samples, 0.01%)</title><rect x="377.4" y="1813" width="0.1" height="15.0" fill="rgb(236,161,42)" rx="2" ry="2" />
<text  x="380.36" y="1823.5" ></text>
</g>
<g >
<title>try_charge (11,443,842 samples, 0.02%)</title><rect x="1140.5" y="1877" width="0.2" height="15.0" fill="rgb(242,100,49)" rx="2" ry="2" />
<text  x="1143.47" y="1887.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_free (5,644,775 samples, 0.01%)</title><rect x="391.2" y="1509" width="0.1" height="15.0" fill="rgb(241,198,18)" rx="2" ry="2" />
<text  x="394.20" y="1519.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Free (50,711,764 samples, 0.10%)</title><rect x="239.6" y="549" width="1.2" height="15.0" fill="rgb(216,222,47)" rx="2" ry="2" />
<text  x="242.63" y="559.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (34,558,936 samples, 0.07%)</title><rect x="348.7" y="805" width="0.8" height="15.0" fill="rgb(246,176,4)" rx="2" ry="2" />
<text  x="351.67" y="815.5" ></text>
</g>
<g >
<title>duckdb::Rule::~Rule (6,880,726 samples, 0.01%)</title><rect x="833.2" y="1685" width="0.1" height="15.0" fill="rgb(245,182,26)" rx="2" ry="2" />
<text  x="836.18" y="1695.5" ></text>
</g>
<g >
<title>std::function&lt;void  (14,684,299 samples, 0.03%)</title><rect x="844.0" y="1765" width="0.3" height="15.0" fill="rgb(230,33,38)" rx="2" ry="2" />
<text  x="847.01" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::TreeRenderer (5,341,160 samples, 0.01%)</title><rect x="582.0" y="1861" width="0.2" height="15.0" fill="rgb(239,29,33)" rx="2" ry="2" />
<text  x="585.04" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::LocalTableStorage&gt;::construct&lt;duckdb::LocalTableStorage, duckdb::DataTable&amp;&gt; (344,634,469 samples, 0.67%)</title><rect x="423.0" y="1637" width="8.0" height="15.0" fill="rgb(228,183,20)" rx="2" ry="2" />
<text  x="426.03" y="1647.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAppendState::~ColumnDataAppendState (20,963,482 samples, 0.04%)</title><rect x="374.6" y="1925" width="0.5" height="15.0" fill="rgb(248,95,31)" rx="2" ry="2" />
<text  x="377.61" y="1935.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (4,675,163 samples, 0.01%)</title><rect x="659.1" y="1733" width="0.2" height="15.0" fill="rgb(205,224,38)" rx="2" ry="2" />
<text  x="662.15" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorMetaData&gt; &gt;::construct&lt;duckdb::VectorMetaData, duckdb::VectorMetaData const&amp;&gt; (8,872,431 samples, 0.02%)</title><rect x="383.3" y="1829" width="0.2" height="15.0" fill="rgb(236,71,26)" rx="2" ry="2" />
<text  x="386.34" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::get (5,486,701 samples, 0.01%)</title><rect x="739.6" y="1605" width="0.1" height="15.0" fill="rgb(226,99,14)" rx="2" ry="2" />
<text  x="742.62" y="1615.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::CreateTransientSegment (63,331,063 samples, 0.12%)</title><rect x="102.8" y="1637" width="1.5" height="15.0" fill="rgb(226,17,51)" rx="2" ry="2" />
<text  x="105.82" y="1647.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnAppendState*&gt; (5,351,059 samples, 0.01%)</title><rect x="339.6" y="1349" width="0.1" height="15.0" fill="rgb(232,33,41)" rx="2" ry="2" />
<text  x="342.62" y="1359.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::VectorBuffer, std::allocator&lt;duckdb::VectorBuffer&gt;, unsigned long&gt; (37,629,950 samples, 0.07%)</title><rect x="901.3" y="1605" width="0.9" height="15.0" fill="rgb(248,147,14)" rx="2" ry="2" />
<text  x="904.30" y="1615.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr (7,572,685 samples, 0.01%)</title><rect x="817.9" y="1765" width="0.2" height="15.0" fill="rgb(219,46,16)" rx="2" ry="2" />
<text  x="820.89" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TableScanState::~TableScanState (47,953,683 samples, 0.09%)</title><rect x="287.7" y="1701" width="1.1" height="15.0" fill="rgb(225,186,11)" rx="2" ry="2" />
<text  x="290.66" y="1711.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::GetDependencies (13,268,307 samples, 0.03%)</title><rect x="1048.0" y="1813" width="0.3" height="15.0" fill="rgb(253,207,33)" rx="2" ry="2" />
<text  x="1051.04" y="1823.5" ></text>
</g>
<g >
<title>duckdb::LocalTableStorage::AppendToIndexes (157,968,746 samples, 0.31%)</title><rect x="228.5" y="1701" width="3.6" height="15.0" fill="rgb(237,49,24)" rx="2" ry="2" />
<text  x="231.48" y="1711.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (17,009,342 samples, 0.03%)</title><rect x="185.2" y="2005" width="0.4" height="15.0" fill="rgb(237,223,8)" rx="2" ry="2" />
<text  x="188.17" y="2015.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, false&gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt; (9,284,106 samples, 0.02%)</title><rect x="1117.6" y="821" width="0.2" height="15.0" fill="rgb(230,40,52)" rx="2" ry="2" />
<text  x="1120.55" y="831.5" ></text>
</g>
<g >
<title>duckdb::SelectionVector::Initialize (435,224,663 samples, 0.85%)</title><rect x="302.3" y="1701" width="10.1" height="15.0" fill="rgb(253,70,4)" rx="2" ry="2" />
<text  x="305.34" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (66,237,130 samples, 0.13%)</title><rect x="217.7" y="1477" width="1.5" height="15.0" fill="rgb(209,36,47)" rx="2" ry="2" />
<text  x="220.68" y="1487.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, void&gt; (5,281,234 samples, 0.01%)</title><rect x="868.4" y="1717" width="0.1" height="15.0" fill="rgb(213,17,5)" rx="2" ry="2" />
<text  x="871.41" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Event*, std::allocator&lt;duckdb::Event*&gt; &gt;::emplace_back&lt;duckdb::Event*&gt; (29,149,217 samples, 0.06%)</title><rect x="1046.5" y="1781" width="0.7" height="15.0" fill="rgb(221,12,43)" rx="2" ry="2" />
<text  x="1049.52" y="1791.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::AppendData (32,032,266 samples, 0.06%)</title><rect x="229.8" y="1605" width="0.7" height="15.0" fill="rgb(206,93,41)" rx="2" ry="2" />
<text  x="232.80" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (21,466,266 samples, 0.04%)</title><rect x="595.3" y="1637" width="0.5" height="15.0" fill="rgb(230,154,39)" rx="2" ry="2" />
<text  x="598.30" y="1647.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (8,756,334 samples, 0.02%)</title><rect x="374.8" y="1717" width="0.2" height="15.0" fill="rgb(209,165,54)" rx="2" ry="2" />
<text  x="377.76" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::PhysicalIndex, std::allocator&lt;duckdb::PhysicalIndex&gt; &gt;::~vector (4,477,330 samples, 0.01%)</title><rect x="857.7" y="1797" width="0.1" height="15.0" fill="rgb(238,35,2)" rx="2" ry="2" />
<text  x="860.66" y="1807.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, duckdb::ActiveQueryContext*, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt; (4,892,318 samples, 0.01%)</title><rect x="512.1" y="1845" width="0.1" height="15.0" fill="rgb(216,198,18)" rx="2" ry="2" />
<text  x="515.13" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::check_entry_exit_locking (6,775,019 samples, 0.01%)</title><rect x="437.5" y="1461" width="0.1" height="15.0" fill="rgb(240,151,43)" rx="2" ry="2" />
<text  x="440.47" y="1471.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt; (96,255,609 samples, 0.19%)</title><rect x="355.2" y="1781" width="2.2" height="15.0" fill="rgb(250,51,33)" rx="2" ry="2" />
<text  x="358.15" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (5,780,606 samples, 0.01%)</title><rect x="11.3" y="69" width="0.1" height="15.0" fill="rgb(208,80,2)" rx="2" ry="2" />
<text  x="14.25" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable (6,472,020 samples, 0.01%)</title><rect x="384.0" y="1781" width="0.1" height="15.0" fill="rgb(254,43,34)" rx="2" ry="2" />
<text  x="386.98" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (6,767,025 samples, 0.01%)</title><rect x="731.9" y="1717" width="0.2" height="15.0" fill="rgb(205,99,11)" rx="2" ry="2" />
<text  x="734.92" y="1727.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::~OperatorProfiler (42,412,414 samples, 0.08%)</title><rect x="499.6" y="1781" width="1.0" height="15.0" fill="rgb(221,63,5)" rx="2" ry="2" />
<text  x="502.63" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;unsigned long, true, false&gt;::operator* (9,109,691 samples, 0.02%)</title><rect x="686.5" y="1813" width="0.2" height="15.0" fill="rgb(228,81,26)" rx="2" ry="2" />
<text  x="689.49" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_metadata_try_read_fast (5,120,402 samples, 0.01%)</title><rect x="393.0" y="1509" width="0.1" height="15.0" fill="rgb(209,43,6)" rx="2" ry="2" />
<text  x="395.98" y="1519.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (12,111,852 samples, 0.02%)</title><rect x="831.4" y="1653" width="0.3" height="15.0" fill="rgb(209,157,10)" rx="2" ry="2" />
<text  x="834.44" y="1663.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::ParsedExpression*, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::tuple&lt;duckdb::ParsedExpression*&amp;, std::default_delete&lt;duckdb::ColumnRefExpression&gt;, true&gt; (4,394,667 samples, 0.01%)</title><rect x="944.5" y="1653" width="0.1" height="15.0" fill="rgb(240,55,53)" rx="2" ry="2" />
<text  x="947.51" y="1663.5" ></text>
</g>
<g >
<title>duckdb::DictionaryCompressionState::UpdateState (11,120,336 samples, 0.02%)</title><rect x="1117.9" y="997" width="0.3" height="15.0" fill="rgb(223,45,26)" rx="2" ry="2" />
<text  x="1120.90" y="1007.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ColumnRefExpression, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; const&amp;&gt; (14,042,323 samples, 0.03%)</title><rect x="949.5" y="1733" width="0.3" height="15.0" fill="rgb(212,199,16)" rx="2" ry="2" />
<text  x="952.48" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; (8,406,628 samples, 0.02%)</title><rect x="1012.1" y="1781" width="0.2" height="15.0" fill="rgb(231,21,37)" rx="2" ry="2" />
<text  x="1015.15" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Binder&gt;::destroy&lt;duckdb::Binder&gt; (58,633,245 samples, 0.11%)</title><rect x="1030.7" y="1781" width="1.4" height="15.0" fill="rgb(219,0,33)" rx="2" ry="2" />
<text  x="1033.70" y="1791.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::HTTPState&gt;::operator= (18,843,445 samples, 0.04%)</title><rect x="359.8" y="1893" width="0.4" height="15.0" fill="rgb(228,46,37)" rx="2" ry="2" />
<text  x="362.77" y="1903.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::BlockHandle&gt; &gt;::construct&lt;duckdb::BlockHandle, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (5,798,335 samples, 0.01%)</title><rect x="103.7" y="1509" width="0.2" height="15.0" fill="rgb(248,25,13)" rx="2" ry="2" />
<text  x="106.74" y="1519.5" ></text>
</g>
<g >
<title>duckdb::ColumnAppendState::~ColumnAppendState (28,010,475 samples, 0.05%)</title><rect x="233.6" y="1701" width="0.7" height="15.0" fill="rgb(239,0,13)" rx="2" ry="2" />
<text  x="236.63" y="1711.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (13,483,544 samples, 0.03%)</title><rect x="706.1" y="1733" width="0.3" height="15.0" fill="rgb(220,132,5)" rx="2" ry="2" />
<text  x="709.14" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_realloc_insert&lt;unsigned long&amp;, unsigned long&amp;&gt; (265,455,573 samples, 0.52%)</title><rect x="564.7" y="1765" width="6.1" height="15.0" fill="rgb(232,178,7)" rx="2" ry="2" />
<text  x="567.74" y="1775.5" ></text>
</g>
<g >
<title>duckdb::LogicalProjection::ResolveTypes (16,726,334 samples, 0.03%)</title><rect x="848.2" y="1845" width="0.4" height="15.0" fill="rgb(254,156,0)" rx="2" ry="2" />
<text  x="851.21" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt;::~unique_ptr (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="997" width="0.3" height="15.0" fill="rgb(228,121,42)" rx="2" ry="2" />
<text  x="1120.47" y="1007.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::PipelineInitializeEvent, std::allocator&lt;duckdb::PipelineInitializeEvent&gt;,  (19,790,013 samples, 0.04%)</title><rect x="1051.4" y="1733" width="0.4" height="15.0" fill="rgb(223,209,3)" rx="2" ry="2" />
<text  x="1054.37" y="1743.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;, unsigned long&amp;&gt; (21,612,516 samples, 0.04%)</title><rect x="473.7" y="1653" width="0.5" height="15.0" fill="rgb(225,129,31)" rx="2" ry="2" />
<text  x="476.74" y="1663.5" ></text>
</g>
<g >
<title>duckdb::DataTable::FinalizeLocalAppend (553,127,343 samples, 1.08%)</title><rect x="406.0" y="1749" width="12.7" height="15.0" fill="rgb(243,142,26)" rx="2" ry="2" />
<text  x="409.00" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt; &gt; (18,879,764 samples, 0.04%)</title><rect x="812.6" y="1781" width="0.4" height="15.0" fill="rgb(229,79,8)" rx="2" ry="2" />
<text  x="815.62" y="1791.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::FunctionExpressionMatcher&gt; &gt; (5,334,918 samples, 0.01%)</title><rect x="785.8" y="1813" width="0.1" height="15.0" fill="rgb(230,88,49)" rx="2" ry="2" />
<text  x="788.79" y="1823.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (58,020,636 samples, 0.11%)</title><rect x="164.5" y="1877" width="1.3" height="15.0" fill="rgb(253,5,47)" rx="2" ry="2" />
<text  x="167.45" y="1887.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::ResetFromCache (14,934,928 samples, 0.03%)</title><rect x="488.9" y="1653" width="0.3" height="15.0" fill="rgb(242,212,48)" rx="2" ry="2" />
<text  x="491.85" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::CommonTableExpressionInfo&gt;, std::reference_wrapper&lt;duckdb::CommonTableExpressionInfo&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::CommonTableExpressionInfo&gt; &gt;, std::__detail::_Identity, duckdb::ReferenceEquality&lt;duckdb::CommonTableExpressionInfo&gt;, duckdb::ReferenceHashFunction&lt;duckdb::CommonTableExpressionInfo&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (5,349,480 samples, 0.01%)</title><rect x="1018.3" y="1685" width="0.1" height="15.0" fill="rgb(216,43,53)" rx="2" ry="2" />
<text  x="1021.31" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::operator (6,239,383 samples, 0.01%)</title><rect x="780.2" y="1781" width="0.1" height="15.0" fill="rgb(216,17,32)" rx="2" ry="2" />
<text  x="783.18" y="1791.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, duckdb::InClauseSimplificationRule*, std::default_delete&lt;duckdb::InClauseSimplificationRule&gt; &gt; (4,747,233 samples, 0.01%)</title><rect x="810.9" y="1781" width="0.1" height="15.0" fill="rgb(229,8,0)" rx="2" ry="2" />
<text  x="813.93" y="1791.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::PipelineExecutor&gt;::operator (14,297,582 samples, 0.03%)</title><rect x="108.5" y="1797" width="0.3" height="15.0" fill="rgb(251,211,34)" rx="2" ry="2" />
<text  x="111.52" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (5,264,200 samples, 0.01%)</title><rect x="831.1" y="1653" width="0.1" height="15.0" fill="rgb(251,132,4)" rx="2" ry="2" />
<text  x="834.06" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (49,526,625 samples, 0.10%)</title><rect x="705.7" y="1781" width="1.2" height="15.0" fill="rgb(216,161,29)" rx="2" ry="2" />
<text  x="708.73" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryResult, std::default_delete&lt;duckdb::QueryResult&gt; &gt;::release (7,586,804 samples, 0.01%)</title><rect x="394.7" y="1893" width="0.2" height="15.0" fill="rgb(253,149,32)" rx="2" ry="2" />
<text  x="397.74" y="1903.5" ></text>
</g>
<g >
<title>duckdb::BaseQueryResult::~BaseQueryResult (20,236,009 samples, 0.04%)</title><rect x="1106.9" y="1893" width="0.4" height="15.0" fill="rgb(248,226,28)" rx="2" ry="2" />
<text  x="1109.87" y="1903.5" ></text>
</g>
<g >
<title>duckdb::Rule::~Rule (8,352,386 samples, 0.02%)</title><rect x="830.8" y="1685" width="0.2" height="15.0" fill="rgb(221,170,9)" rx="2" ry="2" />
<text  x="833.83" y="1695.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (51,854,306 samples, 0.10%)</title><rect x="861.5" y="1717" width="1.2" height="15.0" fill="rgb(253,31,18)" rx="2" ry="2" />
<text  x="864.47" y="1727.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::~MetaPipeline (40,545,740 samples, 0.08%)</title><rect x="1096.2" y="1749" width="0.9" height="15.0" fill="rgb(216,24,9)" rx="2" ry="2" />
<text  x="1099.17" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::ScanPartial (761,955,215 samples, 1.49%)</title><rect x="268.7" y="1589" width="17.5" height="15.0" fill="rgb(228,219,18)" rx="2" ry="2" />
<text  x="271.69" y="1599.5" ></text>
</g>
<g >
<title>duckdb::Vector::Vector (27,177,536 samples, 0.05%)</title><rect x="370.0" y="1781" width="0.7" height="15.0" fill="rgb(219,39,28)" rx="2" ry="2" />
<text  x="373.03" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_realloc_insert&lt;duckdb::LogicalType const&amp;&gt; (13,723,657 samples, 0.03%)</title><rect x="865.1" y="1733" width="0.3" height="15.0" fill="rgb(237,25,14)" rx="2" ry="2" />
<text  x="868.08" y="1743.5" ></text>
</g>
<g >
<title>duckdb::InsertGlobalState::~InsertGlobalState (66,257,155 samples, 0.13%)</title><rect x="338.3" y="1525" width="1.5" height="15.0" fill="rgb(226,143,33)" rx="2" ry="2" />
<text  x="341.27" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (15,745,184 samples, 0.03%)</title><rect x="954.1" y="1589" width="0.4" height="15.0" fill="rgb(209,150,6)" rx="2" ry="2" />
<text  x="957.13" y="1599.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::ColumnDataAllocator&gt; &gt;::destroy&lt;duckdb::ColumnDataAllocator&gt; (14,915,515 samples, 0.03%)</title><rect x="338.7" y="1413" width="0.4" height="15.0" fill="rgb(206,86,48)" rx="2" ry="2" />
<text  x="341.72" y="1423.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_default (34,848,299 samples, 0.07%)</title><rect x="242.6" y="501" width="0.8" height="15.0" fill="rgb(208,34,28)" rx="2" ry="2" />
<text  x="245.63" y="511.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnDataCollection, std::default_delete&lt;duckdb::ColumnDataCollection&gt;, true&gt;::operator= (5,164,246 samples, 0.01%)</title><rect x="914.4" y="1781" width="0.1" height="15.0" fill="rgb(220,224,48)" rx="2" ry="2" />
<text  x="917.40" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4,508,782 samples, 0.01%)</title><rect x="352.9" y="1669" width="0.1" height="15.0" fill="rgb(252,1,43)" rx="2" ry="2" />
<text  x="355.92" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::operator[] (352,387,432 samples, 0.69%)</title><rect x="303.6" y="1541" width="8.1" height="15.0" fill="rgb(219,13,52)" rx="2" ry="2" />
<text  x="306.60" y="1551.5" ></text>
</g>
<g >
<title>duckdb::ColumnAppendState::ColumnAppendState (5,689,639 samples, 0.01%)</title><rect x="452.3" y="1717" width="0.1" height="15.0" fill="rgb(209,17,3)" rx="2" ry="2" />
<text  x="455.29" y="1727.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;::operator (9,902,517 samples, 0.02%)</title><rect x="633.7" y="1701" width="0.2" height="15.0" fill="rgb(233,14,28)" rx="2" ry="2" />
<text  x="636.67" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_check_len (4,671,152 samples, 0.01%)</title><rect x="640.2" y="1717" width="0.1" height="15.0" fill="rgb(214,5,23)" rx="2" ry="2" />
<text  x="643.17" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::GetName[abi:cxx11] (5,166,174 samples, 0.01%)</title><rect x="595.4" y="1573" width="0.2" height="15.0" fill="rgb(254,114,28)" rx="2" ry="2" />
<text  x="598.45" y="1583.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (34,385,137 samples, 0.07%)</title><rect x="244.4" y="1189" width="0.8" height="15.0" fill="rgb(221,183,11)" rx="2" ry="2" />
<text  x="247.38" y="1199.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::~ExpressionBinder (5,826,977 samples, 0.01%)</title><rect x="961.6" y="1717" width="0.1" height="15.0" fill="rgb(254,106,30)" rx="2" ry="2" />
<text  x="964.61" y="1727.5" ></text>
</g>
<g >
<title>duckdb::BindContext::CreateColumnReference (56,574,597 samples, 0.11%)</title><rect x="953.2" y="1605" width="1.3" height="15.0" fill="rgb(223,17,40)" rx="2" ry="2" />
<text  x="956.20" y="1615.5" ></text>
</g>
<g >
<title>duckdb::CreateScalarFunctionInfo::~CreateScalarFunctionInfo (4,793,432 samples, 0.01%)</title><rect x="1115.6" y="1909" width="0.1" height="15.0" fill="rgb(241,229,24)" rx="2" ry="2" />
<text  x="1118.60" y="1919.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::~shared_ptr (7,242,694 samples, 0.01%)</title><rect x="108.5" y="1637" width="0.2" height="15.0" fill="rgb(250,167,45)" rx="2" ry="2" />
<text  x="111.52" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (7,496,778 samples, 0.01%)</title><rect x="362.1" y="1749" width="0.2" height="15.0" fill="rgb(247,170,33)" rx="2" ry="2" />
<text  x="365.08" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; (10,479,785 samples, 0.02%)</title><rect x="915.4" y="1605" width="0.3" height="15.0" fill="rgb(242,150,34)" rx="2" ry="2" />
<text  x="918.42" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;unsigned long&gt;::_M_valptr (5,084,676 samples, 0.01%)</title><rect x="679.4" y="1717" width="0.2" height="15.0" fill="rgb(218,173,44)" rx="2" ry="2" />
<text  x="682.45" y="1727.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt;::deallocate (4,751,243 samples, 0.01%)</title><rect x="682.7" y="1685" width="0.1" height="15.0" fill="rgb(245,161,10)" rx="2" ry="2" />
<text  x="685.68" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RowGroupCollection, std::default_delete&lt;duckdb::RowGroupCollection&gt; &gt;::~unique_ptr (4,926,709 samples, 0.01%)</title><rect x="484.7" y="1733" width="0.1" height="15.0" fill="rgb(253,11,47)" rx="2" ry="2" />
<text  x="487.68" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (40,309,528 samples, 0.08%)</title><rect x="84.5" y="2005" width="0.9" height="15.0" fill="rgb(231,180,30)" rx="2" ry="2" />
<text  x="87.52" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (14,778,982 samples, 0.03%)</title><rect x="34.3" y="2005" width="0.3" height="15.0" fill="rgb(225,29,41)" rx="2" ry="2" />
<text  x="37.25" y="2015.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::operator= (24,619,006 samples, 0.05%)</title><rect x="292.0" y="1637" width="0.6" height="15.0" fill="rgb(217,39,31)" rx="2" ry="2" />
<text  x="295.04" y="1647.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_get_property (9,398,305 samples, 0.02%)</title><rect x="603.2" y="1749" width="0.2" height="15.0" fill="rgb(241,137,38)" rx="2" ry="2" />
<text  x="606.17" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, true&gt;::_S_cget (4,671,441 samples, 0.01%)</title><rect x="706.7" y="1765" width="0.1" height="15.0" fill="rgb(209,17,23)" rx="2" ry="2" />
<text  x="709.68" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_realloc_insert&lt;unsigned long const&amp;&gt; (7,544,263 samples, 0.01%)</title><rect x="316.6" y="1701" width="0.2" height="15.0" fill="rgb(209,59,24)" rx="2" ry="2" />
<text  x="319.59" y="1711.5" ></text>
</g>
<g >
<title>duckdb::Transformer::HasPivotEntries (6,082,533 samples, 0.01%)</title><rect x="525.3" y="1909" width="0.1" height="15.0" fill="rgb(242,148,52)" rx="2" ry="2" />
<text  x="528.30" y="1919.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::EntryValue, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt; &gt;::find (9,877,877 samples, 0.02%)</title><rect x="1044.2" y="1829" width="0.2" height="15.0" fill="rgb(214,188,23)" rx="2" ry="2" />
<text  x="1047.17" y="1839.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; &gt;::~unordered_map (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1573" width="0.3" height="15.0" fill="rgb(243,58,47)" rx="2" ry="2" />
<text  x="1120.47" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc (13,165,966 samples, 0.03%)</title><rect x="297.7" y="1333" width="0.3" height="15.0" fill="rgb(254,213,15)" rx="2" ry="2" />
<text  x="300.74" y="1343.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt; &gt;::find (7,459,795 samples, 0.01%)</title><rect x="950.9" y="1621" width="0.2" height="15.0" fill="rgb(253,46,54)" rx="2" ry="2" />
<text  x="953.94" y="1631.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (22,132,858 samples, 0.04%)</title><rect x="338.6" y="1445" width="0.5" height="15.0" fill="rgb(227,9,5)" rx="2" ry="2" />
<text  x="341.55" y="1455.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;*&gt; (27,220,437 samples, 0.05%)</title><rect x="499.8" y="1573" width="0.7" height="15.0" fill="rgb(221,190,1)" rx="2" ry="2" />
<text  x="502.84" y="1583.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::CachedFile, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::CachedFile&gt; &gt; &gt;::~unordered_map (5,531,308 samples, 0.01%)</title><rect x="360.0" y="1749" width="0.1" height="15.0" fill="rgb(233,113,23)" rx="2" ry="2" />
<text  x="362.97" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, unsigned long, std::__detail::_Identity, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (20,934,834 samples, 0.04%)</title><rect x="690.7" y="1717" width="0.5" height="15.0" fill="rgb(215,65,15)" rx="2" ry="2" />
<text  x="693.68" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt; (26,824,257 samples, 0.05%)</title><rect x="915.8" y="1621" width="0.6" height="15.0" fill="rgb(248,114,52)" rx="2" ry="2" />
<text  x="918.81" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::_M_realloc_insert&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; (9,305,711 samples, 0.02%)</title><rect x="1081.3" y="1637" width="0.3" height="15.0" fill="rgb(250,94,22)" rx="2" ry="2" />
<text  x="1084.34" y="1647.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;duckdb::QueryProfiler,  (12,004,527 samples, 0.02%)</title><rect x="713.5" y="1845" width="0.3" height="15.0" fill="rgb(216,174,47)" rx="2" ry="2" />
<text  x="716.50" y="1855.5" ></text>
</g>
<g >
<title>std::error_code::default_error_condition (2,354,839,056 samples, 4.59%)</title><rect x="91.1" y="1989" width="54.2" height="15.0" fill="rgb(235,180,5)" rx="2" ry="2" />
<text  x="94.10" y="1999.5" >std::..</text>
</g>
<g >
<title>std::vector&lt;duckdb::Event*, std::allocator&lt;duckdb::Event*&gt; &gt;::_S_relocate (5,219,436 samples, 0.01%)</title><rect x="1046.9" y="1749" width="0.1" height="15.0" fill="rgb(210,192,2)" rx="2" ry="2" />
<text  x="1049.92" y="1759.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::Pipeline*, duckdb::vector&lt;duckdb::Pipeline*, true&gt;, std::hash&lt;duckdb::Pipeline*&gt;, std::equal_to&lt;duckdb::Pipeline*&gt;, std::allocator&lt;std::pair&lt;duckdb::Pipeline* const, duckdb::vector&lt;duckdb::Pipeline*, true&gt; &gt; &gt; &gt;::find (10,892,783 samples, 0.02%)</title><rect x="1048.1" y="1797" width="0.2" height="15.0" fill="rgb(215,22,28)" rx="2" ry="2" />
<text  x="1051.10" y="1807.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (87,730,273 samples, 0.17%)</title><rect x="333.4" y="1509" width="2.0" height="15.0" fill="rgb(217,170,40)" rx="2" ry="2" />
<text  x="336.43" y="1519.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::PreparedStatementData&gt;::~shared_ptr (621,447,562 samples, 1.21%)</title><rect x="337.3" y="1813" width="14.3" height="15.0" fill="rgb(252,78,11)" rx="2" ry="2" />
<text  x="340.32" y="1823.5" ></text>
</g>
<g >
<title>duckdb::RegexRangeFilter::Rewrite (17,600,901 samples, 0.03%)</title><rect x="761.3" y="1797" width="0.4" height="15.0" fill="rgb(247,130,41)" rx="2" ry="2" />
<text  x="764.33" y="1807.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (93,639,464 samples, 0.18%)</title><rect x="738.7" y="1685" width="2.1" height="15.0" fill="rgb(220,58,1)" rx="2" ry="2" />
<text  x="741.66" y="1695.5" ></text>
</g>
<g >
<title>duckdb::OrderBinder::OrderBinder (4,378,376 samples, 0.01%)</title><rect x="961.8" y="1749" width="0.1" height="15.0" fill="rgb(206,41,2)" rx="2" ry="2" />
<text  x="964.83" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (14,135,931 samples, 0.03%)</title><rect x="234.8" y="1765" width="0.4" height="15.0" fill="rgb(254,138,53)" rx="2" ry="2" />
<text  x="237.83" y="1775.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (6,165,053 samples, 0.01%)</title><rect x="108.1" y="1637" width="0.1" height="15.0" fill="rgb(211,166,13)" rx="2" ry="2" />
<text  x="111.09" y="1647.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Pin (19,734,356 samples, 0.04%)</title><rect x="871.9" y="1653" width="0.5" height="15.0" fill="rgb(229,13,41)" rx="2" ry="2" />
<text  x="874.94" y="1663.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt;::~unordered_map (6,130,999 samples, 0.01%)</title><rect x="758.6" y="1685" width="0.2" height="15.0" fill="rgb(240,208,9)" rx="2" ry="2" />
<text  x="761.64" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt; &gt;::release (5,047,003 samples, 0.01%)</title><rect x="448.9" y="1653" width="0.1" height="15.0" fill="rgb(248,38,37)" rx="2" ry="2" />
<text  x="451.91" y="1663.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (92,237,533 samples, 0.18%)</title><rect x="239.1" y="725" width="2.1" height="15.0" fill="rgb(209,162,23)" rx="2" ry="2" />
<text  x="242.10" y="735.5" ></text>
</g>
<g >
<title>duckdb::SegmentStatistics::SegmentStatistics (27,354,194 samples, 0.05%)</title><rect x="453.7" y="1493" width="0.7" height="15.0" fill="rgb(241,103,9)" rx="2" ry="2" />
<text  x="456.72" y="1503.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (20,941,343 samples, 0.04%)</title><rect x="246.0" y="1781" width="0.4" height="15.0" fill="rgb(207,124,0)" rx="2" ry="2" />
<text  x="248.96" y="1791.5" ></text>
</g>
<g >
<title>duckdb::DuckSchemaEntry::~DuckSchemaEntry (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1157" width="0.3" height="15.0" fill="rgb(215,152,7)" rx="2" ry="2" />
<text  x="1120.47" y="1167.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_alloc_large (10,601,018 samples, 0.02%)</title><rect x="103.2" y="1365" width="0.2" height="15.0" fill="rgb(210,200,19)" rx="2" ry="2" />
<text  x="106.17" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, true&gt; &gt; &gt;::_M_deallocate_node (6,919,276 samples, 0.01%)</title><rect x="924.7" y="1797" width="0.2" height="15.0" fill="rgb(205,111,5)" rx="2" ry="2" />
<text  x="927.71" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ExpressionRewriter::VisitExpression (65,997,042 samples, 0.13%)</title><rect x="741.3" y="1685" width="1.5" height="15.0" fill="rgb(233,100,3)" rx="2" ry="2" />
<text  x="744.29" y="1695.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::Elapsed (5,427,132 samples, 0.01%)</title><rect x="922.8" y="1861" width="0.1" height="15.0" fill="rgb(235,13,32)" rx="2" ry="2" />
<text  x="925.78" y="1871.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::Pipeline, std::allocator&lt;duckdb::Pipeline&gt;, duckdb::Executor&amp;&gt; (10,224,811 samples, 0.02%)</title><rect x="1081.1" y="1637" width="0.2" height="15.0" fill="rgb(244,125,9)" rx="2" ry="2" />
<text  x="1084.05" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt; &gt;::~vector (4,702,777 samples, 0.01%)</title><rect x="336.8" y="1733" width="0.1" height="15.0" fill="rgb(207,115,39)" rx="2" ry="2" />
<text  x="339.79" y="1743.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Binder,  (5,447,061 samples, 0.01%)</title><rect x="1029.3" y="1797" width="0.2" height="15.0" fill="rgb(219,213,2)" rx="2" ry="2" />
<text  x="1032.35" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocator (16,690,111 samples, 0.03%)</title><rect x="989.4" y="1557" width="0.3" height="15.0" fill="rgb(217,42,15)" rx="2" ry="2" />
<text  x="992.36" y="1567.5" ></text>
</g>
<g >
<title>duckdb::BindResult::BindResult (6,538,568 samples, 0.01%)</title><rect x="951.2" y="1621" width="0.1" height="15.0" fill="rgb(229,131,32)" rx="2" ry="2" />
<text  x="954.18" y="1631.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::BlockHandle&gt; &gt;::destroy&lt;duckdb::BlockHandle&gt; (81,650,180 samples, 0.16%)</title><rect x="242.0" y="677" width="1.9" height="15.0" fill="rgb(244,205,53)" rx="2" ry="2" />
<text  x="244.97" y="687.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::~unique_ptr (5,392,452 samples, 0.01%)</title><rect x="980.7" y="1605" width="0.1" height="15.0" fill="rgb(232,129,2)" rx="2" ry="2" />
<text  x="983.71" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::push_back (10,811,528 samples, 0.02%)</title><rect x="939.4" y="1733" width="0.2" height="15.0" fill="rgb(224,4,47)" rx="2" ry="2" />
<text  x="942.37" y="1743.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector&gt; (73,899,862 samples, 0.14%)</title><rect x="221.3" y="1637" width="1.7" height="15.0" fill="rgb(218,229,7)" rx="2" ry="2" />
<text  x="224.27" y="1647.5" ></text>
</g>
<g >
<title>duckdb::StringUtil::BytesToHumanReadableString[abi:cxx11] (10,175,440 samples, 0.02%)</title><rect x="880.1" y="1637" width="0.2" height="15.0" fill="rgb(221,225,47)" rx="2" ry="2" />
<text  x="883.07" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnBinding, true&gt;::vector (26,097,330 samples, 0.05%)</title><rect x="842.7" y="1749" width="0.6" height="15.0" fill="rgb(228,45,17)" rx="2" ry="2" />
<text  x="845.67" y="1759.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::~FunctionExpressionMatcher (6,105,032 samples, 0.01%)</title><rect x="833.2" y="1605" width="0.1" height="15.0" fill="rgb(224,151,44)" rx="2" ry="2" />
<text  x="836.20" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt; &gt;::~unique_ptr (130,523,270 samples, 0.25%)</title><rect x="238.3" y="821" width="3.0" height="15.0" fill="rgb(226,108,18)" rx="2" ry="2" />
<text  x="241.27" y="831.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnBinding, true&gt;::vector (7,647,600 samples, 0.01%)</title><rect x="846.5" y="1845" width="0.1" height="15.0" fill="rgb(208,148,50)" rx="2" ry="2" />
<text  x="849.47" y="1855.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (94,956,199 samples, 0.19%)</title><rect x="481.5" y="1557" width="2.2" height="15.0" fill="rgb(238,52,40)" rx="2" ry="2" />
<text  x="484.53" y="1567.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (111,657,608 samples, 0.22%)</title><rect x="391.0" y="1589" width="2.5" height="15.0" fill="rgb(245,21,22)" rx="2" ry="2" />
<text  x="393.95" y="1599.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (5,459,755 samples, 0.01%)</title><rect x="1087.7" y="1765" width="0.1" height="15.0" fill="rgb(221,3,40)" rx="2" ry="2" />
<text  x="1090.67" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_realloc_insert&lt;unsigned long&amp;, unsigned long&amp;&gt; (227,476,040 samples, 0.44%)</title><rect x="606.4" y="1749" width="5.2" height="15.0" fill="rgb(225,37,50)" rx="2" ry="2" />
<text  x="609.37" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;*&gt; (48,261,202 samples, 0.09%)</title><rect x="340.6" y="1285" width="1.1" height="15.0" fill="rgb(254,199,48)" rx="2" ry="2" />
<text  x="343.63" y="1295.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;unsigned long const*, unsigned long*&gt; (18,063,879 samples, 0.04%)</title><rect x="661.4" y="1701" width="0.4" height="15.0" fill="rgb(229,125,2)" rx="2" ry="2" />
<text  x="664.43" y="1711.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::GetOperators (70,896,155 samples, 0.14%)</title><rect x="1063.5" y="1829" width="1.7" height="15.0" fill="rgb(216,183,37)" rx="2" ry="2" />
<text  x="1066.54" y="1839.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::BoundReferenceExpression, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, duckdb::LogicalType&amp;, unsigned long&amp;&gt; (18,494,534 samples, 0.04%)</title><rect x="844.7" y="1717" width="0.5" height="15.0" fill="rgb(226,203,28)" rx="2" ry="2" />
<text  x="847.74" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt; &gt; (6,778,768 samples, 0.01%)</title><rect x="758.6" y="1701" width="0.2" height="15.0" fill="rgb(226,15,51)" rx="2" ry="2" />
<text  x="761.62" y="1711.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Task,  (23,545,720 samples, 0.05%)</title><rect x="144.5" y="1861" width="0.5" height="15.0" fill="rgb(215,13,36)" rx="2" ry="2" />
<text  x="147.50" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::ColumnDataCollection (46,191,693 samples, 0.09%)</title><rect x="96.9" y="1749" width="1.0" height="15.0" fill="rgb(236,206,53)" rx="2" ry="2" />
<text  x="99.88" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::deallocate (8,169,079 samples, 0.02%)</title><rect x="566.1" y="1733" width="0.2" height="15.0" fill="rgb(227,43,7)" rx="2" ry="2" />
<text  x="569.13" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::_M_range_insert&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt; &gt; (43,752,695 samples, 0.09%)</title><rect x="1083.9" y="1813" width="1.0" height="15.0" fill="rgb(244,171,54)" rx="2" ry="2" />
<text  x="1086.93" y="1823.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpressionChildren (4,694,080 samples, 0.01%)</title><rect x="762.6" y="1685" width="0.1" height="15.0" fill="rgb(235,220,30)" rx="2" ry="2" />
<text  x="765.60" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_extent_alloc_large (111,652,999 samples, 0.22%)</title><rect x="875.3" y="1349" width="2.5" height="15.0" fill="rgb(226,228,54)" rx="2" ry="2" />
<text  x="878.27" y="1359.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::~CatalogSet (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1589" width="0.3" height="15.0" fill="rgb(209,228,45)" rx="2" ry="2" />
<text  x="1120.47" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_node_ptr (11,296,509 samples, 0.02%)</title><rect x="696.9" y="1733" width="0.3" height="15.0" fill="rgb(243,119,8)" rx="2" ry="2" />
<text  x="699.90" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::_M_insert_dispatch&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt; &gt; (11,405,722 samples, 0.02%)</title><rect x="1048.4" y="1781" width="0.3" height="15.0" fill="rgb(211,211,30)" rx="2" ry="2" />
<text  x="1051.45" y="1791.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (5,313,794 samples, 0.01%)</title><rect x="1123.3" y="1509" width="0.1" height="15.0" fill="rgb(205,168,20)" rx="2" ry="2" />
<text  x="1126.30" y="1519.5" ></text>
</g>
<g >
<title>[unknown] (5,780,606 samples, 0.01%)</title><rect x="11.3" y="101" width="0.1" height="15.0" fill="rgb(243,84,43)" rx="2" ry="2" />
<text  x="14.25" y="111.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;*&gt; (446,344,109 samples, 0.87%)</title><rect x="339.9" y="1525" width="10.3" height="15.0" fill="rgb(220,144,26)" rx="2" ry="2" />
<text  x="342.93" y="1535.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::Register&lt;duckdb::RegexpFun&gt; (4,791,356 samples, 0.01%)</title><rect x="1111.6" y="1893" width="0.1" height="15.0" fill="rgb(224,69,33)" rx="2" ry="2" />
<text  x="1114.58" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Rule&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; &gt;::_S_relocate (6,851,491 samples, 0.01%)</title><rect x="738.1" y="1653" width="0.1" height="15.0" fill="rgb(232,53,46)" rx="2" ry="2" />
<text  x="741.08" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::~vector (8,365,433 samples, 0.02%)</title><rect x="639.4" y="1733" width="0.1" height="15.0" fill="rgb(215,63,34)" rx="2" ry="2" />
<text  x="642.35" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (9,224,744 samples, 0.02%)</title><rect x="735.7" y="1765" width="0.2" height="15.0" fill="rgb(228,82,46)" rx="2" ry="2" />
<text  x="738.66" y="1775.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (18,141,661 samples, 0.04%)</title><rect x="546.8" y="1749" width="0.4" height="15.0" fill="rgb(233,59,27)" rx="2" ry="2" />
<text  x="549.77" y="1759.5" ></text>
</g>
<g >
<title>duckdb::DuckDB::DuckDB (389,237,607 samples, 0.76%)</title><rect x="1108.5" y="2005" width="8.9" height="15.0" fill="rgb(248,196,50)" rx="2" ry="2" />
<text  x="1111.48" y="2015.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (4,492,462 samples, 0.01%)</title><rect x="664.2" y="1749" width="0.1" height="15.0" fill="rgb(225,197,15)" rx="2" ry="2" />
<text  x="667.22" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ComparisonExpressionMatcher, std::default_delete&lt;duckdb::ComparisonExpressionMatcher&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ComparisonExpressionMatcher&gt;, void&gt; (7,679,691 samples, 0.01%)</title><rect x="791.6" y="1829" width="0.2" height="15.0" fill="rgb(219,224,6)" rx="2" ry="2" />
<text  x="794.63" y="1839.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::LocalSinkState, std::default_delete&lt;duckdb::LocalSinkState&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::InsertLocalState&gt; &gt; (6,836,976 samples, 0.01%)</title><rect x="491.7" y="1781" width="0.1" height="15.0" fill="rgb(205,2,43)" rx="2" ry="2" />
<text  x="494.67" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Binder::BindNode (2,013,343,767 samples, 3.93%)</title><rect x="926.5" y="1781" width="46.3" height="15.0" fill="rgb(218,20,50)" rx="2" ry="2" />
<text  x="929.51" y="1791.5" >duck..</text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::RowGroupSegmentTree&gt;::operator= (5,239,336 samples, 0.01%)</title><rect x="429.8" y="1461" width="0.2" height="15.0" fill="rgb(254,74,32)" rx="2" ry="2" />
<text  x="432.84" y="1471.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ifree (27,760,097 samples, 0.05%)</title><rect x="242.7" y="485" width="0.7" height="15.0" fill="rgb(223,61,51)" rx="2" ry="2" />
<text  x="245.71" y="495.5" ></text>
</g>
<g >
<title>duckdb::PendingQueryResult::CheckExecutableInternal (9,405,256 samples, 0.02%)</title><rect x="396.0" y="1941" width="0.3" height="15.0" fill="rgb(210,135,13)" rx="2" ry="2" />
<text  x="399.04" y="1951.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (112,148,046 samples, 0.22%)</title><rect x="650.8" y="1733" width="2.6" height="15.0" fill="rgb(221,124,34)" rx="2" ry="2" />
<text  x="653.85" y="1743.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~_Vector_base (11,429,865 samples, 0.02%)</title><rect x="653.9" y="1733" width="0.2" height="15.0" fill="rgb(242,8,15)" rx="2" ry="2" />
<text  x="656.86" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt;::unique_ptr&lt;duckdb::StringScanState, std::default_delete&lt;std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt; &gt;, void&gt; (4,593,581 samples, 0.01%)</title><rect x="213.5" y="1589" width="0.1" height="15.0" fill="rgb(251,71,21)" rx="2" ry="2" />
<text  x="216.49" y="1599.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::FunctionExpressionMatcher (5,250,974 samples, 0.01%)</title><rect x="819.3" y="1829" width="0.1" height="15.0" fill="rgb(251,69,9)" rx="2" ry="2" />
<text  x="822.26" y="1839.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (4,489,552 samples, 0.01%)</title><rect x="704.4" y="1845" width="0.1" height="15.0" fill="rgb(209,172,5)" rx="2" ry="2" />
<text  x="707.42" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (4,522,156 samples, 0.01%)</title><rect x="792.3" y="1813" width="0.1" height="15.0" fill="rgb(236,3,5)" rx="2" ry="2" />
<text  x="795.29" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::~BufferHandle (6,965,855 samples, 0.01%)</title><rect x="444.8" y="1621" width="0.2" height="15.0" fill="rgb(226,153,53)" rx="2" ry="2" />
<text  x="447.79" y="1631.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ConstantFoldingExpressionMatcher, std::default_delete&lt;duckdb::ConstantFoldingExpressionMatcher&gt; &gt;::__uniq_ptr_impl (8,555,571 samples, 0.02%)</title><rect x="794.9" y="1797" width="0.2" height="15.0" fill="rgb(229,143,54)" rx="2" ry="2" />
<text  x="797.88" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Task,  (14,606,266 samples, 0.03%)</title><rect x="508.7" y="1877" width="0.3" height="15.0" fill="rgb(244,100,24)" rx="2" ry="2" />
<text  x="511.69" y="1887.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::DataChunk&gt;::operator (178,890,750 samples, 0.35%)</title><rect x="390.3" y="1893" width="4.1" height="15.0" fill="rgb(205,46,37)" rx="2" ry="2" />
<text  x="393.30" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (11,008,252 samples, 0.02%)</title><rect x="1034.0" y="1861" width="0.2" height="15.0" fill="rgb(206,41,17)" rx="2" ry="2" />
<text  x="1036.96" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BufferedSerializer, std::default_delete&lt;duckdb::BufferedSerializer&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BufferedSerializer&gt;, void&gt; (6,537,330 samples, 0.01%)</title><rect x="592.6" y="1797" width="0.2" height="15.0" fill="rgb(216,54,16)" rx="2" ry="2" />
<text  x="595.61" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::ComparisonExpressionMatcher, std::default_delete&lt;duckdb::ComparisonExpressionMatcher&gt;, void&gt; (5,635,090 samples, 0.01%)</title><rect x="815.2" y="1829" width="0.1" height="15.0" fill="rgb(221,193,0)" rx="2" ry="2" />
<text  x="818.19" y="1839.5" ></text>
</g>
<g >
<title>duckdb::Deliminator::FindCandidates (10,229,213 samples, 0.02%)</title><rect x="730.3" y="1797" width="0.2" height="15.0" fill="rgb(211,136,46)" rx="2" ry="2" />
<text  x="733.28" y="1807.5" ></text>
</g>
<g >
<title>duckdb::BufferedSerializer::BufferedSerializer (7,199,765 samples, 0.01%)</title><rect x="313.4" y="1573" width="0.1" height="15.0" fill="rgb(227,161,13)" rx="2" ry="2" />
<text  x="316.36" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_get_from_ind (4,781,397 samples, 0.01%)</title><rect x="392.7" y="1525" width="0.1" height="15.0" fill="rgb(211,98,5)" rx="2" ry="2" />
<text  x="395.68" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (5,854,526 samples, 0.01%)</title><rect x="960.4" y="1557" width="0.1" height="15.0" fill="rgb(234,81,4)" rx="2" ry="2" />
<text  x="963.36" y="1567.5" ></text>
</g>
<g >
<title>std::ios_base::~ios_base (37,472,295 samples, 0.07%)</title><rect x="89.9" y="2021" width="0.9" height="15.0" fill="rgb(245,229,16)" rx="2" ry="2" />
<text  x="92.89" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::operator= (7,777,571 samples, 0.02%)</title><rect x="1026.6" y="1845" width="0.2" height="15.0" fill="rgb(222,161,31)" rx="2" ry="2" />
<text  x="1029.61" y="1855.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (77,702,267 samples, 0.15%)</title><rect x="1181.9" y="2037" width="1.7" height="15.0" fill="rgb(245,83,20)" rx="2" ry="2" />
<text  x="1184.85" y="2047.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (33,907,731 samples, 0.07%)</title><rect x="596.4" y="1765" width="0.8" height="15.0" fill="rgb(228,228,27)" rx="2" ry="2" />
<text  x="599.43" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnDataCopyFunction, std::allocator&lt;duckdb::ColumnDataCopyFunction&gt; &gt;::reserve (8,704,069 samples, 0.02%)</title><rect x="910.8" y="1717" width="0.2" height="15.0" fill="rgb(210,109,9)" rx="2" ry="2" />
<text  x="913.82" y="1727.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThread (8,003,040 samples, 0.02%)</title><rect x="32.2" y="2021" width="0.2" height="15.0" fill="rgb(218,113,4)" rx="2" ry="2" />
<text  x="35.25" y="2031.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnScanState&gt; (27,609,916 samples, 0.05%)</title><rect x="287.9" y="1525" width="0.6" height="15.0" fill="rgb(220,157,10)" rx="2" ry="2" />
<text  x="290.88" y="1535.5" ></text>
</g>
<g >
<title>duckdb::Executor::CancelTasks (175,611,168 samples, 0.34%)</title><rect x="354.5" y="1893" width="4.1" height="15.0" fill="rgb(216,128,54)" rx="2" ry="2" />
<text  x="357.53" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; &gt;::~vector (34,557,534 samples, 0.07%)</title><rect x="1122.2" y="1845" width="0.7" height="15.0" fill="rgb(240,0,15)" rx="2" ry="2" />
<text  x="1125.15" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (8,716,164 samples, 0.02%)</title><rect x="832.1" y="1669" width="0.2" height="15.0" fill="rgb(244,74,22)" rx="2" ry="2" />
<text  x="835.14" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ManyFunctionMatcher::~ManyFunctionMatcher (6,737,478 samples, 0.01%)</title><rect x="829.7" y="1541" width="0.2" height="15.0" fill="rgb(206,156,40)" rx="2" ry="2" />
<text  x="832.71" y="1551.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; (19,883,546 samples, 0.04%)</title><rect x="905.5" y="1701" width="0.5" height="15.0" fill="rgb(217,209,38)" rx="2" ry="2" />
<text  x="908.53" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::operator= (4,543,127 samples, 0.01%)</title><rect x="727.0" y="1573" width="0.1" height="15.0" fill="rgb(234,144,18)" rx="2" ry="2" />
<text  x="730.01" y="1583.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (56,856,618 samples, 0.11%)</title><rect x="297.4" y="1493" width="1.4" height="15.0" fill="rgb(252,163,43)" rx="2" ry="2" />
<text  x="300.45" y="1503.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::vector (17,114,941 samples, 0.03%)</title><rect x="931.1" y="1701" width="0.4" height="15.0" fill="rgb(246,83,30)" rx="2" ry="2" />
<text  x="934.06" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_event (11,566,916 samples, 0.02%)</title><rect x="1124.1" y="1461" width="0.2" height="15.0" fill="rgb(253,108,49)" rx="2" ry="2" />
<text  x="1127.06" y="1471.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; &gt;::~_Vector_base (4,605,743 samples, 0.01%)</title><rect x="757.0" y="1733" width="0.1" height="15.0" fill="rgb(241,80,22)" rx="2" ry="2" />
<text  x="759.98" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::InsertStatement, std::default_delete&lt;duckdb::InsertStatement&gt;, true&gt;::operator (6,859,453 samples, 0.01%)</title><rect x="538.1" y="1829" width="0.2" height="15.0" fill="rgb(205,2,27)" rx="2" ry="2" />
<text  x="541.12" y="1839.5" ></text>
</g>
<g >
<title>std::operator&amp;@plt (9,290,874 samples, 0.02%)</title><rect x="144.3" y="1845" width="0.2" height="15.0" fill="rgb(227,221,13)" rx="2" ry="2" />
<text  x="147.26" y="1855.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::AppendVersionInfo (17,502,050 samples, 0.03%)</title><rect x="195.0" y="1733" width="0.4" height="15.0" fill="rgb(228,161,27)" rx="2" ry="2" />
<text  x="198.05" y="1743.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (61,885,323 samples, 0.12%)</title><rect x="726.5" y="1781" width="1.4" height="15.0" fill="rgb(223,57,47)" rx="2" ry="2" />
<text  x="729.47" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::operator= (5,235,161 samples, 0.01%)</title><rect x="764.4" y="1685" width="0.1" height="15.0" fill="rgb(225,56,0)" rx="2" ry="2" />
<text  x="767.43" y="1695.5" ></text>
</g>
<g >
<title>duckdb::InClauseRewriter::Rewrite (28,941,128 samples, 0.06%)</title><rect x="749.8" y="1781" width="0.7" height="15.0" fill="rgb(219,124,12)" rx="2" ry="2" />
<text  x="752.85" y="1791.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt; (6,681,727 samples, 0.01%)</title><rect x="265.8" y="1461" width="0.1" height="15.0" fill="rgb(224,59,35)" rx="2" ry="2" />
<text  x="268.79" y="1471.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateStatistics (84,485,492 samples, 0.16%)</title><rect x="765.9" y="1749" width="2.0" height="15.0" fill="rgb(247,226,26)" rx="2" ry="2" />
<text  x="768.91" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (5,780,606 samples, 0.01%)</title><rect x="11.3" y="85" width="0.1" height="15.0" fill="rgb(211,21,50)" rx="2" ry="2" />
<text  x="14.25" y="95.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; (160,677,637 samples, 0.31%)</title><rect x="324.2" y="1717" width="3.7" height="15.0" fill="rgb(205,23,25)" rx="2" ry="2" />
<text  x="327.20" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, false&gt; &gt; &gt;::_M_deallocate_node (9,284,106 samples, 0.02%)</title><rect x="1117.6" y="853" width="0.2" height="15.0" fill="rgb(234,168,40)" rx="2" ry="2" />
<text  x="1120.55" y="863.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::unique_ptr&lt;duckdb::TypeMatcherId, std::default_delete&lt;duckdb::TypeMatcherId&gt;, void&gt; (17,718,611 samples, 0.03%)</title><rect x="805.6" y="1829" width="0.4" height="15.0" fill="rgb(209,62,41)" rx="2" ry="2" />
<text  x="808.56" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (6,426,423 samples, 0.01%)</title><rect x="1003.4" y="1653" width="0.2" height="15.0" fill="rgb(227,43,13)" rx="2" ry="2" />
<text  x="1006.43" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unsafe_get_property (14,324,905 samples, 0.03%)</title><rect x="560.9" y="1749" width="0.3" height="15.0" fill="rgb(247,98,38)" rx="2" ry="2" />
<text  x="563.85" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (4,462,925 samples, 0.01%)</title><rect x="800.7" y="1765" width="0.1" height="15.0" fill="rgb(252,133,12)" rx="2" ry="2" />
<text  x="803.71" y="1775.5" ></text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,127,339 samples, 0.02%)</title><rect x="1185.3" y="2037" width="0.2" height="15.0" fill="rgb(247,57,16)" rx="2" ry="2" />
<text  x="1188.31" y="2047.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (18,440,392 samples, 0.04%)</title><rect x="993.5" y="1669" width="0.4" height="15.0" fill="rgb(227,31,21)" rx="2" ry="2" />
<text  x="996.48" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueueProducerToken, std::default_delete&lt;duckdb::QueueProducerToken&gt;, true&gt;::operator (21,509,881 samples, 0.04%)</title><rect x="503.7" y="1861" width="0.5" height="15.0" fill="rgb(232,104,41)" rx="2" ry="2" />
<text  x="506.73" y="1871.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ScalarFunction, true&gt;::vector (7,974,797 samples, 0.02%)</title><rect x="1114.8" y="1797" width="0.2" height="15.0" fill="rgb(235,74,50)" rx="2" ry="2" />
<text  x="1117.77" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt; &gt; &gt;::push_back (35,063,706 samples, 0.07%)</title><rect x="1088.4" y="1829" width="0.9" height="15.0" fill="rgb(239,208,1)" rx="2" ry="2" />
<text  x="1091.45" y="1839.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt; &gt; &gt;::insert&lt;std::pair&lt;duckdb::PhysicalOperator const&amp;, duckdb::QueryProfiler::TreeNode&amp;&gt; &gt; (48,347,202 samples, 0.09%)</title><rect x="1087.3" y="1829" width="1.1" height="15.0" fill="rgb(212,88,10)" rx="2" ry="2" />
<text  x="1090.29" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::operator= (9,974,553 samples, 0.02%)</title><rect x="935.1" y="1701" width="0.2" height="15.0" fill="rgb(210,59,51)" rx="2" ry="2" />
<text  x="938.07" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (56,971,524 samples, 0.11%)</title><rect x="696.3" y="1797" width="1.3" height="15.0" fill="rgb(232,7,19)" rx="2" ry="2" />
<text  x="699.25" y="1807.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::pair&lt;unsigned long, unsigned long&gt;*, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (15,098,920 samples, 0.03%)</title><rect x="638.3" y="1669" width="0.4" height="15.0" fill="rgb(205,211,27)" rx="2" ry="2" />
<text  x="641.33" y="1679.5" ></text>
</g>
<g >
<title>do_anonymous_page (11,191,575 samples, 0.02%)</title><rect x="1131.4" y="1925" width="0.3" height="15.0" fill="rgb(220,109,37)" rx="2" ry="2" />
<text  x="1134.41" y="1935.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::ParseStatementsInternal (1,071,264,472 samples, 2.09%)</title><rect x="517.1" y="1957" width="24.7" height="15.0" fill="rgb(210,65,17)" rx="2" ry="2" />
<text  x="520.12" y="1967.5" >d..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,253,440 samples, 0.02%)</title><rect x="993.6" y="1637" width="0.2" height="15.0" fill="rgb(208,220,46)" rx="2" ry="2" />
<text  x="996.57" y="1647.5" ></text>
</g>
<g >
<title>duckdb::Executor::VerifyScheduledEvents (150,069,112 samples, 0.29%)</title><rect x="1054.4" y="1829" width="3.4" height="15.0" fill="rgb(240,212,50)" rx="2" ry="2" />
<text  x="1057.39" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::_S_check_init_len (4,467,047 samples, 0.01%)</title><rect x="843.1" y="1701" width="0.1" height="15.0" fill="rgb(206,176,22)" rx="2" ry="2" />
<text  x="846.13" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_dalloc_large (6,862,901 samples, 0.01%)</title><rect x="221.9" y="1317" width="0.1" height="15.0" fill="rgb(218,51,16)" rx="2" ry="2" />
<text  x="224.88" y="1327.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::emplace_back&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; (24,444,897 samples, 0.05%)</title><rect x="1094.7" y="1701" width="0.6" height="15.0" fill="rgb(226,211,22)" rx="2" ry="2" />
<text  x="1097.73" y="1711.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt; &gt;::_M_ptr (4,818,288 samples, 0.01%)</title><rect x="300.3" y="1541" width="0.1" height="15.0" fill="rgb(225,147,33)" rx="2" ry="2" />
<text  x="303.33" y="1551.5" ></text>
</g>
<g >
<title>do_page_fault (8,771,019 samples, 0.02%)</title><rect x="67.6" y="1989" width="0.2" height="15.0" fill="rgb(245,186,36)" rx="2" ry="2" />
<text  x="70.59" y="1999.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnDataRowCollection, std::default_delete&lt;duckdb::ColumnDataRowCollection&gt;, true&gt;::unique_ptr (4,452,230 samples, 0.01%)</title><rect x="388.3" y="1893" width="0.1" height="15.0" fill="rgb(244,150,3)" rx="2" ry="2" />
<text  x="391.30" y="1903.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*&gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; (9,709,089 samples, 0.02%)</title><rect x="1084.6" y="1781" width="0.2" height="15.0" fill="rgb(210,152,52)" rx="2" ry="2" />
<text  x="1087.56" y="1791.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, true&gt;::~vector (23,466,116 samples, 0.05%)</title><rect x="603.8" y="1765" width="0.6" height="15.0" fill="rgb(232,139,8)" rx="2" ry="2" />
<text  x="606.84" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_dalloc_event (31,026,647 samples, 0.06%)</title><rect x="392.0" y="1509" width="0.7" height="15.0" fill="rgb(219,42,17)" rx="2" ry="2" />
<text  x="394.95" y="1519.5" ></text>
</g>
<g >
<title>duckdb::DuckDBAssertInternal (4,655,710 samples, 0.01%)</title><rect x="671.5" y="1797" width="0.1" height="15.0" fill="rgb(247,96,30)" rx="2" ry="2" />
<text  x="674.48" y="1807.5" ></text>
</g>
<g >
<title>__x64_sys_newfstat (11,204,877 samples, 0.02%)</title><rect x="190.7" y="1701" width="0.2" height="15.0" fill="rgb(216,180,20)" rx="2" ry="2" />
<text  x="193.67" y="1711.5" ></text>
</g>
<g >
<title>std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt; (27,713,697 samples, 0.05%)</title><rect x="24.5" y="2005" width="0.6" height="15.0" fill="rgb(245,190,52)" rx="2" ry="2" />
<text  x="27.45" y="2015.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (123,185,673 samples, 0.24%)</title><rect x="289.0" y="1701" width="2.9" height="15.0" fill="rgb(240,195,25)" rx="2" ry="2" />
<text  x="292.05" y="1711.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Unpin (5,916,835 samples, 0.01%)</title><rect x="339.3" y="1285" width="0.1" height="15.0" fill="rgb(205,106,12)" rx="2" ry="2" />
<text  x="342.27" y="1295.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VersionNode, std::allocator&lt;duckdb::VersionNode&gt;,  (28,530,162 samples, 0.06%)</title><rect x="244.4" y="1157" width="0.7" height="15.0" fill="rgb(235,136,19)" rx="2" ry="2" />
<text  x="247.41" y="1167.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt;::operator= (11,551,692 samples, 0.02%)</title><rect x="214.8" y="1589" width="0.3" height="15.0" fill="rgb(254,143,12)" rx="2" ry="2" />
<text  x="217.80" y="1599.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;unsigned int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned int, false&gt; &gt; &gt; &gt; (34,376,497 samples, 0.07%)</title><rect x="883.3" y="1685" width="0.8" height="15.0" fill="rgb(236,166,1)" rx="2" ry="2" />
<text  x="886.28" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt;::begin (7,020,245 samples, 0.01%)</title><rect x="697.6" y="1813" width="0.1" height="15.0" fill="rgb(210,91,11)" rx="2" ry="2" />
<text  x="700.58" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_node (24,385,028 samples, 0.05%)</title><rect x="670.2" y="1717" width="0.5" height="15.0" fill="rgb(206,97,22)" rx="2" ry="2" />
<text  x="673.16" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;unsigned long, true, false&gt;::operator++ (5,514,863 samples, 0.01%)</title><rect x="686.7" y="1813" width="0.1" height="15.0" fill="rgb(213,111,22)" rx="2" ry="2" />
<text  x="689.70" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::Append (64,295,713 samples, 0.13%)</title><rect x="375.1" y="1925" width="1.5" height="15.0" fill="rgb(221,42,3)" rx="2" ry="2" />
<text  x="378.09" y="1935.5" ></text>
</g>
<g >
<title>duckdb::UnnestRewriter::~UnnestRewriter (15,371,967 samples, 0.03%)</title><rect x="769.8" y="1813" width="0.3" height="15.0" fill="rgb(212,215,5)" rx="2" ry="2" />
<text  x="772.75" y="1823.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::~VectorCacheBuffer (4,965,859 samples, 0.01%)</title><rect x="106.9" y="1461" width="0.1" height="15.0" fill="rgb(216,156,4)" rx="2" ry="2" />
<text  x="109.89" y="1471.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundConstantExpression, std::default_delete&lt;duckdb::BoundConstantExpression&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BoundConstantExpression&gt;, void&gt; (4,950,739 samples, 0.01%)</title><rect x="982.9" y="1797" width="0.2" height="15.0" fill="rgb(251,222,37)" rx="2" ry="2" />
<text  x="985.94" y="1807.5" ></text>
</g>
<g >
<title>std::_Construct&lt;duckdb::CatalogSearchEntry, duckdb::CatalogSearchEntry const&amp;&gt; (4,773,609 samples, 0.01%)</title><rect x="1009.0" y="1669" width="0.2" height="15.0" fill="rgb(232,127,38)" rx="2" ry="2" />
<text  x="1012.04" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Rule&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; &gt;::_M_realloc_insert&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; (31,585,445 samples, 0.06%)</title><rect x="737.5" y="1669" width="0.8" height="15.0" fill="rgb(250,17,5)" rx="2" ry="2" />
<text  x="740.55" y="1679.5" ></text>
</g>
<g >
<title>__interceptor_strcmp (27,115,065 samples, 0.05%)</title><rect x="185.6" y="2005" width="0.6" height="15.0" fill="rgb(246,200,39)" rx="2" ry="2" />
<text  x="188.56" y="2015.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (6,940,816 samples, 0.01%)</title><rect x="830.0" y="1509" width="0.1" height="15.0" fill="rgb(235,73,28)" rx="2" ry="2" />
<text  x="832.95" y="1519.5" ></text>
</g>
<g >
<title>try_to_wake_up (17,115,676 samples, 0.03%)</title><rect x="94.0" y="1541" width="0.4" height="15.0" fill="rgb(233,169,13)" rx="2" ry="2" />
<text  x="97.00" y="1551.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&amp;&gt; (18,272,150 samples, 0.04%)</title><rect x="219.7" y="1685" width="0.5" height="15.0" fill="rgb(221,34,45)" rx="2" ry="2" />
<text  x="222.75" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; &gt;::~vector (50,353,024 samples, 0.10%)</title><rect x="340.6" y="1333" width="1.2" height="15.0" fill="rgb(209,131,6)" rx="2" ry="2" />
<text  x="343.61" y="1343.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (5,922,892 samples, 0.01%)</title><rect x="506.2" y="1861" width="0.2" height="15.0" fill="rgb(238,5,17)" rx="2" ry="2" />
<text  x="509.24" y="1871.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Verify (9,122,553 samples, 0.02%)</title><rect x="229.5" y="1653" width="0.2" height="15.0" fill="rgb(232,14,19)" rx="2" ry="2" />
<text  x="232.49" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::operator= (13,825,496 samples, 0.03%)</title><rect x="946.6" y="1685" width="0.4" height="15.0" fill="rgb(207,89,25)" rx="2" ry="2" />
<text  x="949.64" y="1695.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (13,232,893 samples, 0.03%)</title><rect x="1189.6" y="2037" width="0.3" height="15.0" fill="rgb(240,187,25)" rx="2" ry="2" />
<text  x="1192.62" y="2047.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (17,512,043 samples, 0.03%)</title><rect x="1014.7" y="1829" width="0.4" height="15.0" fill="rgb(207,146,54)" rx="2" ry="2" />
<text  x="1017.74" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr (30,810,992 samples, 0.06%)</title><rect x="826.0" y="1797" width="0.8" height="15.0" fill="rgb(240,136,0)" rx="2" ry="2" />
<text  x="829.04" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::reserve (5,789,666 samples, 0.01%)</title><rect x="469.0" y="1781" width="0.2" height="15.0" fill="rgb(229,41,53)" rx="2" ry="2" />
<text  x="472.04" y="1791.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ChunkVectorInfo, unsigned long&gt; (29,714,884 samples, 0.06%)</title><rect x="100.7" y="1653" width="0.7" height="15.0" fill="rgb(253,190,42)" rx="2" ry="2" />
<text  x="103.72" y="1663.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Pin (15,764,848 samples, 0.03%)</title><rect x="470.9" y="1717" width="0.4" height="15.0" fill="rgb(208,127,14)" rx="2" ry="2" />
<text  x="473.94" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (12,045,738 samples, 0.02%)</title><rect x="459.5" y="1749" width="0.2" height="15.0" fill="rgb(207,97,1)" rx="2" ry="2" />
<text  x="462.46" y="1759.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (2,354,839,056 samples, 4.59%)</title><rect x="91.1" y="1957" width="54.2" height="15.0" fill="rgb(250,108,23)" rx="2" ry="2" />
<text  x="94.10" y="1967.5" >std::..</text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt; &gt;::operator= (6,875,573 samples, 0.01%)</title><rect x="997.7" y="1589" width="0.2" height="15.0" fill="rgb(220,200,38)" rx="2" ry="2" />
<text  x="1000.70" y="1599.5" ></text>
</g>
<g >
<title>duckdb::Optimizer::Optimizer (4,780,359 samples, 0.01%)</title><rect x="1109.0" y="1829" width="0.1" height="15.0" fill="rgb(252,224,32)" rx="2" ry="2" />
<text  x="1111.97" y="1839.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::RenderTree (24,359,051 samples, 0.05%)</title><rect x="623.2" y="1749" width="0.5" height="15.0" fill="rgb(215,154,7)" rx="2" ry="2" />
<text  x="626.19" y="1759.5" ></text>
</g>
<g >
<title>duckdb::MetaTransaction::Get (6,205,814 samples, 0.01%)</title><rect x="995.9" y="1701" width="0.1" height="15.0" fill="rgb(223,193,21)" rx="2" ry="2" />
<text  x="998.87" y="1711.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (14,452,293 samples, 0.03%)</title><rect x="930.7" y="1701" width="0.3" height="15.0" fill="rgb(205,162,17)" rx="2" ry="2" />
<text  x="933.65" y="1711.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::IntegerTypeMatcher, std::default_delete&lt;duckdb::IntegerTypeMatcher&gt; &gt;::__uniq_ptr_impl (6,927,338 samples, 0.01%)</title><rect x="784.8" y="1797" width="0.2" height="15.0" fill="rgb(215,198,38)" rx="2" ry="2" />
<text  x="787.80" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::_M_erase_at_end (36,981,990 samples, 0.07%)</title><rect x="357.4" y="1845" width="0.9" height="15.0" fill="rgb(206,227,43)" rx="2" ry="2" />
<text  x="360.41" y="1855.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (51,707,065 samples, 0.10%)</title><rect x="844.6" y="1765" width="1.2" height="15.0" fill="rgb(242,13,6)" rx="2" ry="2" />
<text  x="847.59" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc_large (4,916,273 samples, 0.01%)</title><rect x="498.5" y="1397" width="0.1" height="15.0" fill="rgb(237,225,25)" rx="2" ry="2" />
<text  x="501.45" y="1407.5" ></text>
</g>
<g >
<title>duckdb::VectorBuffer::~VectorBuffer (5,675,103 samples, 0.01%)</title><rect x="897.7" y="1525" width="0.1" height="15.0" fill="rgb(205,84,19)" rx="2" ry="2" />
<text  x="900.71" y="1535.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::GetScheduler (5,765,533 samples, 0.01%)</title><rect x="1091.6" y="1861" width="0.1" height="15.0" fill="rgb(237,158,13)" rx="2" ry="2" />
<text  x="1094.56" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ConstantExpression, std::default_delete&lt;duckdb::ConstantExpression&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConstantExpression&gt;, void&gt; (9,599,219 samples, 0.02%)</title><rect x="528.9" y="1669" width="0.3" height="15.0" fill="rgb(246,35,33)" rx="2" ry="2" />
<text  x="531.94" y="1679.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::SelectionData,  (10,036,289 samples, 0.02%)</title><rect x="292.3" y="1477" width="0.2" height="15.0" fill="rgb(239,99,26)" rx="2" ry="2" />
<text  x="295.26" y="1487.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::__uniq_ptr_impl (6,827,472 samples, 0.01%)</title><rect x="551.6" y="1701" width="0.1" height="15.0" fill="rgb(239,197,24)" rx="2" ry="2" />
<text  x="554.58" y="1711.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (87,730,273 samples, 0.17%)</title><rect x="333.4" y="1525" width="2.0" height="15.0" fill="rgb(236,159,16)" rx="2" ry="2" />
<text  x="336.43" y="1535.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::VectorCache, true&gt;::~vector (6,760,562 samples, 0.01%)</title><rect x="335.5" y="1669" width="0.1" height="15.0" fill="rgb(231,53,20)" rx="2" ry="2" />
<text  x="338.48" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (4,460,167 samples, 0.01%)</title><rect x="718.0" y="1781" width="0.1" height="15.0" fill="rgb(245,217,2)" rx="2" ry="2" />
<text  x="720.95" y="1791.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;*&gt; (7,688,930 samples, 0.01%)</title><rect x="980.7" y="1653" width="0.2" height="15.0" fill="rgb(247,40,27)" rx="2" ry="2" />
<text  x="983.70" y="1663.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::SetNode (7,631,768 samples, 0.01%)</title><rect x="547.6" y="1781" width="0.2" height="15.0" fill="rgb(235,193,27)" rx="2" ry="2" />
<text  x="550.60" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (214,281,482 samples, 0.42%)</title><rect x="11.2" y="2005" width="5.0" height="15.0" fill="rgb(205,72,41)" rx="2" ry="2" />
<text  x="14.23" y="2015.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt; &gt; &gt;::clear (4,385,163 samples, 0.01%)</title><rect x="1090.3" y="1845" width="0.1" height="15.0" fill="rgb(247,58,29)" rx="2" ry="2" />
<text  x="1093.34" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (5,398,013 samples, 0.01%)</title><rect x="547.2" y="1605" width="0.1" height="15.0" fill="rgb(205,217,34)" rx="2" ry="2" />
<text  x="550.20" y="1615.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (4,609,194 samples, 0.01%)</title><rect x="665.3" y="1733" width="0.1" height="15.0" fill="rgb(242,72,3)" rx="2" ry="2" />
<text  x="668.34" y="1743.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ColumnDataAllocator&gt;::shared_ptr&lt;std::allocator&lt;duckdb::ColumnDataAllocator&gt;, duckdb::ClientContext&amp;, duckdb::ColumnDataAllocatorType&amp;&gt; (26,282,113 samples, 0.05%)</title><rect x="98.1" y="1717" width="0.6" height="15.0" fill="rgb(237,209,11)" rx="2" ry="2" />
<text  x="101.08" y="1727.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt; (141,827,071 samples, 0.28%)</title><rect x="308.2" y="1493" width="3.3" height="15.0" fill="rgb(237,33,6)" rx="2" ry="2" />
<text  x="311.20" y="1503.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (44,896,159 samples, 0.09%)</title><rect x="498.1" y="1509" width="1.1" height="15.0" fill="rgb(243,31,39)" rx="2" ry="2" />
<text  x="501.13" y="1519.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::idalloctm (22,225,984 samples, 0.04%)</title><rect x="391.4" y="1509" width="0.5" height="15.0" fill="rgb(246,21,35)" rx="2" ry="2" />
<text  x="394.41" y="1519.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCheckpointer::DetectBestCompressionMethod (56,148,787 samples, 0.11%)</title><rect x="1117.9" y="1093" width="1.3" height="15.0" fill="rgb(214,51,21)" rx="2" ry="2" />
<text  x="1120.87" y="1103.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::InClauseExpressionMatcher&gt; (13,058,427 samples, 0.03%)</title><rect x="810.2" y="1845" width="0.3" height="15.0" fill="rgb(225,10,16)" rx="2" ry="2" />
<text  x="813.19" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnAppendState, std::allocator&lt;duckdb::ColumnAppendState&gt; &gt;::_M_realloc_insert&lt;duckdb::ColumnAppendState&gt; (42,539,423 samples, 0.08%)</title><rect x="451.3" y="1685" width="0.9" height="15.0" fill="rgb(250,171,37)" rx="2" ry="2" />
<text  x="454.26" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_fastpath (5,717,926 samples, 0.01%)</title><rect x="222.5" y="1397" width="0.1" height="15.0" fill="rgb(218,174,25)" rx="2" ry="2" />
<text  x="225.50" y="1407.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::Finalize (19,153,279 samples, 0.04%)</title><rect x="313.9" y="1621" width="0.4" height="15.0" fill="rgb(208,209,33)" rx="2" ry="2" />
<text  x="316.89" y="1631.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (8,687,510 samples, 0.02%)</title><rect x="421.9" y="1669" width="0.2" height="15.0" fill="rgb(252,225,1)" rx="2" ry="2" />
<text  x="424.95" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::ComparisonExpressionMatcher, std::default_delete&lt;duckdb::ComparisonExpressionMatcher&gt;, void&gt; (5,483,803 samples, 0.01%)</title><rect x="792.0" y="1829" width="0.2" height="15.0" fill="rgb(206,221,38)" rx="2" ry="2" />
<text  x="795.04" y="1839.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::StandardColumnData&gt; &gt;::destroy&lt;duckdb::StandardColumnData&gt; (261,937,092 samples, 0.51%)</title><rect x="238.2" y="1045" width="6.0" height="15.0" fill="rgb(223,102,3)" rx="2" ry="2" />
<text  x="241.15" y="1055.5" ></text>
</g>
<g >
<title>__strlen_sse2 (38,923,003 samples, 0.08%)</title><rect x="86.7" y="2005" width="0.9" height="15.0" fill="rgb(229,117,51)" rx="2" ry="2" />
<text  x="89.69" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::emplace_back&lt;unsigned long&amp;, unsigned long&amp;&gt; (131,525,051 samples, 0.26%)</title><rect x="627.4" y="1749" width="3.0" height="15.0" fill="rgb(242,125,28)" rx="2" ry="2" />
<text  x="630.38" y="1759.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::DatabaseInstance&gt;::~shared_ptr (100,574,591 samples, 0.20%)</title><rect x="1117.4" y="1989" width="2.3" height="15.0" fill="rgb(245,140,22)" rx="2" ry="2" />
<text  x="1120.43" y="1999.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (8,055,262 samples, 0.02%)</title><rect x="729.9" y="1733" width="0.1" height="15.0" fill="rgb(246,110,53)" rx="2" ry="2" />
<text  x="732.86" y="1743.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::Reset (47,705,956 samples, 0.09%)</title><rect x="498.1" y="1525" width="1.1" height="15.0" fill="rgb(219,5,39)" rx="2" ry="2" />
<text  x="501.10" y="1535.5" ></text>
</g>
<g >
<title>duckdb::Binder::ExpandStarExpressions (301,799,231 samples, 0.59%)</title><rect x="942.3" y="1749" width="7.0" height="15.0" fill="rgb(208,136,2)" rx="2" ry="2" />
<text  x="945.32" y="1759.5" ></text>
</g>
<g >
<title>duckdb::SingleFileStorageManager::AutomaticCheckpoint (52,159,229 samples, 0.10%)</title><rect x="190.1" y="1813" width="1.2" height="15.0" fill="rgb(218,51,49)" rx="2" ry="2" />
<text  x="193.12" y="1823.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::InitializeAppend (83,764,140 samples, 0.16%)</title><rect x="102.8" y="1701" width="1.9" height="15.0" fill="rgb(248,62,43)" rx="2" ry="2" />
<text  x="105.79" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="325" width="0.1" height="15.0" fill="rgb(211,104,37)" rx="2" ry="2" />
<text  x="14.25" y="335.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorChildBuffer, std::allocator&lt;duckdb::VectorChildBuffer&gt;,  (9,489,272 samples, 0.02%)</title><rect x="292.7" y="1589" width="0.3" height="15.0" fill="rgb(220,178,12)" rx="2" ry="2" />
<text  x="295.74" y="1599.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (21,281,227 samples, 0.04%)</title><rect x="849.0" y="1797" width="0.5" height="15.0" fill="rgb(215,136,19)" rx="2" ry="2" />
<text  x="851.99" y="1807.5" ></text>
</g>
<g >
<title>duckdb::BindContext::CreateColumnReference (62,825,304 samples, 0.12%)</title><rect x="958.3" y="1685" width="1.5" height="15.0" fill="rgb(253,12,43)" rx="2" ry="2" />
<text  x="961.31" y="1695.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::~__si_class_type_info (5,874,673 samples, 0.01%)</title><rect x="33.6" y="2021" width="0.1" height="15.0" fill="rgb(230,22,41)" rx="2" ry="2" />
<text  x="36.60" y="2031.5" ></text>
</g>
<g >
<title>duckdb::PipelineTask::PipelineTask (7,494,331 samples, 0.01%)</title><rect x="94.6" y="1717" width="0.2" height="15.0" fill="rgb(225,213,31)" rx="2" ry="2" />
<text  x="97.58" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc_large (9,229,779 samples, 0.02%)</title><rect x="896.6" y="1381" width="0.2" height="15.0" fill="rgb(206,156,48)" rx="2" ry="2" />
<text  x="899.60" y="1391.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (13,348,386 samples, 0.03%)</title><rect x="574.3" y="1781" width="0.3" height="15.0" fill="rgb(223,229,51)" rx="2" ry="2" />
<text  x="577.25" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (9,900,783 samples, 0.02%)</title><rect x="78.5" y="2005" width="0.2" height="15.0" fill="rgb(238,49,50)" rx="2" ry="2" />
<text  x="81.48" y="2015.5" ></text>
</g>
<g >
<title>duckdb::ColumnScanState::Initialize (13,991,189 samples, 0.03%)</title><rect x="299.1" y="1669" width="0.3" height="15.0" fill="rgb(241,87,43)" rx="2" ry="2" />
<text  x="302.10" y="1679.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::EnumComparisonRule&gt; &gt; (9,154,407 samples, 0.02%)</title><rect x="822.8" y="1845" width="0.2" height="15.0" fill="rgb(246,46,8)" rx="2" ry="2" />
<text  x="825.83" y="1855.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (24,910,249 samples, 0.05%)</title><rect x="621.7" y="1717" width="0.5" height="15.0" fill="rgb(243,56,26)" rx="2" ry="2" />
<text  x="624.65" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;::operator= (18,355,878 samples, 0.04%)</title><rect x="1089.3" y="1829" width="0.5" height="15.0" fill="rgb(221,213,8)" rx="2" ry="2" />
<text  x="1092.34" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (5,388,436 samples, 0.01%)</title><rect x="38.8" y="1989" width="0.1" height="15.0" fill="rgb(240,1,25)" rx="2" ry="2" />
<text  x="41.81" y="1999.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned int*, false&gt;::_M_head (5,778,142 samples, 0.01%)</title><rect x="264.3" y="1413" width="0.1" height="15.0" fill="rgb(224,45,22)" rx="2" ry="2" />
<text  x="267.26" y="1423.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_dalloc_large (7,235,767 samples, 0.01%)</title><rect x="896.6" y="1365" width="0.2" height="15.0" fill="rgb(234,76,48)" rx="2" ry="2" />
<text  x="899.62" y="1375.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long&gt;::deallocate (5,198,634 samples, 0.01%)</title><rect x="653.9" y="1685" width="0.2" height="15.0" fill="rgb(211,117,43)" rx="2" ry="2" />
<text  x="656.95" y="1695.5" ></text>
</g>
<g >
<title>duckdb::CycleCounter::Tick (6,066,576 samples, 0.01%)</title><rect x="898.4" y="1701" width="0.2" height="15.0" fill="rgb(226,4,46)" rx="2" ry="2" />
<text  x="901.43" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::ConjunctionExpressionMatcher, std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt;, void&gt; (5,313,100 samples, 0.01%)</title><rect x="808.2" y="1829" width="0.1" height="15.0" fill="rgb(225,164,32)" rx="2" ry="2" />
<text  x="811.22" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ScalarFunction, std::allocator&lt;duckdb::ScalarFunction&gt; &gt;::vector (7,974,797 samples, 0.02%)</title><rect x="1114.8" y="1781" width="0.2" height="15.0" fill="rgb(210,45,4)" rx="2" ry="2" />
<text  x="1117.77" y="1791.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::WriteStringLen (5,165,045 samples, 0.01%)</title><rect x="593.5" y="1829" width="0.1" height="15.0" fill="rgb(221,111,8)" rx="2" ry="2" />
<text  x="596.52" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (4,374,845 samples, 0.01%)</title><rect x="658.5" y="1717" width="0.1" height="15.0" fill="rgb(245,213,23)" rx="2" ry="2" />
<text  x="661.53" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::ConjunctionSimplificationRule, std::default_delete&lt;duckdb::ConjunctionSimplificationRule&gt;, void&gt; (12,274,008 samples, 0.02%)</title><rect x="821.7" y="1861" width="0.3" height="15.0" fill="rgb(224,135,3)" rx="2" ry="2" />
<text  x="824.71" y="1871.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::QueryNode, std::default_delete&lt;duckdb::QueryNode&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::SelectNode&gt; &gt; (5,146,152 samples, 0.01%)</title><rect x="534.4" y="1733" width="0.1" height="15.0" fill="rgb(239,213,54)" rx="2" ry="2" />
<text  x="537.40" y="1743.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (29,096,202 samples, 0.06%)</title><rect x="548.5" y="1573" width="0.7" height="15.0" fill="rgb(248,10,34)" rx="2" ry="2" />
<text  x="551.52" y="1583.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnDataCopyFunction*&gt; (4,696,348 samples, 0.01%)</title><rect x="1122.0" y="1813" width="0.1" height="15.0" fill="rgb(228,45,10)" rx="2" ry="2" />
<text  x="1124.97" y="1823.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_deallocate (11,185,884 samples, 0.02%)</title><rect x="566.1" y="1749" width="0.2" height="15.0" fill="rgb(226,22,20)" rx="2" ry="2" />
<text  x="569.06" y="1759.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ParsedExpression&gt;::operator (11,004,512 samples, 0.02%)</title><rect x="946.7" y="1653" width="0.2" height="15.0" fill="rgb(220,62,50)" rx="2" ry="2" />
<text  x="949.67" y="1663.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;,  (6,779,739 samples, 0.01%)</title><rect x="374.8" y="1701" width="0.1" height="15.0" fill="rgb(249,5,16)" rx="2" ry="2" />
<text  x="377.76" y="1711.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; &gt;::find (22,468,772 samples, 0.04%)</title><rect x="993.4" y="1685" width="0.5" height="15.0" fill="rgb(206,145,47)" rx="2" ry="2" />
<text  x="996.39" y="1695.5" ></text>
</g>
<g >
<title>duckdb::BoundConstantExpression::BoundConstantExpression (9,134,929 samples, 0.02%)</title><rect x="982.6" y="1797" width="0.2" height="15.0" fill="rgb(240,98,32)" rx="2" ry="2" />
<text  x="985.62" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotReverseMap::StackDepotReverseMap (7,264,216 samples, 0.01%)</title><rect x="15.0" y="1989" width="0.1" height="15.0" fill="rgb(213,200,48)" rx="2" ry="2" />
<text  x="17.97" y="1999.5" ></text>
</g>
<g >
<title>duckdb::Catalog::CreateFunction (96,606,399 samples, 0.19%)</title><rect x="1112.9" y="1893" width="2.2" height="15.0" fill="rgb(240,207,21)" rx="2" ry="2" />
<text  x="1115.86" y="1903.5" ></text>
</g>
<g >
<title>duckdb::StringUtil::CIHash (5,131,946 samples, 0.01%)</title><rect x="373.8" y="1829" width="0.1" height="15.0" fill="rgb(253,21,2)" rx="2" ry="2" />
<text  x="376.81" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;::operator= (20,550,069 samples, 0.04%)</title><rect x="1089.3" y="1845" width="0.5" height="15.0" fill="rgb(223,170,46)" rx="2" ry="2" />
<text  x="1092.31" y="1855.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAppendState::ColumnDataAppendState (5,371,259 samples, 0.01%)</title><rect x="861.3" y="1781" width="0.1" height="15.0" fill="rgb(237,144,17)" rx="2" ry="2" />
<text  x="864.28" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::ColumnStatistics&gt; &gt;::destroy&lt;duckdb::ColumnStatistics&gt; (18,247,191 samples, 0.04%)</title><rect x="236.4" y="1349" width="0.4" height="15.0" fill="rgb(235,125,15)" rx="2" ry="2" />
<text  x="239.42" y="1359.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::GetSelVector (12,476,112 samples, 0.02%)</title><rect x="200.0" y="1685" width="0.3" height="15.0" fill="rgb(207,47,43)" rx="2" ry="2" />
<text  x="203.04" y="1695.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (15,440,861 samples, 0.03%)</title><rect x="677.3" y="1717" width="0.4" height="15.0" fill="rgb(234,145,51)" rx="2" ry="2" />
<text  x="680.35" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (8,299,967 samples, 0.02%)</title><rect x="765.2" y="1701" width="0.2" height="15.0" fill="rgb(220,52,48)" rx="2" ry="2" />
<text  x="768.17" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (8,968,292 samples, 0.02%)</title><rect x="39.1" y="2005" width="0.2" height="15.0" fill="rgb(217,104,42)" rx="2" ry="2" />
<text  x="42.08" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (14,771,971 samples, 0.03%)</title><rect x="78.1" y="2005" width="0.4" height="15.0" fill="rgb(240,44,38)" rx="2" ry="2" />
<text  x="81.14" y="2015.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt;::_M_ptr (27,919,623 samples, 0.05%)</title><rect x="510.3" y="1877" width="0.6" height="15.0" fill="rgb(232,50,7)" rx="2" ry="2" />
<text  x="513.26" y="1887.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::HTTPState&gt; (20,591,054 samples, 0.04%)</title><rect x="359.2" y="1893" width="0.5" height="15.0" fill="rgb(211,21,13)" rx="2" ry="2" />
<text  x="362.23" y="1903.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorCacheBuffer,  (75,459,836 samples, 0.15%)</title><rect x="400.8" y="1717" width="1.7" height="15.0" fill="rgb(237,57,11)" rx="2" ry="2" />
<text  x="403.79" y="1727.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Free (55,802,777 samples, 0.11%)</title><rect x="896.2" y="1477" width="1.3" height="15.0" fill="rgb(210,209,11)" rx="2" ry="2" />
<text  x="899.24" y="1487.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (5,098,222 samples, 0.01%)</title><rect x="948.4" y="1637" width="0.1" height="15.0" fill="rgb(237,20,7)" rx="2" ry="2" />
<text  x="951.38" y="1647.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::operator= (4,446,385 samples, 0.01%)</title><rect x="764.4" y="1669" width="0.1" height="15.0" fill="rgb(209,34,48)" rx="2" ry="2" />
<text  x="767.43" y="1679.5" ></text>
</g>
<g >
<title>start_this_handle (4,516,988 samples, 0.01%)</title><rect x="247.8" y="1461" width="0.1" height="15.0" fill="rgb(238,111,34)" rx="2" ry="2" />
<text  x="250.80" y="1471.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::SelectionData&gt;::shared_ptr&lt;std::allocator&lt;duckdb::SelectionData&gt;, unsigned long&amp;&gt; (430,640,132 samples, 0.84%)</title><rect x="302.4" y="1653" width="9.9" height="15.0" fill="rgb(245,162,1)" rx="2" ry="2" />
<text  x="305.43" y="1663.5" ></text>
</g>
<g >
<title>duckdb::Vector::~Vector (73,899,862 samples, 0.14%)</title><rect x="221.3" y="1621" width="1.7" height="15.0" fill="rgb(253,10,37)" rx="2" ry="2" />
<text  x="224.27" y="1631.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (6,544,689 samples, 0.01%)</title><rect x="948.4" y="1685" width="0.1" height="15.0" fill="rgb(214,193,15)" rx="2" ry="2" />
<text  x="951.37" y="1695.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::Value, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::Value&gt; &gt; &gt;::unordered_map (7,263,577 samples, 0.01%)</title><rect x="373.3" y="1893" width="0.1" height="15.0" fill="rgb(218,174,36)" rx="2" ry="2" />
<text  x="376.28" y="1903.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (54,633,593 samples, 0.11%)</title><rect x="289.2" y="1541" width="1.3" height="15.0" fill="rgb(252,187,43)" rx="2" ry="2" />
<text  x="292.23" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5,239,352 samples, 0.01%)</title><rect x="802.2" y="1797" width="0.2" height="15.0" fill="rgb(234,18,9)" rx="2" ry="2" />
<text  x="805.24" y="1807.5" ></text>
</g>
<g >
<title>duckdb::RemoveUnusedColumns::VisitOperator (166,546,632 samples, 0.32%)</title><rect x="762.0" y="1813" width="3.9" height="15.0" fill="rgb(253,9,37)" rx="2" ry="2" />
<text  x="765.05" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt; &gt;::unique_ptr&lt;duckdb::ArenaAllocatorData, std::default_delete&lt;duckdb::ArenaAllocatorData&gt;, void&gt; (8,042,767 samples, 0.02%)</title><rect x="377.9" y="1813" width="0.2" height="15.0" fill="rgb(225,167,39)" rx="2" ry="2" />
<text  x="380.88" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (5,264,200 samples, 0.01%)</title><rect x="831.1" y="1669" width="0.1" height="15.0" fill="rgb(224,197,24)" rx="2" ry="2" />
<text  x="834.06" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;unsigned long&gt;::_M_valptr (4,420,478 samples, 0.01%)</title><rect x="691.0" y="1685" width="0.1" height="15.0" fill="rgb(209,38,37)" rx="2" ry="2" />
<text  x="693.98" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::~vector (5,495,054 samples, 0.01%)</title><rect x="298.8" y="1685" width="0.1" height="15.0" fill="rgb(246,51,1)" rx="2" ry="2" />
<text  x="301.82" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DatePartSimplificationRule, std::default_delete&lt;duckdb::DatePartSimplificationRule&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::DatePartSimplificationRule&gt;, void&gt; (6,729,877 samples, 0.01%)</title><rect x="798.5" y="1861" width="0.2" height="15.0" fill="rgb(222,43,23)" rx="2" ry="2" />
<text  x="801.52" y="1871.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::PreparedStatementData, std::allocator&lt;duckdb::PreparedStatementData&gt;,  (20,990,059 samples, 0.04%)</title><rect x="1040.8" y="1813" width="0.4" height="15.0" fill="rgb(241,50,4)" rx="2" ry="2" />
<text  x="1043.75" y="1823.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt;::_M_head (5,135,483 samples, 0.01%)</title><rect x="208.2" y="1445" width="0.1" height="15.0" fill="rgb(226,74,46)" rx="2" ry="2" />
<text  x="211.20" y="1455.5" ></text>
</g>
<g >
<title>duckdb::ExpressionListRef::~ExpressionListRef (25,990,173 samples, 0.05%)</title><rect x="971.7" y="1701" width="0.6" height="15.0" fill="rgb(213,35,22)" rx="2" ry="2" />
<text  x="974.71" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::operator (6,280,914 samples, 0.01%)</title><rect x="812.7" y="1765" width="0.2" height="15.0" fill="rgb(254,65,31)" rx="2" ry="2" />
<text  x="815.71" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (53,795,681 samples, 0.10%)</title><rect x="861.4" y="1733" width="1.3" height="15.0" fill="rgb(229,60,29)" rx="2" ry="2" />
<text  x="864.42" y="1743.5" ></text>
</g>
<g >
<title>pthread_getspecific (49,100,765 samples, 0.10%)</title><rect x="1180.3" y="2037" width="1.1" height="15.0" fill="rgb(226,93,47)" rx="2" ry="2" />
<text  x="1183.27" y="2047.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;duckdb::InterruptDoneSignalState&gt;::~weak_ptr (4,862,735 samples, 0.01%)</title><rect x="335.6" y="1669" width="0.1" height="15.0" fill="rgb(237,142,15)" rx="2" ry="2" />
<text  x="338.63" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (9,057,920 samples, 0.02%)</title><rect x="994.0" y="1669" width="0.2" height="15.0" fill="rgb(249,136,42)" rx="2" ry="2" />
<text  x="996.98" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; &gt;::_M_erase_at_end (167,594,698 samples, 0.33%)</title><rect x="324.1" y="1781" width="3.8" height="15.0" fill="rgb(226,157,1)" rx="2" ry="2" />
<text  x="327.09" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::push_back (8,969,997 samples, 0.02%)</title><rect x="316.6" y="1717" width="0.2" height="15.0" fill="rgb(240,167,25)" rx="2" ry="2" />
<text  x="319.56" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (9,158,623 samples, 0.02%)</title><rect x="929.9" y="1637" width="0.2" height="15.0" fill="rgb(223,92,51)" rx="2" ry="2" />
<text  x="932.91" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_do_assert_mapped (5,219,896 samples, 0.01%)</title><rect x="876.5" y="1173" width="0.1" height="15.0" fill="rgb(239,52,3)" rx="2" ry="2" />
<text  x="879.50" y="1183.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::ScanVector (177,061,424 samples, 0.35%)</title><rect x="212.4" y="1637" width="4.1" height="15.0" fill="rgb(224,154,24)" rx="2" ry="2" />
<text  x="215.40" y="1647.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DistinctStatistics, std::default_delete&lt;duckdb::DistinctStatistics&gt; &gt;::~unique_ptr (11,039,441 samples, 0.02%)</title><rect x="236.5" y="1285" width="0.3" height="15.0" fill="rgb(213,77,29)" rx="2" ry="2" />
<text  x="239.54" y="1295.5" ></text>
</g>
<g >
<title>duckdb::JoinOrderOptimizer::JoinOrderOptimizer (36,051,814 samples, 0.07%)</title><rect x="752.0" y="1813" width="0.8" height="15.0" fill="rgb(244,87,10)" rx="2" ry="2" />
<text  x="754.99" y="1823.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt; &gt; (4,537,565 samples, 0.01%)</title><rect x="638.5" y="1621" width="0.1" height="15.0" fill="rgb(219,164,10)" rx="2" ry="2" />
<text  x="641.47" y="1631.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (7,426,185 samples, 0.01%)</title><rect x="1175.2" y="2037" width="0.1" height="15.0" fill="rgb(242,197,12)" rx="2" ry="2" />
<text  x="1178.16" y="2047.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_fastpath (7,573,387 samples, 0.01%)</title><rect x="897.3" y="1445" width="0.2" height="15.0" fill="rgb(219,129,24)" rx="2" ry="2" />
<text  x="900.31" y="1455.5" ></text>
</g>
<g >
<title>duckdb::PhysicalExpressionScan::IsFoldable (12,629,844 samples, 0.02%)</title><rect x="907.4" y="1781" width="0.3" height="15.0" fill="rgb(247,84,52)" rx="2" ry="2" />
<text  x="910.40" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="581" width="0.1" height="15.0" fill="rgb(220,1,30)" rx="2" ry="2" />
<text  x="14.25" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::ColumnStatistics&gt;::destroy&lt;duckdb::ColumnStatistics&gt; (18,247,191 samples, 0.04%)</title><rect x="236.4" y="1333" width="0.4" height="15.0" fill="rgb(222,96,19)" rx="2" ry="2" />
<text  x="239.42" y="1343.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::~RowGroupCollection (404,686,745 samples, 0.79%)</title><rect x="236.2" y="1557" width="9.3" height="15.0" fill="rgb(211,114,9)" rx="2" ry="2" />
<text  x="239.19" y="1567.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::~FunctionExpressionMatcher (5,264,200 samples, 0.01%)</title><rect x="831.1" y="1605" width="0.1" height="15.0" fill="rgb(237,193,50)" rx="2" ry="2" />
<text  x="834.06" y="1615.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::Merge (6,297,961 samples, 0.01%)</title><rect x="463.0" y="1717" width="0.1" height="15.0" fill="rgb(209,125,23)" rx="2" ry="2" />
<text  x="465.98" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::emplace_back&lt;duckdb::VectorCache&amp;&gt; (29,613,748 samples, 0.06%)</title><rect x="402.7" y="1797" width="0.7" height="15.0" fill="rgb(239,137,0)" rx="2" ry="2" />
<text  x="405.70" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ColumnList::GetColumn (4,934,016 samples, 0.01%)</title><rect x="855.7" y="1765" width="0.1" height="15.0" fill="rgb(230,200,17)" rx="2" ry="2" />
<text  x="858.68" y="1775.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (7,859,213 samples, 0.02%)</title><rect x="218.0" y="1381" width="0.2" height="15.0" fill="rgb(250,126,30)" rx="2" ry="2" />
<text  x="221.01" y="1391.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTree&lt;duckdb::LogicalOperator&gt; (318,149,185 samples, 0.62%)</title><rect x="546.5" y="1813" width="7.3" height="15.0" fill="rgb(225,79,38)" rx="2" ry="2" />
<text  x="549.52" y="1823.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::ColumnDataAllocator, duckdb::ClientContext&amp;, duckdb::ColumnDataAllocatorType&amp;&gt; (23,694,368 samples, 0.05%)</title><rect x="911.5" y="1749" width="0.6" height="15.0" fill="rgb(223,207,29)" rx="2" ry="2" />
<text  x="914.52" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::~vector (5,787,096 samples, 0.01%)</title><rect x="1107.1" y="1861" width="0.2" height="15.0" fill="rgb(233,152,41)" rx="2" ry="2" />
<text  x="1110.13" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (25,677,083 samples, 0.05%)</title><rect x="315.3" y="1621" width="0.6" height="15.0" fill="rgb(239,27,49)" rx="2" ry="2" />
<text  x="318.34" y="1631.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::Pipeline, duckdb::Executor&amp;&gt; (11,014,738 samples, 0.02%)</title><rect x="1081.0" y="1653" width="0.3" height="15.0" fill="rgb(237,209,48)" rx="2" ry="2" />
<text  x="1084.04" y="1663.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;::shared_ptr&lt;std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;, unsigned long&amp;&gt; (20,992,988 samples, 0.04%)</title><rect x="473.8" y="1637" width="0.4" height="15.0" fill="rgb(232,116,14)" rx="2" ry="2" />
<text  x="476.75" y="1647.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::NextGraphemeCluster (4,694,985 samples, 0.01%)</title><rect x="574.6" y="1797" width="0.1" height="15.0" fill="rgb(212,39,45)" rx="2" ry="2" />
<text  x="577.56" y="1807.5" ></text>
</g>
<g >
<title>do_anonymous_page (12,546,928 samples, 0.02%)</title><rect x="56.1" y="1909" width="0.3" height="15.0" fill="rgb(238,68,46)" rx="2" ry="2" />
<text  x="59.06" y="1919.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::SelectionData&gt; &gt;::construct&lt;duckdb::SelectionData, unsigned long&amp;&gt; (463,332,554 samples, 0.90%)</title><rect x="200.8" y="1557" width="10.6" height="15.0" fill="rgb(247,199,19)" rx="2" ry="2" />
<text  x="203.79" y="1567.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (4,667,155 samples, 0.01%)</title><rect x="653.5" y="1765" width="0.1" height="15.0" fill="rgb(243,98,15)" rx="2" ry="2" />
<text  x="656.48" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::~unique_ptr (7,418,395 samples, 0.01%)</title><rect x="1077.9" y="1669" width="0.1" height="15.0" fill="rgb(236,206,24)" rx="2" ry="2" />
<text  x="1080.87" y="1679.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt; (6,802,596 samples, 0.01%)</title><rect x="262.0" y="1445" width="0.1" height="15.0" fill="rgb(231,173,37)" rx="2" ry="2" />
<text  x="264.99" y="1455.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::ResetFromCache (6,749,129 samples, 0.01%)</title><rect x="464.9" y="1733" width="0.1" height="15.0" fill="rgb(228,9,16)" rx="2" ry="2" />
<text  x="467.88" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::ExpressionEquality&lt;duckdb::ParsedExpression&gt;, duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (22,505,787 samples, 0.04%)</title><rect x="956.4" y="1669" width="0.5" height="15.0" fill="rgb(214,229,48)" rx="2" ry="2" />
<text  x="959.37" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_metadata_read (4,974,897 samples, 0.01%)</title><rect x="878.1" y="1397" width="0.2" height="15.0" fill="rgb(253,56,9)" rx="2" ry="2" />
<text  x="881.14" y="1407.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::Flush (144,435,016 samples, 0.28%)</title><rect x="477.3" y="1813" width="3.3" height="15.0" fill="rgb(218,117,5)" rx="2" ry="2" />
<text  x="480.26" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::VectorBuffer&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::VectorBuffer&gt; &gt; &gt;::vector (4,863,517 samples, 0.01%)</title><rect x="369.1" y="1653" width="0.1" height="15.0" fill="rgb(246,203,37)" rx="2" ry="2" />
<text  x="372.06" y="1663.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_decay_dirty (5,753,970 samples, 0.01%)</title><rect x="19.4" y="1893" width="0.1" height="15.0" fill="rgb(250,162,51)" rx="2" ry="2" />
<text  x="22.41" y="1903.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::BlockHandle, std::allocator&lt;duckdb::BlockHandle&gt;,  (26,395,163 samples, 0.05%)</title><rect x="881.0" y="1557" width="0.6" height="15.0" fill="rgb(209,210,32)" rx="2" ry="2" />
<text  x="883.97" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (14,239,181 samples, 0.03%)</title><rect x="467.6" y="1749" width="0.3" height="15.0" fill="rgb(250,69,19)" rx="2" ry="2" />
<text  x="470.61" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_S_relocate (7,033,038 samples, 0.01%)</title><rect x="818.2" y="1797" width="0.2" height="15.0" fill="rgb(229,207,5)" rx="2" ry="2" />
<text  x="821.23" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PipelineExecutor, std::default_delete&lt;duckdb::PipelineExecutor&gt; &gt;::reset (5,439,011 samples, 0.01%)</title><rect x="1097.6" y="1845" width="0.2" height="15.0" fill="rgb(225,155,22)" rx="2" ry="2" />
<text  x="1100.63" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; (11,655,838 samples, 0.02%)</title><rect x="859.3" y="1813" width="0.2" height="15.0" fill="rgb(240,199,54)" rx="2" ry="2" />
<text  x="862.26" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::StorageCommitState, std::default_delete&lt;duckdb::StorageCommitState&gt; &gt;::unique_ptr&lt;duckdb::SingleFileStorageCommitState, std::default_delete&lt;duckdb::SingleFileStorageCommitState&gt;, void&gt; (9,095,028 samples, 0.02%)</title><rect x="253.6" y="1781" width="0.2" height="15.0" fill="rgb(229,13,25)" rx="2" ry="2" />
<text  x="256.58" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ConjunctionExpressionMatcher, std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt;, void&gt; (7,020,529 samples, 0.01%)</title><rect x="807.5" y="1813" width="0.1" height="15.0" fill="rgb(227,123,45)" rx="2" ry="2" />
<text  x="810.47" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BoundExpression::BoundExpression (4,898,269 samples, 0.01%)</title><rect x="934.7" y="1685" width="0.1" height="15.0" fill="rgb(247,32,12)" rx="2" ry="2" />
<text  x="937.73" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::~unique_ptr (5,991,158 samples, 0.01%)</title><rect x="641.1" y="1669" width="0.1" height="15.0" fill="rgb(211,149,14)" rx="2" ry="2" />
<text  x="644.07" y="1679.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (88,046,952 samples, 0.17%)</title><rect x="895.9" y="1637" width="2.1" height="15.0" fill="rgb(209,203,40)" rx="2" ry="2" />
<text  x="898.93" y="1647.5" ></text>
</g>
<g >
<title>duckdb::OperatorInformation::operator= (10,072,514 samples, 0.02%)</title><rect x="361.6" y="1813" width="0.2" height="15.0" fill="rgb(235,9,53)" rx="2" ry="2" />
<text  x="364.59" y="1823.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (6,825,647 samples, 0.01%)</title><rect x="708.2" y="1797" width="0.1" height="15.0" fill="rgb(230,182,9)" rx="2" ry="2" />
<text  x="711.19" y="1807.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, true&gt;::~vector (4,710,048 samples, 0.01%)</title><rect x="336.9" y="1749" width="0.1" height="15.0" fill="rgb(253,137,7)" rx="2" ry="2" />
<text  x="339.90" y="1759.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::InitializeEmpty (158,243,946 samples, 0.31%)</title><rect x="453.0" y="1733" width="3.6" height="15.0" fill="rgb(230,189,52)" rx="2" ry="2" />
<text  x="455.95" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (35,505,178 samples, 0.07%)</title><rect x="663.9" y="1765" width="0.8" height="15.0" fill="rgb(247,202,53)" rx="2" ry="2" />
<text  x="666.89" y="1775.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::VectorCacheBuffer (18,120,938 samples, 0.04%)</title><rect x="107.3" y="1557" width="0.4" height="15.0" fill="rgb(228,12,43)" rx="2" ry="2" />
<text  x="110.29" y="1567.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (97,859,304 samples, 0.19%)</title><rect x="492.3" y="1733" width="2.3" height="15.0" fill="rgb(241,142,53)" rx="2" ry="2" />
<text  x="495.32" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::unique_ptr (7,272,824 samples, 0.01%)</title><rect x="1013.9" y="1829" width="0.1" height="15.0" fill="rgb(250,49,40)" rx="2" ry="2" />
<text  x="1016.85" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (15,871,986 samples, 0.03%)</title><rect x="107.3" y="1493" width="0.4" height="15.0" fill="rgb(217,174,4)" rx="2" ry="2" />
<text  x="110.29" y="1503.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::LocalTableStorage, std::allocator&lt;duckdb::LocalTableStorage&gt;,  (4,375,789 samples, 0.01%)</title><rect x="235.4" y="1717" width="0.1" height="15.0" fill="rgb(241,224,33)" rx="2" ry="2" />
<text  x="238.40" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (5,509,009 samples, 0.01%)</title><rect x="930.0" y="1621" width="0.1" height="15.0" fill="rgb(228,147,36)" rx="2" ry="2" />
<text  x="932.99" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_ReuseOrAllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::operator (5,248,431 samples, 0.01%)</title><rect x="1034.4" y="1781" width="0.2" height="15.0" fill="rgb(207,141,14)" rx="2" ry="2" />
<text  x="1037.43" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (37,953,491 samples, 0.07%)</title><rect x="289.4" y="1429" width="0.9" height="15.0" fill="rgb(249,89,0)" rx="2" ry="2" />
<text  x="292.39" y="1439.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (4,499,651 samples, 0.01%)</title><rect x="570.3" y="1701" width="0.1" height="15.0" fill="rgb(233,170,11)" rx="2" ry="2" />
<text  x="573.31" y="1711.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::unordered_set (12,585,268 samples, 0.02%)</title><rect x="885.4" y="1653" width="0.3" height="15.0" fill="rgb(210,154,52)" rx="2" ry="2" />
<text  x="888.43" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::ReferenceEquality&lt;duckdb::SchemaCatalogEntry&gt;, duckdb::ReferenceHashFunction&lt;duckdb::SchemaCatalogEntry&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert_unique_node (16,080,098 samples, 0.03%)</title><rect x="1007.2" y="1717" width="0.3" height="15.0" fill="rgb(235,193,7)" rx="2" ry="2" />
<text  x="1010.15" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;*&gt; (5,095,671 samples, 0.01%)</title><rect x="356.4" y="1445" width="0.2" height="15.0" fill="rgb(242,115,30)" rx="2" ry="2" />
<text  x="359.45" y="1455.5" ></text>
</g>
<g >
<title>__blk_mq_sched_dispatch_requests (39,113,542 samples, 0.08%)</title><rect x="249.7" y="1445" width="0.9" height="15.0" fill="rgb(210,131,16)" rx="2" ry="2" />
<text  x="252.70" y="1455.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::BlockMetaData, true&gt;::back (4,789,237 samples, 0.01%)</title><rect x="863.5" y="1669" width="0.1" height="15.0" fill="rgb(241,155,20)" rx="2" ry="2" />
<text  x="866.48" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ReplaceBinding, std::allocator&lt;duckdb::ReplaceBinding&gt; &gt;::~vector (6,290,920 samples, 0.01%)</title><rect x="769.4" y="1765" width="0.1" height="15.0" fill="rgb(205,163,38)" rx="2" ry="2" />
<text  x="772.36" y="1775.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::RegexOptimizationRule, std::default_delete&lt;duckdb::RegexOptimizationRule&gt; &gt;::__uniq_ptr_impl (4,702,379 samples, 0.01%)</title><rect x="820.6" y="1829" width="0.1" height="15.0" fill="rgb(226,17,2)" rx="2" ry="2" />
<text  x="823.57" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::~unique_ptr (17,571,097 samples, 0.03%)</title><rect x="1036.4" y="1509" width="0.4" height="15.0" fill="rgb(211,25,54)" rx="2" ry="2" />
<text  x="1039.39" y="1519.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;*&gt; (11,341,804 samples, 0.02%)</title><rect x="350.5" y="1541" width="0.3" height="15.0" fill="rgb(227,10,22)" rx="2" ry="2" />
<text  x="353.52" y="1551.5" ></text>
</g>
<g >
<title>duckdb::BufferManager::GetBufferManager (11,430,966 samples, 0.02%)</title><rect x="998.4" y="1605" width="0.3" height="15.0" fill="rgb(226,69,14)" rx="2" ry="2" />
<text  x="1001.44" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ProgressBar, std::default_delete&lt;duckdb::ProgressBar&gt; &gt;::reset (6,051,755 samples, 0.01%)</title><rect x="359.0" y="1877" width="0.1" height="15.0" fill="rgb(254,150,19)" rx="2" ry="2" />
<text  x="362.01" y="1887.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::BoundSelectNode, std::default_delete&lt;duckdb::BoundSelectNode&gt; &gt;::__uniq_ptr_impl (7,842,040 samples, 0.02%)</title><rect x="963.9" y="1701" width="0.1" height="15.0" fill="rgb(244,35,24)" rx="2" ry="2" />
<text  x="966.86" y="1711.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ConjunctionExpressionMatcher, std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt; &gt;::__uniq_ptr_impl (5,470,363 samples, 0.01%)</title><rect x="807.5" y="1797" width="0.1" height="15.0" fill="rgb(225,19,13)" rx="2" ry="2" />
<text  x="810.47" y="1807.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::Pipeline, duckdb::Executor&amp;&gt; (41,545,878 samples, 0.08%)</title><rect x="1093.8" y="1701" width="0.9" height="15.0" fill="rgb(243,95,17)" rx="2" ry="2" />
<text  x="1096.75" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (5,125,716 samples, 0.01%)</title><rect x="927.7" y="1653" width="0.2" height="15.0" fill="rgb(237,74,46)" rx="2" ry="2" />
<text  x="930.75" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::push_back (17,991,722 samples, 0.04%)</title><rect x="798.1" y="1845" width="0.4" height="15.0" fill="rgb(231,125,7)" rx="2" ry="2" />
<text  x="801.08" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (5,130,161 samples, 0.01%)</title><rect x="975.4" y="1701" width="0.1" height="15.0" fill="rgb(233,106,28)" rx="2" ry="2" />
<text  x="978.42" y="1711.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (16,710,153 samples, 0.03%)</title><rect x="727.5" y="1669" width="0.3" height="15.0" fill="rgb(250,173,22)" rx="2" ry="2" />
<text  x="730.45" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorMetaData, std::allocator&lt;duckdb::VectorMetaData&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorMetaData const&amp;&gt; (19,237,817 samples, 0.04%)</title><rect x="383.2" y="1845" width="0.4" height="15.0" fill="rgb(205,40,24)" rx="2" ry="2" />
<text  x="386.20" y="1855.5" ></text>
</g>
<g >
<title>__x64_sys_write (66,305,967 samples, 0.13%)</title><rect x="247.4" y="1669" width="1.5" height="15.0" fill="rgb(240,190,50)" rx="2" ry="2" />
<text  x="250.41" y="1679.5" ></text>
</g>
<g >
<title>duckdb::LogicalProjection::LogicalProjection (5,142,334 samples, 0.01%)</title><rect x="978.2" y="1749" width="0.2" height="15.0" fill="rgb(207,162,9)" rx="2" ry="2" />
<text  x="981.25" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::emplace_back&lt;duckdb::VectorCache&amp;&gt; (26,841,872 samples, 0.05%)</title><rect x="290.9" y="1685" width="0.7" height="15.0" fill="rgb(248,1,42)" rx="2" ry="2" />
<text  x="293.94" y="1695.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ManyFunctionMatcher, std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&amp;&gt; (18,997,071 samples, 0.04%)</title><rect x="800.5" y="1845" width="0.4" height="15.0" fill="rgb(230,122,44)" rx="2" ry="2" />
<text  x="803.50" y="1855.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::ColumnDataAllocator, std::allocator&lt;duckdb::ColumnDataAllocator&gt;,  (84,307,571 samples, 0.16%)</title><rect x="1123.0" y="1797" width="1.9" height="15.0" fill="rgb(244,30,11)" rx="2" ry="2" />
<text  x="1125.96" y="1807.5" ></text>
</g>
<g >
<title>duckdb::UndoBuffer::Commit (2,736,027,009 samples, 5.33%)</title><rect x="254.5" y="1781" width="62.9" height="15.0" fill="rgb(225,196,11)" rx="2" ry="2" />
<text  x="257.49" y="1791.5" >duckdb..</text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::Reset (4,408,970 samples, 0.01%)</title><rect x="370.3" y="1717" width="0.1" height="15.0" fill="rgb(212,168,39)" rx="2" ry="2" />
<text  x="373.35" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (7,629,284 samples, 0.01%)</title><rect x="487.6" y="1429" width="0.2" height="15.0" fill="rgb(211,221,53)" rx="2" ry="2" />
<text  x="490.61" y="1439.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::ViewCatalogEntry&gt;, std::reference_wrapper&lt;duckdb::ViewCatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::ViewCatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::ReferenceEquality&lt;duckdb::ViewCatalogEntry&gt;, duckdb::ReferenceHashFunction&lt;duckdb::ViewCatalogEntry&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (4,411,695 samples, 0.01%)</title><rect x="1018.5" y="1685" width="0.1" height="15.0" fill="rgb(229,58,34)" rx="2" ry="2" />
<text  x="1021.47" y="1695.5" ></text>
</g>
<g >
<title>std::swap&lt;duckdb::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics&gt;, false&gt; &gt; (25,923,562 samples, 0.05%)</title><rect x="424.1" y="1525" width="0.6" height="15.0" fill="rgb(254,81,33)" rx="2" ry="2" />
<text  x="427.12" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt; &gt;::_M_check_len (6,674,129 samples, 0.01%)</title><rect x="1053.9" y="1765" width="0.1" height="15.0" fill="rgb(249,129,50)" rx="2" ry="2" />
<text  x="1056.90" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (16,985,949 samples, 0.03%)</title><rect x="85.9" y="2005" width="0.4" height="15.0" fill="rgb(253,190,12)" rx="2" ry="2" />
<text  x="88.92" y="2015.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnAppendState [], std::default_delete&lt;duckdb::ColumnAppendState&gt;, false&gt;::operator= (5,719,250 samples, 0.01%)</title><rect x="198.6" y="1717" width="0.1" height="15.0" fill="rgb(209,119,49)" rx="2" ry="2" />
<text  x="201.60" y="1727.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::~AllocatedData (49,217,656 samples, 0.10%)</title><rect x="498.1" y="1541" width="1.1" height="15.0" fill="rgb(248,215,36)" rx="2" ry="2" />
<text  x="501.10" y="1551.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::~_Vector_base (5,179,745 samples, 0.01%)</title><rect x="321.7" y="1717" width="0.1" height="15.0" fill="rgb(216,36,14)" rx="2" ry="2" />
<text  x="324.68" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::get_deleter (4,645,521 samples, 0.01%)</title><rect x="835.3" y="1765" width="0.1" height="15.0" fill="rgb(221,86,9)" rx="2" ry="2" />
<text  x="838.31" y="1775.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (25,978,764 samples, 0.05%)</title><rect x="356.0" y="1573" width="0.6" height="15.0" fill="rgb(252,36,34)" rx="2" ry="2" />
<text  x="359.04" y="1583.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::Verify (2,663,447,901 samples, 5.19%)</title><rect x="582.3" y="1877" width="61.3" height="15.0" fill="rgb(223,165,8)" rx="2" ry="2" />
<text  x="585.31" y="1887.5" >duckdb..</text>
</g>
<g >
<title>duckdb::CommonAggregateOptimizer::VisitOperator (61,166,241 samples, 0.12%)</title><rect x="726.5" y="1765" width="1.4" height="15.0" fill="rgb(232,134,0)" rx="2" ry="2" />
<text  x="729.47" y="1775.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::LightweightSemaphore::signal (28,616,028 samples, 0.06%)</title><rect x="1058.5" y="1765" width="0.7" height="15.0" fill="rgb(241,20,26)" rx="2" ry="2" />
<text  x="1061.51" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;::unique_ptr (4,643,644 samples, 0.01%)</title><rect x="918.8" y="1813" width="0.1" height="15.0" fill="rgb(247,226,33)" rx="2" ry="2" />
<text  x="921.83" y="1823.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (10,545,316 samples, 0.02%)</title><rect x="266.8" y="1605" width="0.3" height="15.0" fill="rgb(244,78,16)" rx="2" ry="2" />
<text  x="269.81" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (5,192,071 samples, 0.01%)</title><rect x="45.8" y="2005" width="0.1" height="15.0" fill="rgb(214,80,47)" rx="2" ry="2" />
<text  x="48.77" y="2015.5" ></text>
</g>
<g >
<title>futex_wait (17,978,263 samples, 0.04%)</title><rect x="505.7" y="1749" width="0.4" height="15.0" fill="rgb(213,208,24)" rx="2" ry="2" />
<text  x="508.70" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RenderTree&gt;, void&gt; (6,200,448 samples, 0.01%)</title><rect x="553.4" y="1765" width="0.1" height="15.0" fill="rgb(245,92,51)" rx="2" ry="2" />
<text  x="556.41" y="1775.5" ></text>
</g>
<g >
<title>duckdb::BufferPool::AddToEvictionQueue (49,942,089 samples, 0.10%)</title><rect x="870.3" y="1637" width="1.2" height="15.0" fill="rgb(207,51,48)" rx="2" ry="2" />
<text  x="873.34" y="1647.5" ></text>
</g>
<g >
<title>duckdb::BinaryData::~BinaryData (4,700,456 samples, 0.01%)</title><rect x="582.6" y="1861" width="0.1" height="15.0" fill="rgb(232,174,0)" rx="2" ry="2" />
<text  x="585.64" y="1871.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (5,398,013 samples, 0.01%)</title><rect x="547.2" y="1749" width="0.1" height="15.0" fill="rgb(242,24,45)" rx="2" ry="2" />
<text  x="550.20" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnRefExpression, std::default_delete&lt;duckdb::ColumnRefExpression&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ColumnRefExpression&gt;, void&gt; (6,545,002 samples, 0.01%)</title><rect x="958.8" y="1621" width="0.2" height="15.0" fill="rgb(249,51,14)" rx="2" ry="2" />
<text  x="961.80" y="1631.5" ></text>
</g>
<g >
<title>duckdb::InClauseRewriter::Rewrite (74,700,129 samples, 0.15%)</title><rect x="749.8" y="1797" width="1.8" height="15.0" fill="rgb(246,78,52)" rx="2" ry="2" />
<text  x="752.85" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (12,119,369 samples, 0.02%)</title><rect x="337.6" y="1653" width="0.3" height="15.0" fill="rgb(226,96,34)" rx="2" ry="2" />
<text  x="340.65" y="1663.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (18,754,231 samples, 0.04%)</title><rect x="843.9" y="1781" width="0.5" height="15.0" fill="rgb(225,142,16)" rx="2" ry="2" />
<text  x="846.95" y="1791.5" ></text>
</g>
<g >
<title>write (69,146,420 samples, 0.13%)</title><rect x="247.3" y="1717" width="1.6" height="15.0" fill="rgb(216,126,23)" rx="2" ry="2" />
<text  x="250.34" y="1727.5" ></text>
</g>
<g >
<title>__lsan::CollectLeaksCb (5,639,291 samples, 0.01%)</title><rect x="47.5" y="2021" width="0.2" height="15.0" fill="rgb(248,55,48)" rx="2" ry="2" />
<text  x="50.53" y="2031.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::ResetFromCache (8,529,567 samples, 0.02%)</title><rect x="403.0" y="1685" width="0.2" height="15.0" fill="rgb(234,53,40)" rx="2" ry="2" />
<text  x="405.96" y="1695.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (12,645,457 samples, 0.02%)</title><rect x="190.6" y="1733" width="0.3" height="15.0" fill="rgb(219,158,7)" rx="2" ry="2" />
<text  x="193.64" y="1743.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ExtraValueInfo&gt;::~shared_ptr (14,329,563 samples, 0.03%)</title><rect x="916.0" y="1413" width="0.3" height="15.0" fill="rgb(244,199,50)" rx="2" ry="2" />
<text  x="918.96" y="1423.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::~vector (6,080,069 samples, 0.01%)</title><rect x="335.5" y="1653" width="0.1" height="15.0" fill="rgb(221,83,41)" rx="2" ry="2" />
<text  x="338.49" y="1663.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (5,196,041 samples, 0.01%)</title><rect x="80.5" y="1989" width="0.1" height="15.0" fill="rgb(221,170,46)" rx="2" ry="2" />
<text  x="83.46" y="1999.5" ></text>
</g>
<g >
<title>__dynamic_cast (14,778,705 samples, 0.03%)</title><rect x="184.1" y="2037" width="0.3" height="15.0" fill="rgb(235,225,21)" rx="2" ry="2" />
<text  x="187.07" y="2047.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::check_entry_exit_locking (7,391,541 samples, 0.01%)</title><rect x="367.0" y="1541" width="0.2" height="15.0" fill="rgb(228,215,3)" rx="2" ry="2" />
<text  x="369.99" y="1551.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::~RenderTree (15,119,712 samples, 0.03%)</title><rect x="633.6" y="1749" width="0.3" height="15.0" fill="rgb(232,209,19)" rx="2" ry="2" />
<text  x="636.58" y="1759.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (6,165,053 samples, 0.01%)</title><rect x="108.1" y="1605" width="0.1" height="15.0" fill="rgb(212,139,53)" rx="2" ry="2" />
<text  x="111.09" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RowGroup, std::default_delete&lt;duckdb::RowGroup&gt; &gt;::get_deleter (4,473,551 samples, 0.01%)</title><rect x="458.4" y="1701" width="0.1" height="15.0" fill="rgb(228,91,0)" rx="2" ry="2" />
<text  x="461.43" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_S_max_size (10,821,944 samples, 0.02%)</title><rect x="653.0" y="1685" width="0.3" height="15.0" fill="rgb(222,98,5)" rx="2" ry="2" />
<text  x="656.04" y="1695.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt; (157,549,612 samples, 0.31%)</title><rect x="262.2" y="1445" width="3.6" height="15.0" fill="rgb(247,123,54)" rx="2" ry="2" />
<text  x="265.16" y="1455.5" ></text>
</g>
<g >
<title>vm_area_dup (11,806,439 samples, 0.02%)</title><rect x="1171.6" y="1877" width="0.3" height="15.0" fill="rgb(235,36,41)" rx="2" ry="2" />
<text  x="1174.62" y="1887.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Vector, true&gt;::~vector (164,890,593 samples, 0.32%)</title><rect x="390.3" y="1861" width="3.8" height="15.0" fill="rgb(228,72,41)" rx="2" ry="2" />
<text  x="393.34" y="1871.5" ></text>
</g>
<g >
<title>duckdb::BlockManager::UnregisterBlock (14,299,096 samples, 0.03%)</title><rect x="342.2" y="981" width="0.3" height="15.0" fill="rgb(215,40,2)" rx="2" ry="2" />
<text  x="345.19" y="991.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (8,543,364 samples, 0.02%)</title><rect x="78.7" y="1989" width="0.2" height="15.0" fill="rgb(218,53,7)" rx="2" ry="2" />
<text  x="81.71" y="1999.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::LogicalOperator*, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt; (5,979,015 samples, 0.01%)</title><rect x="771.4" y="1749" width="0.1" height="15.0" fill="rgb(254,29,28)" rx="2" ry="2" />
<text  x="774.40" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (11,204,234 samples, 0.02%)</title><rect x="11.3" y="1957" width="0.2" height="15.0" fill="rgb(251,176,14)" rx="2" ry="2" />
<text  x="14.25" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (9,066,483 samples, 0.02%)</title><rect x="923.6" y="1829" width="0.2" height="15.0" fill="rgb(213,198,47)" rx="2" ry="2" />
<text  x="926.63" y="1839.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt;, true&gt;::~vector (8,460,202 samples, 0.02%)</title><rect x="756.9" y="1765" width="0.2" height="15.0" fill="rgb(233,79,8)" rx="2" ry="2" />
<text  x="759.89" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Binding::Bind (69,493,964 samples, 0.14%)</title><rect x="951.1" y="1637" width="1.6" height="15.0" fill="rgb(252,81,25)" rx="2" ry="2" />
<text  x="954.11" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt; &gt; &gt; (90,110,800 samples, 0.18%)</title><rect x="731.7" y="1733" width="2.1" height="15.0" fill="rgb(209,73,35)" rx="2" ry="2" />
<text  x="734.69" y="1743.5" ></text>
</g>
<g >
<title>duckdb::StringValue::Get[abi:cxx11] (7,884,827 samples, 0.02%)</title><rect x="899.3" y="1653" width="0.1" height="15.0" fill="rgb(241,5,24)" rx="2" ry="2" />
<text  x="902.27" y="1663.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::HTTPState&gt; &gt;::construct&lt;duckdb::HTTPState&gt; (5,542,040 samples, 0.01%)</title><rect x="1040.3" y="1797" width="0.1" height="15.0" fill="rgb(220,142,0)" rx="2" ry="2" />
<text  x="1043.30" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VisitOperator (169,603,729 samples, 0.33%)</title><rect x="842.2" y="1845" width="3.9" height="15.0" fill="rgb(213,29,21)" rx="2" ry="2" />
<text  x="845.23" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::unique_ptr (4,973,467 samples, 0.01%)</title><rect x="933.9" y="1637" width="0.1" height="15.0" fill="rgb(230,187,43)" rx="2" ry="2" />
<text  x="936.89" y="1647.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::RowGroupSegmentTree&gt;::shared_ptr&lt;std::allocator&lt;duckdb::RowGroupSegmentTree&gt;, duckdb::RowGroupCollection&amp;&gt; (23,817,376 samples, 0.05%)</title><rect x="429.2" y="1429" width="0.6" height="15.0" fill="rgb(205,142,20)" rx="2" ry="2" />
<text  x="432.21" y="1439.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::~unique_ptr (10,033,050 samples, 0.02%)</title><rect x="581.7" y="1701" width="0.3" height="15.0" fill="rgb(230,40,54)" rx="2" ry="2" />
<text  x="584.72" y="1711.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::AppendSegmentInternal (49,608,650 samples, 0.10%)</title><rect x="447.2" y="1669" width="1.1" height="15.0" fill="rgb(221,43,32)" rx="2" ry="2" />
<text  x="450.19" y="1679.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::BoundColumnReferenceInfo, true&gt;::~vector (4,968,466 samples, 0.01%)</title><rect x="937.4" y="1701" width="0.2" height="15.0" fill="rgb(229,227,53)" rx="2" ry="2" />
<text  x="940.44" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::~ColumnDataCollectionSegment (26,229,525 samples, 0.05%)</title><rect x="1122.2" y="1717" width="0.6" height="15.0" fill="rgb(213,81,47)" rx="2" ry="2" />
<text  x="1125.21" y="1727.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;::operator (46,709,677 samples, 0.09%)</title><rect x="340.6" y="1221" width="1.1" height="15.0" fill="rgb(252,68,31)" rx="2" ry="2" />
<text  x="343.65" y="1231.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ClientContextLock, std::default_delete&lt;duckdb::ClientContextLock&gt; &gt;::_M_ptr (4,869,364 samples, 0.01%)</title><rect x="1106.5" y="1941" width="0.1" height="15.0" fill="rgb(231,73,46)" rx="2" ry="2" />
<text  x="1109.52" y="1951.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (6,581,819 samples, 0.01%)</title><rect x="960.4" y="1589" width="0.1" height="15.0" fill="rgb(225,46,29)" rx="2" ry="2" />
<text  x="963.36" y="1599.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (137,444,565 samples, 0.27%)</title><rect x="366.1" y="1733" width="3.2" height="15.0" fill="rgb(243,73,52)" rx="2" ry="2" />
<text  x="369.12" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, false&gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt; (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1429" width="1.9" height="15.0" fill="rgb(221,17,4)" rx="2" ry="2" />
<text  x="1120.81" y="1439.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned char [], std::default_delete&lt;unsigned char&gt;, false&gt;::unique_ptr (7,941,660 samples, 0.02%)</title><rect x="585.2" y="1829" width="0.1" height="15.0" fill="rgb(226,5,33)" rx="2" ry="2" />
<text  x="588.16" y="1839.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;, true&gt;::back (4,431,806 samples, 0.01%)</title><rect x="300.4" y="1573" width="0.1" height="15.0" fill="rgb(239,139,54)" rx="2" ry="2" />
<text  x="303.44" y="1583.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, duckdb::ActiveQueryContext*, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt; (5,412,136 samples, 0.01%)</title><rect x="514.7" y="1829" width="0.1" height="15.0" fill="rgb(227,215,22)" rx="2" ry="2" />
<text  x="517.70" y="1839.5" ></text>
</g>
<g >
<title>duckdb::RowGroupAppendState::~RowGroupAppendState (28,711,789 samples, 0.06%)</title><rect x="339.1" y="1477" width="0.7" height="15.0" fill="rgb(213,4,15)" rx="2" ry="2" />
<text  x="342.12" y="1487.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Pin (10,867,709 samples, 0.02%)</title><rect x="443.8" y="1621" width="0.2" height="15.0" fill="rgb(231,101,40)" rx="2" ry="2" />
<text  x="446.76" y="1631.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (5,824,137 samples, 0.01%)</title><rect x="401.7" y="1461" width="0.1" height="15.0" fill="rgb(229,77,35)" rx="2" ry="2" />
<text  x="404.68" y="1471.5" ></text>
</g>
<g >
<title>duckdb::DuckTransaction::Get (34,145,836 samples, 0.07%)</title><rect x="421.4" y="1765" width="0.8" height="15.0" fill="rgb(214,11,0)" rx="2" ry="2" />
<text  x="424.43" y="1775.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::get_block_index_entry_for_index (9,175,192 samples, 0.02%)</title><rect x="343.3" y="917" width="0.2" height="15.0" fill="rgb(210,117,11)" rx="2" ry="2" />
<text  x="346.33" y="927.5" ></text>
</g>
<g >
<title>duckdb::Expression::Equals (9,566,322 samples, 0.02%)</title><rect x="589.9" y="1861" width="0.2" height="15.0" fill="rgb(244,215,47)" rx="2" ry="2" />
<text  x="592.86" y="1871.5" ></text>
</g>
<g >
<title>duckdb::BindContext::GetBinding (11,138,555 samples, 0.02%)</title><rect x="953.3" y="1589" width="0.2" height="15.0" fill="rgb(217,129,50)" rx="2" ry="2" />
<text  x="956.25" y="1599.5" ></text>
</g>
<g >
<title>_raw_spin_lock (6,872,200 samples, 0.01%)</title><rect x="163.5" y="1925" width="0.2" height="15.0" fill="rgb(217,120,13)" rx="2" ry="2" />
<text  x="166.54" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::~vector (5,235,608 samples, 0.01%)</title><rect x="1036.9" y="1797" width="0.1" height="15.0" fill="rgb(241,127,25)" rx="2" ry="2" />
<text  x="1039.88" y="1807.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Serialize (100,065,662 samples, 0.20%)</title><rect x="313.0" y="1653" width="2.3" height="15.0" fill="rgb(245,0,4)" rx="2" ry="2" />
<text  x="315.99" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt;, false&gt;::~unique_ptr (81,109,350 samples, 0.16%)</title><rect x="325.1" y="1589" width="1.9" height="15.0" fill="rgb(226,129,28)" rx="2" ry="2" />
<text  x="328.10" y="1599.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::unique_ptr&lt;duckdb::BoundExpression, std::default_delete&lt;std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt; &gt;, void&gt; (4,970,740 samples, 0.01%)</title><rect x="957.4" y="1717" width="0.2" height="15.0" fill="rgb(254,61,10)" rx="2" ry="2" />
<text  x="960.45" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (7,142,462 samples, 0.01%)</title><rect x="729.2" y="1685" width="0.1" height="15.0" fill="rgb(241,4,30)" rx="2" ry="2" />
<text  x="732.18" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt;::operator= (4,519,856 samples, 0.01%)</title><rect x="812.1" y="1829" width="0.1" height="15.0" fill="rgb(252,65,31)" rx="2" ry="2" />
<text  x="815.14" y="1839.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (30,445,774 samples, 0.06%)</title><rect x="1141.5" y="2005" width="0.7" height="15.0" fill="rgb(231,64,8)" rx="2" ry="2" />
<text  x="1144.53" y="2015.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (6,485,603 samples, 0.01%)</title><rect x="332.3" y="1765" width="0.2" height="15.0" fill="rgb(235,125,47)" rx="2" ry="2" />
<text  x="335.35" y="1775.5" ></text>
</g>
<g >
<title>duckdb::PhysicalDummyScan::~PhysicalDummyScan (4,625,487 samples, 0.01%)</title><rect x="915.5" y="1525" width="0.1" height="15.0" fill="rgb(216,24,12)" rx="2" ry="2" />
<text  x="918.54" y="1535.5" ></text>
</g>
<g >
<title>std::mutex::lock (32,700,040 samples, 0.06%)</title><rect x="505.5" y="1845" width="0.7" height="15.0" fill="rgb(239,6,48)" rx="2" ry="2" />
<text  x="508.49" y="1855.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::BoundColumnRefExpression&gt; &gt; (5,221,476 samples, 0.01%)</title><rect x="587.6" y="1797" width="0.1" height="15.0" fill="rgb(208,178,29)" rx="2" ry="2" />
<text  x="590.58" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (27,112,430 samples, 0.05%)</title><rect x="392.0" y="1477" width="0.6" height="15.0" fill="rgb(234,37,1)" rx="2" ry="2" />
<text  x="394.98" y="1487.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::PendingQueryInternal (24,526,761,456 samples, 47.82%)</title><rect x="542.1" y="1973" width="564.3" height="15.0" fill="rgb(233,194,1)" rx="2" ry="2" />
<text  x="545.13" y="1983.5" >duckdb::ClientContext::PendingQueryInternal</text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_Vector_base (5,860,095 samples, 0.01%)</title><rect x="615.3" y="1749" width="0.1" height="15.0" fill="rgb(251,92,38)" rx="2" ry="2" />
<text  x="618.27" y="1759.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::pair&lt;unsigned long, unsigned long&gt;*, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (69,871,439 samples, 0.14%)</title><rect x="609.8" y="1701" width="1.6" height="15.0" fill="rgb(234,178,44)" rx="2" ry="2" />
<text  x="612.75" y="1711.5" ></text>
</g>
<g >
<title>duckdb::Planner::~Planner (100,159,591 samples, 0.20%)</title><rect x="1029.8" y="1893" width="2.3" height="15.0" fill="rgb(224,112,24)" rx="2" ry="2" />
<text  x="1032.82" y="1903.5" ></text>
</g>
<g >
<title>duckdb::FilterPullup::Rewrite (14,470,851 samples, 0.03%)</title><rect x="744.0" y="1749" width="0.4" height="15.0" fill="rgb(216,144,40)" rx="2" ry="2" />
<text  x="747.02" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Connection::Query (4,676,894 samples, 0.01%)</title><rect x="76.6" y="2021" width="0.1" height="15.0" fill="rgb(221,92,38)" rx="2" ry="2" />
<text  x="79.63" y="2031.5" ></text>
</g>
<g >
<title>duckdb::VectorBuffer::VectorBuffer (7,206,470 samples, 0.01%)</title><rect x="368.8" y="1669" width="0.2" height="15.0" fill="rgb(243,138,5)" rx="2" ry="2" />
<text  x="371.81" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (38,447,958 samples, 0.07%)</title><rect x="41.0" y="2005" width="0.9" height="15.0" fill="rgb(253,82,13)" rx="2" ry="2" />
<text  x="43.99" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (13,299,563 samples, 0.03%)</title><rect x="85.6" y="2005" width="0.3" height="15.0" fill="rgb(250,111,6)" rx="2" ry="2" />
<text  x="88.59" y="2015.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::TreeNode::~TreeNode (8,895,623 samples, 0.02%)</title><rect x="1089.4" y="1621" width="0.2" height="15.0" fill="rgb(212,73,4)" rx="2" ry="2" />
<text  x="1092.44" y="1631.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::FoldableConstantMatcher, std::default_delete&lt;duckdb::FoldableConstantMatcher&gt; &gt;::__uniq_ptr_impl (5,402,904 samples, 0.01%)</title><rect x="793.0" y="1797" width="0.1" height="15.0" fill="rgb(226,36,24)" rx="2" ry="2" />
<text  x="795.99" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::emplace_back&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; (18,916,405 samples, 0.04%)</title><rect x="853.6" y="1765" width="0.4" height="15.0" fill="rgb(218,199,31)" rx="2" ry="2" />
<text  x="856.57" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::AllocateEmptyBlock (16,110,777 samples, 0.03%)</title><rect x="381.4" y="1829" width="0.3" height="15.0" fill="rgb(213,26,3)" rx="2" ry="2" />
<text  x="384.36" y="1839.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Reset (16,756,831 samples, 0.03%)</title><rect x="475.6" y="1781" width="0.4" height="15.0" fill="rgb(231,18,9)" rx="2" ry="2" />
<text  x="478.61" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (6,356,715 samples, 0.01%)</title><rect x="362.3" y="1781" width="0.2" height="15.0" fill="rgb(253,206,29)" rx="2" ry="2" />
<text  x="365.32" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnAppendState [], std::default_delete&lt;duckdb::ColumnAppendState []&gt; &gt;::~unique_ptr (32,186,832 samples, 0.06%)</title><rect x="233.6" y="1733" width="0.7" height="15.0" fill="rgb(207,103,4)" rx="2" ry="2" />
<text  x="236.58" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;::_M_v (6,448,462 samples, 0.01%)</title><rect x="718.2" y="1749" width="0.1" height="15.0" fill="rgb(221,210,35)" rx="2" ry="2" />
<text  x="721.17" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PipelineInitializeTask, std::default_delete&lt;duckdb::PipelineInitializeTask&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PipelineInitializeTask&gt;, void&gt; (6,405,814 samples, 0.01%)</title><rect x="1059.5" y="1797" width="0.2" height="15.0" fill="rgb(210,7,28)" rx="2" ry="2" />
<text  x="1062.54" y="1807.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (6,124,776 samples, 0.01%)</title><rect x="1025.2" y="1765" width="0.2" height="15.0" fill="rgb(212,179,3)" rx="2" ry="2" />
<text  x="1028.21" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (5,389,014 samples, 0.01%)</title><rect x="617.2" y="1669" width="0.1" height="15.0" fill="rgb(219,52,18)" rx="2" ry="2" />
<text  x="620.15" y="1679.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (13,260,837 samples, 0.03%)</title><rect x="386.7" y="1829" width="0.3" height="15.0" fill="rgb(235,174,24)" rx="2" ry="2" />
<text  x="389.71" y="1839.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;::operator (13,087,728 samples, 0.03%)</title><rect x="581.7" y="1733" width="0.3" height="15.0" fill="rgb(228,118,32)" rx="2" ry="2" />
<text  x="584.65" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Vector, true&gt;::~vector (66,950,372 samples, 0.13%)</title><rect x="297.3" y="1701" width="1.5" height="15.0" fill="rgb(248,59,46)" rx="2" ry="2" />
<text  x="300.28" y="1711.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (13,216,471 samples, 0.03%)</title><rect x="1049.4" y="1749" width="0.3" height="15.0" fill="rgb(235,2,10)" rx="2" ry="2" />
<text  x="1052.44" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BoundColumnReferenceInfo, std::allocator&lt;duckdb::BoundColumnReferenceInfo&gt; &gt;::push_back (18,370,754 samples, 0.04%)</title><rect x="955.7" y="1653" width="0.4" height="15.0" fill="rgb(218,193,53)" rx="2" ry="2" />
<text  x="958.66" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt; &gt;::operator= (6,333,596 samples, 0.01%)</title><rect x="377.5" y="1813" width="0.2" height="15.0" fill="rgb(217,103,41)" rx="2" ry="2" />
<text  x="380.53" y="1823.5" ></text>
</g>
<g >
<title>duckdb::EntryIndex::GetEntry (11,974,696 samples, 0.02%)</title><rect x="1044.1" y="1845" width="0.3" height="15.0" fill="rgb(205,150,16)" rx="2" ry="2" />
<text  x="1047.12" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (5,548,278 samples, 0.01%)</title><rect x="438.2" y="1429" width="0.1" height="15.0" fill="rgb(227,134,38)" rx="2" ry="2" />
<text  x="441.19" y="1439.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::ResetFromCache (21,238,270 samples, 0.04%)</title><rect x="370.1" y="1749" width="0.5" height="15.0" fill="rgb(233,111,39)" rx="2" ry="2" />
<text  x="373.09" y="1759.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::ToStream (1,189,002,847 samples, 2.32%)</title><rect x="554.0" y="1829" width="27.4" height="15.0" fill="rgb(228,170,21)" rx="2" ry="2" />
<text  x="557.03" y="1839.5" >d..</text>
</g>
<g >
<title>std::__shared_count&lt; (15,582,279 samples, 0.03%)</title><rect x="1050.7" y="1749" width="0.4" height="15.0" fill="rgb(243,210,54)" rx="2" ry="2" />
<text  x="1053.71" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::GlobalSourceState, std::default_delete&lt;duckdb::GlobalSourceState&gt; &gt;::unique_ptr&lt;duckdb::PhysicalColumnDataScanState, std::default_delete&lt;duckdb::PhysicalColumnDataScanState&gt;, void&gt; (14,102,345 samples, 0.03%)</title><rect x="92.2" y="1685" width="0.3" height="15.0" fill="rgb(210,30,2)" rx="2" ry="2" />
<text  x="95.18" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt; &gt;::unique_ptr&lt;duckdb::PhysicalDummyScan, std::default_delete&lt;duckdb::PhysicalDummyScan&gt;, void&gt; (8,955,267 samples, 0.02%)</title><rect x="909.2" y="1733" width="0.2" height="15.0" fill="rgb(231,158,51)" rx="2" ry="2" />
<text  x="912.16" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCheckpointer::WriteToDisk (66,413,236 samples, 0.13%)</title><rect x="1117.9" y="1109" width="1.5" height="15.0" fill="rgb(247,44,36)" rx="2" ry="2" />
<text  x="1120.85" y="1119.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RegexOptimizationRule, std::default_delete&lt;duckdb::RegexOptimizationRule&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RegexOptimizationRule&gt;, void&gt; (6,330,101 samples, 0.01%)</title><rect x="820.5" y="1845" width="0.2" height="15.0" fill="rgb(209,96,47)" rx="2" ry="2" />
<text  x="823.53" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt; &gt; (17,929,065 samples, 0.03%)</title><rect x="532.0" y="1717" width="0.4" height="15.0" fill="rgb(250,226,42)" rx="2" ry="2" />
<text  x="534.98" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_mutex_lock (8,616,662 samples, 0.02%)</title><rect x="877.5" y="1237" width="0.2" height="15.0" fill="rgb(227,207,31)" rx="2" ry="2" />
<text  x="880.47" y="1247.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;::~pair (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1621" width="1.9" height="15.0" fill="rgb(215,29,47)" rx="2" ry="2" />
<text  x="1120.81" y="1631.5" ></text>
</g>
<g >
<title>duckdb::ExpressionHeuristics::VisitOperator (6,301,466 samples, 0.01%)</title><rect x="734.3" y="1701" width="0.2" height="15.0" fill="rgb(220,148,34)" rx="2" ry="2" />
<text  x="737.35" y="1711.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (4,539,080 samples, 0.01%)</title><rect x="618.6" y="1781" width="0.1" height="15.0" fill="rgb(243,170,42)" rx="2" ry="2" />
<text  x="621.64" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (21,352,358 samples, 0.04%)</title><rect x="666.6" y="1701" width="0.5" height="15.0" fill="rgb(252,132,16)" rx="2" ry="2" />
<text  x="669.64" y="1711.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::RowGroupSegmentTree&gt; &gt;::construct&lt;duckdb::RowGroupSegmentTree, duckdb::RowGroupCollection&amp;&gt; (7,242,415 samples, 0.01%)</title><rect x="429.5" y="1365" width="0.2" height="15.0" fill="rgb(229,115,0)" rx="2" ry="2" />
<text  x="432.51" y="1375.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::QueryProfiler,  (5,147,383 samples, 0.01%)</title><rect x="713.7" y="1813" width="0.1" height="15.0" fill="rgb(242,55,29)" rx="2" ry="2" />
<text  x="716.65" y="1823.5" ></text>
</g>
<g >
<title>duckdb::VectorBuffer::~VectorBuffer (4,440,876 samples, 0.01%)</title><rect x="499.2" y="1541" width="0.1" height="15.0" fill="rgb(219,211,6)" rx="2" ry="2" />
<text  x="502.23" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="773" width="0.1" height="15.0" fill="rgb(207,5,2)" rx="2" ry="2" />
<text  x="14.25" y="783.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::MetaPipeline&gt;::~shared_ptr (51,367,091 samples, 0.10%)</title><rect x="1096.0" y="1861" width="1.2" height="15.0" fill="rgb(228,73,40)" rx="2" ry="2" />
<text  x="1099.03" y="1871.5" ></text>
</g>
<g >
<title>duckdb::VirtualFileSystem::GetFileSize (19,488,001 samples, 0.04%)</title><rect x="190.5" y="1765" width="0.5" height="15.0" fill="rgb(242,32,54)" rx="2" ry="2" />
<text  x="193.55" y="1775.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::end (17,161,531 samples, 0.03%)</title><rect x="687.2" y="1813" width="0.4" height="15.0" fill="rgb(232,46,22)" rx="2" ry="2" />
<text  x="690.24" y="1823.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, duckdb::ChunkInfo*, std::default_delete&lt;duckdb::ChunkInfo&gt; &gt; (4,375,002 samples, 0.01%)</title><rect x="244.8" y="1029" width="0.1" height="15.0" fill="rgb(210,78,27)" rx="2" ry="2" />
<text  x="247.76" y="1039.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;::~unordered_set (7,886,491 samples, 0.02%)</title><rect x="484.9" y="1749" width="0.1" height="15.0" fill="rgb(248,1,48)" rx="2" ry="2" />
<text  x="487.86" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (4,864,927 samples, 0.01%)</title><rect x="108.1" y="1493" width="0.1" height="15.0" fill="rgb(224,183,8)" rx="2" ry="2" />
<text  x="111.11" y="1503.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ClientContextLock, std::default_delete&lt;duckdb::ClientContextLock&gt; &gt;::get (6,773,531 samples, 0.01%)</title><rect x="1106.5" y="1957" width="0.2" height="15.0" fill="rgb(206,120,0)" rx="2" ry="2" />
<text  x="1109.51" y="1967.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::BufferHandle, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt; &gt;::operator[] (36,632,739 samples, 0.07%)</title><rect x="887.3" y="1733" width="0.9" height="15.0" fill="rgb(244,73,34)" rx="2" ry="2" />
<text  x="890.31" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (6,165,053 samples, 0.01%)</title><rect x="108.1" y="1621" width="0.1" height="15.0" fill="rgb(217,187,31)" rx="2" ry="2" />
<text  x="111.09" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_node (24,107,896 samples, 0.05%)</title><rect x="699.3" y="1765" width="0.5" height="15.0" fill="rgb(248,172,54)" rx="2" ry="2" />
<text  x="702.29" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (15,016,496 samples, 0.03%)</title><rect x="595.8" y="1685" width="0.3" height="15.0" fill="rgb(220,206,39)" rx="2" ry="2" />
<text  x="598.79" y="1695.5" ></text>
</g>
<g >
<title>std::pop_heap&lt;__gnu_cxx::__normal_iterator&lt;QSymbol*, std::vector&lt;QSymbol, std::allocator&lt;QSymbol&gt; &gt; &gt;, buildSymbolTable (5,596,613 samples, 0.01%)</title><rect x="1118.8" y="997" width="0.2" height="15.0" fill="rgb(243,225,34)" rx="2" ry="2" />
<text  x="1121.85" y="1007.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;unsigned long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt; &gt; (25,041,831 samples, 0.05%)</title><rect x="779.9" y="1797" width="0.6" height="15.0" fill="rgb(246,106,6)" rx="2" ry="2" />
<text  x="782.92" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (7,861,693 samples, 0.02%)</title><rect x="689.5" y="1765" width="0.2" height="15.0" fill="rgb(242,204,10)" rx="2" ry="2" />
<text  x="692.55" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::~vector (100,091,365 samples, 0.20%)</title><rect x="481.5" y="1717" width="2.3" height="15.0" fill="rgb(245,75,40)" rx="2" ry="2" />
<text  x="484.46" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned long [], std::default_delete&lt;unsigned long []&gt; &gt;::~unique_ptr (4,353,486 samples, 0.01%)</title><rect x="481.2" y="1445" width="0.1" height="15.0" fill="rgb(226,173,39)" rx="2" ry="2" />
<text  x="484.20" y="1455.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt;, true&gt;::~unique_ptr (15,753,776 samples, 0.03%)</title><rect x="1077.8" y="1781" width="0.3" height="15.0" fill="rgb(242,178,40)" rx="2" ry="2" />
<text  x="1080.76" y="1791.5" ></text>
</g>
<g >
<title>duckdb::PhysicalPlanGenerator::PreserveInsertionOrder (5,249,417 samples, 0.01%)</title><rect x="852.9" y="1829" width="0.1" height="15.0" fill="rgb(205,109,30)" rx="2" ry="2" />
<text  x="855.93" y="1839.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (5,398,013 samples, 0.01%)</title><rect x="547.2" y="1653" width="0.1" height="15.0" fill="rgb(243,161,25)" rx="2" ry="2" />
<text  x="550.20" y="1663.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::MetaPipeline, std::allocator&lt;duckdb::MetaPipeline&gt;,  (112,336,334 samples, 0.22%)</title><rect x="1093.1" y="1781" width="2.6" height="15.0" fill="rgb(221,104,12)" rx="2" ry="2" />
<text  x="1096.08" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt;::operator bool (7,146,446 samples, 0.01%)</title><rect x="512.1" y="1909" width="0.1" height="15.0" fill="rgb(225,179,41)" rx="2" ry="2" />
<text  x="515.07" y="1919.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::unique_ptr (4,434,281 samples, 0.01%)</title><rect x="856.3" y="1781" width="0.1" height="15.0" fill="rgb(220,23,11)" rx="2" ry="2" />
<text  x="859.31" y="1791.5" ></text>
</g>
<g >
<title>do_syscall_64 (20,252,747 samples, 0.04%)</title><rect x="505.7" y="1797" width="0.4" height="15.0" fill="rgb(224,164,53)" rx="2" ry="2" />
<text  x="508.67" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ColumnRefExpression::Hash (13,755,004 samples, 0.03%)</title><rect x="956.5" y="1621" width="0.3" height="15.0" fill="rgb(225,31,34)" rx="2" ry="2" />
<text  x="959.50" y="1631.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::CreatePreparedStatement (6,393,540 samples, 0.01%)</title><rect x="1109.3" y="1845" width="0.2" height="15.0" fill="rgb(230,182,5)" rx="2" ry="2" />
<text  x="1112.34" y="1855.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ValidityScanState&gt; (10,655,661 samples, 0.02%)</title><rect x="214.2" y="1589" width="0.3" height="15.0" fill="rgb(221,182,30)" rx="2" ry="2" />
<text  x="217.21" y="1599.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::dequeue&lt;duckdb::BufferEvictionNode&gt; (22,934,555 samples, 0.04%)</title><rect x="343.1" y="933" width="0.5" height="15.0" fill="rgb(231,60,45)" rx="2" ry="2" />
<text  x="346.11" y="943.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; (11,098,546 samples, 0.02%)</title><rect x="999.7" y="1653" width="0.3" height="15.0" fill="rgb(240,148,4)" rx="2" ry="2" />
<text  x="1002.71" y="1663.5" ></text>
</g>
<g >
<title>duckdb::BufferedSerializer::~BufferedSerializer (4,552,497 samples, 0.01%)</title><rect x="593.1" y="1781" width="0.1" height="15.0" fill="rgb(224,49,8)" rx="2" ry="2" />
<text  x="596.05" y="1791.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (9,586,822 samples, 0.02%)</title><rect x="556.2" y="1797" width="0.2" height="15.0" fill="rgb(212,126,13)" rx="2" ry="2" />
<text  x="559.15" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt; &gt; &gt;::~vector (22,986,002 samples, 0.04%)</title><rect x="1096.2" y="1717" width="0.5" height="15.0" fill="rgb(245,182,40)" rx="2" ry="2" />
<text  x="1099.17" y="1727.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetEntry (54,404,344 samples, 0.11%)</title><rect x="1043.3" y="1861" width="1.3" height="15.0" fill="rgb(225,35,50)" rx="2" ry="2" />
<text  x="1046.34" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::FunctionExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (6,832,384 samples, 0.01%)</title><rect x="797.3" y="1845" width="0.1" height="15.0" fill="rgb(226,8,34)" rx="2" ry="2" />
<text  x="800.25" y="1855.5" ></text>
</g>
<g >
<title>duckdb::LogicalProjection::GetName[abi:cxx11] (6,842,273 samples, 0.01%)</title><rect x="596.7" y="1749" width="0.1" height="15.0" fill="rgb(226,223,50)" rx="2" ry="2" />
<text  x="599.66" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::PreparedStatementData&gt; &gt;::destroy&lt;duckdb::PreparedStatementData&gt; (604,960,940 samples, 1.18%)</title><rect x="337.6" y="1733" width="13.9" height="15.0" fill="rgb(239,76,34)" rx="2" ry="2" />
<text  x="340.63" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::Value&gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (7,423,567 samples, 0.01%)</title><rect x="373.8" y="1861" width="0.2" height="15.0" fill="rgb(244,151,53)" rx="2" ry="2" />
<text  x="376.79" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Event::Finish (586,085,039 samples, 1.14%)</title><rect x="405.6" y="1813" width="13.5" height="15.0" fill="rgb(227,75,32)" rx="2" ry="2" />
<text  x="408.58" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Planner::CreatePlan (4,448,054,104 samples, 8.67%)</title><rect x="925.2" y="1877" width="102.3" height="15.0" fill="rgb(244,187,10)" rx="2" ry="2" />
<text  x="928.19" y="1887.5" >duckdb::Plan..</text>
</g>
<g >
<title>std::function&lt;void  (4,675,324 samples, 0.01%)</title><rect x="552.4" y="1781" width="0.1" height="15.0" fill="rgb(252,187,52)" rx="2" ry="2" />
<text  x="555.42" y="1791.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_pbump (4,597,425 samples, 0.01%)</title><rect x="1184.8" y="2037" width="0.1" height="15.0" fill="rgb(227,157,7)" rx="2" ry="2" />
<text  x="1187.78" y="2047.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (9,631,644 samples, 0.02%)</title><rect x="959.9" y="1589" width="0.2" height="15.0" fill="rgb(226,201,17)" rx="2" ry="2" />
<text  x="962.87" y="1599.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::~unique_ptr (7,018,053 samples, 0.01%)</title><rect x="824.8" y="1877" width="0.2" height="15.0" fill="rgb(240,123,51)" rx="2" ry="2" />
<text  x="827.84" y="1887.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt; (96,495,351 samples, 0.19%)</title><rect x="208.3" y="1445" width="2.3" height="15.0" fill="rgb(223,51,33)" rx="2" ry="2" />
<text  x="211.35" y="1455.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (16,322,380 samples, 0.03%)</title><rect x="99.0" y="1749" width="0.4" height="15.0" fill="rgb(254,28,29)" rx="2" ry="2" />
<text  x="102.03" y="1759.5" ></text>
</g>
<g >
<title>duckdb::LogicalProjection::GetTableIndex (6,056,586 samples, 0.01%)</title><rect x="757.9" y="1781" width="0.1" height="15.0" fill="rgb(216,85,2)" rx="2" ry="2" />
<text  x="760.86" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (9,714,383 samples, 0.02%)</title><rect x="631.2" y="1653" width="0.2" height="15.0" fill="rgb(233,217,18)" rx="2" ry="2" />
<text  x="634.16" y="1663.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::vector (13,351,687 samples, 0.03%)</title><rect x="1101.4" y="1861" width="0.3" height="15.0" fill="rgb(206,178,31)" rx="2" ry="2" />
<text  x="1104.36" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ChunkInfo, std::default_delete&lt;duckdb::ChunkInfo&gt;, true&gt;::~unique_ptr (18,988,539 samples, 0.04%)</title><rect x="244.6" y="1093" width="0.4" height="15.0" fill="rgb(208,151,20)" rx="2" ry="2" />
<text  x="247.58" y="1103.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::HTTPState,  (10,291,689 samples, 0.02%)</title><rect x="1040.3" y="1845" width="0.2" height="15.0" fill="rgb(233,216,45)" rx="2" ry="2" />
<text  x="1043.28" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int []&gt; &gt;::operator= (5,808,054 samples, 0.01%)</title><rect x="202.3" y="1493" width="0.2" height="15.0" fill="rgb(226,169,43)" rx="2" ry="2" />
<text  x="205.34" y="1503.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnAppendState*, duckdb::ColumnAppendState&gt; (8,878,460 samples, 0.02%)</title><rect x="234.1" y="1653" width="0.2" height="15.0" fill="rgb(243,160,30)" rx="2" ry="2" />
<text  x="237.05" y="1663.5" ></text>
</g>
<g >
<title>duckdb::BlockHandle::Load (5,611,830 samples, 0.01%)</title><rect x="872.0" y="1637" width="0.1" height="15.0" fill="rgb(222,54,54)" rx="2" ry="2" />
<text  x="874.99" y="1647.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (6,623,216 samples, 0.01%)</title><rect x="35.9" y="1989" width="0.1" height="15.0" fill="rgb(227,190,24)" rx="2" ry="2" />
<text  x="38.90" y="1999.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::Binder, std::allocator&lt;duckdb::Binder&gt;,  (53,912,114 samples, 0.11%)</title><rect x="984.9" y="1733" width="1.2" height="15.0" fill="rgb(224,169,48)" rx="2" ry="2" />
<text  x="987.88" y="1743.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::CreateEmptyType (26,674,063 samples, 0.05%)</title><rect x="424.7" y="1541" width="0.6" height="15.0" fill="rgb(224,32,3)" rx="2" ry="2" />
<text  x="427.72" y="1551.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; (23,513,706 samples, 0.05%)</title><rect x="754.9" y="1717" width="0.5" height="15.0" fill="rgb(226,181,38)" rx="2" ry="2" />
<text  x="757.90" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryNode, std::default_delete&lt;duckdb::QueryNode&gt; &gt;::unique_ptr&lt;duckdb::SelectNode, std::default_delete&lt;duckdb::SelectNode&gt;, void&gt; (11,663,295 samples, 0.02%)</title><rect x="534.4" y="1749" width="0.3" height="15.0" fill="rgb(228,221,40)" rx="2" ry="2" />
<text  x="537.39" y="1759.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RenderTree, unsigned long&amp;, unsigned long&amp;&gt; (5,196,041 samples, 0.01%)</title><rect x="80.5" y="2021" width="0.1" height="15.0" fill="rgb(254,229,11)" rx="2" ry="2" />
<text  x="83.46" y="2031.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_free (42,839,045 samples, 0.08%)</title><rect x="242.6" y="517" width="1.0" height="15.0" fill="rgb(228,114,38)" rx="2" ry="2" />
<text  x="245.63" y="527.5" ></text>
</g>
<g >
<title>duckdb::TableStatistics::GetLock (7,918,507 samples, 0.02%)</title><rect x="231.2" y="1653" width="0.1" height="15.0" fill="rgb(212,102,20)" rx="2" ry="2" />
<text  x="234.16" y="1663.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;duckdb::LogicalType*, unsigned long&gt; (5,467,156 samples, 0.01%)</title><rect x="1020.8" y="1781" width="0.1" height="15.0" fill="rgb(215,87,40)" rx="2" ry="2" />
<text  x="1023.77" y="1791.5" ></text>
</g>
<g >
<title>std::function&lt;void  (2,171,811,034 samples, 4.23%)</title><rect x="722.8" y="1861" width="50.0" height="15.0" fill="rgb(254,62,40)" rx="2" ry="2" />
<text  x="725.80" y="1871.5" >std::..</text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt;::~unique_ptr (21,884,810 samples, 0.04%)</title><rect x="287.9" y="1493" width="0.5" height="15.0" fill="rgb(214,21,9)" rx="2" ry="2" />
<text  x="290.91" y="1503.5" ></text>
</g>
<g >
<title>[unknown] (89,852,445 samples, 0.18%)</title><rect x="145.3" y="2005" width="2.1" height="15.0" fill="rgb(243,174,21)" rx="2" ry="2" />
<text  x="148.34" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (91,109,257 samples, 0.18%)</title><rect x="708.5" y="1813" width="2.0" height="15.0" fill="rgb(209,205,19)" rx="2" ry="2" />
<text  x="711.45" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::CreateEmptyType (8,963,126 samples, 0.02%)</title><rect x="454.1" y="1461" width="0.2" height="15.0" fill="rgb(221,202,25)" rx="2" ry="2" />
<text  x="457.10" y="1471.5" ></text>
</g>
<g >
<title>__lru_cache_add (4,742,784 samples, 0.01%)</title><rect x="73.8" y="1813" width="0.1" height="15.0" fill="rgb(254,180,25)" rx="2" ry="2" />
<text  x="76.79" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_bucket_begin (31,775,709 samples, 0.06%)</title><rect x="677.0" y="1733" width="0.8" height="15.0" fill="rgb(205,114,12)" rx="2" ry="2" />
<text  x="680.02" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCheckpointer::ScanSegments (13,823,983 samples, 0.03%)</title><rect x="1117.9" y="1077" width="0.3" height="15.0" fill="rgb(237,19,15)" rx="2" ry="2" />
<text  x="1120.87" y="1087.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;duckdb::ColumnScanState*, unsigned long&gt; (5,030,416 samples, 0.01%)</title><rect x="223.8" y="1637" width="0.1" height="15.0" fill="rgb(217,120,40)" rx="2" ry="2" />
<text  x="226.77" y="1647.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_sync (4,640,671 samples, 0.01%)</title><rect x="88.5" y="1989" width="0.1" height="15.0" fill="rgb(216,4,30)" rx="2" ry="2" />
<text  x="91.49" y="1999.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformExpressionList (128,852,366 samples, 0.25%)</title><rect x="527.8" y="1749" width="3.0" height="15.0" fill="rgb(222,53,43)" rx="2" ry="2" />
<text  x="530.81" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::InitializeState (9,783,752 samples, 0.02%)</title><rect x="489.9" y="1733" width="0.2" height="15.0" fill="rgb(235,153,53)" rx="2" ry="2" />
<text  x="492.88" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (4,900,080 samples, 0.01%)</title><rect x="108.7" y="1701" width="0.1" height="15.0" fill="rgb(234,60,6)" rx="2" ry="2" />
<text  x="111.70" y="1711.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::Binding&gt;::operator (23,137,622 samples, 0.05%)</title><rect x="1016.7" y="1525" width="0.6" height="15.0" fill="rgb(244,140,32)" rx="2" ry="2" />
<text  x="1019.73" y="1535.5" ></text>
</g>
<g >
<title>duckdb::Deliminator::Optimize (29,040,842 samples, 0.06%)</title><rect x="730.2" y="1813" width="0.7" height="15.0" fill="rgb(230,73,6)" rx="2" ry="2" />
<text  x="733.19" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (6,571,477 samples, 0.01%)</title><rect x="335.8" y="1621" width="0.1" height="15.0" fill="rgb(211,110,31)" rx="2" ry="2" />
<text  x="338.78" y="1631.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::EndOperator (9,693,105 samples, 0.02%)</title><rect x="105.7" y="1765" width="0.2" height="15.0" fill="rgb(251,118,42)" rx="2" ry="2" />
<text  x="108.70" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (54,563,233 samples, 0.11%)</title><rect x="401.1" y="1605" width="1.3" height="15.0" fill="rgb(252,50,28)" rx="2" ry="2" />
<text  x="404.12" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::~TemplatedValidityMask (10,826,048 samples, 0.02%)</title><rect x="374.7" y="1781" width="0.3" height="15.0" fill="rgb(249,229,53)" rx="2" ry="2" />
<text  x="377.72" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::unique_ptr&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt; &gt;, void&gt; (6,743,308 samples, 0.01%)</title><rect x="583.5" y="1845" width="0.1" height="15.0" fill="rgb(235,118,11)" rx="2" ry="2" />
<text  x="586.45" y="1855.5" ></text>
</g>
<g >
<title>duckdb::TableAppendState::~TableAppendState (33,486,269 samples, 0.07%)</title><rect x="233.6" y="1781" width="0.8" height="15.0" fill="rgb(206,51,4)" rx="2" ry="2" />
<text  x="236.58" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (8,749,225 samples, 0.02%)</title><rect x="1015.3" y="1813" width="0.2" height="15.0" fill="rgb(214,132,21)" rx="2" ry="2" />
<text  x="1018.27" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ChunkMetaData::~ChunkMetaData (6,698,999 samples, 0.01%)</title><rect x="869.8" y="1749" width="0.1" height="15.0" fill="rgb(206,195,37)" rx="2" ry="2" />
<text  x="872.77" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_no_sample (136,711,926 samples, 0.27%)</title><rect x="874.9" y="1445" width="3.2" height="15.0" fill="rgb(253,78,15)" rx="2" ry="2" />
<text  x="877.94" y="1455.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (4,374,273 samples, 0.01%)</title><rect x="955.4" y="1557" width="0.1" height="15.0" fill="rgb(205,141,18)" rx="2" ry="2" />
<text  x="958.41" y="1567.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::InitializeScan (27,064,511 samples, 0.05%)</title><rect x="468.6" y="1797" width="0.6" height="15.0" fill="rgb(238,36,1)" rx="2" ry="2" />
<text  x="471.57" y="1807.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::CreateEntry (63,068,374 samples, 0.12%)</title><rect x="1112.9" y="1829" width="1.5" height="15.0" fill="rgb(241,0,54)" rx="2" ry="2" />
<text  x="1115.92" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (16,792,841 samples, 0.03%)</title><rect x="572.5" y="1749" width="0.4" height="15.0" fill="rgb(250,28,43)" rx="2" ry="2" />
<text  x="575.54" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::EqualOrNullSimplification, std::default_delete&lt;duckdb::EqualOrNullSimplification&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::EqualOrNullSimplification&gt;, void&gt; (5,506,103 samples, 0.01%)</title><rect x="809.9" y="1861" width="0.1" height="15.0" fill="rgb(240,102,50)" rx="2" ry="2" />
<text  x="812.89" y="1871.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (125,023,620 samples, 0.24%)</title><rect x="1093.0" y="1797" width="2.9" height="15.0" fill="rgb(219,139,9)" rx="2" ry="2" />
<text  x="1096.02" y="1807.5" ></text>
</g>
<g >
<title>__asan_region_is_poisoned (7,854,061 samples, 0.02%)</title><rect x="1184.1" y="2021" width="0.2" height="15.0" fill="rgb(220,42,12)" rx="2" ry="2" />
<text  x="1187.08" y="2031.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorCacheBuffer,  (150,176,171 samples, 0.29%)</title><rect x="365.9" y="1765" width="3.5" height="15.0" fill="rgb(219,41,5)" rx="2" ry="2" />
<text  x="368.94" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (31,935,897 samples, 0.06%)</title><rect x="901.4" y="1557" width="0.8" height="15.0" fill="rgb(241,121,32)" rx="2" ry="2" />
<text  x="904.42" y="1567.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (31,679,149 samples, 0.06%)</title><rect x="829.5" y="1653" width="0.8" height="15.0" fill="rgb(247,187,29)" rx="2" ry="2" />
<text  x="832.53" y="1663.5" ></text>
</g>
<g >
<title>duckdb::Catalog::GetEntry&lt;duckdb::TableCatalogEntry&gt; (1,012,748,471 samples, 1.97%)</title><rect x="987.4" y="1813" width="23.3" height="15.0" fill="rgb(225,159,0)" rx="2" ry="2" />
<text  x="990.39" y="1823.5" >d..</text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (132,903,578 samples, 0.26%)</title><rect x="717.1" y="1845" width="3.1" height="15.0" fill="rgb(220,198,29)" rx="2" ry="2" />
<text  x="720.10" y="1855.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::ParamsToString[abi:cxx11] (8,507,214 samples, 0.02%)</title><rect x="596.5" y="1749" width="0.2" height="15.0" fill="rgb(211,4,29)" rx="2" ry="2" />
<text  x="599.46" y="1759.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (9,739,573 samples, 0.02%)</title><rect x="1182.2" y="2021" width="0.2" height="15.0" fill="rgb(206,177,39)" rx="2" ry="2" />
<text  x="1185.15" y="2031.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PipelineRenderNode, std::default_delete&lt;duckdb::PipelineRenderNode&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PipelineRenderNode&gt;, void&gt; (6,489,423 samples, 0.01%)</title><rect x="1069.6" y="1749" width="0.2" height="15.0" fill="rgb(240,214,30)" rx="2" ry="2" />
<text  x="1072.61" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt;, true&gt;::operator= (14,200,648 samples, 0.03%)</title><rect x="808.3" y="1845" width="0.4" height="15.0" fill="rgb(225,219,0)" rx="2" ry="2" />
<text  x="811.34" y="1855.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::DuckTransaction*, std::default_delete&lt;duckdb::DuckTransaction&gt; &gt;::tuple&lt;duckdb::DuckTransaction*&amp;, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; (5,541,370 samples, 0.01%)</title><rect x="322.5" y="1765" width="0.1" height="15.0" fill="rgb(245,163,8)" rx="2" ry="2" />
<text  x="325.52" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (4,585,735 samples, 0.01%)</title><rect x="778.5" y="1765" width="0.1" height="15.0" fill="rgb(228,193,45)" rx="2" ry="2" />
<text  x="781.47" y="1775.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;unsigned long const*, unsigned long*&gt; (18,063,435 samples, 0.04%)</title><rect x="672.7" y="1717" width="0.4" height="15.0" fill="rgb(228,43,16)" rx="2" ry="2" />
<text  x="675.70" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::operator= (6,718,426 samples, 0.01%)</title><rect x="386.0" y="1861" width="0.1" height="15.0" fill="rgb(226,19,0)" rx="2" ry="2" />
<text  x="388.99" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CatalogEntry, std::default_delete&lt;duckdb::CatalogEntry&gt;, true&gt;::~unique_ptr (6,965,002 samples, 0.01%)</title><rect x="1005.5" y="1701" width="0.2" height="15.0" fill="rgb(248,219,14)" rx="2" ry="2" />
<text  x="1008.54" y="1711.5" ></text>
</g>
<g >
<title>duckdb::TransactionContext::ResetActiveQuery (13,078,518 samples, 0.03%)</title><rect x="332.8" y="1877" width="0.3" height="15.0" fill="rgb(226,158,0)" rx="2" ry="2" />
<text  x="335.82" y="1887.5" ></text>
</g>
<g >
<title>std::function&lt;void  (51,707,065 samples, 0.10%)</title><rect x="844.6" y="1797" width="1.2" height="15.0" fill="rgb(211,114,52)" rx="2" ry="2" />
<text  x="847.59" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_fastpath (7,990,746 samples, 0.02%)</title><rect x="243.4" y="501" width="0.2" height="15.0" fill="rgb(225,75,50)" rx="2" ry="2" />
<text  x="246.44" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (16,985,949 samples, 0.03%)</title><rect x="85.9" y="2021" width="0.4" height="15.0" fill="rgb(237,15,9)" rx="2" ry="2" />
<text  x="88.92" y="2031.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_allocate_buckets (4,439,966 samples, 0.01%)</title><rect x="1026.1" y="1797" width="0.1" height="15.0" fill="rgb(220,120,20)" rx="2" ry="2" />
<text  x="1029.12" y="1807.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;unsigned long const*, unsigned long*, unsigned long&gt; (4,640,417 samples, 0.01%)</title><rect x="776.2" y="1717" width="0.1" height="15.0" fill="rgb(233,52,16)" rx="2" ry="2" />
<text  x="779.22" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DataChunk, std::default_delete&lt;duckdb::DataChunk&gt;, true&gt;::operator* (5,745,242 samples, 0.01%)</title><rect x="372.5" y="1893" width="0.1" height="15.0" fill="rgb(221,4,26)" rx="2" ry="2" />
<text  x="375.48" y="1903.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_assert_mapped (6,019,844 samples, 0.01%)</title><rect x="876.5" y="1189" width="0.1" height="15.0" fill="rgb(241,216,41)" rx="2" ry="2" />
<text  x="879.48" y="1199.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Pin (17,603,579 samples, 0.03%)</title><rect x="267.5" y="1573" width="0.4" height="15.0" fill="rgb(215,22,32)" rx="2" ry="2" />
<text  x="270.46" y="1583.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::PipelineFinishEvent&gt; &gt;::destroy&lt;duckdb::PipelineFinishEvent&gt; (33,208,580 samples, 0.06%)</title><rect x="355.9" y="1685" width="0.7" height="15.0" fill="rgb(234,49,34)" rx="2" ry="2" />
<text  x="358.87" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::max_size (4,730,213 samples, 0.01%)</title><rect x="638.1" y="1685" width="0.1" height="15.0" fill="rgb(254,144,2)" rx="2" ry="2" />
<text  x="641.13" y="1695.5" ></text>
</g>
<g >
<title>duckdb::LogicalDummyScan::~LogicalDummyScan (8,939,247 samples, 0.02%)</title><rect x="1036.5" y="1253" width="0.2" height="15.0" fill="rgb(251,66,41)" rx="2" ry="2" />
<text  x="1039.47" y="1263.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::inner_enqueue&lt; (11,562,600 samples, 0.02%)</title><rect x="862.0" y="1541" width="0.3" height="15.0" fill="rgb(217,143,13)" rx="2" ry="2" />
<text  x="865.01" y="1551.5" ></text>
</g>
<g >
<title>duckdb::DBConfig::GetConfig (6,107,295 samples, 0.01%)</title><rect x="645.6" y="1861" width="0.1" height="15.0" fill="rgb(206,116,20)" rx="2" ry="2" />
<text  x="648.58" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (8,702,174 samples, 0.02%)</title><rect x="902.6" y="1669" width="0.2" height="15.0" fill="rgb(254,177,17)" rx="2" ry="2" />
<text  x="905.61" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::_M_insert_dispatch&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt; &gt; (14,122,891 samples, 0.03%)</title><rect x="1083.3" y="1813" width="0.3" height="15.0" fill="rgb(238,142,12)" rx="2" ry="2" />
<text  x="1086.31" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionInfo, std::default_delete&lt;duckdb::ExpressionInfo&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ExpressionInfo&gt;, void&gt; (4,360,174 samples, 0.01%)</title><rect x="478.0" y="1717" width="0.1" height="15.0" fill="rgb(242,173,37)" rx="2" ry="2" />
<text  x="480.95" y="1727.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long&amp;&gt; (6,703,239 samples, 0.01%)</title><rect x="606.2" y="1749" width="0.1" height="15.0" fill="rgb(218,200,35)" rx="2" ry="2" />
<text  x="609.17" y="1759.5" ></text>
</g>
<g >
<title>duckdb::UnnestRewriter::FindCandidates (9,378,883 samples, 0.02%)</title><rect x="768.9" y="1781" width="0.3" height="15.0" fill="rgb(222,216,24)" rx="2" ry="2" />
<text  x="771.94" y="1791.5" ></text>
</g>
<g >
<title>generic_update_time (31,258,449 samples, 0.06%)</title><rect x="247.7" y="1541" width="0.7" height="15.0" fill="rgb(234,91,34)" rx="2" ry="2" />
<text  x="250.66" y="1551.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Task,  (4,527,973 samples, 0.01%)</title><rect x="1060.5" y="1781" width="0.1" height="15.0" fill="rgb(252,65,52)" rx="2" ry="2" />
<text  x="1063.53" y="1791.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ParsedExpression&gt;::operator (6,690,303 samples, 0.01%)</title><rect x="955.4" y="1621" width="0.1" height="15.0" fill="rgb(252,48,47)" rx="2" ry="2" />
<text  x="958.39" y="1631.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; (446,344,109 samples, 0.87%)</title><rect x="339.9" y="1509" width="10.3" height="15.0" fill="rgb(252,29,21)" rx="2" ry="2" />
<text  x="342.93" y="1519.5" ></text>
</g>
<g >
<title>duckdb::CollectionScanState::ScanCommitted (1,385,537,026 samples, 2.70%)</title><rect x="255.5" y="1717" width="31.9" height="15.0" fill="rgb(237,223,20)" rx="2" ry="2" />
<text  x="258.55" y="1727.5" >du..</text>
</g>
<g >
<title>duckdb::InsertLocalState::~InsertLocalState (177,744,701 samples, 0.35%)</title><rect x="481.0" y="1781" width="4.1" height="15.0" fill="rgb(211,147,0)" rx="2" ry="2" />
<text  x="484.03" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::operator= (17,797,106 samples, 0.03%)</title><rect x="795.1" y="1829" width="0.5" height="15.0" fill="rgb(206,209,15)" rx="2" ry="2" />
<text  x="798.14" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt; &gt;::~unique_ptr (23,854,548 samples, 0.05%)</title><rect x="581.5" y="1813" width="0.5" height="15.0" fill="rgb(249,1,43)" rx="2" ry="2" />
<text  x="584.49" y="1823.5" ></text>
</g>
<g >
<title>vmacache_find (10,060,498 samples, 0.02%)</title><rect x="1135.9" y="1941" width="0.2" height="15.0" fill="rgb(222,171,39)" rx="2" ry="2" />
<text  x="1138.90" y="1951.5" ></text>
</g>
<g >
<title>duckdb::UndoBuffer::Commit (2,762,757,626 samples, 5.39%)</title><rect x="253.9" y="1813" width="63.5" height="15.0" fill="rgb(253,91,29)" rx="2" ry="2" />
<text  x="256.89" y="1823.5" >duckdb..</text>
</g>
<g >
<title>duckdb::ColumnAppendState::ColumnAppendState (6,035,351 samples, 0.01%)</title><rect x="198.4" y="1701" width="0.1" height="15.0" fill="rgb(209,208,21)" rx="2" ry="2" />
<text  x="201.39" y="1711.5" ></text>
</g>
<g >
<title>duckdb::DBConfig::GetConfig (4,472,919 samples, 0.01%)</title><rect x="644.2" y="1877" width="0.1" height="15.0" fill="rgb(228,32,44)" rx="2" ry="2" />
<text  x="647.16" y="1887.5" ></text>
</g>
<g >
<title>__do_page_fault (18,557,475 samples, 0.04%)</title><rect x="1131.3" y="1989" width="0.4" height="15.0" fill="rgb(205,77,8)" rx="2" ry="2" />
<text  x="1134.29" y="1999.5" ></text>
</g>
<g >
<title>std::function&lt;void  (6,192,963 samples, 0.01%)</title><rect x="597.4" y="1765" width="0.2" height="15.0" fill="rgb(214,19,28)" rx="2" ry="2" />
<text  x="600.43" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SampleOptions, std::default_delete&lt;duckdb::SampleOptions&gt; &gt;::get (4,577,732 samples, 0.01%)</title><rect x="535.0" y="1717" width="0.1" height="15.0" fill="rgb(237,3,20)" rx="2" ry="2" />
<text  x="537.96" y="1727.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long, unsigned long&gt;::pair&lt;unsigned long&amp;, unsigned long&amp;, true&gt; (6,676,169 samples, 0.01%)</title><rect x="564.3" y="1733" width="0.2" height="15.0" fill="rgb(209,82,32)" rx="2" ry="2" />
<text  x="567.30" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TableRef, std::default_delete&lt;duckdb::TableRef&gt; &gt;::operator= (14,509,761 samples, 0.03%)</title><rect x="535.3" y="1749" width="0.4" height="15.0" fill="rgb(254,50,26)" rx="2" ry="2" />
<text  x="538.32" y="1759.5" ></text>
</g>
<g >
<title>duckdb::FilterPushdown::FinishPushdown (6,558,107 samples, 0.01%)</title><rect x="747.4" y="1701" width="0.2" height="15.0" fill="rgb(224,157,35)" rx="2" ry="2" />
<text  x="750.41" y="1711.5" ></text>
</g>
<g >
<title>duckdb::DatePartSimplificationRule::~DatePartSimplificationRule (6,864,701 samples, 0.01%)</title><rect x="831.0" y="1701" width="0.2" height="15.0" fill="rgb(233,194,34)" rx="2" ry="2" />
<text  x="834.04" y="1711.5" ></text>
</g>
<g >
<title>duckdb::AddArgMinMaxFunctions&lt;duckdb::LessThan&gt; (11,183,472 samples, 0.02%)</title><rect x="1112.4" y="1893" width="0.3" height="15.0" fill="rgb(213,31,54)" rx="2" ry="2" />
<text  x="1115.42" y="1903.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::operator= (5,367,792 samples, 0.01%)</title><rect x="594.7" y="1749" width="0.1" height="15.0" fill="rgb(241,22,1)" rx="2" ry="2" />
<text  x="597.67" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;unsigned long, false&gt; (4,589,882 samples, 0.01%)</title><rect x="663.2" y="1781" width="0.2" height="15.0" fill="rgb(252,47,26)" rx="2" ry="2" />
<text  x="666.25" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnScanState [], std::default_delete&lt;duckdb::ColumnScanState []&gt; &gt;::~unique_ptr (43,576,102 samples, 0.08%)</title><rect x="287.7" y="1653" width="1.0" height="15.0" fill="rgb(227,42,9)" rx="2" ry="2" />
<text  x="290.66" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::ColumnAppendState*&gt; (8,878,460 samples, 0.02%)</title><rect x="234.1" y="1621" width="0.2" height="15.0" fill="rgb(226,183,9)" rx="2" ry="2" />
<text  x="237.05" y="1631.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (147,930,351 samples, 0.29%)</title><rect x="390.6" y="1701" width="3.4" height="15.0" fill="rgb(227,28,37)" rx="2" ry="2" />
<text  x="393.58" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (4,864,927 samples, 0.01%)</title><rect x="108.1" y="1461" width="0.1" height="15.0" fill="rgb(238,229,30)" rx="2" ry="2" />
<text  x="111.11" y="1471.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ProducerToken, std::default_delete&lt;duckdb::ProducerToken&gt; &gt;::~unique_ptr (7,075,090 samples, 0.01%)</title><rect x="336.5" y="1733" width="0.2" height="15.0" fill="rgb(209,158,51)" rx="2" ry="2" />
<text  x="339.52" y="1743.5" ></text>
</g>
<g >
<title>duckdb::InsertLocalState::InsertLocalState (34,002,935 samples, 0.07%)</title><rect x="107.2" y="1765" width="0.8" height="15.0" fill="rgb(251,122,27)" rx="2" ry="2" />
<text  x="110.21" y="1775.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::InsertStatement&gt; (37,922,680 samples, 0.07%)</title><rect x="537.2" y="1829" width="0.9" height="15.0" fill="rgb(221,61,14)" rx="2" ry="2" />
<text  x="540.19" y="1839.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned (15,767,818 samples, 0.03%)</title><rect x="50.6" y="2021" width="0.4" height="15.0" fill="rgb(205,131,13)" rx="2" ry="2" />
<text  x="53.60" y="2031.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::RowGroupCollection&gt;::operator= (8,843,391 samples, 0.02%)</title><rect x="430.5" y="1605" width="0.2" height="15.0" fill="rgb(254,116,29)" rx="2" ry="2" />
<text  x="433.51" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TransactionContext::Commit (6,271,706,185 samples, 12.23%)</title><rect x="188.5" y="1877" width="144.2" height="15.0" fill="rgb(251,100,44)" rx="2" ry="2" />
<text  x="191.46" y="1887.5" >duckdb::Transactio..</text>
</g>
<g >
<title>duckdb::TreeRenderer::ToString[abi:cxx11] (331,266,898 samples, 0.65%)</title><rect x="833.8" y="1877" width="7.6" height="15.0" fill="rgb(216,229,10)" rx="2" ry="2" />
<text  x="836.82" y="1887.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_get_Tp_allocator (5,888,703 samples, 0.01%)</title><rect x="577.4" y="1765" width="0.2" height="15.0" fill="rgb(211,38,31)" rx="2" ry="2" />
<text  x="580.42" y="1775.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionExecutorInfo, duckdb::ExpressionExecutor&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, int&amp;&gt; (8,169,370 samples, 0.02%)</title><rect x="106.6" y="1749" width="0.1" height="15.0" fill="rgb(213,74,39)" rx="2" ry="2" />
<text  x="109.55" y="1759.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~_Vector_base (7,743,322 samples, 0.02%)</title><rect x="686.0" y="1781" width="0.2" height="15.0" fill="rgb(210,202,4)" rx="2" ry="2" />
<text  x="688.98" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::~vector (5,999,721 samples, 0.01%)</title><rect x="831.6" y="1573" width="0.1" height="15.0" fill="rgb(222,183,43)" rx="2" ry="2" />
<text  x="834.58" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5,172,183 samples, 0.01%)</title><rect x="968.8" y="1701" width="0.2" height="15.0" fill="rgb(228,150,46)" rx="2" ry="2" />
<text  x="971.84" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::operator (66,194,780 samples, 0.13%)</title><rect x="678.9" y="1749" width="1.5" height="15.0" fill="rgb(234,204,4)" rx="2" ry="2" />
<text  x="681.89" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::AllocateData (137,393,983 samples, 0.27%)</title><rect x="379.7" y="1861" width="3.2" height="15.0" fill="rgb(247,179,3)" rx="2" ry="2" />
<text  x="382.74" y="1871.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_alloc_event (9,101,712 samples, 0.02%)</title><rect x="487.8" y="1445" width="0.2" height="15.0" fill="rgb(245,132,40)" rx="2" ry="2" />
<text  x="490.79" y="1455.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (36,751,671 samples, 0.07%)</title><rect x="789.2" y="1829" width="0.9" height="15.0" fill="rgb(241,175,41)" rx="2" ry="2" />
<text  x="792.21" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::_M_range_initialize&lt;duckdb::ColumnBinding const*&gt; (13,595,890 samples, 0.03%)</title><rect x="842.9" y="1717" width="0.3" height="15.0" fill="rgb(207,21,44)" rx="2" ry="2" />
<text  x="845.92" y="1727.5" ></text>
</g>
<g >
<title>duckdb::BufferedSerializer::BufferedSerializer (8,816,541 samples, 0.02%)</title><rect x="591.1" y="1749" width="0.2" height="15.0" fill="rgb(230,195,32)" rx="2" ry="2" />
<text  x="594.05" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_alloc_event (9,343,129 samples, 0.02%)</title><rect x="193.3" y="1541" width="0.2" height="15.0" fill="rgb(218,185,2)" rx="2" ry="2" />
<text  x="196.28" y="1551.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::AttachedDatabase*, duckdb::Transaction*, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt; &gt;::begin (5,137,235 samples, 0.01%)</title><rect x="333.0" y="1829" width="0.1" height="15.0" fill="rgb(216,62,39)" rx="2" ry="2" />
<text  x="335.95" y="1839.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (54,779,511 samples, 0.11%)</title><rect x="81.5" y="2005" width="1.3" height="15.0" fill="rgb(222,201,46)" rx="2" ry="2" />
<text  x="84.51" y="2015.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (29,892,875 samples, 0.06%)</title><rect x="548.5" y="1589" width="0.7" height="15.0" fill="rgb(247,174,45)" rx="2" ry="2" />
<text  x="551.52" y="1599.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (149,042,927 samples, 0.29%)</title><rect x="889.5" y="1717" width="3.5" height="15.0" fill="rgb(219,212,26)" rx="2" ry="2" />
<text  x="892.55" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnBinding, true&gt;::vector (7,275,808 samples, 0.01%)</title><rect x="842.0" y="1845" width="0.2" height="15.0" fill="rgb(238,23,32)" rx="2" ry="2" />
<text  x="845.00" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; (27,410,239 samples, 0.05%)</title><rect x="801.5" y="1813" width="0.6" height="15.0" fill="rgb(231,16,40)" rx="2" ry="2" />
<text  x="804.47" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::AddFunction (7,182,260 samples, 0.01%)</title><rect x="1110.7" y="1861" width="0.1" height="15.0" fill="rgb(207,51,25)" rx="2" ry="2" />
<text  x="1113.66" y="1871.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (20,717,914 samples, 0.04%)</title><rect x="1067.6" y="1733" width="0.4" height="15.0" fill="rgb(228,193,24)" rx="2" ry="2" />
<text  x="1070.57" y="1743.5" ></text>
</g>
<g >
<title>sync_regs (7,995,061 samples, 0.02%)</title><rect x="1142.2" y="2021" width="0.2" height="15.0" fill="rgb(241,145,22)" rx="2" ry="2" />
<text  x="1145.23" y="2031.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::Register&lt;duckdb::LengthFun&gt; (5,576,296 samples, 0.01%)</title><rect x="1111.3" y="1893" width="0.2" height="15.0" fill="rgb(240,87,51)" rx="2" ry="2" />
<text  x="1114.34" y="1903.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, true&gt;::~vector (12,598,492 samples, 0.02%)</title><rect x="1036.5" y="1413" width="0.3" height="15.0" fill="rgb(212,72,34)" rx="2" ry="2" />
<text  x="1039.47" y="1423.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::InClauseExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (4,747,313 samples, 0.01%)</title><rect x="810.6" y="1845" width="0.1" height="15.0" fill="rgb(236,4,29)" rx="2" ry="2" />
<text  x="813.59" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_alloc (7,010,817 samples, 0.01%)</title><rect x="401.4" y="1493" width="0.1" height="15.0" fill="rgb(249,150,38)" rx="2" ry="2" />
<text  x="404.38" y="1503.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::~VectorCache (5,646,698 samples, 0.01%)</title><rect x="106.9" y="1589" width="0.1" height="15.0" fill="rgb(227,75,38)" rx="2" ry="2" />
<text  x="109.87" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="501" width="0.1" height="15.0" fill="rgb(248,168,47)" rx="2" ry="2" />
<text  x="14.25" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;duckdb::PhysicalOperator const&amp;, duckdb::QueryProfiler::TreeNode&amp;&gt; &gt; (5,851,557 samples, 0.01%)</title><rect x="1087.9" y="1781" width="0.2" height="15.0" fill="rgb(254,173,54)" rx="2" ry="2" />
<text  x="1090.95" y="1791.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (51,594,658 samples, 0.10%)</title><rect x="1178.5" y="1845" width="1.2" height="15.0" fill="rgb(253,52,45)" rx="2" ry="2" />
<text  x="1181.54" y="1855.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::~AllocatedData (56,546,826 samples, 0.11%)</title><rect x="221.5" y="1477" width="1.3" height="15.0" fill="rgb(239,142,42)" rx="2" ry="2" />
<text  x="224.49" y="1487.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (24,674,307 samples, 0.05%)</title><rect x="726.8" y="1669" width="0.5" height="15.0" fill="rgb(242,34,10)" rx="2" ry="2" />
<text  x="729.76" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnDataCollection, std::default_delete&lt;duckdb::ColumnDataCollection&gt; &gt;::~unique_ptr (422,933,823 samples, 0.82%)</title><rect x="340.5" y="1397" width="9.7" height="15.0" fill="rgb(247,31,51)" rx="2" ry="2" />
<text  x="343.45" y="1407.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ChunkInfo, std::default_delete&lt;duckdb::ChunkInfo&gt;, true&gt;::operator= (6,773,369 samples, 0.01%)</title><rect x="415.1" y="1685" width="0.1" height="15.0" fill="rgb(236,220,6)" rx="2" ry="2" />
<text  x="418.06" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Allocator::~Allocator (24,483,129 samples, 0.05%)</title><rect x="324.5" y="1589" width="0.6" height="15.0" fill="rgb(228,39,46)" rx="2" ry="2" />
<text  x="327.53" y="1599.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (30,269,284 samples, 0.06%)</title><rect x="696.7" y="1781" width="0.7" height="15.0" fill="rgb(242,97,46)" rx="2" ry="2" />
<text  x="699.66" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Catalog::GetEntry (1,002,303,884 samples, 1.95%)</title><rect x="987.5" y="1797" width="23.1" height="15.0" fill="rgb(248,190,37)" rx="2" ry="2" />
<text  x="990.54" y="1807.5" >d..</text>
</g>
<g >
<title>duckdb_jemalloc::iallocztm (135,180,369 samples, 0.26%)</title><rect x="875.0" y="1429" width="3.1" height="15.0" fill="rgb(208,61,30)" rx="2" ry="2" />
<text  x="877.96" y="1439.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::Pipeline&gt;, duckdb::ReferenceHashFunction&lt;duckdb::Pipeline&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (6,477,343 samples, 0.01%)</title><rect x="1062.5" y="1797" width="0.1" height="15.0" fill="rgb(231,40,46)" rx="2" ry="2" />
<text  x="1065.45" y="1807.5" ></text>
</g>
<g >
<title>futex_wake (17,788,829 samples, 0.03%)</title><rect x="94.0" y="1573" width="0.4" height="15.0" fill="rgb(222,47,18)" rx="2" ry="2" />
<text  x="96.99" y="1583.5" ></text>
</g>
<g >
<title>__asan::AsanThread::stack_top (14,959,643 samples, 0.03%)</title><rect x="12.8" y="1989" width="0.4" height="15.0" fill="rgb(211,137,17)" rx="2" ry="2" />
<text  x="15.82" y="1999.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (15,031,887 samples, 0.03%)</title><rect x="929.8" y="1653" width="0.3" height="15.0" fill="rgb(211,209,24)" rx="2" ry="2" />
<text  x="932.77" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="309" width="0.1" height="15.0" fill="rgb(223,97,20)" rx="2" ry="2" />
<text  x="14.25" y="319.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::Render (573,699,149 samples, 1.12%)</title><rect x="620.8" y="1813" width="13.2" height="15.0" fill="rgb(248,88,26)" rx="2" ry="2" />
<text  x="623.75" y="1823.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::BlockHandle&gt;::shared_ptr&lt;std::allocator&lt;duckdb::BlockHandle&gt;, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool&amp;, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (41,332,180 samples, 0.08%)</title><rect x="880.8" y="1605" width="0.9" height="15.0" fill="rgb(214,121,1)" rx="2" ry="2" />
<text  x="883.78" y="1615.5" ></text>
</g>
<g >
<title>do_wp_page (177,358,849 samples, 0.35%)</title><rect x="163.8" y="1925" width="4.0" height="15.0" fill="rgb(219,168,43)" rx="2" ry="2" />
<text  x="166.76" y="1935.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::ColumnDataAllocator, std::allocator&lt;duckdb::ColumnDataAllocator&gt;,  (20,886,033 samples, 0.04%)</title><rect x="338.6" y="1429" width="0.5" height="15.0" fill="rgb(233,225,21)" rx="2" ry="2" />
<text  x="341.58" y="1439.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::BoundConstantExpression, std::default_delete&lt;duckdb::BoundConstantExpression&gt; &gt;::__uniq_ptr_impl (4,950,739 samples, 0.01%)</title><rect x="982.9" y="1765" width="0.2" height="15.0" fill="rgb(225,223,28)" rx="2" ry="2" />
<text  x="985.94" y="1775.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetMapping (24,377,195 samples, 0.05%)</title><rect x="1043.6" y="1845" width="0.5" height="15.0" fill="rgb(250,216,49)" rx="2" ry="2" />
<text  x="1046.56" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::idalloctm (14,498,745 samples, 0.03%)</title><rect x="482.1" y="1381" width="0.3" height="15.0" fill="rgb(231,44,30)" rx="2" ry="2" />
<text  x="485.06" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (8,988,259 samples, 0.02%)</title><rect x="246.2" y="1749" width="0.2" height="15.0" fill="rgb(212,68,29)" rx="2" ry="2" />
<text  x="249.20" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::operator= (7,125,597 samples, 0.01%)</title><rect x="811.7" y="1829" width="0.2" height="15.0" fill="rgb(240,212,52)" rx="2" ry="2" />
<text  x="814.69" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt; &gt;::unique_ptr&lt;duckdb::PhysicalColumnDataScan, std::default_delete&lt;duckdb::PhysicalColumnDataScan&gt;, void&gt; (9,803,463 samples, 0.02%)</title><rect x="916.5" y="1765" width="0.3" height="15.0" fill="rgb(216,113,17)" rx="2" ry="2" />
<text  x="919.55" y="1775.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, unsigned long const*, unsigned long*&gt; (7,460,443 samples, 0.01%)</title><rect x="661.5" y="1637" width="0.2" height="15.0" fill="rgb(247,153,33)" rx="2" ry="2" />
<text  x="664.54" y="1647.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;*&gt; (12,174,966 samples, 0.02%)</title><rect x="1084.3" y="1781" width="0.2" height="15.0" fill="rgb(218,101,24)" rx="2" ry="2" />
<text  x="1087.26" y="1791.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (5,398,013 samples, 0.01%)</title><rect x="547.2" y="1717" width="0.1" height="15.0" fill="rgb(253,26,40)" rx="2" ry="2" />
<text  x="550.20" y="1727.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::RowGroupCollection&gt; &gt;::construct&lt;duckdb::RowGroupCollection, std::shared_ptr&lt;duckdb::DataTableInfo&gt;&amp;, duckdb::BlockManager&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, long const&amp;, int&gt; (4,680,746 samples, 0.01%)</title><rect x="102.5" y="1461" width="0.1" height="15.0" fill="rgb(220,202,26)" rx="2" ry="2" />
<text  x="105.50" y="1471.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::ResetFromCache (12,065,887 samples, 0.02%)</title><rect x="402.9" y="1701" width="0.3" height="15.0" fill="rgb(217,73,22)" rx="2" ry="2" />
<text  x="405.88" y="1711.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (54,268,723 samples, 0.11%)</title><rect x="247.5" y="1589" width="1.3" height="15.0" fill="rgb(206,108,32)" rx="2" ry="2" />
<text  x="250.55" y="1599.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (13,079,484 samples, 0.03%)</title><rect x="530.2" y="1669" width="0.3" height="15.0" fill="rgb(230,228,20)" rx="2" ry="2" />
<text  x="533.19" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_gc_dalloc_event_handler (16,089,572 samples, 0.03%)</title><rect x="240.1" y="437" width="0.4" height="15.0" fill="rgb(226,61,35)" rx="2" ry="2" />
<text  x="243.14" y="447.5" ></text>
</g>
<g >
<title>duckdb::CatalogTransaction::CatalogTransaction (260,318,966 samples, 0.51%)</title><rect x="995.8" y="1749" width="6.0" height="15.0" fill="rgb(217,133,46)" rx="2" ry="2" />
<text  x="998.79" y="1759.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="197" width="0.1" height="15.0" fill="rgb(221,155,25)" rx="2" ry="2" />
<text  x="14.25" y="207.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, void&gt; (5,079,236 samples, 0.01%)</title><rect x="490.3" y="1733" width="0.2" height="15.0" fill="rgb(205,211,44)" rx="2" ry="2" />
<text  x="493.34" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (10,470,779 samples, 0.02%)</title><rect x="1005.9" y="1685" width="0.3" height="15.0" fill="rgb(225,9,0)" rx="2" ry="2" />
<text  x="1008.94" y="1695.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;*&gt; (9,311,152 samples, 0.02%)</title><rect x="971.8" y="1525" width="0.3" height="15.0" fill="rgb(238,121,28)" rx="2" ry="2" />
<text  x="974.85" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (9,279,299 samples, 0.02%)</title><rect x="389.6" y="1893" width="0.3" height="15.0" fill="rgb(230,216,15)" rx="2" ry="2" />
<text  x="392.64" y="1903.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;,  (51,291,614 samples, 0.10%)</title><rect x="899.7" y="1557" width="1.2" height="15.0" fill="rgb(243,44,11)" rx="2" ry="2" />
<text  x="902.68" y="1567.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (7,242,694 samples, 0.01%)</title><rect x="108.5" y="1621" width="0.2" height="15.0" fill="rgb(222,165,9)" rx="2" ry="2" />
<text  x="111.52" y="1631.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::Iterate&lt;duckdb::PipelineRenderNode&gt; (20,420,635 samples, 0.04%)</title><rect x="1067.1" y="1733" width="0.5" height="15.0" fill="rgb(227,73,23)" rx="2" ry="2" />
<text  x="1070.10" y="1743.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*&gt; (6,232,664 samples, 0.01%)</title><rect x="639.4" y="1685" width="0.1" height="15.0" fill="rgb(212,127,4)" rx="2" ry="2" />
<text  x="642.35" y="1695.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (2,354,839,056 samples, 4.59%)</title><rect x="91.1" y="1925" width="54.2" height="15.0" fill="rgb(245,177,40)" rx="2" ry="2" />
<text  x="94.10" y="1935.5" >std::..</text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::StringValueInfo, std::allocator&lt;duckdb::StringValueInfo&gt;,  (9,723,041 samples, 0.02%)</title><rect x="916.0" y="1349" width="0.2" height="15.0" fill="rgb(234,5,15)" rx="2" ry="2" />
<text  x="918.98" y="1359.5" ></text>
</g>
<g >
<title>on_each_cpu_mask (8,409,674 samples, 0.02%)</title><rect x="167.7" y="1829" width="0.1" height="15.0" fill="rgb(219,123,26)" rx="2" ry="2" />
<text  x="170.65" y="1839.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::operator= (10,122,285 samples, 0.02%)</title><rect x="1015.2" y="1829" width="0.3" height="15.0" fill="rgb(219,13,53)" rx="2" ry="2" />
<text  x="1018.24" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::release (5,329,329 samples, 0.01%)</title><rect x="805.3" y="1813" width="0.1" height="15.0" fill="rgb(223,218,43)" rx="2" ry="2" />
<text  x="808.33" y="1823.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;duckdb::Binding&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;duckdb::Binding&gt; &gt; &gt; &gt;::unordered_map (7,171,228 samples, 0.01%)</title><rect x="985.1" y="1653" width="0.2" height="15.0" fill="rgb(207,36,1)" rx="2" ry="2" />
<text  x="988.09" y="1663.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ColumnDataCollection, duckdb::ClientContext&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;&gt; (96,741,220 samples, 0.19%)</title><rect x="910.0" y="1781" width="2.3" height="15.0" fill="rgb(221,218,50)" rx="2" ry="2" />
<text  x="913.04" y="1791.5" ></text>
</g>
<g >
<title>duckdb::MetaTransaction::GetTransaction (17,630,141 samples, 0.03%)</title><rect x="1042.8" y="1797" width="0.4" height="15.0" fill="rgb(223,229,44)" rx="2" ry="2" />
<text  x="1045.82" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnDataCollection, std::default_delete&lt;duckdb::ColumnDataCollection&gt; &gt;::unique_ptr (12,734,355 samples, 0.02%)</title><rect x="912.6" y="1733" width="0.3" height="15.0" fill="rgb(221,88,22)" rx="2" ry="2" />
<text  x="915.64" y="1743.5" ></text>
</g>
<g >
<title>std::function&lt;void  (9,648,937 samples, 0.02%)</title><rect x="584.0" y="1829" width="0.3" height="15.0" fill="rgb(250,41,24)" rx="2" ry="2" />
<text  x="587.04" y="1839.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (40,532,872 samples, 0.08%)</title><rect x="726.5" y="1733" width="0.9" height="15.0" fill="rgb(205,168,23)" rx="2" ry="2" />
<text  x="729.49" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt; &gt;::~unique_ptr (66,637,405 samples, 0.13%)</title><rect x="1037.9" y="1877" width="1.5" height="15.0" fill="rgb(210,192,40)" rx="2" ry="2" />
<text  x="1040.88" y="1887.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt; &gt;::release (6,266,129 samples, 0.01%)</title><rect x="808.5" y="1813" width="0.1" height="15.0" fill="rgb(229,96,32)" rx="2" ry="2" />
<text  x="811.45" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_salloc (8,940,316 samples, 0.02%)</title><rect x="1123.5" y="1461" width="0.3" height="15.0" fill="rgb(229,179,19)" rx="2" ry="2" />
<text  x="1126.55" y="1471.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6,668,045 samples, 0.01%)</title><rect x="955.0" y="1541" width="0.2" height="15.0" fill="rgb(246,159,6)" rx="2" ry="2" />
<text  x="958.03" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1493" width="0.1" height="15.0" fill="rgb(214,74,43)" rx="2" ry="2" />
<text  x="14.25" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; &gt;::_M_check_len (6,080,740 samples, 0.01%)</title><rect x="905.7" y="1685" width="0.2" height="15.0" fill="rgb(248,171,38)" rx="2" ry="2" />
<text  x="908.71" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1445" width="0.1" height="15.0" fill="rgb(217,48,9)" rx="2" ry="2" />
<text  x="14.25" y="1455.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt;, true&gt;::operator (5,003,580 samples, 0.01%)</title><rect x="1102.3" y="1893" width="0.1" height="15.0" fill="rgb(224,35,41)" rx="2" ry="2" />
<text  x="1105.33" y="1903.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (17,834,423 samples, 0.03%)</title><rect x="99.0" y="1765" width="0.4" height="15.0" fill="rgb(208,228,28)" rx="2" ry="2" />
<text  x="101.99" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (19,664,956 samples, 0.04%)</title><rect x="429.3" y="1397" width="0.4" height="15.0" fill="rgb(211,63,33)" rx="2" ry="2" />
<text  x="432.29" y="1407.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::emplace_back&lt;duckdb::VectorCache&gt; (19,079,464 samples, 0.04%)</title><rect x="371.2" y="1829" width="0.4" height="15.0" fill="rgb(225,96,8)" rx="2" ry="2" />
<text  x="374.16" y="1839.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (16,624,861 samples, 0.03%)</title><rect x="629.6" y="1653" width="0.3" height="15.0" fill="rgb(224,208,43)" rx="2" ry="2" />
<text  x="632.56" y="1663.5" ></text>
</g>
<g >
<title>std::forward&lt;std::piecewise_construct_t const&amp;&gt; (5,475,451 samples, 0.01%)</title><rect x="711.1" y="1813" width="0.1" height="15.0" fill="rgb(227,181,19)" rx="2" ry="2" />
<text  x="714.12" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::unique_ptr&lt;duckdb::LogicalExpressionGet, std::default_delete&lt;std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt; &gt;, void&gt; (9,033,308 samples, 0.02%)</title><rect x="976.8" y="1733" width="0.2" height="15.0" fill="rgb(242,123,25)" rx="2" ry="2" />
<text  x="979.78" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PendingQueryResult, std::default_delete&lt;duckdb::PendingQueryResult&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PendingQueryResult&gt;, void&gt; (5,943,485 samples, 0.01%)</title><rect x="1101.8" y="1877" width="0.1" height="15.0" fill="rgb(207,143,53)" rx="2" ry="2" />
<text  x="1104.75" y="1887.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::GetPipelines (17,191,429 samples, 0.03%)</title><rect x="1083.3" y="1845" width="0.4" height="15.0" fill="rgb(219,34,14)" rx="2" ry="2" />
<text  x="1086.28" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::emplace_back&lt;duckdb::VectorCache&amp;&gt; (30,092,122 samples, 0.06%)</title><rect x="488.7" y="1749" width="0.7" height="15.0" fill="rgb(237,183,46)" rx="2" ry="2" />
<text  x="491.74" y="1759.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::InitializeAppend (117,428,377 samples, 0.23%)</title><rect x="195.7" y="1717" width="2.7" height="15.0" fill="rgb(225,20,37)" rx="2" ry="2" />
<text  x="198.67" y="1727.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::~RenderTree (7,293,118 samples, 0.01%)</title><rect x="841.2" y="1797" width="0.2" height="15.0" fill="rgb(249,58,46)" rx="2" ry="2" />
<text  x="844.24" y="1807.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::RenderTreeNode*, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt; (5,253,073 samples, 0.01%)</title><rect x="620.2" y="1653" width="0.1" height="15.0" fill="rgb(214,164,44)" rx="2" ry="2" />
<text  x="623.19" y="1663.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::ResolveOperatorTypes (84,611,507 samples, 0.16%)</title><rect x="846.7" y="1861" width="2.0" height="15.0" fill="rgb(216,127,44)" rx="2" ry="2" />
<text  x="849.73" y="1871.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::downcase_identifier (5,810,873 samples, 0.01%)</title><rect x="522.9" y="1813" width="0.2" height="15.0" fill="rgb(223,120,39)" rx="2" ry="2" />
<text  x="525.92" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::DatePartSimplificationRule, std::default_delete&lt;duckdb::DatePartSimplificationRule&gt;, void&gt; (5,266,107 samples, 0.01%)</title><rect x="822.2" y="1861" width="0.2" height="15.0" fill="rgb(205,35,28)" rx="2" ry="2" />
<text  x="825.24" y="1871.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned int*, false&gt;::_M_head (13,018,561 samples, 0.03%)</title><rect x="311.2" y="1445" width="0.3" height="15.0" fill="rgb(206,65,43)" rx="2" ry="2" />
<text  x="314.17" y="1455.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::ResetSource (32,883,361 samples, 0.06%)</title><rect x="399.5" y="1861" width="0.7" height="15.0" fill="rgb(226,141,25)" rx="2" ry="2" />
<text  x="402.47" y="1871.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (87,295,967 samples, 0.17%)</title><rect x="895.9" y="1605" width="2.1" height="15.0" fill="rgb(208,212,31)" rx="2" ry="2" />
<text  x="898.94" y="1615.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::unique_ptr&lt;duckdb::ColumnRefExpression, std::default_delete&lt;std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt; &gt;, void&gt; (15,258,180 samples, 0.03%)</title><rect x="944.5" y="1701" width="0.3" height="15.0" fill="rgb(240,158,47)" rx="2" ry="2" />
<text  x="947.46" y="1711.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, duckdb::ActiveQueryContext*, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt;::_M_head (8,253,409 samples, 0.02%)</title><rect x="510.7" y="1829" width="0.2" height="15.0" fill="rgb(254,173,45)" rx="2" ry="2" />
<text  x="513.71" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (31,929,854 samples, 0.06%)</title><rect x="44.7" y="1989" width="0.7" height="15.0" fill="rgb(208,82,42)" rx="2" ry="2" />
<text  x="47.67" y="1999.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (65,778,154 samples, 0.13%)</title><rect x="289.1" y="1653" width="1.6" height="15.0" fill="rgb(252,163,49)" rx="2" ry="2" />
<text  x="292.15" y="1663.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::Scan (768,263,770 samples, 1.50%)</title><rect x="199.3" y="1717" width="17.7" height="15.0" fill="rgb(254,74,21)" rx="2" ry="2" />
<text  x="202.32" y="1727.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct (10,479,494 samples, 0.02%)</title><rect x="1181.4" y="2037" width="0.3" height="15.0" fill="rgb(236,107,11)" rx="2" ry="2" />
<text  x="1184.42" y="2047.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*&gt; (13,995,583 samples, 0.03%)</title><rect x="481.1" y="1685" width="0.3" height="15.0" fill="rgb(215,100,10)" rx="2" ry="2" />
<text  x="484.10" y="1695.5" ></text>
</g>
<g >
<title>std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;::~pair (30,851,871 samples, 0.06%)</title><rect x="499.8" y="1653" width="0.7" height="15.0" fill="rgb(210,180,41)" rx="2" ry="2" />
<text  x="502.81" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt;, true&gt;::operator= (13,911,064 samples, 0.03%)</title><rect x="799.1" y="1845" width="0.4" height="15.0" fill="rgb(246,137,31)" rx="2" ry="2" />
<text  x="802.15" y="1855.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::HTTPState,  (18,225,338 samples, 0.04%)</title><rect x="359.3" y="1845" width="0.4" height="15.0" fill="rgb(214,200,17)" rx="2" ry="2" />
<text  x="362.27" y="1855.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (99,017,970 samples, 0.19%)</title><rect x="217.2" y="1669" width="2.3" height="15.0" fill="rgb(227,0,54)" rx="2" ry="2" />
<text  x="220.24" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (4,475,109 samples, 0.01%)</title><rect x="290.0" y="1365" width="0.1" height="15.0" fill="rgb(211,22,53)" rx="2" ry="2" />
<text  x="293.04" y="1375.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::CatalogEntryEquality, duckdb::CatalogEntryHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_rehash_aux (10,040,863 samples, 0.02%)</title><rect x="851.8" y="1749" width="0.2" height="15.0" fill="rgb(240,104,45)" rx="2" ry="2" />
<text  x="854.78" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::CreateColumn (8,249,785 samples, 0.02%)</title><rect x="104.7" y="1669" width="0.2" height="15.0" fill="rgb(209,0,23)" rx="2" ry="2" />
<text  x="107.72" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ExpressionMatcher::Match (6,977,320 samples, 0.01%)</title><rect x="739.2" y="1621" width="0.1" height="15.0" fill="rgb(249,69,43)" rx="2" ry="2" />
<text  x="742.16" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (16,355,288 samples, 0.03%)</title><rect x="726.8" y="1605" width="0.4" height="15.0" fill="rgb(215,220,40)" rx="2" ry="2" />
<text  x="729.85" y="1615.5" ></text>
</g>
<g >
<title>duckdb::Expression::Expression (4,801,974 samples, 0.01%)</title><rect x="583.0" y="1813" width="0.1" height="15.0" fill="rgb(232,172,31)" rx="2" ry="2" />
<text  x="585.99" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt;::unique_ptr&lt;duckdb::ManyFunctionMatcher, std::default_delete&lt;duckdb::ManyFunctionMatcher&gt;, void&gt; (9,830,942 samples, 0.02%)</title><rect x="786.3" y="1829" width="0.2" height="15.0" fill="rgb(230,158,8)" rx="2" ry="2" />
<text  x="789.31" y="1839.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::PipelineExecutor&gt;::operator (136,422,003 samples, 0.27%)</title><rect x="333.4" y="1717" width="3.1" height="15.0" fill="rgb(211,73,16)" rx="2" ry="2" />
<text  x="336.35" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_default (35,721,837 samples, 0.07%)</title><rect x="498.2" y="1461" width="0.8" height="15.0" fill="rgb(252,176,15)" rx="2" ry="2" />
<text  x="501.16" y="1471.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::~unique_ptr (8,044,408 samples, 0.02%)</title><rect x="1036.2" y="1509" width="0.2" height="15.0" fill="rgb(244,193,46)" rx="2" ry="2" />
<text  x="1039.21" y="1519.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::Iterate&lt;duckdb::LogicalOperator&gt; (14,366,694 samples, 0.03%)</title><rect x="546.8" y="1701" width="0.4" height="15.0" fill="rgb(215,133,44)" rx="2" ry="2" />
<text  x="549.84" y="1711.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (88,331,908 samples, 0.17%)</title><rect x="481.7" y="1541" width="2.0" height="15.0" fill="rgb(224,89,30)" rx="2" ry="2" />
<text  x="484.68" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (5,262,655 samples, 0.01%)</title><rect x="38.6" y="2005" width="0.1" height="15.0" fill="rgb(208,168,38)" rx="2" ry="2" />
<text  x="41.60" y="2015.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1157" width="0.1" height="15.0" fill="rgb(234,92,43)" rx="2" ry="2" />
<text  x="14.25" y="1167.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::LogicalType&gt;::construct&lt;duckdb::LogicalType, duckdb::LogicalType const&amp;&gt; (5,196,563 samples, 0.01%)</title><rect x="969.1" y="1701" width="0.2" height="15.0" fill="rgb(250,14,20)" rx="2" ry="2" />
<text  x="972.14" y="1711.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt;, duckdb::PipelineEventStack, duckdb::ReferenceHashFunction&lt;duckdb::Pipeline&gt;, duckdb::ReferenceEquality&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt; &gt; &gt;::~unordered_map (17,503,068 samples, 0.03%)</title><rect x="1062.4" y="1829" width="0.4" height="15.0" fill="rgb(244,228,50)" rx="2" ry="2" />
<text  x="1065.40" y="1839.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::AttachedDatabase*, duckdb::Transaction*, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt; &gt;::find (23,268,203 samples, 0.05%)</title><rect x="331.0" y="1845" width="0.5" height="15.0" fill="rgb(237,87,35)" rx="2" ry="2" />
<text  x="333.96" y="1855.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (66,237,130 samples, 0.13%)</title><rect x="217.7" y="1493" width="1.5" height="15.0" fill="rgb(218,25,38)" rx="2" ry="2" />
<text  x="220.68" y="1503.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DatabaseManager, std::default_delete&lt;duckdb::DatabaseManager&gt;, true&gt;::~unique_ptr (99,164,839 samples, 0.19%)</title><rect x="1117.5" y="1861" width="2.2" height="15.0" fill="rgb(240,197,46)" rx="2" ry="2" />
<text  x="1120.47" y="1871.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;*, std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt; (6,155,926 samples, 0.01%)</title><rect x="571.6" y="1733" width="0.2" height="15.0" fill="rgb(226,225,30)" rx="2" ry="2" />
<text  x="574.64" y="1743.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (10,022,942 samples, 0.02%)</title><rect x="89.4" y="1989" width="0.2" height="15.0" fill="rgb(246,162,23)" rx="2" ry="2" />
<text  x="92.38" y="1999.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::EnumComparisonRule, std::default_delete&lt;duckdb::EnumComparisonRule&gt; &gt;::release (4,562,912 samples, 0.01%)</title><rect x="823.1" y="1845" width="0.1" height="15.0" fill="rgb(238,214,43)" rx="2" ry="2" />
<text  x="826.11" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt;, std::allocator&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt; &gt; (14,242,518 samples, 0.03%)</title><rect x="456.9" y="1669" width="0.4" height="15.0" fill="rgb(227,107,8)" rx="2" ry="2" />
<text  x="459.92" y="1679.5" ></text>
</g>
<g >
<title>duckdb::Catalog::GetEntry&lt;duckdb::TableCatalogEntry&gt; (1,020,418,735 samples, 1.99%)</title><rect x="987.3" y="1829" width="23.5" height="15.0" fill="rgb(246,188,54)" rx="2" ry="2" />
<text  x="990.29" y="1839.5" >d..</text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::~shared_ptr (87,730,273 samples, 0.17%)</title><rect x="333.4" y="1557" width="2.0" height="15.0" fill="rgb(235,117,3)" rx="2" ry="2" />
<text  x="336.43" y="1567.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::RowGroup&gt;::operator (331,636,166 samples, 0.65%)</title><rect x="237.6" y="1253" width="7.6" height="15.0" fill="rgb(252,58,6)" rx="2" ry="2" />
<text  x="240.61" y="1263.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryNode, std::default_delete&lt;duckdb::QueryNode&gt;, true&gt;::operator= (8,095,691 samples, 0.02%)</title><rect x="536.8" y="1797" width="0.2" height="15.0" fill="rgb(210,116,33)" rx="2" ry="2" />
<text  x="539.83" y="1807.5" ></text>
</g>
<g >
<title>do_user_addr_fault (12,050,258 samples, 0.02%)</title><rect x="413.5" y="1589" width="0.3" height="15.0" fill="rgb(235,24,12)" rx="2" ry="2" />
<text  x="416.49" y="1599.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;, true&gt;::~vector (30,851,871 samples, 0.06%)</title><rect x="499.8" y="1621" width="0.7" height="15.0" fill="rgb(241,218,1)" rx="2" ry="2" />
<text  x="502.81" y="1631.5" ></text>
</g>
<g >
<title>__interceptor_strlen (5,348,276 samples, 0.01%)</title><rect x="86.6" y="2005" width="0.1" height="15.0" fill="rgb(231,168,11)" rx="2" ry="2" />
<text  x="89.57" y="2015.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocator::ArenaAllocator (58,001,563 samples, 0.11%)</title><rect x="376.8" y="1845" width="1.3" height="15.0" fill="rgb(234,133,23)" rx="2" ry="2" />
<text  x="379.76" y="1855.5" ></text>
</g>
<g >
<title>duckdb::StringUtil::BytesToHumanReadableString[abi:cxx11] (5,616,006 samples, 0.01%)</title><rect x="193.9" y="1653" width="0.1" height="15.0" fill="rgb(208,43,3)" rx="2" ry="2" />
<text  x="196.89" y="1663.5" ></text>
</g>
<g >
<title>duckdb::ComparisonSimplificationRule::~ComparisonSimplificationRule (5,419,918 samples, 0.01%)</title><rect x="830.4" y="1701" width="0.2" height="15.0" fill="rgb(243,31,19)" rx="2" ry="2" />
<text  x="833.43" y="1711.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBoxContent (310,004,811 samples, 0.60%)</title><rect x="625.3" y="1781" width="7.1" height="15.0" fill="rgb(219,112,13)" rx="2" ry="2" />
<text  x="628.27" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;unsigned long, true, false&gt;::operator* (4,482,678 samples, 0.01%)</title><rect x="663.0" y="1781" width="0.1" height="15.0" fill="rgb(246,59,51)" rx="2" ry="2" />
<text  x="666.01" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (6,913,840 samples, 0.01%)</title><rect x="806.4" y="1797" width="0.1" height="15.0" fill="rgb(248,159,34)" rx="2" ry="2" />
<text  x="809.37" y="1807.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::Reset (118,016,830 samples, 0.23%)</title><rect x="390.9" y="1605" width="2.7" height="15.0" fill="rgb(228,85,38)" rx="2" ry="2" />
<text  x="393.91" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (5,219,740 samples, 0.01%)</title><rect x="87.7" y="2005" width="0.1" height="15.0" fill="rgb(244,125,42)" rx="2" ry="2" />
<text  x="90.69" y="2015.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; (162,895,576 samples, 0.32%)</title><rect x="324.2" y="1765" width="3.7" height="15.0" fill="rgb(210,10,25)" rx="2" ry="2" />
<text  x="327.18" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Task,  (8,892,692 samples, 0.02%)</title><rect x="109.7" y="1797" width="0.2" height="15.0" fill="rgb(221,183,53)" rx="2" ry="2" />
<text  x="112.69" y="1807.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::pair&lt;unsigned long, unsigned long&gt;*, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (16,246,774 samples, 0.03%)</title><rect x="1074.3" y="1653" width="0.4" height="15.0" fill="rgb(251,67,14)" rx="2" ry="2" />
<text  x="1077.35" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::SwizzleMetaData, std::allocator&lt;duckdb::SwizzleMetaData&gt; &gt;::vector (8,671,626 samples, 0.02%)</title><rect x="884.6" y="1621" width="0.2" height="15.0" fill="rgb(228,143,53)" rx="2" ry="2" />
<text  x="887.55" y="1631.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (17,995,200 samples, 0.04%)</title><rect x="278.0" y="1509" width="0.4" height="15.0" fill="rgb(216,148,35)" rx="2" ry="2" />
<text  x="281.00" y="1519.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt; &gt; (13,108,568 samples, 0.03%)</title><rect x="479.0" y="1717" width="0.3" height="15.0" fill="rgb(239,77,46)" rx="2" ry="2" />
<text  x="481.98" y="1727.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::StarExpression&gt; (17,368,520 samples, 0.03%)</title><rect x="533.2" y="1765" width="0.4" height="15.0" fill="rgb(231,4,4)" rx="2" ry="2" />
<text  x="536.15" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (238,401,269 samples, 0.46%)</title><rect x="344.2" y="901" width="5.5" height="15.0" fill="rgb(246,29,43)" rx="2" ry="2" />
<text  x="347.18" y="911.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (7,242,694 samples, 0.01%)</title><rect x="108.5" y="1573" width="0.2" height="15.0" fill="rgb(226,168,19)" rx="2" ry="2" />
<text  x="111.52" y="1583.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::~LogicalOperator (8,939,247 samples, 0.02%)</title><rect x="1036.5" y="1237" width="0.2" height="15.0" fill="rgb(243,57,15)" rx="2" ry="2" />
<text  x="1039.47" y="1247.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (5,094,704 samples, 0.01%)</title><rect x="222.2" y="1317" width="0.1" height="15.0" fill="rgb(239,47,34)" rx="2" ry="2" />
<text  x="225.16" y="1327.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::_M_move_assign (4,501,049 samples, 0.01%)</title><rect x="846.0" y="1797" width="0.1" height="15.0" fill="rgb(243,114,26)" rx="2" ry="2" />
<text  x="849.03" y="1807.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::~PhysicalInsert (568,592,726 samples, 1.11%)</title><rect x="338.0" y="1621" width="13.1" height="15.0" fill="rgb(227,124,19)" rx="2" ry="2" />
<text  x="340.99" y="1631.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;::vector (4,632,110 samples, 0.01%)</title><rect x="532.1" y="1669" width="0.1" height="15.0" fill="rgb(245,138,38)" rx="2" ry="2" />
<text  x="535.06" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (6,516,403 samples, 0.01%)</title><rect x="832.1" y="1509" width="0.2" height="15.0" fill="rgb(235,185,17)" rx="2" ry="2" />
<text  x="835.14" y="1519.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BoundColumnReferenceInfo, std::allocator&lt;duckdb::BoundColumnReferenceInfo&gt; &gt;::emplace_back&lt;duckdb::BoundColumnReferenceInfo&gt; (18,370,754 samples, 0.04%)</title><rect x="955.7" y="1637" width="0.4" height="15.0" fill="rgb(238,33,6)" rx="2" ry="2" />
<text  x="958.66" y="1647.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (20,252,747 samples, 0.04%)</title><rect x="505.7" y="1813" width="0.4" height="15.0" fill="rgb(209,97,46)" rx="2" ry="2" />
<text  x="508.67" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Event&gt; &gt; &gt;::~vector (7,374,910 samples, 0.01%)</title><rect x="357.0" y="1589" width="0.1" height="15.0" fill="rgb(224,25,0)" rx="2" ry="2" />
<text  x="359.98" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::_M_range_insert&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt; &gt; (10,756,135 samples, 0.02%)</title><rect x="1048.5" y="1765" width="0.2" height="15.0" fill="rgb(248,98,13)" rx="2" ry="2" />
<text  x="1051.46" y="1775.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;std::shared_ptr&lt;duckdb::Task&gt;, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::ExplicitProducer::dequeue&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; (26,766,502 samples, 0.05%)</title><rect x="109.3" y="1829" width="0.6" height="15.0" fill="rgb(236,193,6)" rx="2" ry="2" />
<text  x="112.28" y="1839.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string (9,631,930 samples, 0.02%)</title><rect x="1125.2" y="2005" width="0.2" height="15.0" fill="rgb(232,224,1)" rx="2" ry="2" />
<text  x="1128.17" y="2015.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::CreatePipeline (82,572,993 samples, 0.16%)</title><rect x="1093.4" y="1717" width="1.9" height="15.0" fill="rgb(233,165,31)" rx="2" ry="2" />
<text  x="1096.41" y="1727.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::QueryProfiler&gt; &gt;::construct&lt;duckdb::QueryProfiler, duckdb::ClientContext&amp;&gt; (22,566,576 samples, 0.04%)</title><rect x="353.5" y="1781" width="0.5" height="15.0" fill="rgb(246,180,29)" rx="2" ry="2" />
<text  x="356.50" y="1791.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::OnConflictHandling (24,934,255 samples, 0.05%)</title><rect x="464.1" y="1797" width="0.6" height="15.0" fill="rgb(250,30,52)" rx="2" ry="2" />
<text  x="467.13" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::DataArrays, std::allocator&lt;duckdb::DataArrays&gt; &gt;::~vector (5,735,159 samples, 0.01%)</title><rect x="474.6" y="1701" width="0.1" height="15.0" fill="rgb(238,5,36)" rx="2" ry="2" />
<text  x="477.60" y="1711.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::Get (40,817,607 samples, 0.08%)</title><rect x="421.3" y="1781" width="1.0" height="15.0" fill="rgb(240,114,52)" rx="2" ry="2" />
<text  x="424.35" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::CaseSimplificationRule, std::default_delete&lt;duckdb::CaseSimplificationRule&gt;, void&gt; (10,306,210 samples, 0.02%)</title><rect x="821.3" y="1861" width="0.2" height="15.0" fill="rgb(246,53,1)" rx="2" ry="2" />
<text  x="824.30" y="1871.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::QueryProfiler,  (42,250,262 samples, 0.08%)</title><rect x="353.2" y="1829" width="1.0" height="15.0" fill="rgb(217,193,6)" rx="2" ry="2" />
<text  x="356.24" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_fetch_impl (9,785,452 samples, 0.02%)</title><rect x="107.4" y="1413" width="0.3" height="15.0" fill="rgb(236,206,52)" rx="2" ry="2" />
<text  x="110.43" y="1423.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CaseExpressionMatcher, std::default_delete&lt;duckdb::CaseExpressionMatcher&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::CaseExpressionMatcher&gt;, void&gt; (8,604,508 samples, 0.02%)</title><rect x="790.6" y="1829" width="0.2" height="15.0" fill="rgb(222,209,51)" rx="2" ry="2" />
<text  x="793.64" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::Expression&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::Expression&gt; const, duckdb::vector&lt;duckdb::FilterInfo*, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Expression&gt; const, duckdb::vector&lt;duckdb::FilterInfo*, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ExpressionEquality&lt;duckdb::Expression&gt;, duckdb::ExpressionHashFunction&lt;duckdb::Expression&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4,507,699 samples, 0.01%)</title><rect x="757.3" y="1749" width="0.1" height="15.0" fill="rgb(235,70,6)" rx="2" ry="2" />
<text  x="760.32" y="1759.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt; &gt; &gt;::~_Vector_base (6,378,217 samples, 0.01%)</title><rect x="1078.7" y="1797" width="0.1" height="15.0" fill="rgb(219,140,46)" rx="2" ry="2" />
<text  x="1081.68" y="1807.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; (10,115,281 samples, 0.02%)</title><rect x="379.1" y="1845" width="0.2" height="15.0" fill="rgb(235,37,30)" rx="2" ry="2" />
<text  x="382.09" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_fetch_impl (5,122,928 samples, 0.01%)</title><rect x="392.8" y="1509" width="0.1" height="15.0" fill="rgb(226,164,39)" rx="2" ry="2" />
<text  x="395.79" y="1519.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Binder*, true&gt;::~vector (4,418,432 samples, 0.01%)</title><rect x="965.4" y="1749" width="0.1" height="15.0" fill="rgb(218,16,21)" rx="2" ry="2" />
<text  x="968.40" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (9,745,067 samples, 0.02%)</title><rect x="575.7" y="1717" width="0.2" height="15.0" fill="rgb(246,191,10)" rx="2" ry="2" />
<text  x="578.71" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (10,110,172 samples, 0.02%)</title><rect x="1121.4" y="1861" width="0.2" height="15.0" fill="rgb(246,191,30)" rx="2" ry="2" />
<text  x="1124.41" y="1871.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Vector, true&gt;::~vector (91,622,519 samples, 0.18%)</title><rect x="333.4" y="1669" width="2.1" height="15.0" fill="rgb(221,73,4)" rx="2" ry="2" />
<text  x="336.37" y="1679.5" ></text>
</g>
<g >
<title>do_futex_wait.constprop.0 (52,621,320 samples, 0.10%)</title><rect x="74.5" y="2021" width="1.2" height="15.0" fill="rgb(235,135,29)" rx="2" ry="2" />
<text  x="77.50" y="2031.5" ></text>
</g>
<g >
<title>example (51,291,406,657 samples, 100.00%)</title><rect x="10.0" y="2053" width="1180.0" height="15.0" fill="rgb(215,107,3)" rx="2" ry="2" />
<text  x="13.00" y="2063.5" >example</text>
</g>
<g >
<title>std::__shared_count&lt; (620,798,029 samples, 1.21%)</title><rect x="337.3" y="1781" width="14.3" height="15.0" fill="rgb(212,212,51)" rx="2" ry="2" />
<text  x="340.33" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_fetch (6,051,765 samples, 0.01%)</title><rect x="892.0" y="1461" width="0.1" height="15.0" fill="rgb(209,161,1)" rx="2" ry="2" />
<text  x="894.98" y="1471.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (27,166,951 samples, 0.05%)</title><rect x="192.9" y="1573" width="0.6" height="15.0" fill="rgb(231,49,5)" rx="2" ry="2" />
<text  x="195.87" y="1583.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::InterruptDoneSignalState, std::allocator&lt;duckdb::InterruptDoneSignalState&gt;&gt; (21,468,812 samples, 0.04%)</title><rect x="364.7" y="1861" width="0.5" height="15.0" fill="rgb(254,120,40)" rx="2" ry="2" />
<text  x="367.70" y="1871.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::DuckTransaction, duckdb::DuckTransactionManager&amp;, duckdb::ClientContext&amp;, unsigned long&amp;, unsigned long&amp;&gt; (76,331,520 samples, 0.15%)</title><rect x="989.0" y="1621" width="1.8" height="15.0" fill="rgb(219,138,15)" rx="2" ry="2" />
<text  x="992.02" y="1631.5" ></text>
</g>
<g >
<title>duckdb::QuantileDiscFun::GetFunctions (4,804,665 samples, 0.01%)</title><rect x="1116.6" y="1909" width="0.1" height="15.0" fill="rgb(216,149,49)" rx="2" ry="2" />
<text  x="1119.57" y="1919.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_deleter&lt;duckdb::PipelineInitializeTask*, std::default_delete&lt;duckdb::PipelineInitializeTask&gt;, std::allocator&lt;void&gt;,  (5,068,522 samples, 0.01%)</title><rect x="1060.3" y="1765" width="0.1" height="15.0" fill="rgb(230,161,54)" rx="2" ry="2" />
<text  x="1063.33" y="1775.5" ></text>
</g>
<g >
<title>__interceptor_pthread_mutex_lock (5,028,268 samples, 0.01%)</title><rect x="505.6" y="1829" width="0.1" height="15.0" fill="rgb(210,55,22)" rx="2" ry="2" />
<text  x="508.56" y="1839.5" ></text>
</g>
<g >
<title>duckdb::DictionaryCompressionStorage::StringAnalyze (11,768,340 samples, 0.02%)</title><rect x="1117.9" y="1013" width="0.3" height="15.0" fill="rgb(235,61,18)" rx="2" ry="2" />
<text  x="1120.90" y="1023.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (4,886,126 samples, 0.01%)</title><rect x="1005.0" y="1669" width="0.1" height="15.0" fill="rgb(229,53,7)" rx="2" ry="2" />
<text  x="1008.01" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="341" width="0.1" height="15.0" fill="rgb(216,133,48)" rx="2" ry="2" />
<text  x="14.25" y="351.5" ></text>
</g>
<g >
<title>duckdb::make_unsafe_uniq_array&lt;unsigned int&gt; (15,379,711 samples, 0.03%)</title><rect x="201.9" y="1509" width="0.3" height="15.0" fill="rgb(228,115,4)" rx="2" ry="2" />
<text  x="204.85" y="1519.5" ></text>
</g>
<g >
<title>duckdb::DatabaseManager::GetDatabase (105,888,663 samples, 0.21%)</title><rect x="1042.6" y="1893" width="2.5" height="15.0" fill="rgb(207,104,17)" rx="2" ry="2" />
<text  x="1045.62" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CompressedSegmentState, std::default_delete&lt;duckdb::CompressedSegmentState&gt; &gt;::release (8,502,891 samples, 0.02%)</title><rect x="445.5" y="1605" width="0.2" height="15.0" fill="rgb(251,202,23)" rx="2" ry="2" />
<text  x="448.49" y="1615.5" ></text>
</g>
<g >
<title>duckdb::DatabaseManager::Get (6,543,807 samples, 0.01%)</title><rect x="320.7" y="1797" width="0.1" height="15.0" fill="rgb(239,180,7)" rx="2" ry="2" />
<text  x="323.69" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ChunkVectorInfo::ChunkVectorInfo (366,254,222 samples, 0.71%)</title><rect x="406.4" y="1669" width="8.4" height="15.0" fill="rgb(214,37,20)" rx="2" ry="2" />
<text  x="409.41" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt;, true&gt;::operator= (4,446,958 samples, 0.01%)</title><rect x="447.4" y="1653" width="0.1" height="15.0" fill="rgb(213,134,26)" rx="2" ry="2" />
<text  x="450.42" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::empty (16,971,920 samples, 0.03%)</title><rect x="711.8" y="1845" width="0.4" height="15.0" fill="rgb(232,141,10)" rx="2" ry="2" />
<text  x="714.85" y="1855.5" ></text>
</g>
<g >
<title>get_page_from_freelist (47,119,292 samples, 0.09%)</title><rect x="164.7" y="1861" width="1.1" height="15.0" fill="rgb(254,117,1)" rx="2" ry="2" />
<text  x="167.69" y="1871.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;duckdb::OptimizerType, duckdb::OptimizerType, std::_Identity&lt;duckdb::OptimizerType&gt;, std::less&lt;duckdb::OptimizerType&gt;, std::allocator&lt;duckdb::OptimizerType&gt; &gt;::_M_lower_bound (5,304,026 samples, 0.01%)</title><rect x="773.7" y="1829" width="0.2" height="15.0" fill="rgb(254,16,8)" rx="2" ry="2" />
<text  x="776.73" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::StorageLockKey, std::default_delete&lt;duckdb::StorageLockKey&gt;, true&gt;::unique_ptr (15,625,307 samples, 0.03%)</title><rect x="451.4" y="1621" width="0.4" height="15.0" fill="rgb(229,29,30)" rx="2" ry="2" />
<text  x="454.42" y="1631.5" ></text>
</g>
<g >
<title>duckdb::DuckSchemaEntry::CreatePragmaFunction (6,387,596 samples, 0.01%)</title><rect x="1110.7" y="1813" width="0.1" height="15.0" fill="rgb(248,68,15)" rx="2" ry="2" />
<text  x="1113.66" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ValidityMask::~ValidityMask (8,057,200 samples, 0.02%)</title><rect x="895.3" y="1653" width="0.2" height="15.0" fill="rgb(217,17,21)" rx="2" ry="2" />
<text  x="898.32" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RenderTree&gt;, void&gt; (6,943,851 samples, 0.01%)</title><rect x="553.4" y="1781" width="0.1" height="15.0" fill="rgb(210,84,47)" rx="2" ry="2" />
<text  x="556.39" y="1791.5" ></text>
</g>
<g >
<title>duckdb::FieldReader::ReadRequired&lt;duckdb::ExpressionClass&gt; (10,728,747 samples, 0.02%)</title><rect x="588.5" y="1845" width="0.2" height="15.0" fill="rgb(248,89,54)" rx="2" ry="2" />
<text  x="591.48" y="1855.5" ></text>
</g>
<g >
<title>duckdb::AdjustTextForRendering (104,152,681 samples, 0.20%)</title><rect x="836.7" y="1813" width="2.4" height="15.0" fill="rgb(207,146,23)" rx="2" ry="2" />
<text  x="839.73" y="1823.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::StringValueInfo,  (6,410,276 samples, 0.01%)</title><rect x="1119.9" y="1861" width="0.2" height="15.0" fill="rgb(209,148,30)" rx="2" ry="2" />
<text  x="1122.91" y="1871.5" ></text>
</g>
<g >
<title>__lsan::GetUserBegin (18,848,843 samples, 0.04%)</title><rect x="1127.5" y="2037" width="0.5" height="15.0" fill="rgb(247,193,28)" rx="2" ry="2" />
<text  x="1130.53" y="2047.5" ></text>
</g>
<g >
<title>duckdb::DatabaseManager::~DatabaseManager (99,164,839 samples, 0.19%)</title><rect x="1117.5" y="1813" width="2.2" height="15.0" fill="rgb(211,98,19)" rx="2" ry="2" />
<text  x="1120.47" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::Initialize (41,601,145 samples, 0.08%)</title><rect x="910.1" y="1733" width="1.0" height="15.0" fill="rgb(210,32,54)" rx="2" ry="2" />
<text  x="913.11" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::LocalTableStorage&gt; &gt;::construct&lt;duckdb::LocalTableStorage, duckdb::DataTable&amp;&gt; (22,050,138 samples, 0.04%)</title><rect x="102.1" y="1605" width="0.5" height="15.0" fill="rgb(206,145,50)" rx="2" ry="2" />
<text  x="105.12" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1557" width="0.1" height="15.0" fill="rgb(233,75,18)" rx="2" ry="2" />
<text  x="14.25" y="1567.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::unique_ptr&lt;duckdb::LogicalProjection, std::default_delete&lt;std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt; &gt;, void&gt; (6,703,708 samples, 0.01%)</title><rect x="978.9" y="1765" width="0.1" height="15.0" fill="rgb(239,32,35)" rx="2" ry="2" />
<text  x="981.86" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::pa_dalloc (88,712,942 samples, 0.17%)</title><rect x="346.3" y="741" width="2.0" height="15.0" fill="rgb(228,220,36)" rx="2" ry="2" />
<text  x="349.31" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Pipeline&gt;::construct&lt;duckdb::Pipeline, duckdb::Executor&amp;&gt; (15,704,064 samples, 0.03%)</title><rect x="1094.0" y="1589" width="0.3" height="15.0" fill="rgb(238,41,42)" rx="2" ry="2" />
<text  x="1096.99" y="1599.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::operator* (5,103,454 samples, 0.01%)</title><rect x="721.7" y="1861" width="0.1" height="15.0" fill="rgb(215,9,32)" rx="2" ry="2" />
<text  x="724.73" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PartialBlockManager, std::default_delete&lt;duckdb::PartialBlockManager&gt; &gt;::operator bool (5,399,968 samples, 0.01%)</title><rect x="233.3" y="1749" width="0.1" height="15.0" fill="rgb(247,22,51)" rx="2" ry="2" />
<text  x="236.27" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::~vector (5,552,301 samples, 0.01%)</title><rect x="966.6" y="1749" width="0.1" height="15.0" fill="rgb(252,136,20)" rx="2" ry="2" />
<text  x="969.61" y="1759.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::InClauseSimplificationRule, std::default_delete&lt;duckdb::InClauseSimplificationRule&gt; &gt;::_M_ptr (4,747,233 samples, 0.01%)</title><rect x="810.9" y="1813" width="0.1" height="15.0" fill="rgb(238,208,11)" rx="2" ry="2" />
<text  x="813.93" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VisitOperator (51,321,832 samples, 0.10%)</title><rect x="842.6" y="1781" width="1.2" height="15.0" fill="rgb(217,42,38)" rx="2" ry="2" />
<text  x="845.63" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalExpressionScan, std::default_delete&lt;duckdb::PhysicalExpressionScan&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PhysicalExpressionScan&gt;, void&gt; (9,128,141 samples, 0.02%)</title><rect x="913.9" y="1749" width="0.2" height="15.0" fill="rgb(251,146,51)" rx="2" ry="2" />
<text  x="916.92" y="1759.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::Reset (5,862,485 samples, 0.01%)</title><rect x="108.5" y="1493" width="0.2" height="15.0" fill="rgb(237,183,3)" rx="2" ry="2" />
<text  x="111.53" y="1503.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, std::shared_ptr&lt;duckdb::BoundParameterData&gt;, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, std::shared_ptr&lt;duckdb::BoundParameterData&gt; &gt; &gt; &gt;::~unordered_map (4,603,887 samples, 0.01%)</title><rect x="641.9" y="1845" width="0.1" height="15.0" fill="rgb(243,142,53)" rx="2" ry="2" />
<text  x="644.93" y="1855.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::FunctionMatcher&gt;::operator (7,479,738 samples, 0.01%)</title><rect x="829.7" y="1557" width="0.2" height="15.0" fill="rgb(214,26,19)" rx="2" ry="2" />
<text  x="832.69" y="1567.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ManyFunctionMatcher, std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (7,847,309 samples, 0.02%)</title><rect x="814.9" y="1845" width="0.1" height="15.0" fill="rgb(206,155,3)" rx="2" ry="2" />
<text  x="817.85" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::unique_ptr (5,402,335 samples, 0.01%)</title><rect x="622.8" y="1733" width="0.2" height="15.0" fill="rgb(213,136,1)" rx="2" ry="2" />
<text  x="625.83" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TaskScheduler, std::default_delete&lt;duckdb::TaskScheduler&gt; &gt;::get (21,357,840 samples, 0.04%)</title><rect x="502.6" y="1829" width="0.5" height="15.0" fill="rgb(237,203,50)" rx="2" ry="2" />
<text  x="505.65" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::MetaPipeline&gt;::construct&lt;duckdb::MetaPipeline, duckdb::Executor&amp;, duckdb::PipelineBuildState&amp;, decltype (100,420,160 samples, 0.20%)</title><rect x="1093.3" y="1749" width="2.3" height="15.0" fill="rgb(211,79,17)" rx="2" ry="2" />
<text  x="1096.32" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Rule::~Rule (8,716,164 samples, 0.02%)</title><rect x="832.1" y="1685" width="0.2" height="15.0" fill="rgb(240,78,13)" rx="2" ry="2" />
<text  x="835.14" y="1695.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (18,326,115 samples, 0.04%)</title><rect x="1187.9" y="2021" width="0.4" height="15.0" fill="rgb(230,206,16)" rx="2" ry="2" />
<text  x="1190.85" y="2031.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::StorageLockKey, std::default_delete&lt;duckdb::StorageLockKey&gt;, true&gt;, true&gt;::~vector (5,873,807 samples, 0.01%)</title><rect x="288.8" y="1701" width="0.1" height="15.0" fill="rgb(253,176,1)" rx="2" ry="2" />
<text  x="291.76" y="1711.5" ></text>
</g>
<g >
<title>duckdb::CommitState::~CommitState (5,244,983 samples, 0.01%)</title><rect x="254.2" y="1797" width="0.1" height="15.0" fill="rgb(211,197,42)" rx="2" ry="2" />
<text  x="257.15" y="1807.5" ></text>
</g>
<g >
<title>std::locale::_Impl::_Impl (5,269,899 samples, 0.01%)</title><rect x="90.4" y="1989" width="0.1" height="15.0" fill="rgb(206,50,25)" rx="2" ry="2" />
<text  x="93.42" y="1999.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::~unique_ptr (7,417,792 samples, 0.01%)</title><rect x="955.4" y="1653" width="0.2" height="15.0" fill="rgb(209,38,5)" rx="2" ry="2" />
<text  x="958.39" y="1663.5" ></text>
</g>
<g >
<title>page_fault (95,679,096 samples, 0.19%)</title><rect x="72.0" y="1973" width="2.2" height="15.0" fill="rgb(248,109,30)" rx="2" ry="2" />
<text  x="74.96" y="1983.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SelectStatement, std::default_delete&lt;duckdb::SelectStatement&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::SelectStatement&gt;, void&gt; (8,000,141 samples, 0.02%)</title><rect x="536.6" y="1781" width="0.2" height="15.0" fill="rgb(210,194,27)" rx="2" ry="2" />
<text  x="539.63" y="1791.5" ></text>
</g>
<g >
<title>duckdb::PhysicalPlanGenerator::CreatePlan (2,598,259,382 samples, 5.07%)</title><rect x="859.5" y="1845" width="59.8" height="15.0" fill="rgb(222,81,37)" rx="2" ry="2" />
<text  x="862.54" y="1855.5" >duckdb..</text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="885" width="0.1" height="15.0" fill="rgb(254,42,39)" rx="2" ry="2" />
<text  x="14.25" y="895.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (158,894,513 samples, 0.31%)</title><rect x="1170.5" y="1973" width="3.6" height="15.0" fill="rgb(207,196,47)" rx="2" ry="2" />
<text  x="1173.46" y="1983.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::unique_ptr (4,434,281 samples, 0.01%)</title><rect x="856.3" y="1797" width="0.1" height="15.0" fill="rgb(224,26,19)" rx="2" ry="2" />
<text  x="859.31" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;std::lock_guard&lt;std::mutex&gt;, std::default_delete&lt;std::lock_guard&lt;std::mutex&gt; &gt;, true&gt;::~unique_ptr (21,895,435 samples, 0.04%)</title><rect x="329.3" y="1829" width="0.5" height="15.0" fill="rgb(206,152,49)" rx="2" ry="2" />
<text  x="332.31" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (22,347,314 samples, 0.04%)</title><rect x="719.5" y="1813" width="0.5" height="15.0" fill="rgb(213,83,18)" rx="2" ry="2" />
<text  x="722.47" y="1823.5" ></text>
</g>
<g >
<title>duckdb::RegexOptimizationRule::~RegexOptimizationRule (6,880,726 samples, 0.01%)</title><rect x="833.2" y="1701" width="0.1" height="15.0" fill="rgb(207,132,20)" rx="2" ry="2" />
<text  x="836.18" y="1711.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (22,132,858 samples, 0.04%)</title><rect x="338.6" y="1461" width="0.5" height="15.0" fill="rgb(243,136,29)" rx="2" ry="2" />
<text  x="341.55" y="1471.5" ></text>
</g>
<g >
<title>__lsan::ScanRangeForPointers (45,987,509 samples, 0.09%)</title><rect x="49.5" y="2021" width="1.1" height="15.0" fill="rgb(244,155,46)" rx="2" ry="2" />
<text  x="52.53" y="2031.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (46,466,960 samples, 0.09%)</title><rect x="401.2" y="1525" width="1.1" height="15.0" fill="rgb(246,59,23)" rx="2" ry="2" />
<text  x="404.20" y="1535.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::PutEntry (15,971,602 samples, 0.03%)</title><rect x="1113.1" y="1813" width="0.4" height="15.0" fill="rgb(218,210,18)" rx="2" ry="2" />
<text  x="1116.14" y="1823.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::AddTiming (80,474,816 samples, 0.16%)</title><rect x="466.3" y="1797" width="1.9" height="15.0" fill="rgb(226,8,22)" rx="2" ry="2" />
<text  x="469.33" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics []&gt; &gt;::release (5,645,311 samples, 0.01%)</title><rect x="424.6" y="1477" width="0.1" height="15.0" fill="rgb(244,130,33)" rx="2" ry="2" />
<text  x="427.56" y="1487.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt; &gt;::operator= (8,910,828 samples, 0.02%)</title><rect x="989.9" y="1541" width="0.2" height="15.0" fill="rgb(245,161,22)" rx="2" ry="2" />
<text  x="992.90" y="1551.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::extent_split_interior (6,684,782 samples, 0.01%)</title><rect x="877.3" y="1221" width="0.2" height="15.0" fill="rgb(244,177,30)" rx="2" ry="2" />
<text  x="880.31" y="1231.5" ></text>
</g>
<g >
<title>free_unref_page_commit (17,547,915 samples, 0.03%)</title><rect x="1179.2" y="1797" width="0.4" height="15.0" fill="rgb(221,221,13)" rx="2" ry="2" />
<text  x="1182.17" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_dalloc_large (6,489,054 samples, 0.01%)</title><rect x="334.0" y="1269" width="0.2" height="15.0" fill="rgb(232,150,45)" rx="2" ry="2" />
<text  x="337.02" y="1279.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, duckdb::OperatorInformation, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt; &gt;::operator[] (42,435,248 samples, 0.08%)</title><rect x="467.2" y="1781" width="1.0" height="15.0" fill="rgb(236,227,32)" rx="2" ry="2" />
<text  x="470.21" y="1791.5" ></text>
</g>
<g >
<title>duckdb::PhysicalColumnDataScan::~PhysicalColumnDataScan (443,491,180 samples, 0.86%)</title><rect x="340.0" y="1445" width="10.2" height="15.0" fill="rgb(218,227,37)" rx="2" ry="2" />
<text  x="342.98" y="1455.5" ></text>
</g>
<g >
<title>duckdb::SelCache::~SelCache (10,931,458 samples, 0.02%)</title><rect x="293.2" y="1701" width="0.3" height="15.0" fill="rgb(223,165,22)" rx="2" ry="2" />
<text  x="296.22" y="1711.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::~PhysicalOperator (16,778,972 samples, 0.03%)</title><rect x="340.0" y="1413" width="0.4" height="15.0" fill="rgb(206,222,30)" rx="2" ry="2" />
<text  x="343.00" y="1423.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocate (45,250,134 samples, 0.09%)</title><rect x="289.3" y="1509" width="1.1" height="15.0" fill="rgb(225,54,21)" rx="2" ry="2" />
<text  x="292.31" y="1519.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, std::shared_ptr&lt;duckdb::QueryProfiler&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long, std::shared_ptr&lt;duckdb::QueryProfiler&gt; &gt; &gt; (27,099,394 samples, 0.05%)</title><rect x="352.4" y="1845" width="0.6" height="15.0" fill="rgb(240,203,33)" rx="2" ry="2" />
<text  x="355.40" y="1855.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt; &gt; &gt;::insert&lt;std::pair&lt;duckdb::PhysicalOperator const&amp;, duckdb::QueryProfiler::TreeNode&amp;&gt; &gt; (7,316,646 samples, 0.01%)</title><rect x="1086.4" y="1813" width="0.2" height="15.0" fill="rgb(218,33,39)" rx="2" ry="2" />
<text  x="1089.43" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unsafe_get_property (5,246,387 samples, 0.01%)</title><rect x="1071.8" y="1685" width="0.1" height="15.0" fill="rgb(245,74,5)" rx="2" ry="2" />
<text  x="1074.76" y="1695.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::GetName[abi:cxx11] (4,538,801 samples, 0.01%)</title><rect x="548.8" y="1509" width="0.1" height="15.0" fill="rgb(205,225,2)" rx="2" ry="2" />
<text  x="551.77" y="1519.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::shared_ptr&lt;duckdb::VectorBuffer&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::VectorBuffer&gt; &gt; &gt;::_Vector_base (4,863,517 samples, 0.01%)</title><rect x="369.1" y="1637" width="0.1" height="15.0" fill="rgb(219,96,16)" rx="2" ry="2" />
<text  x="372.06" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::~vector (8,140,745 samples, 0.02%)</title><rect x="1075.4" y="1749" width="0.2" height="15.0" fill="rgb(237,63,20)" rx="2" ry="2" />
<text  x="1078.44" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::deallocate (6,165,126 samples, 0.01%)</title><rect x="682.7" y="1701" width="0.1" height="15.0" fill="rgb(242,217,24)" rx="2" ry="2" />
<text  x="685.66" y="1711.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::RegisterTableFunctions (4,793,669 samples, 0.01%)</title><rect x="1111.7" y="1909" width="0.2" height="15.0" fill="rgb(212,187,1)" rx="2" ry="2" />
<text  x="1114.74" y="1919.5" ></text>
</g>
<g >
<title>duckdb::StarExpression::~StarExpression (10,301,429 samples, 0.02%)</title><rect x="946.7" y="1621" width="0.2" height="15.0" fill="rgb(241,72,20)" rx="2" ry="2" />
<text  x="949.67" y="1631.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::reference_wrapper&lt;duckdb::Binding&gt;, true&gt;::~vector (5,046,177 samples, 0.01%)</title><rect x="1016.4" y="1685" width="0.1" height="15.0" fill="rgb(239,16,47)" rx="2" ry="2" />
<text  x="1019.38" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_default (228,967,963 samples, 0.45%)</title><rect x="344.3" y="853" width="5.2" height="15.0" fill="rgb(227,155,46)" rx="2" ry="2" />
<text  x="347.28" y="863.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::InClauseSimplificationRule*, std::default_delete&lt;duckdb::InClauseSimplificationRule&gt; &gt; (4,747,233 samples, 0.01%)</title><rect x="810.9" y="1797" width="0.1" height="15.0" fill="rgb(240,82,6)" rx="2" ry="2" />
<text  x="813.93" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::NodeStatistics, std::default_delete&lt;duckdb::NodeStatistics&gt; &gt;::unique_ptr (5,277,449 samples, 0.01%)</title><rect x="767.5" y="1701" width="0.1" height="15.0" fill="rgb(224,110,52)" rx="2" ry="2" />
<text  x="770.49" y="1711.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (6,917,445 samples, 0.01%)</title><rect x="10.4" y="2021" width="0.1" height="15.0" fill="rgb(249,99,11)" rx="2" ry="2" />
<text  x="13.39" y="2031.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (4,965,859 samples, 0.01%)</title><rect x="106.9" y="1413" width="0.1" height="15.0" fill="rgb(246,83,33)" rx="2" ry="2" />
<text  x="109.89" y="1423.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1845" width="0.1" height="15.0" fill="rgb(248,219,28)" rx="2" ry="2" />
<text  x="14.25" y="1855.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (18,033,605 samples, 0.04%)</title><rect x="177.7" y="2037" width="0.4" height="15.0" fill="rgb(206,21,19)" rx="2" ry="2" />
<text  x="180.65" y="2047.5" ></text>
</g>
<g >
<title>std::chrono::operator-&lt;std::chrono::_V2::system_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (4,630,308 samples, 0.01%)</title><rect x="922.8" y="1845" width="0.1" height="15.0" fill="rgb(233,210,33)" rx="2" ry="2" />
<text  x="925.79" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (271,404,830 samples, 0.53%)</title><rect x="872.9" y="1525" width="6.2" height="15.0" fill="rgb(224,112,12)" rx="2" ry="2" />
<text  x="875.85" y="1535.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, unsigned long&amp;&gt; (22,396,758 samples, 0.04%)</title><rect x="473.7" y="1685" width="0.5" height="15.0" fill="rgb(222,142,29)" rx="2" ry="2" />
<text  x="476.72" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ExecutorTask::Execute (767,329,557 samples, 1.50%)</title><rect x="91.2" y="1861" width="17.7" height="15.0" fill="rgb(228,135,21)" rx="2" ry="2" />
<text  x="94.24" y="1871.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::operator= (9,114,478 samples, 0.02%)</title><rect x="1026.6" y="1861" width="0.2" height="15.0" fill="rgb(205,17,27)" rx="2" ry="2" />
<text  x="1029.60" y="1871.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::SelectionData&gt; &gt;::destroy&lt;duckdb::SelectionData&gt; (4,543,721 samples, 0.01%)</title><rect x="212.1" y="1589" width="0.1" height="15.0" fill="rgb(248,28,6)" rx="2" ry="2" />
<text  x="215.07" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::max_size (32,070,666 samples, 0.06%)</title><rect x="567.2" y="1733" width="0.7" height="15.0" fill="rgb(215,213,53)" rx="2" ry="2" />
<text  x="570.20" y="1743.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt; &gt;::find (6,356,834 samples, 0.01%)</title><rect x="927.5" y="1701" width="0.1" height="15.0" fill="rgb(234,129,5)" rx="2" ry="2" />
<text  x="930.49" y="1711.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_codepoint (14,923,851 samples, 0.03%)</title><rect x="560.5" y="1765" width="0.3" height="15.0" fill="rgb(215,169,23)" rx="2" ry="2" />
<text  x="563.49" y="1775.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::_M_ptr (6,065,076 samples, 0.01%)</title><rect x="620.2" y="1669" width="0.1" height="15.0" fill="rgb(234,166,16)" rx="2" ry="2" />
<text  x="623.17" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr (6,833,191 samples, 0.01%)</title><rect x="798.2" y="1765" width="0.1" height="15.0" fill="rgb(216,146,3)" rx="2" ry="2" />
<text  x="801.16" y="1775.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (96,090,125 samples, 0.19%)</title><rect x="762.5" y="1765" width="2.2" height="15.0" fill="rgb(218,192,35)" rx="2" ry="2" />
<text  x="765.47" y="1775.5" ></text>
</g>
<g >
<title>vmacache_find (8,620,450 samples, 0.02%)</title><rect x="162.4" y="1941" width="0.1" height="15.0" fill="rgb(209,125,52)" rx="2" ry="2" />
<text  x="165.35" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (4,888,886 samples, 0.01%)</title><rect x="420.7" y="1749" width="0.1" height="15.0" fill="rgb(205,6,18)" rx="2" ry="2" />
<text  x="423.72" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (123,235,648 samples, 0.24%)</title><rect x="731.4" y="1781" width="2.8" height="15.0" fill="rgb(245,63,29)" rx="2" ry="2" />
<text  x="734.36" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,871,363 samples, 0.02%)</title><rect x="1025.2" y="1813" width="0.2" height="15.0" fill="rgb(209,221,14)" rx="2" ry="2" />
<text  x="1028.18" y="1823.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*, duckdb::Vector&gt; (76,191,275 samples, 0.15%)</title><rect x="221.2" y="1685" width="1.8" height="15.0" fill="rgb(248,51,25)" rx="2" ry="2" />
<text  x="224.21" y="1695.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, true&gt;::clear (37,773,765 samples, 0.07%)</title><rect x="357.4" y="1877" width="0.9" height="15.0" fill="rgb(245,225,21)" rx="2" ry="2" />
<text  x="360.40" y="1887.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::FileBuffer&gt;::operator (241,378,595 samples, 0.47%)</title><rect x="344.1" y="949" width="5.6" height="15.0" fill="rgb(254,193,16)" rx="2" ry="2" />
<text  x="347.14" y="959.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (83,127,502 samples, 0.16%)</title><rect x="486.7" y="1653" width="1.9" height="15.0" fill="rgb(252,8,3)" rx="2" ry="2" />
<text  x="489.66" y="1663.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt;, true&gt;::vector (6,014,163 samples, 0.01%)</title><rect x="758.4" y="1781" width="0.1" height="15.0" fill="rgb(237,176,11)" rx="2" ry="2" />
<text  x="761.41" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="373" width="0.1" height="15.0" fill="rgb(232,45,27)" rx="2" ry="2" />
<text  x="14.25" y="383.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;, true&gt;::operator= (15,311,421 samples, 0.03%)</title><rect x="966.2" y="1749" width="0.4" height="15.0" fill="rgb(244,155,28)" rx="2" ry="2" />
<text  x="969.24" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (56,109,684 samples, 0.11%)</title><rect x="379.9" y="1781" width="1.3" height="15.0" fill="rgb(242,202,4)" rx="2" ry="2" />
<text  x="382.94" y="1791.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::AppendVersionInfo (441,332,092 samples, 0.86%)</title><rect x="406.2" y="1701" width="10.2" height="15.0" fill="rgb(239,71,8)" rx="2" ry="2" />
<text  x="409.20" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (20,100,300 samples, 0.04%)</title><rect x="147.4" y="2005" width="0.5" height="15.0" fill="rgb(222,183,43)" rx="2" ry="2" />
<text  x="150.41" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnScanState, std::allocator&lt;duckdb::ColumnScanState&gt; &gt;::_M_default_append (8,084,925 samples, 0.02%)</title><rect x="299.1" y="1637" width="0.2" height="15.0" fill="rgb(242,162,31)" rx="2" ry="2" />
<text  x="302.15" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (53,976,843 samples, 0.11%)</title><rect x="486.9" y="1509" width="1.3" height="15.0" fill="rgb(247,74,37)" rx="2" ry="2" />
<text  x="489.92" y="1519.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt; &gt;::~unordered_map (5,208,639 samples, 0.01%)</title><rect x="946.7" y="1605" width="0.1" height="15.0" fill="rgb(226,23,43)" rx="2" ry="2" />
<text  x="949.70" y="1615.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_get (4,781,397 samples, 0.01%)</title><rect x="392.7" y="1509" width="0.1" height="15.0" fill="rgb(250,148,14)" rx="2" ry="2" />
<text  x="395.68" y="1519.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::~FileBuffer (60,507,330 samples, 0.12%)</title><rect x="239.6" y="597" width="1.4" height="15.0" fill="rgb(211,112,21)" rx="2" ry="2" />
<text  x="242.58" y="607.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;unsigned long, false&gt; (6,878,475 samples, 0.01%)</title><rect x="686.9" y="1813" width="0.1" height="15.0" fill="rgb(243,11,22)" rx="2" ry="2" />
<text  x="689.88" y="1823.5" ></text>
</g>
<g >
<title>duckdb::DuckSchemaEntry::CreateFunction (95,807,838 samples, 0.19%)</title><rect x="1112.9" y="1877" width="2.2" height="15.0" fill="rgb(215,188,8)" rx="2" ry="2" />
<text  x="1115.86" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt; (28,130,425 samples, 0.05%)</title><rect x="1016.7" y="1589" width="0.6" height="15.0" fill="rgb(209,25,31)" rx="2" ry="2" />
<text  x="1019.67" y="1599.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (11,471,957 samples, 0.02%)</title><rect x="849.2" y="1749" width="0.2" height="15.0" fill="rgb(210,50,25)" rx="2" ry="2" />
<text  x="852.16" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt; (9,284,106 samples, 0.02%)</title><rect x="1117.6" y="837" width="0.2" height="15.0" fill="rgb(212,71,12)" rx="2" ry="2" />
<text  x="1120.55" y="847.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::HasNode (7,829,910 samples, 0.02%)</title><rect x="836.2" y="1813" width="0.2" height="15.0" fill="rgb(253,40,47)" rx="2" ry="2" />
<text  x="839.23" y="1823.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (19,889,675 samples, 0.04%)</title><rect x="734.5" y="1653" width="0.5" height="15.0" fill="rgb(238,99,52)" rx="2" ry="2" />
<text  x="737.53" y="1663.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateTree (192,230,354 samples, 0.37%)</title><rect x="594.1" y="1813" width="4.4" height="15.0" fill="rgb(242,172,17)" rx="2" ry="2" />
<text  x="597.06" y="1823.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; (447,892,946 samples, 0.87%)</title><rect x="339.9" y="1557" width="10.3" height="15.0" fill="rgb(250,49,41)" rx="2" ry="2" />
<text  x="342.89" y="1567.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (5,222,960 samples, 0.01%)</title><rect x="624.9" y="1765" width="0.1" height="15.0" fill="rgb(211,131,1)" rx="2" ry="2" />
<text  x="627.88" y="1775.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Unpin (35,422,276 samples, 0.07%)</title><rect x="861.7" y="1589" width="0.8" height="15.0" fill="rgb(227,51,41)" rx="2" ry="2" />
<text  x="864.67" y="1599.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (6,105,402 samples, 0.01%)</title><rect x="757.5" y="1733" width="0.2" height="15.0" fill="rgb(242,198,45)" rx="2" ry="2" />
<text  x="760.55" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ColumnStatistics::UpdateDistinctStatistics (35,623,576 samples, 0.07%)</title><rect x="228.7" y="1653" width="0.8" height="15.0" fill="rgb(233,27,21)" rx="2" ry="2" />
<text  x="231.67" y="1663.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (34,135,278 samples, 0.07%)</title><rect x="546.6" y="1797" width="0.8" height="15.0" fill="rgb(229,196,42)" rx="2" ry="2" />
<text  x="549.57" y="1807.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::BlockHandle, std::allocator&lt;duckdb::BlockHandle&gt;, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (6,497,338 samples, 0.01%)</title><rect x="103.7" y="1589" width="0.2" height="15.0" fill="rgb(224,90,29)" rx="2" ry="2" />
<text  x="106.73" y="1599.5" ></text>
</g>
<g >
<title>std::function&lt;void  (20,699,746 samples, 0.04%)</title><rect x="734.5" y="1685" width="0.5" height="15.0" fill="rgb(251,71,49)" rx="2" ry="2" />
<text  x="737.51" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Executor::HasError (70,126,631 samples, 0.14%)</title><rect x="397.8" y="1893" width="1.6" height="15.0" fill="rgb(217,194,46)" rx="2" ry="2" />
<text  x="400.79" y="1903.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::Reset (72,931,087 samples, 0.14%)</title><rect x="325.2" y="1509" width="1.7" height="15.0" fill="rgb(223,166,27)" rx="2" ry="2" />
<text  x="328.22" y="1519.5" ></text>
</g>
<g >
<title>duckdb::make_unsafe_uniq_array&lt;unsigned char&gt; (4,902,999 samples, 0.01%)</title><rect x="585.0" y="1845" width="0.1" height="15.0" fill="rgb(244,71,5)" rx="2" ry="2" />
<text  x="587.98" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnDataCopyFunction, true&gt;::~vector (7,508,762 samples, 0.01%)</title><rect x="338.3" y="1493" width="0.2" height="15.0" fill="rgb(216,193,50)" rx="2" ry="2" />
<text  x="341.28" y="1503.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::DictionaryBuffer, std::allocator&lt;duckdb::DictionaryBuffer&gt;,  (8,113,202 samples, 0.02%)</title><rect x="294.0" y="1573" width="0.2" height="15.0" fill="rgb(217,204,3)" rx="2" ry="2" />
<text  x="297.00" y="1583.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Binder,  (76,233,682 samples, 0.15%)</title><rect x="1027.8" y="1813" width="1.8" height="15.0" fill="rgb(214,65,54)" rx="2" ry="2" />
<text  x="1030.80" y="1823.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (5,646,698 samples, 0.01%)</title><rect x="106.9" y="1509" width="0.1" height="15.0" fill="rgb(248,50,8)" rx="2" ry="2" />
<text  x="109.87" y="1519.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (26,746,307 samples, 0.05%)</title><rect x="923.3" y="1861" width="0.6" height="15.0" fill="rgb(245,37,36)" rx="2" ry="2" />
<text  x="926.28" y="1871.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;*&gt; (26,152,165 samples, 0.05%)</title><rect x="483.9" y="1669" width="0.6" height="15.0" fill="rgb(234,211,24)" rx="2" ry="2" />
<text  x="486.91" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; (11,161,180 samples, 0.02%)</title><rect x="915.4" y="1653" width="0.3" height="15.0" fill="rgb(223,159,35)" rx="2" ry="2" />
<text  x="918.42" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt;::operator= (6,826,276 samples, 0.01%)</title><rect x="786.1" y="1829" width="0.2" height="15.0" fill="rgb(209,78,19)" rx="2" ry="2" />
<text  x="789.14" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::Expression&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::Expression&gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Expression&gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::ExpressionEquality&lt;duckdb::Expression&gt;, duckdb::ExpressionHashFunction&lt;duckdb::Expression&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (6,021,856 samples, 0.01%)</title><rect x="981.2" y="1701" width="0.1" height="15.0" fill="rgb(237,191,47)" rx="2" ry="2" />
<text  x="984.21" y="1711.5" ></text>
</g>
<g >
<title>duckdb::BufferedSerializer::GetData (10,945,856 samples, 0.02%)</title><rect x="585.1" y="1861" width="0.3" height="15.0" fill="rgb(244,45,33)" rx="2" ry="2" />
<text  x="588.15" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::QuarantineCache&lt;__asan::QuarantineCallback&gt;::Enqueue (95,949,459 samples, 0.19%)</title><rect x="54.2" y="2021" width="2.2" height="15.0" fill="rgb(206,184,40)" rx="2" ry="2" />
<text  x="57.24" y="2031.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::PendingStatementOrPreparedStatement (7,990,876 samples, 0.02%)</title><rect x="1109.3" y="1877" width="0.2" height="15.0" fill="rgb(205,28,16)" rx="2" ry="2" />
<text  x="1112.34" y="1887.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (63,473,631 samples, 0.12%)</title><rect x="192.7" y="1685" width="1.5" height="15.0" fill="rgb(219,89,53)" rx="2" ry="2" />
<text  x="195.70" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_alloc_event (5,890,612 samples, 0.01%)</title><rect x="290.0" y="1381" width="0.1" height="15.0" fill="rgb(205,167,46)" rx="2" ry="2" />
<text  x="293.00" y="1391.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt; &gt;::unique_ptr (12,946,174 samples, 0.03%)</title><rect x="448.7" y="1669" width="0.3" height="15.0" fill="rgb(207,123,53)" rx="2" ry="2" />
<text  x="451.73" y="1679.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::yy_get_next_buffer (5,288,791 samples, 0.01%)</title><rect x="523.4" y="1829" width="0.2" height="15.0" fill="rgb(232,215,11)" rx="2" ry="2" />
<text  x="526.44" y="1839.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::AllocateBuffer (10,709,304 samples, 0.02%)</title><rect x="863.5" y="1685" width="0.2" height="15.0" fill="rgb(224,105,13)" rx="2" ry="2" />
<text  x="866.46" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (30,265,486 samples, 0.06%)</title><rect x="289.5" y="1397" width="0.7" height="15.0" fill="rgb(247,125,48)" rx="2" ry="2" />
<text  x="292.46" y="1407.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_check_len (16,524,346 samples, 0.03%)</title><rect x="1073.8" y="1701" width="0.4" height="15.0" fill="rgb(245,140,31)" rx="2" ry="2" />
<text  x="1076.82" y="1711.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::BlockHandle,  (87,531,616 samples, 0.17%)</title><rect x="241.9" y="741" width="2.0" height="15.0" fill="rgb(208,24,20)" rx="2" ry="2" />
<text  x="244.86" y="751.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::vector (5,028,253 samples, 0.01%)</title><rect x="847.4" y="1781" width="0.1" height="15.0" fill="rgb(250,82,33)" rx="2" ry="2" />
<text  x="850.41" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_alloc (6,750,362 samples, 0.01%)</title><rect x="367.2" y="1541" width="0.1" height="15.0" fill="rgb(239,93,17)" rx="2" ry="2" />
<text  x="370.16" y="1551.5" ></text>
</g>
<g >
<title>futex_wake (14,000,900 samples, 0.03%)</title><rect x="93.6" y="1589" width="0.3" height="15.0" fill="rgb(249,77,41)" rx="2" ry="2" />
<text  x="96.57" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::unique_ptr&lt;duckdb::IntegerTypeMatcher, std::default_delete&lt;duckdb::IntegerTypeMatcher&gt;, void&gt; (13,113,888 samples, 0.03%)</title><rect x="787.1" y="1829" width="0.3" height="15.0" fill="rgb(210,107,39)" rx="2" ry="2" />
<text  x="790.08" y="1839.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (48,413,677 samples, 0.09%)</title><rect x="899.7" y="1541" width="1.1" height="15.0" fill="rgb(240,191,23)" rx="2" ry="2" />
<text  x="902.72" y="1551.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;duckdb::PhysicalType, std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt;, std::_Select1st&lt;std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt; &gt;, std::less&lt;duckdb::PhysicalType&gt;, std::allocator&lt;std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt; &gt; &gt;::_M_lower_bound (10,019,347 samples, 0.02%)</title><rect x="435.5" y="1605" width="0.2" height="15.0" fill="rgb(241,86,25)" rx="2" ry="2" />
<text  x="438.52" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1749" width="0.1" height="15.0" fill="rgb(219,26,14)" rx="2" ry="2" />
<text  x="14.25" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (13,814,631 samples, 0.03%)</title><rect x="438.3" y="1413" width="0.4" height="15.0" fill="rgb(221,55,30)" rx="2" ry="2" />
<text  x="441.34" y="1423.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DataChunk, std::default_delete&lt;duckdb::DataChunk&gt;, true&gt;::~unique_ptr (188,471,098 samples, 0.37%)</title><rect x="390.2" y="1925" width="4.3" height="15.0" fill="rgb(230,198,13)" rx="2" ry="2" />
<text  x="393.16" y="1935.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert_bucket_begin (5,850,679 samples, 0.01%)</title><rect x="788.4" y="1749" width="0.1" height="15.0" fill="rgb(239,13,8)" rx="2" ry="2" />
<text  x="791.41" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*&gt; (17,571,097 samples, 0.03%)</title><rect x="1036.4" y="1541" width="0.4" height="15.0" fill="rgb(245,5,50)" rx="2" ry="2" />
<text  x="1039.39" y="1551.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateTree (78,997,044 samples, 0.15%)</title><rect x="634.3" y="1781" width="1.8" height="15.0" fill="rgb(225,58,47)" rx="2" ry="2" />
<text  x="637.30" y="1791.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::StartOperator (7,312,339 samples, 0.01%)</title><rect x="476.6" y="1829" width="0.1" height="15.0" fill="rgb(223,53,7)" rx="2" ry="2" />
<text  x="479.58" y="1839.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (6,623,033 samples, 0.01%)</title><rect x="848.8" y="1797" width="0.2" height="15.0" fill="rgb(239,16,24)" rx="2" ry="2" />
<text  x="851.84" y="1807.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; (5,821,708 samples, 0.01%)</title><rect x="490.7" y="1701" width="0.1" height="15.0" fill="rgb(245,36,51)" rx="2" ry="2" />
<text  x="493.67" y="1711.5" ></text>
</g>
<g >
<title>duckdb::BindContext::CheckExclusionList (29,067,516 samples, 0.06%)</title><rect x="942.8" y="1701" width="0.7" height="15.0" fill="rgb(207,229,45)" rx="2" ry="2" />
<text  x="945.79" y="1711.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::CatalogSearchEntry, true&gt;::vector (4,906,731 samples, 0.01%)</title><rect x="1009.3" y="1765" width="0.1" height="15.0" fill="rgb(221,147,7)" rx="2" ry="2" />
<text  x="1012.26" y="1775.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (4,389,727 samples, 0.01%)</title><rect x="567.4" y="1717" width="0.1" height="15.0" fill="rgb(232,136,27)" rx="2" ry="2" />
<text  x="570.44" y="1727.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Event&gt;::shared_ptr&lt;duckdb::Event, void&gt; (4,391,727 samples, 0.01%)</title><rect x="1046.3" y="1781" width="0.1" height="15.0" fill="rgb(219,172,25)" rx="2" ry="2" />
<text  x="1049.32" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (8,221,770 samples, 0.02%)</title><rect x="574.4" y="1765" width="0.2" height="15.0" fill="rgb(213,135,10)" rx="2" ry="2" />
<text  x="577.37" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (18,230,654 samples, 0.04%)</title><rect x="669.4" y="1749" width="0.4" height="15.0" fill="rgb(248,179,19)" rx="2" ry="2" />
<text  x="672.42" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CompressionAppendState, std::default_delete&lt;duckdb::CompressionAppendState&gt; &gt;::~unique_ptr (16,560,790 samples, 0.03%)</title><rect x="233.6" y="1669" width="0.4" height="15.0" fill="rgb(244,81,9)" rx="2" ry="2" />
<text  x="236.64" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (7,614,792 samples, 0.01%)</title><rect x="1024.7" y="1765" width="0.1" height="15.0" fill="rgb(205,103,38)" rx="2" ry="2" />
<text  x="1027.65" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr (6,793,654 samples, 0.01%)</title><rect x="813.5" y="1749" width="0.1" height="15.0" fill="rgb(231,25,13)" rx="2" ry="2" />
<text  x="816.47" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Vector, true&gt;::~vector (66,037,647 samples, 0.13%)</title><rect x="497.9" y="1781" width="1.6" height="15.0" fill="rgb(209,151,30)" rx="2" ry="2" />
<text  x="500.94" y="1791.5" ></text>
</g>
<g >
<title>__do_sys_newfstat (11,204,877 samples, 0.02%)</title><rect x="190.7" y="1685" width="0.2" height="15.0" fill="rgb(230,226,20)" rx="2" ry="2" />
<text  x="193.67" y="1695.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::SelectionData&gt; &gt;::destroy&lt;duckdb::SelectionData&gt; (4,569,833 samples, 0.01%)</title><rect x="292.3" y="1413" width="0.1" height="15.0" fill="rgb(209,20,36)" rx="2" ry="2" />
<text  x="295.31" y="1423.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt; &gt; &gt;::push_back (14,930,757 samples, 0.03%)</title><rect x="427.6" y="1573" width="0.3" height="15.0" fill="rgb(231,124,0)" rx="2" ry="2" />
<text  x="430.60" y="1583.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::UnifiedVectorFormat*&gt; (11,397,512 samples, 0.02%)</title><rect x="374.7" y="1845" width="0.3" height="15.0" fill="rgb(237,67,45)" rx="2" ry="2" />
<text  x="377.70" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FoldableConstantMatcher, std::default_delete&lt;duckdb::FoldableConstantMatcher&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::FoldableConstantMatcher&gt;, void&gt; (6,180,801 samples, 0.01%)</title><rect x="793.0" y="1813" width="0.1" height="15.0" fill="rgb(219,187,54)" rx="2" ry="2" />
<text  x="795.99" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ProgressBar, std::default_delete&lt;duckdb::ProgressBar&gt; &gt;::get (5,588,051 samples, 0.01%)</title><rect x="512.4" y="1909" width="0.1" height="15.0" fill="rgb(250,41,15)" rx="2" ry="2" />
<text  x="515.36" y="1919.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::ScanCommitted (875,126,094 samples, 1.71%)</title><rect x="267.1" y="1669" width="20.1" height="15.0" fill="rgb(223,222,1)" rx="2" ry="2" />
<text  x="270.06" y="1679.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long, std::deque&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;::stack&lt;std::deque&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, void&gt; (10,292,892 samples, 0.02%)</title><rect x="496.9" y="1829" width="0.2" height="15.0" fill="rgb(217,188,27)" rx="2" ry="2" />
<text  x="499.87" y="1839.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_allocate (6,046,946 samples, 0.01%)</title><rect x="628.2" y="1717" width="0.2" height="15.0" fill="rgb(231,64,12)" rx="2" ry="2" />
<text  x="631.24" y="1727.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBoxContent (246,137,595 samples, 0.48%)</title><rect x="1071.0" y="1765" width="5.7" height="15.0" fill="rgb(211,49,8)" rx="2" ry="2" />
<text  x="1074.05" y="1775.5" ></text>
</g>
<g >
<title>__lsan::LsanMetadata::allocated (28,127,635 samples, 0.05%)</title><rect x="48.1" y="2021" width="0.6" height="15.0" fill="rgb(250,122,40)" rx="2" ry="2" />
<text  x="51.06" y="2031.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::InitializeState (7,658,508 samples, 0.01%)</title><rect x="489.9" y="1717" width="0.2" height="15.0" fill="rgb(226,25,53)" rx="2" ry="2" />
<text  x="492.93" y="1727.5" ></text>
</g>
<g >
<title>duckdb::PhysicalExpressionScan::PhysicalExpressionScan (18,204,649 samples, 0.04%)</title><rect x="913.5" y="1765" width="0.4" height="15.0" fill="rgb(207,152,36)" rx="2" ry="2" />
<text  x="916.47" y="1775.5" ></text>
</g>
<g >
<title>wake_up_q (17,115,676 samples, 0.03%)</title><rect x="94.0" y="1557" width="0.4" height="15.0" fill="rgb(218,223,48)" rx="2" ry="2" />
<text  x="97.00" y="1567.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_fetch_min (5,672,283 samples, 0.01%)</title><rect x="392.8" y="1525" width="0.1" height="15.0" fill="rgb(250,211,34)" rx="2" ry="2" />
<text  x="395.79" y="1535.5" ></text>
</g>
<g >
<title>duckdb::StringHeap::StringHeap (54,061,853 samples, 0.11%)</title><rect x="866.8" y="1717" width="1.2" height="15.0" fill="rgb(214,110,34)" rx="2" ry="2" />
<text  x="869.78" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::GenerateColumnBindings (6,941,175 samples, 0.01%)</title><rect x="845.8" y="1813" width="0.2" height="15.0" fill="rgb(213,180,29)" rx="2" ry="2" />
<text  x="848.84" y="1823.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (16,011,547 samples, 0.03%)</title><rect x="617.0" y="1749" width="0.3" height="15.0" fill="rgb(232,122,34)" rx="2" ry="2" />
<text  x="619.96" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ChunkVectorInfo, std::default_delete&lt;duckdb::ChunkVectorInfo&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ChunkVectorInfo&gt;, void&gt; (5,847,819 samples, 0.01%)</title><rect x="414.8" y="1653" width="0.2" height="15.0" fill="rgb(248,177,2)" rx="2" ry="2" />
<text  x="417.84" y="1663.5" ></text>
</g>
<g >
<title>duckdb::Transformer::StackCheck (4,437,249 samples, 0.01%)</title><rect x="526.7" y="1765" width="0.1" height="15.0" fill="rgb(244,151,51)" rx="2" ry="2" />
<text  x="529.72" y="1775.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::unordered_set (47,459,460 samples, 0.09%)</title><rect x="816.5" y="1845" width="1.1" height="15.0" fill="rgb(249,149,50)" rx="2" ry="2" />
<text  x="819.53" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_default_append (5,544,074 samples, 0.01%)</title><rect x="1021.3" y="1813" width="0.1" height="15.0" fill="rgb(253,27,32)" rx="2" ry="2" />
<text  x="1024.31" y="1823.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (76,754,009 samples, 0.15%)</title><rect x="400.8" y="1765" width="1.7" height="15.0" fill="rgb(218,69,4)" rx="2" ry="2" />
<text  x="403.76" y="1775.5" ></text>
</g>
<g >
<title>duckdb::CastFunctionSet::GetCastFunction (22,744,824 samples, 0.04%)</title><rect x="932.5" y="1685" width="0.5" height="15.0" fill="rgb(224,23,27)" rx="2" ry="2" />
<text  x="935.47" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnAppendState [], std::default_delete&lt;duckdb::ColumnAppendState&gt;, false&gt;::operator= (8,825,116 samples, 0.02%)</title><rect x="452.5" y="1733" width="0.2" height="15.0" fill="rgb(237,212,24)" rx="2" ry="2" />
<text  x="455.50" y="1743.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*&gt; (11,917,832 samples, 0.02%)</title><rect x="631.1" y="1701" width="0.3" height="15.0" fill="rgb(216,59,34)" rx="2" ry="2" />
<text  x="634.11" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (21,352,358 samples, 0.04%)</title><rect x="666.6" y="1717" width="0.5" height="15.0" fill="rgb(221,121,21)" rx="2" ry="2" />
<text  x="669.64" y="1727.5" ></text>
</g>
<g >
<title>duckdb::BoundConstantExpression::~BoundConstantExpression (5,959,088 samples, 0.01%)</title><rect x="350.6" y="1445" width="0.1" height="15.0" fill="rgb(219,167,42)" rx="2" ry="2" />
<text  x="353.59" y="1455.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::MappingValue&gt;::operator (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1413" width="0.3" height="15.0" fill="rgb(246,190,22)" rx="2" ry="2" />
<text  x="1120.47" y="1423.5" ></text>
</g>
<g >
<title>duckdb::SelectionVector::SelectionVector (500,919,598 samples, 0.98%)</title><rect x="200.3" y="1685" width="11.6" height="15.0" fill="rgb(241,147,1)" rx="2" ry="2" />
<text  x="203.33" y="1695.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (2,163,389,586 samples, 4.22%)</title><rect x="723.0" y="1845" width="49.8" height="15.0" fill="rgb(223,89,49)" rx="2" ry="2" />
<text  x="725.99" y="1855.5" >std::..</text>
</g>
<g >
<title>duckdb::ClientContext::Query (6,526,732 samples, 0.01%)</title><rect x="76.1" y="2021" width="0.2" height="15.0" fill="rgb(232,163,28)" rx="2" ry="2" />
<text  x="79.12" y="2031.5" ></text>
</g>
<g >
<title>duckdb::DataTable::WriteToLog (147,317,760 samples, 0.29%)</title><rect x="312.9" y="1685" width="3.3" height="15.0" fill="rgb(219,168,15)" rx="2" ry="2" />
<text  x="315.86" y="1695.5" ></text>
</g>
<g >
<title>handle_mm_fault (77,465,237 samples, 0.15%)</title><rect x="72.3" y="1909" width="1.8" height="15.0" fill="rgb(220,29,0)" rx="2" ry="2" />
<text  x="75.34" y="1919.5" ></text>
</g>
<g >
<title>duckdb::Vector::ResetFromCache (11,574,680 samples, 0.02%)</title><rect x="219.8" y="1621" width="0.3" height="15.0" fill="rgb(243,90,52)" rx="2" ry="2" />
<text  x="222.80" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt;::begin (4,518,776 samples, 0.01%)</title><rect x="683.1" y="1797" width="0.1" height="15.0" fill="rgb(206,58,20)" rx="2" ry="2" />
<text  x="686.06" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_metadata_read (5,195,338 samples, 0.01%)</title><rect x="482.2" y="1269" width="0.1" height="15.0" fill="rgb(250,42,44)" rx="2" ry="2" />
<text  x="485.21" y="1279.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::ColumnData&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::ColumnData&gt; &gt; &gt;::emplace_back&lt;std::shared_ptr&lt;duckdb::ColumnData&gt; &gt; (26,303,547 samples, 0.05%)</title><rect x="456.0" y="1701" width="0.6" height="15.0" fill="rgb(235,94,22)" rx="2" ry="2" />
<text  x="458.99" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (14,721,414 samples, 0.03%)</title><rect x="1014.8" y="1813" width="0.3" height="15.0" fill="rgb(253,165,28)" rx="2" ry="2" />
<text  x="1017.80" y="1823.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::str (4,517,082 samples, 0.01%)</title><rect x="555.9" y="1797" width="0.1" height="15.0" fill="rgb(244,136,29)" rx="2" ry="2" />
<text  x="558.90" y="1807.5" ></text>
</g>
<g >
<title>duckdb::DatabaseInstance::GetScheduler (4,464,889 samples, 0.01%)</title><rect x="854.2" y="1781" width="0.1" height="15.0" fill="rgb(220,110,8)" rx="2" ry="2" />
<text  x="857.21" y="1791.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::SelectionData&gt;::shared_ptr&lt;std::allocator&lt;duckdb::SelectionData&gt;, unsigned long&amp;&gt; (485,382,067 samples, 0.95%)</title><rect x="200.4" y="1621" width="11.2" height="15.0" fill="rgb(215,78,40)" rx="2" ry="2" />
<text  x="203.43" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::GetName[abi:cxx11] (6,842,273 samples, 0.01%)</title><rect x="596.7" y="1733" width="0.1" height="15.0" fill="rgb(212,95,18)" rx="2" ry="2" />
<text  x="599.66" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_trigger (18,173,561 samples, 0.04%)</title><rect x="1124.0" y="1493" width="0.4" height="15.0" fill="rgb(244,24,2)" rx="2" ry="2" />
<text  x="1126.96" y="1503.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::isalloc (5,548,278 samples, 0.01%)</title><rect x="438.2" y="1461" width="0.1" height="15.0" fill="rgb(222,46,53)" rx="2" ry="2" />
<text  x="441.19" y="1471.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (12,190,175 samples, 0.02%)</title><rect x="688.0" y="1781" width="0.3" height="15.0" fill="rgb(248,121,2)" rx="2" ry="2" />
<text  x="690.99" y="1791.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::GenerateColumnBindings (5,119,911 samples, 0.01%)</title><rect x="848.1" y="1829" width="0.1" height="15.0" fill="rgb(231,175,49)" rx="2" ry="2" />
<text  x="851.08" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CatalogEntry, std::default_delete&lt;duckdb::CatalogEntry&gt;, true&gt;::operator* (7,611,360 samples, 0.01%)</title><rect x="1003.7" y="1717" width="0.2" height="15.0" fill="rgb(244,143,5)" rx="2" ry="2" />
<text  x="1006.72" y="1727.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned long const*, unsigned long*&gt; (21,230,624 samples, 0.04%)</title><rect x="684.5" y="1717" width="0.5" height="15.0" fill="rgb(248,202,6)" rx="2" ry="2" />
<text  x="687.50" y="1727.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::~FunctionExpressionMatcher (11,880,597 samples, 0.02%)</title><rect x="832.9" y="1445" width="0.2" height="15.0" fill="rgb(251,221,36)" rx="2" ry="2" />
<text  x="835.87" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_nodes (22,492,917 samples, 0.04%)</title><rect x="696.8" y="1765" width="0.6" height="15.0" fill="rgb(241,21,25)" rx="2" ry="2" />
<text  x="699.84" y="1775.5" ></text>
</g>
<g >
<title>duckdb::DuckTransaction::Get (23,070,307 samples, 0.04%)</title><rect x="421.7" y="1749" width="0.5" height="15.0" fill="rgb(230,18,52)" rx="2" ry="2" />
<text  x="424.69" y="1759.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::unordered_set (7,144,747 samples, 0.01%)</title><rect x="384.0" y="1797" width="0.1" height="15.0" fill="rgb(241,92,10)" rx="2" ry="2" />
<text  x="386.98" y="1807.5" ></text>
</g>
<g >
<title>duckdb::UndoBuffer::UndoBuffer (90,109,333 samples, 0.18%)</title><rect x="996.7" y="1637" width="2.1" height="15.0" fill="rgb(220,13,5)" rx="2" ry="2" />
<text  x="999.72" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (41,202,532 samples, 0.08%)</title><rect x="487.0" y="1461" width="1.0" height="15.0" fill="rgb(245,198,50)" rx="2" ry="2" />
<text  x="490.05" y="1471.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (5,721,012 samples, 0.01%)</title><rect x="36.5" y="1989" width="0.1" height="15.0" fill="rgb(219,219,29)" rx="2" ry="2" />
<text  x="39.51" y="1999.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ConjunctionExpressionMatcher, std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt; &gt;::get (8,811,470 samples, 0.02%)</title><rect x="807.9" y="1829" width="0.2" height="15.0" fill="rgb(236,55,24)" rx="2" ry="2" />
<text  x="810.92" y="1839.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ColumnDataAllocator&gt;::~shared_ptr (85,545,655 samples, 0.17%)</title><rect x="1122.9" y="1861" width="2.0" height="15.0" fill="rgb(224,14,51)" rx="2" ry="2" />
<text  x="1125.95" y="1871.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;bool, true&gt;::operator[] (24,481,682 samples, 0.05%)</title><rect x="1055.3" y="1797" width="0.5" height="15.0" fill="rgb(245,223,12)" rx="2" ry="2" />
<text  x="1058.26" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::StringScanState, std::default_delete&lt;duckdb::StringScanState&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::StringScanState&gt;, void&gt; (11,357,709 samples, 0.02%)</title><rect x="213.2" y="1557" width="0.3" height="15.0" fill="rgb(238,128,17)" rx="2" ry="2" />
<text  x="216.22" y="1567.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::InClauseSimplificationRule, std::default_delete&lt;duckdb::InClauseSimplificationRule&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::InClauseSimplificationRule&gt;, void&gt; (7,966,385 samples, 0.02%)</title><rect x="810.9" y="1861" width="0.2" height="15.0" fill="rgb(245,52,19)" rx="2" ry="2" />
<text  x="813.93" y="1871.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::QueryProfiler&gt; &gt;::destroy&lt;duckdb::QueryProfiler&gt; (20,386,427 samples, 0.04%)</title><rect x="352.6" y="1733" width="0.4" height="15.0" fill="rgb(229,44,48)" rx="2" ry="2" />
<text  x="355.56" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign (10,620,909 samples, 0.02%)</title><rect x="800.7" y="1797" width="0.2" height="15.0" fill="rgb(244,217,25)" rx="2" ry="2" />
<text  x="803.65" y="1807.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::RenderTree (9,881,751 samples, 0.02%)</title><rect x="835.6" y="1797" width="0.2" height="15.0" fill="rgb(251,157,30)" rx="2" ry="2" />
<text  x="838.62" y="1807.5" ></text>
</g>
<g >
<title>duckdb::PreparedStatementData::PreparedStatementData (12,161,530 samples, 0.02%)</title><rect x="1040.8" y="1765" width="0.3" height="15.0" fill="rgb(230,66,49)" rx="2" ry="2" />
<text  x="1043.83" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (22,251,549 samples, 0.04%)</title><rect x="1096.2" y="1605" width="0.5" height="15.0" fill="rgb(208,10,17)" rx="2" ry="2" />
<text  x="1099.18" y="1615.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundSelectNode, std::default_delete&lt;duckdb::BoundSelectNode&gt;, true&gt;::operator (12,900,431 samples, 0.03%)</title><rect x="964.4" y="1749" width="0.3" height="15.0" fill="rgb(231,131,14)" rx="2" ry="2" />
<text  x="967.41" y="1759.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (5,399,491 samples, 0.01%)</title><rect x="923.2" y="1861" width="0.1" height="15.0" fill="rgb(233,164,40)" rx="2" ry="2" />
<text  x="926.15" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (9,271,485 samples, 0.02%)</title><rect x="857.3" y="1797" width="0.2" height="15.0" fill="rgb(207,18,15)" rx="2" ry="2" />
<text  x="860.33" y="1807.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::Pipeline*, duckdb::vector&lt;duckdb::Pipeline*, true&gt;, std::hash&lt;duckdb::Pipeline*&gt;, std::equal_to&lt;duckdb::Pipeline*&gt;, std::allocator&lt;std::pair&lt;duckdb::Pipeline* const, duckdb::vector&lt;duckdb::Pipeline*, true&gt; &gt; &gt; &gt;::~unordered_map (5,727,492 samples, 0.01%)</title><rect x="1096.5" y="1509" width="0.1" height="15.0" fill="rgb(247,42,13)" rx="2" ry="2" />
<text  x="1099.47" y="1519.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::RowGroupCollection&gt;::construct&lt;duckdb::RowGroupCollection, std::shared_ptr&lt;duckdb::DataTableInfo&gt;&amp;, duckdb::BlockManager&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, long const&amp;, int&gt; (4,680,746 samples, 0.01%)</title><rect x="102.5" y="1445" width="0.1" height="15.0" fill="rgb(253,118,33)" rx="2" ry="2" />
<text  x="105.50" y="1455.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::~ExpressionBinder (20,521,826 samples, 0.04%)</title><rect x="937.1" y="1717" width="0.5" height="15.0" fill="rgb(243,2,43)" rx="2" ry="2" />
<text  x="940.15" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::AllocateVector (654,755,734 samples, 1.28%)</title><rect x="869.9" y="1749" width="15.1" height="15.0" fill="rgb(219,202,7)" rx="2" ry="2" />
<text  x="872.92" y="1759.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (15,001,832 samples, 0.03%)</title><rect x="437.7" y="1445" width="0.3" height="15.0" fill="rgb(254,16,22)" rx="2" ry="2" />
<text  x="440.65" y="1455.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; (10,492,339 samples, 0.02%)</title><rect x="1084.5" y="1797" width="0.3" height="15.0" fill="rgb(209,2,39)" rx="2" ry="2" />
<text  x="1087.54" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::FoldableConstantMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (7,612,213 samples, 0.01%)</title><rect x="793.5" y="1845" width="0.2" height="15.0" fill="rgb(237,30,47)" rx="2" ry="2" />
<text  x="796.53" y="1855.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateExpression (17,371,769 samples, 0.03%)</title><rect x="766.3" y="1685" width="0.4" height="15.0" fill="rgb(227,36,37)" rx="2" ry="2" />
<text  x="769.31" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_choose (6,525,978 samples, 0.01%)</title><rect x="107.4" y="1333" width="0.2" height="15.0" fill="rgb(228,110,6)" rx="2" ry="2" />
<text  x="110.43" y="1343.5" ></text>
</g>
<g >
<title>duckdb::ComparisonExpressionMatcher::~ComparisonExpressionMatcher (13,566,407 samples, 0.03%)</title><rect x="831.8" y="1605" width="0.3" height="15.0" fill="rgb(217,159,11)" rx="2" ry="2" />
<text  x="834.79" y="1615.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_dalloc_large (4,916,273 samples, 0.01%)</title><rect x="498.5" y="1381" width="0.1" height="15.0" fill="rgb(220,187,19)" rx="2" ry="2" />
<text  x="501.45" y="1391.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::CreateEmpty (24,556,032 samples, 0.05%)</title><rect x="453.8" y="1477" width="0.5" height="15.0" fill="rgb(251,104,32)" rx="2" ry="2" />
<text  x="456.76" y="1487.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::PhysicalExpressionScan, std::default_delete&lt;duckdb::PhysicalExpressionScan&gt; &gt;::_M_ptr (6,279,965 samples, 0.01%)</title><rect x="914.9" y="1749" width="0.1" height="15.0" fill="rgb(227,145,11)" rx="2" ry="2" />
<text  x="917.89" y="1759.5" ></text>
</g>
<g >
<title>unmap_vmas (6,416,794 samples, 0.01%)</title><rect x="1172.9" y="1877" width="0.2" height="15.0" fill="rgb(246,171,4)" rx="2" ry="2" />
<text  x="1175.91" y="1887.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt; &gt; (12,719,137 samples, 0.02%)</title><rect x="539.8" y="1861" width="0.2" height="15.0" fill="rgb(245,172,27)" rx="2" ry="2" />
<text  x="542.75" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (12,783,411 samples, 0.02%)</title><rect x="802.4" y="1829" width="0.3" height="15.0" fill="rgb(227,131,42)" rx="2" ry="2" />
<text  x="805.38" y="1839.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_get_property (5,246,387 samples, 0.01%)</title><rect x="1071.8" y="1701" width="0.1" height="15.0" fill="rgb(245,211,16)" rx="2" ry="2" />
<text  x="1074.76" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::InitializeAppend (384,202,881 samples, 0.75%)</title><rect x="376.6" y="1925" width="8.8" height="15.0" fill="rgb(247,42,7)" rx="2" ry="2" />
<text  x="379.60" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (4,897,335 samples, 0.01%)</title><rect x="868.6" y="1717" width="0.1" height="15.0" fill="rgb(225,114,50)" rx="2" ry="2" />
<text  x="871.60" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;duckdb::BoundColumnRefExpression&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BoundColumnRefExpression&gt;, void&gt; (5,327,227 samples, 0.01%)</title><rect x="583.3" y="1829" width="0.1" height="15.0" fill="rgb(252,21,21)" rx="2" ry="2" />
<text  x="586.26" y="1839.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;unsigned long const*, unsigned long*, unsigned long&gt; (21,878,928 samples, 0.04%)</title><rect x="684.5" y="1749" width="0.5" height="15.0" fill="rgb(218,39,9)" rx="2" ry="2" />
<text  x="687.50" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Optimizer::Optimize (2,128,686,117 samples, 4.15%)</title><rect x="723.3" y="1829" width="49.0" height="15.0" fill="rgb(251,68,13)" rx="2" ry="2" />
<text  x="726.33" y="1839.5" >duck..</text>
</g>
<g >
<title>duckdb::Vector::SetValue (43,760,077 samples, 0.09%)</title><rect x="362.8" y="1813" width="1.0" height="15.0" fill="rgb(230,176,31)" rx="2" ry="2" />
<text  x="365.84" y="1823.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*&gt; (33,837,151 samples, 0.07%)</title><rect x="357.5" y="1797" width="0.7" height="15.0" fill="rgb(232,95,16)" rx="2" ry="2" />
<text  x="360.45" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ColumnStatistics::UpdateDistinctStatistics (40,486,651 samples, 0.08%)</title><rect x="460.3" y="1749" width="0.9" height="15.0" fill="rgb(236,45,43)" rx="2" ry="2" />
<text  x="463.27" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Expression const*, std::allocator&lt;duckdb::Expression const*&gt; &gt;::push_back (24,330,814 samples, 0.05%)</title><rect x="904.8" y="1733" width="0.5" height="15.0" fill="rgb(250,63,25)" rx="2" ry="2" />
<text  x="907.76" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::~unique_ptr (8,549,658 samples, 0.02%)</title><rect x="971.9" y="1477" width="0.2" height="15.0" fill="rgb(219,192,38)" rx="2" ry="2" />
<text  x="974.86" y="1487.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::PipelineEvent,  (25,784,462 samples, 0.05%)</title><rect x="1049.9" y="1765" width="0.6" height="15.0" fill="rgb(232,25,24)" rx="2" ry="2" />
<text  x="1052.89" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Expression::Serialize (151,880,017 samples, 0.30%)</title><rect x="590.3" y="1861" width="3.5" height="15.0" fill="rgb(221,187,45)" rx="2" ry="2" />
<text  x="593.33" y="1871.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::CreateEmpty (41,623,577 samples, 0.08%)</title><rect x="433.5" y="1669" width="0.9" height="15.0" fill="rgb(246,208,5)" rx="2" ry="2" />
<text  x="436.47" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc_large (104,841,099 samples, 0.20%)</title><rect x="346.1" y="789" width="2.4" height="15.0" fill="rgb(254,199,38)" rx="2" ry="2" />
<text  x="349.09" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt; const&amp;, std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::operator= (5,147,193 samples, 0.01%)</title><rect x="947.9" y="1669" width="0.1" height="15.0" fill="rgb(215,205,4)" rx="2" ry="2" />
<text  x="950.90" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (8,241,348 samples, 0.02%)</title><rect x="969.6" y="1733" width="0.2" height="15.0" fill="rgb(224,77,48)" rx="2" ry="2" />
<text  x="972.64" y="1743.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string (4,826,284 samples, 0.01%)</title><rect x="193.9" y="1637" width="0.1" height="15.0" fill="rgb(214,208,13)" rx="2" ry="2" />
<text  x="196.91" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt; &gt; &gt;::empty (5,188,552 samples, 0.01%)</title><rect x="1082.8" y="1845" width="0.1" height="15.0" fill="rgb(239,25,3)" rx="2" ry="2" />
<text  x="1085.83" y="1855.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::GetTypes (17,315,966 samples, 0.03%)</title><rect x="375.4" y="1909" width="0.4" height="15.0" fill="rgb(214,130,34)" rx="2" ry="2" />
<text  x="378.45" y="1919.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_malloc (4,347,006 samples, 0.01%)</title><rect x="367.4" y="1509" width="0.1" height="15.0" fill="rgb(216,86,13)" rx="2" ry="2" />
<text  x="370.36" y="1519.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DistributivityRule, std::default_delete&lt;duckdb::DistributivityRule&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::DistributivityRule&gt;, void&gt; (4,465,781 samples, 0.01%)</title><rect x="800.0" y="1861" width="0.1" height="15.0" fill="rgb(242,98,36)" rx="2" ry="2" />
<text  x="802.98" y="1871.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (7,382,290 samples, 0.01%)</title><rect x="895.3" y="1589" width="0.2" height="15.0" fill="rgb(241,122,51)" rx="2" ry="2" />
<text  x="898.33" y="1599.5" ></text>
</g>
<g >
<title>duckdb::QueryGraph::QueryEdge::~QueryEdge (15,711,173 samples, 0.03%)</title><rect x="756.3" y="1749" width="0.4" height="15.0" fill="rgb(222,31,4)" rx="2" ry="2" />
<text  x="759.34" y="1759.5" ></text>
</g>
<g >
<title>duckdb::PrivateAllocatorData::~PrivateAllocatorData (4,545,601 samples, 0.01%)</title><rect x="340.8" y="1061" width="0.1" height="15.0" fill="rgb(254,120,44)" rx="2" ry="2" />
<text  x="343.78" y="1071.5" ></text>
</g>
<g >
<title>[unknown] (57,894,942 samples, 0.11%)</title><rect x="11.3" y="1989" width="1.3" height="15.0" fill="rgb(212,9,16)" rx="2" ry="2" />
<text  x="14.25" y="1999.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::_S_relocate (4,585,946 samples, 0.01%)</title><rect x="370.8" y="1813" width="0.1" height="15.0" fill="rgb(231,137,52)" rx="2" ry="2" />
<text  x="373.84" y="1823.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::CatalogSearchEntry, true&gt;::operator= (25,205,781 samples, 0.05%)</title><rect x="1008.7" y="1765" width="0.6" height="15.0" fill="rgb(246,134,37)" rx="2" ry="2" />
<text  x="1011.68" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_buckets (6,966,097 samples, 0.01%)</title><rect x="698.7" y="1765" width="0.2" height="15.0" fill="rgb(237,55,17)" rx="2" ry="2" />
<text  x="701.74" y="1775.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Reset (17,170,173 samples, 0.03%)</title><rect x="464.8" y="1781" width="0.4" height="15.0" fill="rgb(210,165,12)" rx="2" ry="2" />
<text  x="467.81" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (10,279,324 samples, 0.02%)</title><rect x="1043.0" y="1765" width="0.2" height="15.0" fill="rgb(245,133,51)" rx="2" ry="2" />
<text  x="1045.97" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::Render (556,503,797 samples, 1.08%)</title><rect x="1065.4" y="1797" width="12.8" height="15.0" fill="rgb(242,40,46)" rx="2" ry="2" />
<text  x="1068.39" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ValidityScanState, std::default_delete&lt;duckdb::ValidityScanState&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ValidityScanState&gt;, void&gt; (6,972,191 samples, 0.01%)</title><rect x="214.3" y="1573" width="0.2" height="15.0" fill="rgb(240,77,7)" rx="2" ry="2" />
<text  x="217.29" y="1583.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::~ColumnDataAllocator (14,180,375 samples, 0.03%)</title><rect x="338.7" y="1381" width="0.3" height="15.0" fill="rgb(233,120,30)" rx="2" ry="2" />
<text  x="341.72" y="1391.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (12,054,975 samples, 0.02%)</title><rect x="1043.8" y="1813" width="0.3" height="15.0" fill="rgb(237,129,3)" rx="2" ry="2" />
<text  x="1046.82" y="1823.5" ></text>
</g>
<g >
<title>duckdb::EqualOrNullSimplification::~EqualOrNullSimplification (10,962,818 samples, 0.02%)</title><rect x="832.1" y="1717" width="0.3" height="15.0" fill="rgb(252,39,36)" rx="2" ry="2" />
<text  x="835.10" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt;, true&gt;::~unique_ptr (4,512,659 samples, 0.01%)</title><rect x="831.5" y="1589" width="0.1" height="15.0" fill="rgb(246,189,54)" rx="2" ry="2" />
<text  x="834.46" y="1599.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ClientLockWrapper, true&gt;::~vector (12,759,331 samples, 0.02%)</title><rect x="329.9" y="1829" width="0.3" height="15.0" fill="rgb(212,47,14)" rx="2" ry="2" />
<text  x="332.92" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt;::destroy&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; (4,793,286 samples, 0.01%)</title><rect x="828.6" y="1733" width="0.1" height="15.0" fill="rgb(211,47,51)" rx="2" ry="2" />
<text  x="831.57" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::ColumnDataAllocator&gt;::construct&lt;duckdb::ColumnDataAllocator, duckdb::ClientContext&amp;, duckdb::ColumnDataAllocatorType&amp;&gt; (10,796,744 samples, 0.02%)</title><rect x="98.3" y="1637" width="0.2" height="15.0" fill="rgb(219,147,20)" rx="2" ry="2" />
<text  x="101.29" y="1647.5" ></text>
</g>
<g >
<title>duckdb::EmptyNeedleRemovalRule::EmptyNeedleRemovalRule (112,086,553 samples, 0.22%)</title><rect x="800.1" y="1861" width="2.6" height="15.0" fill="rgb(252,41,45)" rx="2" ry="2" />
<text  x="803.10" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PipelineExecutor, std::default_delete&lt;duckdb::PipelineExecutor&gt;, true&gt;::~unique_ptr (138,984,258 samples, 0.27%)</title><rect x="333.3" y="1749" width="3.2" height="15.0" fill="rgb(216,153,41)" rx="2" ry="2" />
<text  x="336.31" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::RelationsToTDom, std::allocator&lt;duckdb::RelationsToTDom&gt; &gt;::~vector (6,362,411 samples, 0.01%)</title><rect x="755.9" y="1733" width="0.1" height="15.0" fill="rgb(227,93,39)" rx="2" ry="2" />
<text  x="758.86" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::Initialize (29,784,762 samples, 0.06%)</title><rect x="96.9" y="1733" width="0.7" height="15.0" fill="rgb(238,83,5)" rx="2" ry="2" />
<text  x="99.95" y="1743.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (100,574,591 samples, 0.20%)</title><rect x="1117.4" y="1941" width="2.3" height="15.0" fill="rgb(239,21,41)" rx="2" ry="2" />
<text  x="1120.43" y="1951.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::~vector (11,507,726 samples, 0.02%)</title><rect x="639.3" y="1749" width="0.2" height="15.0" fill="rgb(231,24,44)" rx="2" ry="2" />
<text  x="642.28" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (14,249,694 samples, 0.03%)</title><rect x="227.9" y="1733" width="0.4" height="15.0" fill="rgb(214,210,29)" rx="2" ry="2" />
<text  x="230.93" y="1743.5" ></text>
</g>
<g >
<title>duckdb::LogicalProjection::GetTableIndex (5,440,466 samples, 0.01%)</title><rect x="778.6" y="1813" width="0.2" height="15.0" fill="rgb(245,202,34)" rx="2" ry="2" />
<text  x="781.64" y="1823.5" ></text>
</g>
<g >
<title>duckdb::StringScanState::~StringScanState (5,320,570 samples, 0.01%)</title><rect x="226.6" y="1573" width="0.1" height="15.0" fill="rgb(234,152,7)" rx="2" ry="2" />
<text  x="229.62" y="1583.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::GlobalSinkState, std::default_delete&lt;duckdb::GlobalSinkState&gt;, true&gt;::operator= (10,400,682 samples, 0.02%)</title><rect x="100.1" y="1813" width="0.3" height="15.0" fill="rgb(207,161,13)" rx="2" ry="2" />
<text  x="103.12" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Deserializer::Read&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (12,501,945 samples, 0.02%)</title><rect x="588.9" y="1829" width="0.3" height="15.0" fill="rgb(243,97,23)" rx="2" ry="2" />
<text  x="591.92" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;::PopulateFreeArray (11,131,281 samples, 0.02%)</title><rect x="1147.4" y="2037" width="0.3" height="15.0" fill="rgb(247,131,3)" rx="2" ry="2" />
<text  x="1150.43" y="2047.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (478,677,944 samples, 0.93%)</title><rect x="200.5" y="1589" width="11.0" height="15.0" fill="rgb(253,203,33)" rx="2" ry="2" />
<text  x="203.52" y="1599.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_free (96,466,698 samples, 0.19%)</title><rect x="391.0" y="1557" width="2.2" height="15.0" fill="rgb(212,32,5)" rx="2" ry="2" />
<text  x="394.01" y="1567.5" ></text>
</g>
<g >
<title>duckdb::BoundSelectNode::~BoundSelectNode (70,107,099 samples, 0.14%)</title><rect x="979.9" y="1733" width="1.6" height="15.0" fill="rgb(208,98,4)" rx="2" ry="2" />
<text  x="982.90" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::CreatePreparedStatement (21,599,028,943 samples, 42.11%)</title><rect x="545.2" y="1909" width="496.9" height="15.0" fill="rgb(210,186,19)" rx="2" ry="2" />
<text  x="548.21" y="1919.5" >duckdb::ClientContext::CreatePreparedStatement</text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RowGroup, std::default_delete&lt;duckdb::RowGroup&gt; &gt;::unique_ptr (12,383,826 samples, 0.02%)</title><rect x="458.3" y="1717" width="0.3" height="15.0" fill="rgb(213,140,28)" rx="2" ry="2" />
<text  x="461.30" y="1727.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::ColumnStatistics, std::allocator&lt;duckdb::ColumnStatistics&gt;,  (70,365,034 samples, 0.14%)</title><rect x="425.7" y="1477" width="1.7" height="15.0" fill="rgb(246,45,1)" rx="2" ry="2" />
<text  x="428.74" y="1487.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::GetRootSegment (8,807,154 samples, 0.02%)</title><rect x="197.5" y="1669" width="0.2" height="15.0" fill="rgb(233,176,39)" rx="2" ry="2" />
<text  x="200.45" y="1679.5" ></text>
</g>
<g >
<title>duckdb::BufferedSerializer::BufferedSerializer (13,421,152 samples, 0.03%)</title><rect x="313.4" y="1589" width="0.3" height="15.0" fill="rgb(218,147,10)" rx="2" ry="2" />
<text  x="316.36" y="1599.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5,648,354 samples, 0.01%)</title><rect x="929.5" y="1669" width="0.1" height="15.0" fill="rgb(235,151,12)" rx="2" ry="2" />
<text  x="932.51" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_impl (7,438,014 samples, 0.01%)</title><rect x="348.7" y="757" width="0.2" height="15.0" fill="rgb(225,90,5)" rx="2" ry="2" />
<text  x="351.72" y="767.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::GetClientProperties (49,269,335 samples, 0.10%)</title><rect x="373.1" y="1925" width="1.1" height="15.0" fill="rgb(250,121,10)" rx="2" ry="2" />
<text  x="376.10" y="1935.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::EntryValue, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt; &gt;::insert&lt;std::pair&lt;unsigned long, duckdb::EntryValue&gt; &gt; (4,798,649 samples, 0.01%)</title><rect x="1113.4" y="1797" width="0.1" height="15.0" fill="rgb(223,89,41)" rx="2" ry="2" />
<text  x="1116.39" y="1807.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::DataArrays, true&gt;::~vector (5,735,159 samples, 0.01%)</title><rect x="474.6" y="1717" width="0.1" height="15.0" fill="rgb(223,99,4)" rx="2" ry="2" />
<text  x="477.60" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, true&gt;::~vector (37,751,077 samples, 0.07%)</title><rect x="1036.0" y="1797" width="0.9" height="15.0" fill="rgb(243,114,25)" rx="2" ry="2" />
<text  x="1039.00" y="1807.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt;, duckdb::LogicalType*&gt; (7,247,911 samples, 0.01%)</title><rect x="908.9" y="1669" width="0.1" height="15.0" fill="rgb(221,181,5)" rx="2" ry="2" />
<text  x="911.86" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_get_from_ind (5,164,221 samples, 0.01%)</title><rect x="890.8" y="1429" width="0.1" height="15.0" fill="rgb(248,163,47)" rx="2" ry="2" />
<text  x="893.78" y="1439.5" ></text>
</g>
<g >
<title>duckdb::ColumnRefExpression::~ColumnRefExpression (5,886,298 samples, 0.01%)</title><rect x="955.4" y="1589" width="0.1" height="15.0" fill="rgb(233,198,15)" rx="2" ry="2" />
<text  x="958.39" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;unsigned long&gt;::_M_valptr (15,216,022 samples, 0.03%)</title><rect x="88.7" y="2021" width="0.3" height="15.0" fill="rgb(215,30,48)" rx="2" ry="2" />
<text  x="91.69" y="2031.5" ></text>
</g>
<g >
<title>duckdb::PhysicalExpressionScan::~PhysicalExpressionScan (56,605,232 samples, 0.11%)</title><rect x="915.2" y="1733" width="1.3" height="15.0" fill="rgb(206,47,51)" rx="2" ry="2" />
<text  x="918.19" y="1743.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ColumnDataCollection, duckdb::Allocator&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;&gt; (82,184,785 samples, 0.16%)</title><rect x="385.7" y="1925" width="1.9" height="15.0" fill="rgb(236,139,6)" rx="2" ry="2" />
<text  x="388.70" y="1935.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::operator= (4,491,812 samples, 0.01%)</title><rect x="978.6" y="1765" width="0.2" height="15.0" fill="rgb(215,186,9)" rx="2" ry="2" />
<text  x="981.65" y="1775.5" ></text>
</g>
<g >
<title>__asan_memcpy (6,279,495 samples, 0.01%)</title><rect x="610.7" y="1621" width="0.1" height="15.0" fill="rgb(234,7,2)" rx="2" ry="2" />
<text  x="613.69" y="1631.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;, true&gt;::~vector (16,176,426 samples, 0.03%)</title><rect x="915.3" y="1685" width="0.4" height="15.0" fill="rgb(227,138,17)" rx="2" ry="2" />
<text  x="918.34" y="1695.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::EntryValue, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt; &gt;::find (10,452,014 samples, 0.02%)</title><rect x="994.0" y="1685" width="0.2" height="15.0" fill="rgb(248,201,36)" rx="2" ry="2" />
<text  x="996.98" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::ManyFunctionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt; &gt;, void&gt; (4,804,337 samples, 0.01%)</title><rect x="801.2" y="1845" width="0.1" height="15.0" fill="rgb(235,21,34)" rx="2" ry="2" />
<text  x="804.21" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (45,825,208 samples, 0.09%)</title><rect x="242.6" y="549" width="1.1" height="15.0" fill="rgb(212,70,41)" rx="2" ry="2" />
<text  x="245.62" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::_M_move_assign (10,752,228 samples, 0.02%)</title><rect x="843.4" y="1733" width="0.3" height="15.0" fill="rgb(217,3,16)" rx="2" ry="2" />
<text  x="846.44" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt; &gt;::unique_ptr (5,022,049 samples, 0.01%)</title><rect x="869.2" y="1669" width="0.1" height="15.0" fill="rgb(213,199,20)" rx="2" ry="2" />
<text  x="872.16" y="1679.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::~shared_ptr (148,714,892 samples, 0.29%)</title><rect x="390.6" y="1749" width="3.4" height="15.0" fill="rgb(253,206,7)" rx="2" ry="2" />
<text  x="393.56" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;::~vector (10,004,485 samples, 0.02%)</title><rect x="971.8" y="1589" width="0.3" height="15.0" fill="rgb(205,49,53)" rx="2" ry="2" />
<text  x="974.85" y="1599.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::BlockHandle,  (4,390,335 samples, 0.01%)</title><rect x="881.9" y="1637" width="0.1" height="15.0" fill="rgb(227,37,26)" rx="2" ry="2" />
<text  x="884.90" y="1647.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::InsertSourceState, duckdb::PhysicalInsert const&amp;&gt; (10,243,940 samples, 0.02%)</title><rect x="399.5" y="1829" width="0.2" height="15.0" fill="rgb(252,186,20)" rx="2" ry="2" />
<text  x="402.49" y="1839.5" ></text>
</g>
<g >
<title>duckdb::Vector::ResetFromCache (22,706,332 samples, 0.04%)</title><rect x="370.1" y="1765" width="0.5" height="15.0" fill="rgb(234,7,21)" rx="2" ry="2" />
<text  x="373.06" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::~unique_ptr (184,878,097 samples, 0.36%)</title><rect x="829.2" y="1765" width="4.2" height="15.0" fill="rgb(224,107,45)" rx="2" ry="2" />
<text  x="832.18" y="1775.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (49,877,214 samples, 0.10%)</title><rect x="1096.0" y="1813" width="1.2" height="15.0" fill="rgb(244,130,48)" rx="2" ry="2" />
<text  x="1099.03" y="1823.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::HTTPState, std::allocator&lt;duckdb::HTTPState&gt;&gt; (11,288,661 samples, 0.02%)</title><rect x="516.5" y="1909" width="0.3" height="15.0" fill="rgb(229,63,11)" rx="2" ry="2" />
<text  x="519.50" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::~vector (25,004,456 samples, 0.05%)</title><rect x="575.6" y="1781" width="0.6" height="15.0" fill="rgb(205,114,19)" rx="2" ry="2" />
<text  x="578.59" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (45,005,525 samples, 0.09%)</title><rect x="40.0" y="1989" width="1.0" height="15.0" fill="rgb(253,114,39)" rx="2" ry="2" />
<text  x="42.96" y="1999.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::unique_ptr&lt;duckdb::LogicalExpressionGet, std::default_delete&lt;duckdb::LogicalExpressionGet&gt;, void&gt; (9,033,308 samples, 0.02%)</title><rect x="976.8" y="1717" width="0.2" height="15.0" fill="rgb(242,92,36)" rx="2" ry="2" />
<text  x="979.78" y="1727.5" ></text>
</g>
<g >
<title>std::enable_shared_from_this&lt;duckdb::ClientContext&gt;::shared_from_this (5,475,195 samples, 0.01%)</title><rect x="989.1" y="1573" width="0.2" height="15.0" fill="rgb(244,170,30)" rx="2" ry="2" />
<text  x="992.14" y="1583.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::GetData (66,633,347 samples, 0.13%)</title><rect x="362.7" y="1845" width="1.5" height="15.0" fill="rgb(216,58,26)" rx="2" ry="2" />
<text  x="365.71" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_default (5,135,565 samples, 0.01%)</title><rect x="108.5" y="1429" width="0.2" height="15.0" fill="rgb(225,144,32)" rx="2" ry="2" />
<text  x="111.53" y="1439.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::SingleFileStorageCommitState, std::default_delete&lt;duckdb::SingleFileStorageCommitState&gt; &gt;::_M_ptr (7,025,468 samples, 0.01%)</title><rect x="253.2" y="1733" width="0.2" height="15.0" fill="rgb(211,104,42)" rx="2" ry="2" />
<text  x="256.24" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;*, std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, void, bool&gt; (4,569,177 samples, 0.01%)</title><rect x="635.7" y="1717" width="0.1" height="15.0" fill="rgb(211,106,24)" rx="2" ry="2" />
<text  x="638.71" y="1727.5" ></text>
</g>
<g >
<title>duckdb::UndoBuffer::~UndoBuffer (107,900,292 samples, 0.21%)</title><rect x="324.5" y="1621" width="2.5" height="15.0" fill="rgb(247,72,39)" rx="2" ry="2" />
<text  x="327.52" y="1631.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::reference_wrapper&lt;duckdb::Rule&gt;*, std::reference_wrapper&lt;duckdb::Rule&gt;*, std::allocator&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; &gt; (6,851,491 samples, 0.01%)</title><rect x="738.1" y="1605" width="0.1" height="15.0" fill="rgb(248,195,43)" rx="2" ry="2" />
<text  x="741.08" y="1615.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::IsEmpty (6,334,258 samples, 0.01%)</title><rect x="450.6" y="1701" width="0.2" height="15.0" fill="rgb(244,17,12)" rx="2" ry="2" />
<text  x="453.65" y="1711.5" ></text>
</g>
<g >
<title>duckdb::DefaultViewGenerator::CreateDefaultEntry (34,600,471 samples, 0.07%)</title><rect x="1004.7" y="1701" width="0.8" height="15.0" fill="rgb(254,200,27)" rx="2" ry="2" />
<text  x="1007.68" y="1711.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (145,991,859 samples, 0.28%)</title><rect x="889.6" y="1701" width="3.3" height="15.0" fill="rgb(244,9,7)" rx="2" ry="2" />
<text  x="892.58" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (12,748,827 samples, 0.02%)</title><rect x="1000.3" y="1637" width="0.3" height="15.0" fill="rgb(254,155,52)" rx="2" ry="2" />
<text  x="1003.26" y="1647.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;QSymbol, std::vector&lt;QSymbol, std::allocator&lt;QSymbol&gt; &gt;, buildSymbolTable (7,701,794 samples, 0.02%)</title><rect x="1118.8" y="1013" width="0.2" height="15.0" fill="rgb(225,120,46)" rx="2" ry="2" />
<text  x="1121.85" y="1023.5" ></text>
</g>
<g >
<title>duckdb::Binder::PushExpressionBinder (6,017,381 samples, 0.01%)</title><rect x="962.6" y="1701" width="0.1" height="15.0" fill="rgb(250,212,22)" rx="2" ry="2" />
<text  x="965.57" y="1711.5" ></text>
</g>
<g >
<title>duckdb::DatabaseManager::InitializeSystemCatalog (328,878,641 samples, 0.64%)</title><rect x="1109.6" y="1973" width="7.6" height="15.0" fill="rgb(253,161,7)" rx="2" ry="2" />
<text  x="1112.63" y="1983.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::SelectionData&gt; &gt;::destroy&lt;duckdb::SelectionData&gt; (4,401,858 samples, 0.01%)</title><rect x="266.9" y="1573" width="0.1" height="15.0" fill="rgb(222,168,39)" rx="2" ry="2" />
<text  x="269.94" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_free (49,937,686 samples, 0.10%)</title><rect x="239.6" y="533" width="1.2" height="15.0" fill="rgb(221,9,35)" rx="2" ry="2" />
<text  x="242.65" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, unsigned long, std::__detail::_Identity, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (8,398,957 samples, 0.02%)</title><rect x="688.0" y="1765" width="0.2" height="15.0" fill="rgb(217,217,16)" rx="2" ry="2" />
<text  x="691.03" y="1775.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::ColumnScanState*&gt; (27,609,916 samples, 0.05%)</title><rect x="287.9" y="1541" width="0.6" height="15.0" fill="rgb(215,158,10)" rx="2" ry="2" />
<text  x="290.88" y="1551.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, duckdb::OperatorInformation, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt; &gt;::operator[] (20,478,460 samples, 0.04%)</title><rect x="362.0" y="1813" width="0.5" height="15.0" fill="rgb(219,142,41)" rx="2" ry="2" />
<text  x="365.04" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::BindCastFunction&gt;::construct&lt;duckdb::BindCastFunction, duckdb::BoundCastInfo  (5,587,018 samples, 0.01%)</title><rect x="1120.5" y="1893" width="0.1" height="15.0" fill="rgb(214,94,21)" rx="2" ry="2" />
<text  x="1123.47" y="1903.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc_large (15,466,704 samples, 0.03%)</title><rect x="391.5" y="1477" width="0.4" height="15.0" fill="rgb(251,62,44)" rx="2" ry="2" />
<text  x="394.51" y="1487.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (7,151,128 samples, 0.01%)</title><rect x="1026.9" y="1829" width="0.2" height="15.0" fill="rgb(207,25,52)" rx="2" ry="2" />
<text  x="1029.89" y="1839.5" ></text>
</g>
<g >
<title>duckdb::ValidityScanState::~ValidityScanState (10,560,826 samples, 0.02%)</title><rect x="226.9" y="1461" width="0.2" height="15.0" fill="rgb(244,92,18)" rx="2" ry="2" />
<text  x="229.89" y="1471.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ColumnAppendState []&gt;::operator (25,575,400 samples, 0.05%)</title><rect x="339.2" y="1429" width="0.6" height="15.0" fill="rgb(239,70,37)" rx="2" ry="2" />
<text  x="342.17" y="1439.5" ></text>
</g>
<g >
<title>duckdb::LocalTableManager::MoveEntries (21,852,360 samples, 0.04%)</title><rect x="234.7" y="1797" width="0.5" height="15.0" fill="rgb(208,182,0)" rx="2" ry="2" />
<text  x="237.71" y="1807.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Slice (129,387,608 samples, 0.25%)</title><rect x="293.1" y="1717" width="2.9" height="15.0" fill="rgb(238,194,45)" rx="2" ry="2" />
<text  x="296.06" y="1727.5" ></text>
</g>
<g >
<title>__sanitizer::internal_mmap (175,818,129 samples, 0.34%)</title><rect x="1170.4" y="2037" width="4.0" height="15.0" fill="rgb(206,202,4)" rx="2" ry="2" />
<text  x="1173.38" y="2047.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::PipelineEvent, std::allocator&lt;duckdb::PipelineEvent&gt;,  (12,161,073 samples, 0.02%)</title><rect x="355.4" y="1701" width="0.3" height="15.0" fill="rgb(241,172,22)" rx="2" ry="2" />
<text  x="358.42" y="1711.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_get_property (15,086,194 samples, 0.03%)</title><rect x="560.8" y="1765" width="0.4" height="15.0" fill="rgb(214,121,31)" rx="2" ry="2" />
<text  x="563.84" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::allocate (48,416,949 samples, 0.09%)</title><rect x="43.0" y="2021" width="1.1" height="15.0" fill="rgb(209,29,48)" rx="2" ry="2" />
<text  x="46.02" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt; &gt; &gt;::~vector (13,008,650 samples, 0.03%)</title><rect x="1078.5" y="1813" width="0.3" height="15.0" fill="rgb(244,203,37)" rx="2" ry="2" />
<text  x="1081.52" y="1823.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::GetColumn (5,977,244 samples, 0.01%)</title><rect x="225.2" y="1701" width="0.1" height="15.0" fill="rgb(233,33,0)" rx="2" ry="2" />
<text  x="228.21" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (5,344,498 samples, 0.01%)</title><rect x="573.6" y="1765" width="0.2" height="15.0" fill="rgb(254,180,11)" rx="2" ry="2" />
<text  x="576.65" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BlockMetaData, std::allocator&lt;duckdb::BlockMetaData&gt; &gt;::push_back (10,954,664 samples, 0.02%)</title><rect x="381.5" y="1813" width="0.2" height="15.0" fill="rgb(252,36,31)" rx="2" ry="2" />
<text  x="384.48" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::aligned_usize_get (4,402,222 samples, 0.01%)</title><rect x="437.4" y="1461" width="0.1" height="15.0" fill="rgb(220,134,13)" rx="2" ry="2" />
<text  x="440.36" y="1471.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (8,130,930 samples, 0.02%)</title><rect x="721.4" y="1797" width="0.2" height="15.0" fill="rgb(223,214,43)" rx="2" ry="2" />
<text  x="724.37" y="1807.5" ></text>
</g>
<g >
<title>page_fault (15,187,840 samples, 0.03%)</title><rect x="413.4" y="1637" width="0.4" height="15.0" fill="rgb(239,154,21)" rx="2" ry="2" />
<text  x="416.42" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::operator= (6,635,151 samples, 0.01%)</title><rect x="910.4" y="1717" width="0.2" height="15.0" fill="rgb(234,176,20)" rx="2" ry="2" />
<text  x="913.42" y="1727.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VersionNode&gt; &gt;::construct&lt;duckdb::VersionNode&gt; (14,664,093 samples, 0.03%)</title><rect x="415.6" y="1589" width="0.4" height="15.0" fill="rgb(221,190,30)" rx="2" ry="2" />
<text  x="418.63" y="1599.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (10,354,801 samples, 0.02%)</title><rect x="1041.4" y="1845" width="0.2" height="15.0" fill="rgb(229,163,1)" rx="2" ry="2" />
<text  x="1044.38" y="1855.5" ></text>
</g>
<g >
<title>duckdb::DuckCatalog::PlanInsert (295,310,040 samples, 0.58%)</title><rect x="852.7" y="1845" width="6.8" height="15.0" fill="rgb(241,143,36)" rx="2" ry="2" />
<text  x="855.73" y="1855.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::VectorCache*&gt; (5,646,698 samples, 0.01%)</title><rect x="106.9" y="1621" width="0.1" height="15.0" fill="rgb(236,156,20)" rx="2" ry="2" />
<text  x="109.87" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (4,367,517 samples, 0.01%)</title><rect x="954.3" y="1541" width="0.1" height="15.0" fill="rgb(227,152,19)" rx="2" ry="2" />
<text  x="957.29" y="1551.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (11,724,519 samples, 0.02%)</title><rect x="1117.5" y="885" width="0.3" height="15.0" fill="rgb(213,141,18)" rx="2" ry="2" />
<text  x="1120.50" y="895.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::Bind (169,604,167 samples, 0.33%)</title><rect x="932.1" y="1733" width="3.9" height="15.0" fill="rgb(253,124,19)" rx="2" ry="2" />
<text  x="935.05" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::operator (42,215,529 samples, 0.08%)</title><rect x="667.4" y="1733" width="0.9" height="15.0" fill="rgb(235,165,43)" rx="2" ry="2" />
<text  x="670.36" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Rule::~Rule (7,280,099 samples, 0.01%)</title><rect x="832.4" y="1685" width="0.1" height="15.0" fill="rgb(206,220,10)" rx="2" ry="2" />
<text  x="835.35" y="1695.5" ></text>
</g>
<g >
<title>duckdb::WriteAheadLog::Flush (243,035,329 samples, 0.47%)</title><rect x="247.1" y="1797" width="5.6" height="15.0" fill="rgb(228,62,35)" rx="2" ry="2" />
<text  x="250.09" y="1807.5" ></text>
</g>
<g >
<title>duckdb::BaseSelectBinder::BaseSelectBinder (17,012,766 samples, 0.03%)</title><rect x="962.4" y="1733" width="0.4" height="15.0" fill="rgb(244,114,43)" rx="2" ry="2" />
<text  x="965.37" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::~unique_ptr (5,098,222 samples, 0.01%)</title><rect x="948.4" y="1621" width="0.1" height="15.0" fill="rgb(220,63,29)" rx="2" ry="2" />
<text  x="951.38" y="1631.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (10,387,090 samples, 0.02%)</title><rect x="959.9" y="1605" width="0.2" height="15.0" fill="rgb(250,21,53)" rx="2" ry="2" />
<text  x="962.87" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_check_len (5,824,017 samples, 0.01%)</title><rect x="954.3" y="1557" width="0.1" height="15.0" fill="rgb(220,70,50)" rx="2" ry="2" />
<text  x="957.27" y="1567.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt;::_M_head (55,856,636 samples, 0.11%)</title><rect x="310.2" y="1461" width="1.3" height="15.0" fill="rgb(237,202,46)" rx="2" ry="2" />
<text  x="313.18" y="1471.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::PipelineExecutor, std::default_delete&lt;duckdb::PipelineExecutor&gt; &gt;::_M_ptr (4,640,693 samples, 0.01%)</title><rect x="1097.6" y="1829" width="0.2" height="15.0" fill="rgb(212,15,0)" rx="2" ry="2" />
<text  x="1100.65" y="1839.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ConstantFoldingRule, std::default_delete&lt;duckdb::ConstantFoldingRule&gt; &gt;::__uniq_ptr_impl (6,279,913 samples, 0.01%)</title><rect x="796.2" y="1829" width="0.1" height="15.0" fill="rgb(210,92,3)" rx="2" ry="2" />
<text  x="799.20" y="1839.5" ></text>
</g>
<g >
<title>duckdb::UnnestRewriter::UnnestRewriter (5,224,757 samples, 0.01%)</title><rect x="769.6" y="1813" width="0.2" height="15.0" fill="rgb(206,23,28)" rx="2" ry="2" />
<text  x="772.63" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; &gt;::push_back (28,906,065 samples, 0.06%)</title><rect x="917.5" y="1781" width="0.7" height="15.0" fill="rgb(253,126,48)" rx="2" ry="2" />
<text  x="920.52" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PendingQueryResult, std::default_delete&lt;duckdb::PendingQueryResult&gt;, true&gt;::operator= (5,102,783 samples, 0.01%)</title><rect x="1105.6" y="1925" width="0.1" height="15.0" fill="rgb(233,195,16)" rx="2" ry="2" />
<text  x="1108.59" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (14,813,654 samples, 0.03%)</title><rect x="970.0" y="1733" width="0.3" height="15.0" fill="rgb(224,148,2)" rx="2" ry="2" />
<text  x="973.01" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_metadata_try_read_fast (6,689,440 samples, 0.01%)</title><rect x="334.9" y="1317" width="0.1" height="15.0" fill="rgb(209,86,30)" rx="2" ry="2" />
<text  x="337.87" y="1327.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Rule&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; &gt;::emplace_back&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; (4,731,657 samples, 0.01%)</title><rect x="741.1" y="1717" width="0.1" height="15.0" fill="rgb(250,154,49)" rx="2" ry="2" />
<text  x="744.07" y="1727.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::StorageCommitState&gt;::operator (5,952,841 samples, 0.01%)</title><rect x="318.4" y="1781" width="0.2" height="15.0" fill="rgb(250,74,31)" rx="2" ry="2" />
<text  x="321.41" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Executor, std::default_delete&lt;duckdb::Executor&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::Executor&gt;, void&gt; (9,165,557 samples, 0.02%)</title><rect x="1099.8" y="1861" width="0.2" height="15.0" fill="rgb(243,189,46)" rx="2" ry="2" />
<text  x="1102.78" y="1871.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::EnumComparisonRule, std::default_delete&lt;duckdb::EnumComparisonRule&gt; &gt;::_M_ptr (4,707,346 samples, 0.01%)</title><rect x="806.8" y="1813" width="0.1" height="15.0" fill="rgb(251,72,39)" rx="2" ry="2" />
<text  x="809.81" y="1823.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::VectorChildBuffer, duckdb::Vector&gt; (43,783,308 samples, 0.09%)</title><rect x="294.4" y="1653" width="1.0" height="15.0" fill="rgb(226,145,10)" rx="2" ry="2" />
<text  x="297.42" y="1663.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (53,462,603 samples, 0.10%)</title><rect x="217.8" y="1413" width="1.2" height="15.0" fill="rgb(227,24,20)" rx="2" ry="2" />
<text  x="220.81" y="1423.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::vector (5,421,622 samples, 0.01%)</title><rect x="846.5" y="1829" width="0.1" height="15.0" fill="rgb(242,175,51)" rx="2" ry="2" />
<text  x="849.52" y="1839.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;, std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::_M_ptr (8,400,949 samples, 0.02%)</title><rect x="571.6" y="1749" width="0.2" height="15.0" fill="rgb(222,126,23)" rx="2" ry="2" />
<text  x="574.59" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TypeMatcherId, std::default_delete&lt;duckdb::TypeMatcherId&gt; &gt;::release (5,207,606 samples, 0.01%)</title><rect x="805.8" y="1813" width="0.2" height="15.0" fill="rgb(250,198,42)" rx="2" ry="2" />
<text  x="808.84" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::resize (7,659,498 samples, 0.01%)</title><rect x="1021.3" y="1829" width="0.1" height="15.0" fill="rgb(232,147,52)" rx="2" ry="2" />
<text  x="1024.26" y="1839.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::FunctionExpressionMatcher&gt; (10,261,621 samples, 0.02%)</title><rect x="811.3" y="1845" width="0.3" height="15.0" fill="rgb(233,175,5)" rx="2" ry="2" />
<text  x="814.32" y="1855.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::FieldWriter (17,070,932 samples, 0.03%)</title><rect x="591.0" y="1797" width="0.4" height="15.0" fill="rgb(238,141,17)" rx="2" ry="2" />
<text  x="593.98" y="1807.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt; (32,312,949 samples, 0.06%)</title><rect x="499.8" y="1685" width="0.7" height="15.0" fill="rgb(247,142,37)" rx="2" ry="2" />
<text  x="502.80" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (73,068,185 samples, 0.14%)</title><rect x="1030.4" y="1845" width="1.7" height="15.0" fill="rgb(224,45,30)" rx="2" ry="2" />
<text  x="1033.39" y="1855.5" ></text>
</g>
<g >
<title>std::function&lt;void  (4,903,353 samples, 0.01%)</title><rect x="834.2" y="1797" width="0.1" height="15.0" fill="rgb(211,57,49)" rx="2" ry="2" />
<text  x="837.18" y="1807.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorMetaData&gt; &gt;::construct&lt;duckdb::VectorMetaData, duckdb::VectorMetaData const&amp;&gt; (6,738,679 samples, 0.01%)</title><rect x="864.0" y="1669" width="0.2" height="15.0" fill="rgb(244,187,17)" rx="2" ry="2" />
<text  x="867.04" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; &gt;::erase (202,797,540 samples, 0.40%)</title><rect x="323.4" y="1813" width="4.6" height="15.0" fill="rgb(236,126,32)" rx="2" ry="2" />
<text  x="326.37" y="1823.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::BlockHandle&gt; &gt;::construct&lt;duckdb::BlockHandle, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool&amp;, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (21,072,302 samples, 0.04%)</title><rect x="881.1" y="1541" width="0.5" height="15.0" fill="rgb(233,98,53)" rx="2" ry="2" />
<text  x="884.09" y="1551.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::~OperatorProfiler (4,900,080 samples, 0.01%)</title><rect x="108.7" y="1749" width="0.1" height="15.0" fill="rgb(254,21,20)" rx="2" ry="2" />
<text  x="111.70" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;*&gt; (11,341,804 samples, 0.02%)</title><rect x="350.5" y="1557" width="0.3" height="15.0" fill="rgb(221,191,47)" rx="2" ry="2" />
<text  x="353.52" y="1567.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::ScheduleSequentialTask (131,668,917 samples, 0.26%)</title><rect x="93.1" y="1749" width="3.0" height="15.0" fill="rgb(229,33,5)" rx="2" ry="2" />
<text  x="96.11" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::operator= (11,281,390 samples, 0.02%)</title><rect x="597.8" y="1733" width="0.2" height="15.0" fill="rgb(205,206,48)" rx="2" ry="2" />
<text  x="600.77" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::AllocateBlock (465,702,655 samples, 0.91%)</title><rect x="871.8" y="1685" width="10.7" height="15.0" fill="rgb(222,154,27)" rx="2" ry="2" />
<text  x="874.77" y="1695.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Verify (12,949,051 samples, 0.03%)</title><rect x="476.0" y="1781" width="0.3" height="15.0" fill="rgb(207,221,15)" rx="2" ry="2" />
<text  x="479.01" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; (18,043,385 samples, 0.04%)</title><rect x="917.7" y="1749" width="0.4" height="15.0" fill="rgb(253,227,47)" rx="2" ry="2" />
<text  x="920.66" y="1759.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (361,441,674 samples, 0.70%)</title><rect x="237.2" y="1493" width="8.3" height="15.0" fill="rgb(229,229,18)" rx="2" ry="2" />
<text  x="240.18" y="1503.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (102,992,269 samples, 0.20%)</title><rect x="890.0" y="1557" width="2.4" height="15.0" fill="rgb(221,221,12)" rx="2" ry="2" />
<text  x="893.04" y="1567.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::ToStream (408,771,406 samples, 0.80%)</title><rect x="624.0" y="1797" width="9.4" height="15.0" fill="rgb(224,112,47)" rx="2" ry="2" />
<text  x="627.01" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ReplaceUnicodeSpaces (7,183,589 samples, 0.01%)</title><rect x="517.5" y="1909" width="0.2" height="15.0" fill="rgb(220,73,46)" rx="2" ry="2" />
<text  x="520.55" y="1919.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_next_grapheme (7,623,881 samples, 0.01%)</title><rect x="603.6" y="1765" width="0.2" height="15.0" fill="rgb(254,144,39)" rx="2" ry="2" />
<text  x="606.60" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_metadata_read (4,913,147 samples, 0.01%)</title><rect x="289.9" y="1333" width="0.1" height="15.0" fill="rgb(217,72,19)" rx="2" ry="2" />
<text  x="292.89" y="1343.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;,  (7,212,143 samples, 0.01%)</title><rect x="481.2" y="1525" width="0.1" height="15.0" fill="rgb(207,129,27)" rx="2" ry="2" />
<text  x="484.17" y="1535.5" ></text>
</g>
<g >
<title>ttwu_do_activate (12,547,821 samples, 0.02%)</title><rect x="1058.8" y="1621" width="0.3" height="15.0" fill="rgb(205,56,47)" rx="2" ry="2" />
<text  x="1061.80" y="1631.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::PreparedStatementData&gt;::destroy&lt;duckdb::PreparedStatementData&gt; (604,308,977 samples, 1.18%)</title><rect x="337.6" y="1717" width="13.9" height="15.0" fill="rgb(211,69,8)" rx="2" ry="2" />
<text  x="340.63" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (40,858,724 samples, 0.08%)</title><rect x="289.4" y="1445" width="0.9" height="15.0" fill="rgb(216,6,24)" rx="2" ry="2" />
<text  x="292.36" y="1455.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::Binder, bool, duckdb::ClientContext&amp;, std::shared_ptr&lt;duckdb::Binder&gt;, bool&amp;&gt; (79,654,836 samples, 0.16%)</title><rect x="1027.7" y="1861" width="1.9" height="15.0" fill="rgb(229,63,14)" rx="2" ry="2" />
<text  x="1030.73" y="1871.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_metadata_read (4,425,148 samples, 0.01%)</title><rect x="401.7" y="1445" width="0.1" height="15.0" fill="rgb(209,201,45)" rx="2" ry="2" />
<text  x="404.71" y="1455.5" ></text>
</g>
<g >
<title>duckdb::LocalTableManager::GetOrCreateStorage (32,184,250 samples, 0.06%)</title><rect x="102.0" y="1717" width="0.8" height="15.0" fill="rgb(235,48,12)" rx="2" ry="2" />
<text  x="105.04" y="1727.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::PhysicalOperator (10,378,189 samples, 0.02%)</title><rect x="912.4" y="1749" width="0.2" height="15.0" fill="rgb(234,165,23)" rx="2" ry="2" />
<text  x="915.35" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt; &gt;::get (5,064,968 samples, 0.01%)</title><rect x="469.4" y="1749" width="0.1" height="15.0" fill="rgb(239,39,32)" rx="2" ry="2" />
<text  x="472.40" y="1759.5" ></text>
</g>
<g >
<title>duckdb::DuckTransactionManager::Get (5,140,265 samples, 0.01%)</title><rect x="255.7" y="1685" width="0.2" height="15.0" fill="rgb(233,2,49)" rx="2" ry="2" />
<text  x="258.73" y="1695.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (10,520,095 samples, 0.02%)</title><rect x="706.2" y="1717" width="0.2" height="15.0" fill="rgb(236,94,44)" rx="2" ry="2" />
<text  x="709.20" y="1727.5" ></text>
</g>
<g >
<title>memcpy (5,277,463 samples, 0.01%)</title><rect x="1183.3" y="2021" width="0.1" height="15.0" fill="rgb(213,51,29)" rx="2" ry="2" />
<text  x="1186.27" y="2031.5" ></text>
</g>
<g >
<title>duckdb::DataTable::InitializeLocalAppend (1,655,226,124 samples, 3.23%)</title><rect x="421.3" y="1797" width="38.1" height="15.0" fill="rgb(234,66,44)" rx="2" ry="2" />
<text  x="424.31" y="1807.5" >duc..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::StandardColumnData&gt;::construct&lt;duckdb::StandardColumnData, duckdb::BlockManager&amp;, duckdb::DataTableInfo&amp;, unsigned long&amp;, unsigned long&amp;, duckdb::LogicalType const&amp;, duckdb::optional_ptr&lt;duckdb::ColumnData&gt;&amp;&gt; (6,181,643 samples, 0.01%)</title><rect x="104.8" y="1509" width="0.1" height="15.0" fill="rgb(231,122,39)" rx="2" ry="2" />
<text  x="107.77" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;unsigned long&gt;::_M_v (8,195,448 samples, 0.02%)</title><rect x="690.9" y="1701" width="0.2" height="15.0" fill="rgb(245,9,30)" rx="2" ry="2" />
<text  x="693.89" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SpecificExpressionTypeMatcher, std::default_delete&lt;duckdb::SpecificExpressionTypeMatcher&gt; &gt;::release (4,438,613 samples, 0.01%)</title><rect x="799.7" y="1813" width="0.1" height="15.0" fill="rgb(245,147,27)" rx="2" ry="2" />
<text  x="802.66" y="1823.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::~unordered_set (11,852,487 samples, 0.02%)</title><rect x="724.8" y="1733" width="0.3" height="15.0" fill="rgb(248,188,50)" rx="2" ry="2" />
<text  x="727.81" y="1743.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt;::_M_ptr (6,728,625 samples, 0.01%)</title><rect x="510.0" y="1893" width="0.1" height="15.0" fill="rgb(217,219,23)" rx="2" ry="2" />
<text  x="512.99" y="1903.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::iallocztm (6,178,838 samples, 0.01%)</title><rect x="438.0" y="1445" width="0.2" height="15.0" fill="rgb(244,14,49)" rx="2" ry="2" />
<text  x="441.02" y="1455.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::ColumnData&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::ColumnData&gt; &gt; &gt;::_M_realloc_insert&lt;std::shared_ptr&lt;duckdb::ColumnData&gt; &gt; (20,584,540 samples, 0.04%)</title><rect x="456.1" y="1685" width="0.5" height="15.0" fill="rgb(241,141,45)" rx="2" ry="2" />
<text  x="459.10" y="1695.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (46,996,136 samples, 0.09%)</title><rect x="549.9" y="1701" width="1.0" height="15.0" fill="rgb(235,68,45)" rx="2" ry="2" />
<text  x="552.86" y="1711.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Pin (6,522,026 samples, 0.01%)</title><rect x="268.2" y="1573" width="0.1" height="15.0" fill="rgb(244,132,17)" rx="2" ry="2" />
<text  x="271.18" y="1583.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::EnsureWritable (40,010,373 samples, 0.08%)</title><rect x="362.9" y="1797" width="0.9" height="15.0" fill="rgb(233,28,32)" rx="2" ry="2" />
<text  x="365.86" y="1807.5" ></text>
</g>
<g >
<title>duckdb::HyperLogLog::AddToLog (6,768,702 samples, 0.01%)</title><rect x="460.4" y="1701" width="0.1" height="15.0" fill="rgb(207,132,24)" rx="2" ry="2" />
<text  x="463.37" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::AllocatorDebugInfo, std::default_delete&lt;duckdb::AllocatorDebugInfo&gt;, true&gt;::operator= (10,244,897 samples, 0.02%)</title><rect x="866.9" y="1669" width="0.2" height="15.0" fill="rgb(241,117,31)" rx="2" ry="2" />
<text  x="869.88" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_event (14,739,849 samples, 0.03%)</title><rect x="240.2" y="421" width="0.3" height="15.0" fill="rgb(245,66,8)" rx="2" ry="2" />
<text  x="243.17" y="431.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::~StatisticsPropagator (7,377,145 samples, 0.01%)</title><rect x="768.2" y="1813" width="0.2" height="15.0" fill="rgb(208,81,40)" rx="2" ry="2" />
<text  x="771.18" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_allocate_node&lt;unsigned long const&amp;&gt; (63,982,138 samples, 0.12%)</title><rect x="692.7" y="1749" width="1.5" height="15.0" fill="rgb(231,61,2)" rx="2" ry="2" />
<text  x="695.71" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ThreadContext::ThreadContext (10,777,239 samples, 0.02%)</title><rect x="403.9" y="1845" width="0.2" height="15.0" fill="rgb(252,208,50)" rx="2" ry="2" />
<text  x="406.88" y="1855.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (93,290,928 samples, 0.18%)</title><rect x="1177.6" y="2037" width="2.1" height="15.0" fill="rgb(224,100,1)" rx="2" ry="2" />
<text  x="1180.60" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1061" width="0.3" height="15.0" fill="rgb(209,112,0)" rx="2" ry="2" />
<text  x="1120.47" y="1071.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::MetaPipeline,  (133,861,511 samples, 0.26%)</title><rect x="1092.9" y="1813" width="3.1" height="15.0" fill="rgb(223,119,24)" rx="2" ry="2" />
<text  x="1095.92" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (14,359,601 samples, 0.03%)</title><rect x="332.2" y="1781" width="0.3" height="15.0" fill="rgb(234,88,44)" rx="2" ry="2" />
<text  x="335.21" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (11,573,470 samples, 0.02%)</title><rect x="993.6" y="1653" width="0.2" height="15.0" fill="rgb(207,62,22)" rx="2" ry="2" />
<text  x="996.56" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::AllocatedData*&gt; (69,894,385 samples, 0.14%)</title><rect x="1123.1" y="1669" width="1.6" height="15.0" fill="rgb(250,110,23)" rx="2" ry="2" />
<text  x="1126.11" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::ExpressionBinder (7,492,407 samples, 0.01%)</title><rect x="962.5" y="1717" width="0.2" height="15.0" fill="rgb(212,97,54)" rx="2" ry="2" />
<text  x="965.53" y="1727.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::FunctionExpressionMatcher&gt; (11,546,597 samples, 0.02%)</title><rect x="784.5" y="1845" width="0.2" height="15.0" fill="rgb(222,135,45)" rx="2" ry="2" />
<text  x="787.45" y="1855.5" ></text>
</g>
<g >
<title>duckdb::SelectionVector::Slice (19,468,328 samples, 0.04%)</title><rect x="296.4" y="1669" width="0.4" height="15.0" fill="rgb(237,169,25)" rx="2" ry="2" />
<text  x="299.39" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt; &gt;::unique_ptr (5,567,128 samples, 0.01%)</title><rect x="999.8" y="1589" width="0.1" height="15.0" fill="rgb(231,72,37)" rx="2" ry="2" />
<text  x="1002.81" y="1599.5" ></text>
</g>
<g >
<title>duckdb::BufferManager::GetBufferManager (4,437,830 samples, 0.01%)</title><rect x="267.4" y="1573" width="0.1" height="15.0" fill="rgb(232,0,27)" rx="2" ry="2" />
<text  x="270.36" y="1583.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ColumnDataAllocator,  (16,994,253 samples, 0.03%)</title><rect x="386.7" y="1845" width="0.3" height="15.0" fill="rgb(239,155,51)" rx="2" ry="2" />
<text  x="389.66" y="1855.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (29,559,344 samples, 0.06%)</title><rect x="729.2" y="1733" width="0.7" height="15.0" fill="rgb(254,76,49)" rx="2" ry="2" />
<text  x="732.18" y="1743.5" ></text>
</g>
<g >
<title>duckdb::StatementProperties::StatementProperties (26,975,426 samples, 0.05%)</title><rect x="1100.6" y="1861" width="0.7" height="15.0" fill="rgb(231,100,43)" rx="2" ry="2" />
<text  x="1103.64" y="1871.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::PipelineFinishEvent, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (26,832,364 samples, 0.05%)</title><rect x="1050.5" y="1813" width="0.7" height="15.0" fill="rgb(238,89,48)" rx="2" ry="2" />
<text  x="1053.55" y="1823.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;long, duckdb::StringBlock*, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, duckdb::StringBlock*&gt; &gt; &gt;::~unordered_map (7,582,097 samples, 0.01%)</title><rect x="238.9" y="693" width="0.1" height="15.0" fill="rgb(221,208,20)" rx="2" ry="2" />
<text  x="241.86" y="703.5" ></text>
</g>
<g >
<title>duckdb::RemoveUnusedColumns::RemoveUnusedColumns (4,806,789 samples, 0.01%)</title><rect x="761.9" y="1813" width="0.1" height="15.0" fill="rgb(236,94,20)" rx="2" ry="2" />
<text  x="764.94" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1205" width="0.1" height="15.0" fill="rgb(221,112,46)" rx="2" ry="2" />
<text  x="14.25" y="1215.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::BoundParameterData, true&gt;::~vector (7,331,071 samples, 0.01%)</title><rect x="1030.1" y="1877" width="0.1" height="15.0" fill="rgb(242,201,23)" rx="2" ry="2" />
<text  x="1033.06" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6,402,456 samples, 0.01%)</title><rect x="943.0" y="1669" width="0.2" height="15.0" fill="rgb(237,5,38)" rx="2" ry="2" />
<text  x="946.01" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (13,108,906 samples, 0.03%)</title><rect x="1002.7" y="1669" width="0.3" height="15.0" fill="rgb(210,197,23)" rx="2" ry="2" />
<text  x="1005.69" y="1679.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ConstantFoldingRule, duckdb::ExpressionRewriter&amp;&gt; (93,908,899 samples, 0.18%)</title><rect x="794.2" y="1877" width="2.2" height="15.0" fill="rgb(224,128,4)" rx="2" ry="2" />
<text  x="797.23" y="1887.5" ></text>
</g>
<g >
<title>ext4_bio_write_page (11,935,662 samples, 0.02%)</title><rect x="251.6" y="1525" width="0.3" height="15.0" fill="rgb(211,2,2)" rx="2" ry="2" />
<text  x="254.64" y="1535.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::RegisterMemory (408,152,681 samples, 0.80%)</title><rect x="872.4" y="1653" width="9.4" height="15.0" fill="rgb(247,215,0)" rx="2" ry="2" />
<text  x="875.39" y="1663.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::ColumnDataAllocator, std::allocator&lt;duckdb::ColumnDataAllocator&gt;,  (10,438,399 samples, 0.02%)</title><rect x="386.7" y="1813" width="0.3" height="15.0" fill="rgb(239,184,42)" rx="2" ry="2" />
<text  x="389.73" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Rule::~Rule (7,613,631 samples, 0.01%)</title><rect x="831.2" y="1685" width="0.2" height="15.0" fill="rgb(251,41,42)" rx="2" ry="2" />
<text  x="834.22" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (4,423,660 samples, 0.01%)</title><rect x="975.4" y="1685" width="0.1" height="15.0" fill="rgb(252,153,31)" rx="2" ry="2" />
<text  x="978.44" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Rule&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; &gt;::emplace_back&lt;std::reference_wrapper&lt;duckdb::Rule&gt; &gt; (45,499,346 samples, 0.09%)</title><rect x="737.4" y="1685" width="1.0" height="15.0" fill="rgb(236,225,13)" rx="2" ry="2" />
<text  x="740.35" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::Finalize (42,863,130 samples, 0.08%)</title><rect x="100.7" y="1749" width="1.0" height="15.0" fill="rgb(216,19,3)" rx="2" ry="2" />
<text  x="103.69" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Catalog::CreatePragmaFunction (6,387,596 samples, 0.01%)</title><rect x="1110.7" y="1845" width="0.1" height="15.0" fill="rgb(206,218,42)" rx="2" ry="2" />
<text  x="1113.66" y="1855.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (5,398,013 samples, 0.01%)</title><rect x="547.2" y="1637" width="0.1" height="15.0" fill="rgb(228,152,45)" rx="2" ry="2" />
<text  x="550.20" y="1647.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::~VectorCacheBuffer (77,664,163 samples, 0.15%)</title><rect x="333.6" y="1445" width="1.8" height="15.0" fill="rgb(230,10,29)" rx="2" ry="2" />
<text  x="336.60" y="1455.5" ></text>
</g>
<g >
<title>alloc_pages_vma (6,631,685 samples, 0.01%)</title><rect x="56.1" y="1893" width="0.1" height="15.0" fill="rgb(221,1,44)" rx="2" ry="2" />
<text  x="59.09" y="1903.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::AddDependency (38,201,910 samples, 0.07%)</title><rect x="1079.6" y="1813" width="0.9" height="15.0" fill="rgb(231,173,1)" rx="2" ry="2" />
<text  x="1082.57" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::~unique_ptr (16,773,231 samples, 0.03%)</title><rect x="1036.4" y="1493" width="0.4" height="15.0" fill="rgb(218,140,51)" rx="2" ry="2" />
<text  x="1039.41" y="1503.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::deallocate (6,034,492 samples, 0.01%)</title><rect x="696.9" y="1717" width="0.2" height="15.0" fill="rgb(251,161,40)" rx="2" ry="2" />
<text  x="699.93" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ArithmeticSimplificationRule::ArithmeticSimplificationRule (264,559,623 samples, 0.52%)</title><rect x="784.0" y="1861" width="6.1" height="15.0" fill="rgb(242,105,13)" rx="2" ry="2" />
<text  x="786.97" y="1871.5" ></text>
</g>
<g >
<title>operator new (7,390,360 samples, 0.01%)</title><rect x="1183.5" y="2021" width="0.1" height="15.0" fill="rgb(209,32,9)" rx="2" ry="2" />
<text  x="1186.47" y="2031.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (5,646,698 samples, 0.01%)</title><rect x="106.9" y="1525" width="0.1" height="15.0" fill="rgb(246,201,9)" rx="2" ry="2" />
<text  x="109.87" y="1535.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc (20,979,492 samples, 0.04%)</title><rect x="391.4" y="1493" width="0.5" height="15.0" fill="rgb(239,109,36)" rx="2" ry="2" />
<text  x="394.43" y="1503.5" ></text>
</g>
<g >
<title>duckdb::SegmentStatistics::SegmentStatistics (14,339,676 samples, 0.03%)</title><rect x="443.3" y="1637" width="0.3" height="15.0" fill="rgb(210,130,20)" rx="2" ry="2" />
<text  x="446.26" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, false&gt; &gt; &gt;::_M_deallocate_node (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1461" width="1.9" height="15.0" fill="rgb(251,65,47)" rx="2" ry="2" />
<text  x="1120.81" y="1471.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::MergeIntoStatistics (12,924,594 samples, 0.03%)</title><rect x="462.9" y="1749" width="0.3" height="15.0" fill="rgb(217,184,17)" rx="2" ry="2" />
<text  x="465.93" y="1759.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (13,176,905 samples, 0.03%)</title><rect x="74.2" y="1973" width="0.3" height="15.0" fill="rgb(212,153,54)" rx="2" ry="2" />
<text  x="77.16" y="1983.5" ></text>
</g>
<g >
<title>duckdb::BufferManager::GetBufferManager (9,292,820 samples, 0.02%)</title><rect x="998.5" y="1589" width="0.2" height="15.0" fill="rgb(254,111,47)" rx="2" ry="2" />
<text  x="1001.45" y="1599.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::~PipelineExecutor (152,351,938 samples, 0.30%)</title><rect x="497.9" y="1813" width="3.5" height="15.0" fill="rgb(246,103,19)" rx="2" ry="2" />
<text  x="500.92" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (5,137,671 samples, 0.01%)</title><rect x="820.1" y="1781" width="0.1" height="15.0" fill="rgb(237,227,36)" rx="2" ry="2" />
<text  x="823.11" y="1791.5" ></text>
</g>
<g >
<title>std::function&lt;bool  (166,432,441 samples, 0.32%)</title><rect x="228.3" y="1733" width="3.9" height="15.0" fill="rgb(214,12,7)" rx="2" ry="2" />
<text  x="231.33" y="1743.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::LogicalOperator&gt; &gt; (9,485,188 samples, 0.02%)</title><rect x="770.9" y="1781" width="0.2" height="15.0" fill="rgb(248,117,13)" rx="2" ry="2" />
<text  x="773.85" y="1791.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::Resize (100,099,583 samples, 0.20%)</title><rect x="436.8" y="1605" width="2.3" height="15.0" fill="rgb(223,187,54)" rx="2" ry="2" />
<text  x="439.80" y="1615.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::AppendSegmentInternal (29,799,253 samples, 0.06%)</title><rect x="456.6" y="1717" width="0.7" height="15.0" fill="rgb(211,43,47)" rx="2" ry="2" />
<text  x="459.63" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ManyFunctionMatcher::~ManyFunctionMatcher (6,093,422 samples, 0.01%)</title><rect x="832.6" y="1525" width="0.1" height="15.0" fill="rgb(251,46,43)" rx="2" ry="2" />
<text  x="835.59" y="1535.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::get&lt;true&gt; (11,480,880 samples, 0.02%)</title><rect x="575.0" y="1781" width="0.2" height="15.0" fill="rgb(253,126,54)" rx="2" ry="2" />
<text  x="577.97" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ifree (56,423,594 samples, 0.11%)</title><rect x="481.9" y="1397" width="1.3" height="15.0" fill="rgb(240,42,52)" rx="2" ry="2" />
<text  x="484.88" y="1407.5" ></text>
</g>
<g >
<title>std::swap&lt;duckdb::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics&gt;, false&gt; &gt; (11,248,133 samples, 0.02%)</title><rect x="453.8" y="1445" width="0.3" height="15.0" fill="rgb(223,53,17)" rx="2" ry="2" />
<text  x="456.84" y="1455.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::InitializeAppend (83,228,920 samples, 0.16%)</title><rect x="195.8" y="1701" width="2.0" height="15.0" fill="rgb(232,75,26)" rx="2" ry="2" />
<text  x="198.84" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;, std::allocator&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt; &gt; &gt;::_M_check_len (7,840,498 samples, 0.02%)</title><rect x="448.0" y="1605" width="0.2" height="15.0" fill="rgb(247,185,47)" rx="2" ry="2" />
<text  x="451.01" y="1615.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ScalarFunction, true&gt;::vector (5,596,943 samples, 0.01%)</title><rect x="1116.8" y="1877" width="0.1" height="15.0" fill="rgb(214,188,6)" rx="2" ry="2" />
<text  x="1119.78" y="1887.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::RenderTree&gt;::operator (20,656,556 samples, 0.04%)</title><rect x="620.0" y="1781" width="0.4" height="15.0" fill="rgb(244,59,30)" rx="2" ry="2" />
<text  x="622.96" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (15,871,986 samples, 0.03%)</title><rect x="107.3" y="1445" width="0.4" height="15.0" fill="rgb(251,18,26)" rx="2" ry="2" />
<text  x="110.29" y="1455.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;::~vector (8,791,747 samples, 0.02%)</title><rect x="1036.2" y="1605" width="0.2" height="15.0" fill="rgb(216,71,27)" rx="2" ry="2" />
<text  x="1039.19" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (19,779,658 samples, 0.04%)</title><rect x="1033.8" y="1877" width="0.4" height="15.0" fill="rgb(244,25,37)" rx="2" ry="2" />
<text  x="1036.79" y="1887.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ConstantExpressionMatcher&gt; (7,680,665 samples, 0.01%)</title><rect x="784.2" y="1845" width="0.2" height="15.0" fill="rgb(253,174,18)" rx="2" ry="2" />
<text  x="787.24" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ifree (35,608,305 samples, 0.07%)</title><rect x="896.3" y="1429" width="0.9" height="15.0" fill="rgb(252,224,8)" rx="2" ry="2" />
<text  x="899.34" y="1439.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BlockPointer, std::allocator&lt;duckdb::BlockPointer&gt; &gt;::~vector (4,872,150 samples, 0.01%)</title><rect x="237.7" y="1205" width="0.1" height="15.0" fill="rgb(228,176,35)" rx="2" ry="2" />
<text  x="240.72" y="1215.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::find (10,619,930 samples, 0.02%)</title><rect x="929.4" y="1685" width="0.3" height="15.0" fill="rgb(215,49,37)" rx="2" ry="2" />
<text  x="932.43" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::~vector (19,647,717 samples, 0.04%)</title><rect x="631.1" y="1749" width="0.4" height="15.0" fill="rgb(212,147,53)" rx="2" ry="2" />
<text  x="634.06" y="1759.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::insert (42,960,578 samples, 0.08%)</title><rect x="883.2" y="1717" width="1.0" height="15.0" fill="rgb(228,19,7)" rx="2" ry="2" />
<text  x="886.20" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_max_size (17,495,971 samples, 0.03%)</title><rect x="608.9" y="1701" width="0.4" height="15.0" fill="rgb(253,18,42)" rx="2" ry="2" />
<text  x="611.91" y="1711.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (10,117,756 samples, 0.02%)</title><rect x="546.9" y="1637" width="0.3" height="15.0" fill="rgb(225,85,18)" rx="2" ry="2" />
<text  x="549.92" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (6,335,949 samples, 0.01%)</title><rect x="380.6" y="1653" width="0.2" height="15.0" fill="rgb(243,48,9)" rx="2" ry="2" />
<text  x="383.62" y="1663.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (38,319,772 samples, 0.07%)</title><rect x="192.8" y="1621" width="0.9" height="15.0" fill="rgb(248,8,0)" rx="2" ry="2" />
<text  x="195.81" y="1631.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (4,592,272 samples, 0.01%)</title><rect x="35.8" y="1989" width="0.1" height="15.0" fill="rgb(229,110,37)" rx="2" ry="2" />
<text  x="38.77" y="1999.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::GetSegment (34,673,566 samples, 0.07%)</title><rect x="300.0" y="1637" width="0.8" height="15.0" fill="rgb(220,192,37)" rx="2" ry="2" />
<text  x="303.04" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_do_relocate (12,200,477 samples, 0.02%)</title><rect x="838.8" y="1749" width="0.2" height="15.0" fill="rgb(238,188,11)" rx="2" ry="2" />
<text  x="841.76" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::InClauseSimplificationRule, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (11,118,691 samples, 0.02%)</title><rect x="823.4" y="1877" width="0.3" height="15.0" fill="rgb(244,154,39)" rx="2" ry="2" />
<text  x="826.41" y="1887.5" ></text>
</g>
<g >
<title>duckdb::CommonSubExpressionOptimizer::VisitOperator (5,630,675 samples, 0.01%)</title><rect x="729.2" y="1669" width="0.1" height="15.0" fill="rgb(231,60,51)" rx="2" ry="2" />
<text  x="732.18" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (8,487,663 samples, 0.02%)</title><rect x="779.6" y="1797" width="0.2" height="15.0" fill="rgb(234,152,44)" rx="2" ry="2" />
<text  x="782.57" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt;::get (11,909,100 samples, 0.02%)</title><rect x="514.5" y="1877" width="0.3" height="15.0" fill="rgb(222,105,0)" rx="2" ry="2" />
<text  x="517.55" y="1887.5" ></text>
</g>
<g >
<title>duckdb::CatalogEntry::CatalogEntry (4,792,219 samples, 0.01%)</title><rect x="1114.6" y="1781" width="0.1" height="15.0" fill="rgb(236,150,10)" rx="2" ry="2" />
<text  x="1117.61" y="1791.5" ></text>
</g>
<g >
<title>std::mutex::unlock (5,217,146 samples, 0.01%)</title><rect x="506.3" y="1845" width="0.1" height="15.0" fill="rgb(207,26,24)" rx="2" ry="2" />
<text  x="509.26" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::unique_ptr&lt;unsigned int*, std::default_delete&lt;unsigned int []&gt;, void, bool&gt; (9,990,307 samples, 0.02%)</title><rect x="201.9" y="1493" width="0.3" height="15.0" fill="rgb(246,83,5)" rx="2" ry="2" />
<text  x="204.92" y="1503.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::BindExpression (240,224,621 samples, 0.47%)</title><rect x="950.6" y="1669" width="5.5" height="15.0" fill="rgb(205,107,32)" rx="2" ry="2" />
<text  x="953.56" y="1679.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, unsigned long&amp;, unsigned long&amp;&gt; (11,101,509 samples, 0.02%)</title><rect x="607.9" y="1733" width="0.2" height="15.0" fill="rgb(207,16,23)" rx="2" ry="2" />
<text  x="610.89" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (24,718,871 samples, 0.05%)</title><rect x="46.1" y="2005" width="0.6" height="15.0" fill="rgb(218,14,12)" rx="2" ry="2" />
<text  x="49.11" y="2015.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt; (6,249,554 samples, 0.01%)</title><rect x="818.2" y="1765" width="0.2" height="15.0" fill="rgb(217,49,42)" rx="2" ry="2" />
<text  x="821.24" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::empty (9,046,128 samples, 0.02%)</title><rect x="774.7" y="1861" width="0.2" height="15.0" fill="rgb(243,28,40)" rx="2" ry="2" />
<text  x="777.69" y="1871.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::~PhysicalInsert (572,971,325 samples, 1.12%)</title><rect x="338.0" y="1637" width="13.2" height="15.0" fill="rgb(236,129,54)" rx="2" ry="2" />
<text  x="340.97" y="1647.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::unordered_map (125,635,655 samples, 0.24%)</title><rect x="731.3" y="1797" width="2.9" height="15.0" fill="rgb(231,5,40)" rx="2" ry="2" />
<text  x="734.32" y="1807.5" ></text>
</g>
<g >
<title>duckdb::InsertGlobalState::InsertGlobalState (112,417,671 samples, 0.22%)</title><rect x="96.8" y="1781" width="2.6" height="15.0" fill="rgb(209,106,23)" rx="2" ry="2" />
<text  x="99.82" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::operator* (6,300,787 samples, 0.01%)</title><rect x="739.6" y="1621" width="0.1" height="15.0" fill="rgb(251,201,39)" rx="2" ry="2" />
<text  x="742.60" y="1631.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (6,940,816 samples, 0.01%)</title><rect x="830.0" y="1477" width="0.1" height="15.0" fill="rgb(209,36,50)" rx="2" ry="2" />
<text  x="832.95" y="1487.5" ></text>
</g>
<g >
<title>duckdb::PhysicalDummyScan::~PhysicalDummyScan (4,625,487 samples, 0.01%)</title><rect x="915.5" y="1541" width="0.1" height="15.0" fill="rgb(224,190,11)" rx="2" ry="2" />
<text  x="918.54" y="1551.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::find (8,632,642 samples, 0.02%)</title><rect x="776.6" y="1781" width="0.2" height="15.0" fill="rgb(227,43,6)" rx="2" ry="2" />
<text  x="779.56" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FoldableConstantMatcher, std::default_delete&lt;duckdb::FoldableConstantMatcher&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::FoldableConstantMatcher&gt;, void&gt; (6,961,523 samples, 0.01%)</title><rect x="793.0" y="1829" width="0.1" height="15.0" fill="rgb(224,102,15)" rx="2" ry="2" />
<text  x="795.97" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnScanState [], std::default_delete&lt;duckdb::ColumnScanState&gt;, false&gt;::operator= (10,621,022 samples, 0.02%)</title><rect x="224.6" y="1701" width="0.3" height="15.0" fill="rgb(222,48,51)" rx="2" ry="2" />
<text  x="227.63" y="1711.5" ></text>
</g>
<g >
<title>std::deque&lt;std::pair&lt;unsigned long, std::shared_ptr&lt;duckdb::QueryProfiler&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long, std::shared_ptr&lt;duckdb::QueryProfiler&gt; &gt; &gt; &gt;::emplace_back&lt;unsigned long, std::shared_ptr&lt;duckdb::QueryProfiler&gt; &gt; (5,979,040 samples, 0.01%)</title><rect x="352.2" y="1877" width="0.2" height="15.0" fill="rgb(207,171,22)" rx="2" ry="2" />
<text  x="355.24" y="1887.5" ></text>
</g>
<g >
<title>duckdb::ColumnLifetimeAnalyzer::VisitOperator (26,484,444 samples, 0.05%)</title><rect x="724.2" y="1749" width="0.6" height="15.0" fill="rgb(252,37,25)" rx="2" ry="2" />
<text  x="727.19" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::~vector (5,664,468 samples, 0.01%)</title><rect x="312.5" y="1717" width="0.2" height="15.0" fill="rgb(245,36,18)" rx="2" ry="2" />
<text  x="315.52" y="1727.5" ></text>
</g>
<g >
<title>ata_scsi_translate (11,857,774 samples, 0.02%)</title><rect x="250.0" y="1365" width="0.3" height="15.0" fill="rgb(216,75,23)" rx="2" ry="2" />
<text  x="253.05" y="1375.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ComparisonExpressionMatcher, std::default_delete&lt;duckdb::ComparisonExpressionMatcher&gt; &gt;::__uniq_ptr_impl (6,109,171 samples, 0.01%)</title><rect x="791.7" y="1797" width="0.1" height="15.0" fill="rgb(215,8,18)" rx="2" ry="2" />
<text  x="794.67" y="1807.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::Start (10,436,939 samples, 0.02%)</title><rect x="715.5" y="1845" width="0.2" height="15.0" fill="rgb(240,196,28)" rx="2" ry="2" />
<text  x="718.50" y="1855.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::PipelineRenderNode&gt; (20,420,635 samples, 0.04%)</title><rect x="1067.1" y="1685" width="0.5" height="15.0" fill="rgb(231,227,38)" rx="2" ry="2" />
<text  x="1070.10" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;::operator (15,201,690 samples, 0.03%)</title><rect x="967.9" y="1701" width="0.3" height="15.0" fill="rgb(229,174,6)" rx="2" ry="2" />
<text  x="970.86" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::unique_ptr (8,742,072 samples, 0.02%)</title><rect x="856.9" y="1797" width="0.2" height="15.0" fill="rgb(239,131,25)" rx="2" ry="2" />
<text  x="859.85" y="1807.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unordered_set (4,579,134 samples, 0.01%)</title><rect x="829.8" y="1509" width="0.1" height="15.0" fill="rgb(245,83,25)" rx="2" ry="2" />
<text  x="832.76" y="1519.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::StringScanState, std::default_delete&lt;duckdb::StringScanState&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::StringScanState&gt;, void&gt; (11,357,709 samples, 0.02%)</title><rect x="213.2" y="1573" width="0.3" height="15.0" fill="rgb(211,180,29)" rx="2" ry="2" />
<text  x="216.22" y="1583.5" ></text>
</g>
<g >
<title>__block_commit_write.isra.0 (8,933,939 samples, 0.02%)</title><rect x="248.5" y="1493" width="0.2" height="15.0" fill="rgb(250,63,13)" rx="2" ry="2" />
<text  x="251.51" y="1503.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;,  (7,382,290 samples, 0.01%)</title><rect x="895.3" y="1605" width="0.2" height="15.0" fill="rgb(251,89,8)" rx="2" ry="2" />
<text  x="898.33" y="1615.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt;, true&gt;::~vector (5,349,325 samples, 0.01%)</title><rect x="227.3" y="1637" width="0.1" height="15.0" fill="rgb(209,27,34)" rx="2" ry="2" />
<text  x="230.29" y="1647.5" ></text>
</g>
<g >
<title>duckdb::Rule::~Rule (9,757,305 samples, 0.02%)</title><rect x="830.6" y="1685" width="0.2" height="15.0" fill="rgb(235,159,10)" rx="2" ry="2" />
<text  x="833.59" y="1695.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionMatcher&gt;::operator (6,141,213 samples, 0.01%)</title><rect x="830.0" y="1461" width="0.1" height="15.0" fill="rgb(238,122,3)" rx="2" ry="2" />
<text  x="832.95" y="1471.5" ></text>
</g>
<g >
<title>duckdb::PhysicalPlanGenerator::CreatePlan (100,867,508 samples, 0.20%)</title><rect x="907.7" y="1781" width="2.3" height="15.0" fill="rgb(220,190,7)" rx="2" ry="2" />
<text  x="910.71" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (75,731,901 samples, 0.15%)</title><rect x="428.7" y="1541" width="1.7" height="15.0" fill="rgb(221,223,26)" rx="2" ry="2" />
<text  x="431.69" y="1551.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (6,497,338 samples, 0.01%)</title><rect x="103.7" y="1541" width="0.2" height="15.0" fill="rgb(224,63,50)" rx="2" ry="2" />
<text  x="106.73" y="1551.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;duckdb::PhysicalOperator const&amp;, duckdb::QueryProfiler::TreeNode&amp;&gt; &gt; (39,345,996 samples, 0.08%)</title><rect x="1087.4" y="1797" width="0.9" height="15.0" fill="rgb(226,35,23)" rx="2" ry="2" />
<text  x="1090.36" y="1807.5" ></text>
</g>
<g >
<title>duckdb::BindContext::GetCTEBindings[abi:cxx11] (7,171,228 samples, 0.01%)</title><rect x="985.1" y="1669" width="0.2" height="15.0" fill="rgb(237,140,40)" rx="2" ry="2" />
<text  x="988.09" y="1679.5" ></text>
</g>
<g >
<title>duckdb::EqualOrNullSimplification::~EqualOrNullSimplification (9,491,396 samples, 0.02%)</title><rect x="832.1" y="1701" width="0.3" height="15.0" fill="rgb(211,38,12)" rx="2" ry="2" />
<text  x="835.14" y="1711.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, unsigned long const*, unsigned long*&gt; (8,538,595 samples, 0.02%)</title><rect x="672.8" y="1669" width="0.2" height="15.0" fill="rgb(221,98,45)" rx="2" ry="2" />
<text  x="675.75" y="1679.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::PipelineCompleteEvent, duckdb::Executor&amp;, bool&amp;&gt; (22,262,968 samples, 0.04%)</title><rect x="1049.3" y="1813" width="0.5" height="15.0" fill="rgb(224,107,41)" rx="2" ry="2" />
<text  x="1052.32" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ExpressionInfo::ExtractExpressionsRecursive (5,977,502 samples, 0.01%)</title><rect x="477.7" y="1733" width="0.1" height="15.0" fill="rgb(228,40,46)" rx="2" ry="2" />
<text  x="480.67" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Catalog::GetCatalogEntry (326,339,532 samples, 0.64%)</title><rect x="987.9" y="1765" width="7.5" height="15.0" fill="rgb(222,23,13)" rx="2" ry="2" />
<text  x="990.93" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::AllocateNewChunk (225,392,490 samples, 0.44%)</title><rect x="379.5" y="1909" width="5.2" height="15.0" fill="rgb(214,112,26)" rx="2" ry="2" />
<text  x="382.47" y="1919.5" ></text>
</g>
<g >
<title>__cxxabiv1::__si_class_type_info::__do_dyncast (25,121,639 samples, 0.05%)</title><rect x="183.3" y="2037" width="0.6" height="15.0" fill="rgb(210,215,5)" rx="2" ry="2" />
<text  x="186.31" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::~_Hashtable_alloc (5,520,060 samples, 0.01%)</title><rect x="671.0" y="1749" width="0.1" height="15.0" fill="rgb(218,128,13)" rx="2" ry="2" />
<text  x="673.98" y="1759.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::AddChild (12,191,482 samples, 0.02%)</title><rect x="1012.1" y="1829" width="0.2" height="15.0" fill="rgb(216,23,35)" rx="2" ry="2" />
<text  x="1015.06" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, unsigned long, true&gt;::_S_equals (4,407,782 samples, 0.01%)</title><rect x="954.8" y="1493" width="0.1" height="15.0" fill="rgb(215,68,3)" rx="2" ry="2" />
<text  x="957.75" y="1503.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetEntryForTransaction (6,682,205 samples, 0.01%)</title><rect x="1043.4" y="1845" width="0.2" height="15.0" fill="rgb(251,38,34)" rx="2" ry="2" />
<text  x="1046.40" y="1855.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::GetName[abi:cxx11] (4,458,695 samples, 0.01%)</title><rect x="834.6" y="1701" width="0.1" height="15.0" fill="rgb(211,22,35)" rx="2" ry="2" />
<text  x="837.65" y="1711.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Vector&gt; &gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (20,773,369 samples, 0.04%)</title><rect x="291.0" y="1653" width="0.5" height="15.0" fill="rgb(239,136,6)" rx="2" ry="2" />
<text  x="294.01" y="1663.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::RowGroupSegmentTree,  (23,117,337 samples, 0.05%)</title><rect x="429.2" y="1413" width="0.6" height="15.0" fill="rgb(244,79,40)" rx="2" ry="2" />
<text  x="432.23" y="1423.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (8,907,760 samples, 0.02%)</title><rect x="362.1" y="1765" width="0.2" height="15.0" fill="rgb(239,21,25)" rx="2" ry="2" />
<text  x="365.05" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (4,628,474 samples, 0.01%)</title><rect x="674.1" y="1797" width="0.1" height="15.0" fill="rgb(248,137,0)" rx="2" ry="2" />
<text  x="677.13" y="1807.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::ColumnStatistics&gt; &gt;::construct&lt;duckdb::ColumnStatistics, duckdb::BaseStatistics&gt; (60,526,601 samples, 0.12%)</title><rect x="426.0" y="1461" width="1.4" height="15.0" fill="rgb(210,215,33)" rx="2" ry="2" />
<text  x="428.96" y="1471.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::ConjunctionExpressionMatcher, std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt;, void&gt; (7,655,138 samples, 0.01%)</title><rect x="793.4" y="1829" width="0.1" height="15.0" fill="rgb(237,131,34)" rx="2" ry="2" />
<text  x="796.35" y="1839.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::DeleteTemporaryFile (5,864,412 samples, 0.01%)</title><rect x="242.0" y="613" width="0.1" height="15.0" fill="rgb(244,192,44)" rx="2" ry="2" />
<text  x="244.97" y="623.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocate (5,504,722 samples, 0.01%)</title><rect x="108.1" y="1573" width="0.1" height="15.0" fill="rgb(225,61,48)" rx="2" ry="2" />
<text  x="111.09" y="1583.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::FileBuffer, duckdb::Allocator&amp;, duckdb::FileBufferType&amp;, unsigned long&amp;&gt; (300,814,095 samples, 0.59%)</title><rect x="872.6" y="1621" width="6.9" height="15.0" fill="rgb(237,61,32)" rx="2" ry="2" />
<text  x="875.58" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::clear (37,773,765 samples, 0.07%)</title><rect x="357.4" y="1861" width="0.9" height="15.0" fill="rgb(248,62,8)" rx="2" ry="2" />
<text  x="360.40" y="1871.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotReverseMap::StackDepotReverseMap (4,845,892 samples, 0.01%)</title><rect x="20.6" y="2005" width="0.1" height="15.0" fill="rgb(235,178,50)" rx="2" ry="2" />
<text  x="23.58" y="2015.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (80,609,844 samples, 0.16%)</title><rect x="665.5" y="1733" width="1.9" height="15.0" fill="rgb(236,189,2)" rx="2" ry="2" />
<text  x="668.50" y="1743.5" ></text>
</g>
<g >
<title>duckdb::TopN::Optimize (15,809,772 samples, 0.03%)</title><rect x="768.4" y="1797" width="0.4" height="15.0" fill="rgb(209,169,2)" rx="2" ry="2" />
<text  x="771.44" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (8,805,695 samples, 0.02%)</title><rect x="1090.0" y="1781" width="0.2" height="15.0" fill="rgb(219,222,46)" rx="2" ry="2" />
<text  x="1093.02" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="837" width="0.1" height="15.0" fill="rgb(211,32,44)" rx="2" ry="2" />
<text  x="14.25" y="847.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::Elapsed (35,112,013 samples, 0.07%)</title><rect x="714.5" y="1845" width="0.8" height="15.0" fill="rgb(221,204,52)" rx="2" ry="2" />
<text  x="717.49" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::extent_activate_locked (36,870,195 samples, 0.07%)</title><rect x="876.4" y="1221" width="0.8" height="15.0" fill="rgb(246,66,5)" rx="2" ry="2" />
<text  x="879.36" y="1231.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::EnumComparisonRule, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (19,229,662 samples, 0.04%)</title><rect x="822.8" y="1877" width="0.4" height="15.0" fill="rgb(253,225,34)" rx="2" ry="2" />
<text  x="825.77" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::ReferenceEquality&lt;duckdb::SchemaCatalogEntry&gt;, duckdb::ReferenceHashFunction&lt;duckdb::SchemaCatalogEntry&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::clear (6,911,090 samples, 0.01%)</title><rect x="1008.3" y="1733" width="0.2" height="15.0" fill="rgb(209,118,54)" rx="2" ry="2" />
<text  x="1011.30" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (5,504,722 samples, 0.01%)</title><rect x="108.1" y="1509" width="0.1" height="15.0" fill="rgb(209,112,51)" rx="2" ry="2" />
<text  x="111.09" y="1519.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetEntry (87,433,867 samples, 0.17%)</title><rect x="1002.2" y="1733" width="2.0" height="15.0" fill="rgb(239,29,17)" rx="2" ry="2" />
<text  x="1005.21" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnScanState, true&gt;::~vector (4,451,318 samples, 0.01%)</title><rect x="288.4" y="1493" width="0.1" height="15.0" fill="rgb(212,172,21)" rx="2" ry="2" />
<text  x="291.41" y="1503.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (93,443,577 samples, 0.18%)</title><rect x="890.1" y="1525" width="2.1" height="15.0" fill="rgb(246,81,37)" rx="2" ry="2" />
<text  x="893.07" y="1535.5" ></text>
</g>
<g >
<title>duckdb::MoveConstantsRule::MoveConstantsRule (197,687,198 samples, 0.39%)</title><rect x="814.0" y="1861" width="4.5" height="15.0" fill="rgb(234,3,21)" rx="2" ry="2" />
<text  x="816.97" y="1871.5" ></text>
</g>
<g >
<title>wake_up_q (14,000,900 samples, 0.03%)</title><rect x="93.6" y="1573" width="0.3" height="15.0" fill="rgb(246,97,11)" rx="2" ry="2" />
<text  x="96.57" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (8,323,921 samples, 0.02%)</title><rect x="482.5" y="1333" width="0.2" height="15.0" fill="rgb(210,159,12)" rx="2" ry="2" />
<text  x="485.47" y="1343.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::push_back (15,204,270 samples, 0.03%)</title><rect x="865.1" y="1749" width="0.3" height="15.0" fill="rgb(208,92,12)" rx="2" ry="2" />
<text  x="868.06" y="1759.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::InClauseSimplificationRule, std::default_delete&lt;duckdb::InClauseSimplificationRule&gt; &gt;::__uniq_ptr_impl (6,351,701 samples, 0.01%)</title><rect x="810.9" y="1829" width="0.2" height="15.0" fill="rgb(236,199,18)" rx="2" ry="2" />
<text  x="813.93" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BoundStatement::~BoundStatement (4,514,300 samples, 0.01%)</title><rect x="1022.5" y="1861" width="0.1" height="15.0" fill="rgb(209,53,20)" rx="2" ry="2" />
<text  x="1025.54" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::lock_guard&lt;std::mutex&gt;, std::default_delete&lt;std::lock_guard&lt;std::mutex&gt; &gt; &gt;::get_deleter (5,386,402 samples, 0.01%)</title><rect x="329.7" y="1797" width="0.1" height="15.0" fill="rgb(249,199,50)" rx="2" ry="2" />
<text  x="332.69" y="1807.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; (48,261,202 samples, 0.09%)</title><rect x="340.6" y="1269" width="1.1" height="15.0" fill="rgb(249,125,36)" rx="2" ry="2" />
<text  x="343.63" y="1279.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::DataChunk, std::default_delete&lt;duckdb::DataChunk&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::DataChunk, std::default_delete&lt;duckdb::DataChunk&gt;, true&gt; &gt; &gt;::reserve (4,373,681 samples, 0.01%)</title><rect x="497.2" y="1829" width="0.1" height="15.0" fill="rgb(246,166,25)" rx="2" ry="2" />
<text  x="500.19" y="1839.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*&gt; (6,516,403 samples, 0.01%)</title><rect x="832.1" y="1541" width="0.2" height="15.0" fill="rgb(245,6,45)" rx="2" ry="2" />
<text  x="835.14" y="1551.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (6,793,654 samples, 0.01%)</title><rect x="813.5" y="1781" width="0.1" height="15.0" fill="rgb(233,229,46)" rx="2" ry="2" />
<text  x="816.47" y="1791.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (15,613,315 samples, 0.03%)</title><rect x="1179.2" y="1781" width="0.4" height="15.0" fill="rgb(224,23,10)" rx="2" ry="2" />
<text  x="1182.21" y="1791.5" ></text>
</g>
<g >
<title>schedule (13,650,334 samples, 0.03%)</title><rect x="249.3" y="1557" width="0.3" height="15.0" fill="rgb(212,65,37)" rx="2" ry="2" />
<text  x="252.26" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; const&amp;&gt; (27,685,225 samples, 0.05%)</title><rect x="732.6" y="1701" width="0.6" height="15.0" fill="rgb(205,130,38)" rx="2" ry="2" />
<text  x="735.59" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionState, std::default_delete&lt;duckdb::ExpressionState&gt;, true&gt;::operator= (4,359,245 samples, 0.01%)</title><rect x="490.1" y="1733" width="0.1" height="15.0" fill="rgb(234,208,15)" rx="2" ry="2" />
<text  x="493.10" y="1743.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::BaseStatistics, std::default_delete&lt;duckdb::BaseStatistics []&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::BaseStatistics []&gt; &gt; (5,053,242 samples, 0.01%)</title><rect x="424.4" y="1477" width="0.1" height="15.0" fill="rgb(215,171,7)" rx="2" ry="2" />
<text  x="427.39" y="1487.5" ></text>
</g>
<g >
<title>duckdb::RowGroupAppendState::RowGroupAppendState (5,758,778 samples, 0.01%)</title><rect x="98.8" y="1733" width="0.1" height="15.0" fill="rgb(225,66,22)" rx="2" ry="2" />
<text  x="101.75" y="1743.5" ></text>
</g>
<g >
<title>std::ostream::put (4,596,301 samples, 0.01%)</title><rect x="25.1" y="2005" width="0.1" height="15.0" fill="rgb(216,66,21)" rx="2" ry="2" />
<text  x="28.09" y="2015.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::LocalStorage, duckdb::ClientContext&amp;, duckdb::DuckTransaction&amp;&gt; (8,332,577 samples, 0.02%)</title><rect x="990.4" y="1589" width="0.2" height="15.0" fill="rgb(252,28,52)" rx="2" ry="2" />
<text  x="993.43" y="1599.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (78,833,861 samples, 0.15%)</title><rect x="486.7" y="1605" width="1.8" height="15.0" fill="rgb(211,174,31)" rx="2" ry="2" />
<text  x="489.69" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_allocate_buckets (18,679,887 samples, 0.04%)</title><rect x="677.9" y="1685" width="0.4" height="15.0" fill="rgb(233,38,2)" rx="2" ry="2" />
<text  x="680.89" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::ExecuteTaskInternal (5,074,723,386 samples, 9.89%)</title><rect x="396.6" y="1925" width="116.8" height="15.0" fill="rgb(221,116,24)" rx="2" ry="2" />
<text  x="399.63" y="1935.5" >duckdb::Client..</text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::MetaPipeline&gt;::shared_ptr&lt;std::allocator&lt;duckdb::MetaPipeline&gt;, duckdb::Executor&amp;, duckdb::PipelineBuildState&amp;, decltype (135,314,756 samples, 0.26%)</title><rect x="1092.9" y="1829" width="3.1" height="15.0" fill="rgb(215,110,22)" rx="2" ry="2" />
<text  x="1095.88" y="1839.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ConstantFoldingExpressionMatcher&gt; (28,257,788 samples, 0.06%)</title><rect x="794.5" y="1845" width="0.6" height="15.0" fill="rgb(213,222,0)" rx="2" ry="2" />
<text  x="797.46" y="1855.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::ReallocBuffer (24,357,695 samples, 0.05%)</title><rect x="103.0" y="1541" width="0.6" height="15.0" fill="rgb(243,218,32)" rx="2" ry="2" />
<text  x="106.04" y="1551.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ChunkVectorInfo, std::default_delete&lt;duckdb::ChunkVectorInfo&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ChunkVectorInfo&gt;, void&gt; (5,847,819 samples, 0.01%)</title><rect x="414.8" y="1669" width="0.2" height="15.0" fill="rgb(250,109,23)" rx="2" ry="2" />
<text  x="417.84" y="1679.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Unpin (6,328,672 samples, 0.01%)</title><rect x="226.9" y="1413" width="0.2" height="15.0" fill="rgb(206,102,25)" rx="2" ry="2" />
<text  x="229.91" y="1423.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;*, duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt; &gt; (132,899,551 samples, 0.26%)</title><rect x="238.2" y="917" width="3.1" height="15.0" fill="rgb(233,195,23)" rx="2" ry="2" />
<text  x="241.24" y="927.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::CaseSimplificationRule, duckdb::ExpressionRewriter&amp;&gt; (43,609,514 samples, 0.09%)</title><rect x="790.5" y="1877" width="1.0" height="15.0" fill="rgb(217,200,9)" rx="2" ry="2" />
<text  x="793.45" y="1887.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::SelectionData&gt;::shared_ptr&lt;std::allocator&lt;duckdb::SelectionData&gt;, unsigned long&amp;&gt; (15,018,435 samples, 0.03%)</title><rect x="296.5" y="1605" width="0.3" height="15.0" fill="rgb(218,140,49)" rx="2" ry="2" />
<text  x="299.48" y="1615.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1797" width="0.1" height="15.0" fill="rgb(234,25,46)" rx="2" ry="2" />
<text  x="14.25" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (9,925,137 samples, 0.02%)</title><rect x="920.8" y="1781" width="0.3" height="15.0" fill="rgb(236,184,21)" rx="2" ry="2" />
<text  x="923.83" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_buckets (10,708,017 samples, 0.02%)</title><rect x="669.5" y="1717" width="0.2" height="15.0" fill="rgb(241,88,23)" rx="2" ry="2" />
<text  x="672.47" y="1727.5" ></text>
</g>
<g >
<title>duckdb::InsertLocalState::~InsertLocalState (174,243,630 samples, 0.34%)</title><rect x="481.0" y="1765" width="4.0" height="15.0" fill="rgb(246,165,36)" rx="2" ry="2" />
<text  x="484.03" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (37,472,295 samples, 0.07%)</title><rect x="89.9" y="2005" width="0.9" height="15.0" fill="rgb(214,79,44)" rx="2" ry="2" />
<text  x="92.89" y="2015.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::BlockHandle&gt;::construct&lt;duckdb::BlockHandle, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (23,870,924 samples, 0.05%)</title><rect x="441.2" y="1541" width="0.6" height="15.0" fill="rgb(237,112,33)" rx="2" ry="2" />
<text  x="444.24" y="1551.5" ></text>
</g>
<g >
<title>clear_page_rep (20,659,443 samples, 0.04%)</title><rect x="164.8" y="1845" width="0.5" height="15.0" fill="rgb(237,184,27)" rx="2" ry="2" />
<text  x="167.80" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt; &gt; (5,543,684 samples, 0.01%)</title><rect x="1026.6" y="1829" width="0.2" height="15.0" fill="rgb(218,75,6)" rx="2" ry="2" />
<text  x="1029.64" y="1839.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::pg_parser_parse (293,325,666 samples, 0.57%)</title><rect x="518.1" y="1909" width="6.7" height="15.0" fill="rgb(249,88,7)" rx="2" ry="2" />
<text  x="521.06" y="1919.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::InitializeAppend (886,684,308 samples, 1.73%)</title><rect x="432.5" y="1749" width="20.4" height="15.0" fill="rgb(206,23,50)" rx="2" ry="2" />
<text  x="435.52" y="1759.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (5,099,013 samples, 0.01%)</title><rect x="562.8" y="1781" width="0.1" height="15.0" fill="rgb(242,21,7)" rx="2" ry="2" />
<text  x="565.76" y="1791.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::HasNode (12,418,279 samples, 0.02%)</title><rect x="599.4" y="1781" width="0.3" height="15.0" fill="rgb(249,101,24)" rx="2" ry="2" />
<text  x="602.39" y="1791.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBoxContent (965,040,109 samples, 1.88%)</title><rect x="556.8" y="1813" width="22.2" height="15.0" fill="rgb(249,185,25)" rx="2" ry="2" />
<text  x="559.81" y="1823.5" >d..</text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ChunkInfo, std::default_delete&lt;duckdb::ChunkInfo&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ChunkInfo&gt;, void&gt; (11,567,712 samples, 0.02%)</title><rect x="415.7" y="1525" width="0.2" height="15.0" fill="rgb(239,108,14)" rx="2" ry="2" />
<text  x="418.68" y="1535.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::Reset (35,581,243 samples, 0.07%)</title><rect x="399.5" y="1877" width="0.8" height="15.0" fill="rgb(245,113,33)" rx="2" ry="2" />
<text  x="402.45" y="1887.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::core_yylex (152,572,129 samples, 0.30%)</title><rect x="520.2" y="1845" width="3.5" height="15.0" fill="rgb(225,114,15)" rx="2" ry="2" />
<text  x="523.21" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::push_back (8,568,843 samples, 0.02%)</title><rect x="232.2" y="1733" width="0.2" height="15.0" fill="rgb(247,148,18)" rx="2" ry="2" />
<text  x="235.16" y="1743.5" ></text>
</g>
<g >
<title>__do_page_fault (12,829,787 samples, 0.03%)</title><rect x="413.5" y="1605" width="0.3" height="15.0" fill="rgb(209,143,38)" rx="2" ry="2" />
<text  x="416.47" y="1615.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::~FunctionExpressionMatcher (11,127,475 samples, 0.02%)</title><rect x="832.9" y="1429" width="0.2" height="15.0" fill="rgb(239,165,13)" rx="2" ry="2" />
<text  x="835.89" y="1439.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (5,027,777 samples, 0.01%)</title><rect x="1084.4" y="1749" width="0.1" height="15.0" fill="rgb(208,80,10)" rx="2" ry="2" />
<text  x="1087.40" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_bucket_begin (43,455,795 samples, 0.08%)</title><rect x="690.4" y="1749" width="1.0" height="15.0" fill="rgb(239,41,53)" rx="2" ry="2" />
<text  x="693.39" y="1759.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::ExtraInfoSeparator[abi:cxx11] (4,382,696 samples, 0.01%)</title><rect x="573.0" y="1781" width="0.1" height="15.0" fill="rgb(247,45,9)" rx="2" ry="2" />
<text  x="575.96" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_relocate (12,880,210 samples, 0.03%)</title><rect x="838.7" y="1765" width="0.3" height="15.0" fill="rgb(214,126,37)" rx="2" ry="2" />
<text  x="841.74" y="1775.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::DatabaseManager&gt;::operator (99,164,839 samples, 0.19%)</title><rect x="1117.5" y="1829" width="2.2" height="15.0" fill="rgb(231,98,15)" rx="2" ry="2" />
<text  x="1120.47" y="1839.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (5,167,467 samples, 0.01%)</title><rect x="367.2" y="1525" width="0.1" height="15.0" fill="rgb(216,18,21)" rx="2" ry="2" />
<text  x="370.18" y="1535.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;unsigned long const*, unsigned long*&gt; (15,934,935 samples, 0.03%)</title><rect x="672.7" y="1701" width="0.4" height="15.0" fill="rgb(228,16,9)" rx="2" ry="2" />
<text  x="675.70" y="1711.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::UncompressedStringSegmentState&gt; (14,633,616 samples, 0.03%)</title><rect x="444.1" y="1621" width="0.3" height="15.0" fill="rgb(221,193,0)" rx="2" ry="2" />
<text  x="447.08" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperator (48,637,813 samples, 0.09%)</title><rect x="848.8" y="1877" width="1.1" height="15.0" fill="rgb(228,175,50)" rx="2" ry="2" />
<text  x="851.77" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (6,833,191 samples, 0.01%)</title><rect x="798.2" y="1781" width="0.1" height="15.0" fill="rgb(243,182,21)" rx="2" ry="2" />
<text  x="801.16" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_realloc_insert&lt;duckdb::LogicalTypeId const&amp;&gt; (12,970,745 samples, 0.03%)</title><rect x="847.7" y="1781" width="0.3" height="15.0" fill="rgb(254,89,16)" rx="2" ry="2" />
<text  x="850.71" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt; &gt;::~unique_ptr (14,954,613 samples, 0.03%)</title><rect x="1077.8" y="1765" width="0.3" height="15.0" fill="rgb(238,12,13)" rx="2" ry="2" />
<text  x="1080.78" y="1775.5" ></text>
</g>
<g >
<title>duckdb::SelectionVector::Initialize (498,696,804 samples, 0.97%)</title><rect x="200.3" y="1669" width="11.5" height="15.0" fill="rgb(212,120,30)" rx="2" ry="2" />
<text  x="203.33" y="1679.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::MetaPipeline&gt; &gt;::destroy&lt;duckdb::MetaPipeline&gt; (41,964,030 samples, 0.08%)</title><rect x="1096.2" y="1781" width="0.9" height="15.0" fill="rgb(218,104,41)" rx="2" ry="2" />
<text  x="1099.17" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned char [], std::default_delete&lt;unsigned char []&gt; &gt;::operator= (5,471,942 samples, 0.01%)</title><rect x="584.8" y="1813" width="0.1" height="15.0" fill="rgb(216,2,31)" rx="2" ry="2" />
<text  x="587.77" y="1823.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::GetSegmentIndex (11,211,153 samples, 0.02%)</title><rect x="301.2" y="1653" width="0.3" height="15.0" fill="rgb(209,36,8)" rx="2" ry="2" />
<text  x="304.21" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::operator= (11,458,696 samples, 0.02%)</title><rect x="589.5" y="1845" width="0.3" height="15.0" fill="rgb(253,8,41)" rx="2" ry="2" />
<text  x="592.51" y="1855.5" ></text>
</g>
<g >
<title>duckdb::ScalarFunctionSet::ScalarFunctionSet (6,397,242 samples, 0.01%)</title><rect x="1116.8" y="1909" width="0.1" height="15.0" fill="rgb(243,36,32)" rx="2" ry="2" />
<text  x="1119.78" y="1919.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::ExecutePushInternal (1,986,146,433 samples, 3.87%)</title><rect x="420.0" y="1845" width="45.7" height="15.0" fill="rgb(205,217,24)" rx="2" ry="2" />
<text  x="422.96" y="1855.5" >duck..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; (8,030,915 samples, 0.02%)</title><rect x="869.1" y="1717" width="0.2" height="15.0" fill="rgb(240,138,22)" rx="2" ry="2" />
<text  x="872.09" y="1727.5" ></text>
</g>
<g >
<title>blk_mq_flush_plug_list (44,916,696 samples, 0.09%)</title><rect x="249.7" y="1541" width="1.0" height="15.0" fill="rgb(213,187,37)" rx="2" ry="2" />
<text  x="252.67" y="1551.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::IntegerTypeMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt; &gt;, void&gt; (6,119,877 samples, 0.01%)</title><rect x="816.3" y="1845" width="0.1" height="15.0" fill="rgb(240,75,35)" rx="2" ry="2" />
<text  x="819.26" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnScanState, std::allocator&lt;duckdb::ColumnScanState&gt; &gt;::~vector (29,654,760 samples, 0.06%)</title><rect x="287.8" y="1589" width="0.7" height="15.0" fill="rgb(208,81,38)" rx="2" ry="2" />
<text  x="290.85" y="1599.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (14,175,227 samples, 0.03%)</title><rect x="246.1" y="1765" width="0.3" height="15.0" fill="rgb(247,195,25)" rx="2" ry="2" />
<text  x="249.08" y="1775.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, duckdb::ProducerToken*, std::default_delete&lt;duckdb::ProducerToken&gt; &gt; (4,834,164 samples, 0.01%)</title><rect x="508.2" y="1829" width="0.1" height="15.0" fill="rgb(232,197,15)" rx="2" ry="2" />
<text  x="511.23" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_check_len (4,864,852 samples, 0.01%)</title><rect x="617.4" y="1749" width="0.1" height="15.0" fill="rgb(216,115,17)" rx="2" ry="2" />
<text  x="620.42" y="1759.5" ></text>
</g>
<g >
<title>duckdb::VersionNode::VersionNode (13,886,709 samples, 0.03%)</title><rect x="415.6" y="1557" width="0.3" height="15.0" fill="rgb(223,141,34)" rx="2" ry="2" />
<text  x="418.63" y="1567.5" ></text>
</g>
<g >
<title>duckdb::SelectionData::SelectionData (4,666,749 samples, 0.01%)</title><rect x="315.5" y="1445" width="0.1" height="15.0" fill="rgb(228,52,19)" rx="2" ry="2" />
<text  x="318.53" y="1455.5" ></text>
</g>
<g >
<title>duckdb::Vector::GetValueInternal (15,888,055 samples, 0.03%)</title><rect x="1119.8" y="1941" width="0.4" height="15.0" fill="rgb(241,72,31)" rx="2" ry="2" />
<text  x="1122.82" y="1951.5" ></text>
</g>
<g >
<title>duckdb::TableIndexList::Scan&lt;duckdb::LocalStorage::Flush (5,215,495 samples, 0.01%)</title><rect x="234.4" y="1781" width="0.1" height="15.0" fill="rgb(250,226,20)" rx="2" ry="2" />
<text  x="237.35" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (2,355,465,807 samples, 4.59%)</title><rect x="91.1" y="2005" width="54.2" height="15.0" fill="rgb(234,209,50)" rx="2" ry="2" />
<text  x="94.09" y="2015.5" >[unkn..</text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::unique_ptr (5,295,760 samples, 0.01%)</title><rect x="755.5" y="1749" width="0.1" height="15.0" fill="rgb(253,158,40)" rx="2" ry="2" />
<text  x="758.48" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, unsigned long&amp;, unsigned long&amp;&gt; (8,447,314 samples, 0.02%)</title><rect x="628.6" y="1717" width="0.2" height="15.0" fill="rgb(206,90,32)" rx="2" ry="2" />
<text  x="631.56" y="1727.5" ></text>
</g>
<g >
<title>duckdb::BoundColumnRefExpression::GetName[abi:cxx11] (7,168,650 samples, 0.01%)</title><rect x="550.0" y="1669" width="0.2" height="15.0" fill="rgb(238,142,26)" rx="2" ry="2" />
<text  x="553.01" y="1679.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;, std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::__uniq_ptr_impl (4,569,177 samples, 0.01%)</title><rect x="635.7" y="1685" width="0.1" height="15.0" fill="rgb(225,110,27)" rx="2" ry="2" />
<text  x="638.71" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SampleOptions, std::default_delete&lt;duckdb::SampleOptions&gt;, true&gt;::operator= (22,948,500 samples, 0.04%)</title><rect x="534.7" y="1765" width="0.5" height="15.0" fill="rgb(249,147,30)" rx="2" ry="2" />
<text  x="537.70" y="1775.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::unordered_set&lt;duckdb::Dependency, duckdb::DependencyHashFunction, duckdb::DependencyEquality, std::allocator&lt;duckdb::Dependency&gt; &gt;, duckdb::CatalogEntryHashFunction, duckdb::CatalogEntryEquality, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; const, std::unordered_set&lt;duckdb::Dependency, duckdb::DependencyHashFunction, duckdb::DependencyEquality, std::allocator&lt;duckdb::Dependency&gt; &gt; &gt; &gt; &gt;::operator[] (7,178,319 samples, 0.01%)</title><rect x="1113.8" y="1797" width="0.1" height="15.0" fill="rgb(226,136,35)" rx="2" ry="2" />
<text  x="1116.78" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VersionNode,  (34,385,137 samples, 0.07%)</title><rect x="244.4" y="1205" width="0.8" height="15.0" fill="rgb(213,133,48)" rx="2" ry="2" />
<text  x="247.38" y="1215.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (8,791,747 samples, 0.02%)</title><rect x="1036.2" y="1573" width="0.2" height="15.0" fill="rgb(208,70,5)" rx="2" ry="2" />
<text  x="1039.19" y="1583.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnScanState*&gt; (27,609,916 samples, 0.05%)</title><rect x="287.9" y="1557" width="0.6" height="15.0" fill="rgb(222,194,3)" rx="2" ry="2" />
<text  x="290.88" y="1567.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::LogicalInsert, std::default_delete&lt;duckdb::LogicalInsert&gt; &gt;::__uniq_ptr_impl (6,928,546 samples, 0.01%)</title><rect x="1013.4" y="1781" width="0.1" height="15.0" fill="rgb(210,97,54)" rx="2" ry="2" />
<text  x="1016.38" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::operator= (5,594,598 samples, 0.01%)</title><rect x="1068.6" y="1701" width="0.1" height="15.0" fill="rgb(250,184,21)" rx="2" ry="2" />
<text  x="1071.57" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt;, std::__detail::_Identity, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert_unique_node (9,255,787 samples, 0.02%)</title><rect x="725.4" y="1589" width="0.2" height="15.0" fill="rgb(232,49,25)" rx="2" ry="2" />
<text  x="728.38" y="1599.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::operator=&lt;duckdb::DictionaryBuffer&gt; (5,832,203 samples, 0.01%)</title><rect x="295.6" y="1669" width="0.1" height="15.0" fill="rgb(249,143,50)" rx="2" ry="2" />
<text  x="298.56" y="1679.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;, true&gt;::operator= (7,240,888 samples, 0.01%)</title><rect x="466.4" y="1765" width="0.2" height="15.0" fill="rgb(252,153,8)" rx="2" ry="2" />
<text  x="469.45" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::begin (4,541,753 samples, 0.01%)</title><rect x="774.6" y="1861" width="0.1" height="15.0" fill="rgb(246,161,3)" rx="2" ry="2" />
<text  x="777.59" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnDataCollection, std::default_delete&lt;duckdb::ColumnDataCollection&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ColumnDataCollection&gt;, void&gt; (5,144,978 samples, 0.01%)</title><rect x="387.2" y="1893" width="0.1" height="15.0" fill="rgb(238,31,9)" rx="2" ry="2" />
<text  x="390.19" y="1903.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt;::allocate (53,293,339 samples, 0.10%)</title><rect x="39.8" y="2021" width="1.2" height="15.0" fill="rgb(242,129,35)" rx="2" ry="2" />
<text  x="42.77" y="2031.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::Iterate&lt;duckdb::PhysicalOperator&gt; (19,323,887 samples, 0.04%)</title><rect x="834.5" y="1797" width="0.4" height="15.0" fill="rgb(221,19,44)" rx="2" ry="2" />
<text  x="837.48" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::Binding&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::Binding&gt; &gt; &gt;::_M_check_len (8,566,222 samples, 0.02%)</title><rect x="928.7" y="1653" width="0.2" height="15.0" fill="rgb(238,176,6)" rx="2" ry="2" />
<text  x="931.67" y="1663.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::BlockHandle, std::allocator&lt;duckdb::BlockHandle&gt;, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (47,050,472 samples, 0.09%)</title><rect x="440.9" y="1637" width="1.1" height="15.0" fill="rgb(231,211,23)" rx="2" ry="2" />
<text  x="443.94" y="1647.5" ></text>
</g>
<g >
<title>duckdb::BaseSelectBinder::BindColumnRef (259,265,745 samples, 0.51%)</title><rect x="950.2" y="1701" width="6.0" height="15.0" fill="rgb(220,0,4)" rx="2" ry="2" />
<text  x="953.20" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (5,780,606 samples, 0.01%)</title><rect x="11.3" y="133" width="0.1" height="15.0" fill="rgb(208,16,50)" rx="2" ry="2" />
<text  x="14.25" y="143.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::MetaTransaction, duckdb::ClientContext&amp;, duckdb::timestamp_t&amp;, unsigned long&amp;&gt; (13,259,603 samples, 0.03%)</title><rect x="543.2" y="1877" width="0.3" height="15.0" fill="rgb(228,100,39)" rx="2" ry="2" />
<text  x="546.21" y="1887.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned long [], std::default_delete&lt;unsigned long []&gt; &gt;::get (5,379,192 samples, 0.01%)</title><rect x="363.3" y="1589" width="0.2" height="15.0" fill="rgb(208,158,22)" rx="2" ry="2" />
<text  x="366.34" y="1599.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (229,828,826 samples, 0.45%)</title><rect x="889.5" y="1765" width="5.2" height="15.0" fill="rgb(219,141,48)" rx="2" ry="2" />
<text  x="892.45" y="1775.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::IsEnabled (6,821,920 samples, 0.01%)</title><rect x="713.8" y="1861" width="0.1" height="15.0" fill="rgb(249,8,0)" rx="2" ry="2" />
<text  x="716.77" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::Verify (37,941,103 samples, 0.07%)</title><rect x="416.6" y="1653" width="0.9" height="15.0" fill="rgb(217,73,13)" rx="2" ry="2" />
<text  x="419.63" y="1663.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::SelectionData, unsigned long&amp;&gt; (488,293,073 samples, 0.95%)</title><rect x="200.4" y="1653" width="11.2" height="15.0" fill="rgb(229,59,41)" rx="2" ry="2" />
<text  x="203.36" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt;::release (5,691,904 samples, 0.01%)</title><rect x="214.9" y="1573" width="0.1" height="15.0" fill="rgb(243,125,12)" rx="2" ry="2" />
<text  x="217.90" y="1583.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::GetLastSegment (7,811,310 samples, 0.02%)</title><rect x="450.5" y="1701" width="0.1" height="15.0" fill="rgb(210,192,10)" rx="2" ry="2" />
<text  x="453.45" y="1711.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::~FunctionExpressionMatcher (12,111,852 samples, 0.02%)</title><rect x="831.4" y="1621" width="0.3" height="15.0" fill="rgb(226,182,54)" rx="2" ry="2" />
<text  x="834.44" y="1631.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::InitializeEmpty (183,102,606 samples, 0.36%)</title><rect x="423.8" y="1605" width="4.2" height="15.0" fill="rgb(248,185,53)" rx="2" ry="2" />
<text  x="426.78" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_node (17,523,120 samples, 0.03%)</title><rect x="682.5" y="1733" width="0.4" height="15.0" fill="rgb(214,41,50)" rx="2" ry="2" />
<text  x="685.50" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::BlockMetaData, true&gt;::vector (4,479,355 samples, 0.01%)</title><rect x="911.8" y="1605" width="0.1" height="15.0" fill="rgb(240,164,40)" rx="2" ry="2" />
<text  x="914.77" y="1615.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::ToString[abi:cxx11] (319,372,810 samples, 0.62%)</title><rect x="634.2" y="1829" width="7.3" height="15.0" fill="rgb(215,135,41)" rx="2" ry="2" />
<text  x="637.16" y="1839.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;duckdb::Expression::Hash (5,079,041 samples, 0.01%)</title><rect x="584.1" y="1813" width="0.1" height="15.0" fill="rgb(229,219,25)" rx="2" ry="2" />
<text  x="587.11" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::InitializeChunkState (72,724,769 samples, 0.14%)</title><rect x="470.8" y="1765" width="1.7" height="15.0" fill="rgb(215,37,6)" rx="2" ry="2" />
<text  x="473.82" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (4,417,525 samples, 0.01%)</title><rect x="1023.3" y="1765" width="0.1" height="15.0" fill="rgb(235,228,24)" rx="2" ry="2" />
<text  x="1026.28" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Vector::~Vector (62,565,454 samples, 0.12%)</title><rect x="297.3" y="1605" width="1.5" height="15.0" fill="rgb(241,65,40)" rx="2" ry="2" />
<text  x="300.32" y="1615.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::PendingStatementOrPreparedStatementInternal (24,516,140,880 samples, 47.80%)</title><rect x="542.2" y="1957" width="564.1" height="15.0" fill="rgb(238,158,48)" rx="2" ry="2" />
<text  x="545.24" y="1967.5" >duckdb::ClientContext::PendingStatementOrPreparedStatementInternal</text>
</g>
<g >
<title>duckdb::CheckpointWriter::WriteSchema (73,585,525 samples, 0.14%)</title><rect x="1117.8" y="1269" width="1.7" height="15.0" fill="rgb(249,215,38)" rx="2" ry="2" />
<text  x="1120.81" y="1279.5" ></text>
</g>
<g >
<title>clock_gettime@@GLIBC_2.17 (15,763,108 samples, 0.03%)</title><rect x="1176.1" y="2037" width="0.3" height="15.0" fill="rgb(244,135,34)" rx="2" ry="2" />
<text  x="1179.05" y="2047.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (8,716,164 samples, 0.02%)</title><rect x="832.1" y="1653" width="0.2" height="15.0" fill="rgb(248,71,11)" rx="2" ry="2" />
<text  x="835.14" y="1663.5" ></text>
</g>
<g >
<title>duckdb::AddArgMinMaxFunctions&lt;duckdb::GreaterThan&gt; (8,796,870 samples, 0.02%)</title><rect x="1112.2" y="1893" width="0.2" height="15.0" fill="rgb(207,77,19)" rx="2" ry="2" />
<text  x="1115.22" y="1903.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (26,540,712 samples, 0.05%)</title><rect x="392.0" y="1461" width="0.6" height="15.0" fill="rgb(235,6,42)" rx="2" ry="2" />
<text  x="394.98" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (12,844,994 samples, 0.03%)</title><rect x="778.2" y="1781" width="0.3" height="15.0" fill="rgb(254,70,38)" rx="2" ry="2" />
<text  x="781.17" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (33,139,711 samples, 0.06%)</title><rect x="482.4" y="1365" width="0.8" height="15.0" fill="rgb(232,195,14)" rx="2" ry="2" />
<text  x="485.42" y="1375.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt;, true&gt;::operator (9,399,131 samples, 0.02%)</title><rect x="514.3" y="1893" width="0.2" height="15.0" fill="rgb(239,46,50)" rx="2" ry="2" />
<text  x="517.27" y="1903.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::core_yy_scan_buffer (12,218,037 samples, 0.02%)</title><rect x="524.3" y="1861" width="0.2" height="15.0" fill="rgb(251,73,44)" rx="2" ry="2" />
<text  x="527.26" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SelectStatement, std::default_delete&lt;duckdb::SelectStatement&gt; &gt;::~unique_ptr (34,252,336 samples, 0.07%)</title><rect x="1038.3" y="1797" width="0.8" height="15.0" fill="rgb(215,90,29)" rx="2" ry="2" />
<text  x="1041.30" y="1807.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::LocalSourceState, std::default_delete&lt;duckdb::LocalSourceState&gt; &gt;::__uniq_ptr_impl (4,423,850 samples, 0.01%)</title><rect x="491.9" y="1765" width="0.1" height="15.0" fill="rgb(230,164,13)" rx="2" ry="2" />
<text  x="494.93" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_alloc (8,698,190 samples, 0.02%)</title><rect x="890.4" y="1445" width="0.2" height="15.0" fill="rgb(248,181,23)" rx="2" ry="2" />
<text  x="893.41" y="1455.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (9,877,174 samples, 0.02%)</title><rect x="849.2" y="1717" width="0.2" height="15.0" fill="rgb(232,196,22)" rx="2" ry="2" />
<text  x="852.16" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="853" width="0.1" height="15.0" fill="rgb(216,25,32)" rx="2" ry="2" />
<text  x="14.25" y="863.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr (9,040,680 samples, 0.02%)</title><rect x="789.5" y="1765" width="0.2" height="15.0" fill="rgb(212,125,11)" rx="2" ry="2" />
<text  x="792.48" y="1775.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::ColumnStatistics, std::allocator&lt;duckdb::ColumnStatistics&gt;, duckdb::BaseStatistics&gt; (82,819,499 samples, 0.16%)</title><rect x="425.6" y="1541" width="1.9" height="15.0" fill="rgb(221,82,29)" rx="2" ry="2" />
<text  x="428.57" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="805" width="0.1" height="15.0" fill="rgb(247,122,10)" rx="2" ry="2" />
<text  x="14.25" y="815.5" ></text>
</g>
<g >
<title>std::set&lt;duckdb::OptimizerType, std::less&lt;duckdb::OptimizerType&gt;, std::allocator&lt;duckdb::OptimizerType&gt; &gt;::find (39,796,382 samples, 0.08%)</title><rect x="773.2" y="1861" width="0.9" height="15.0" fill="rgb(245,189,53)" rx="2" ry="2" />
<text  x="776.19" y="1871.5" ></text>
</g>
<g >
<title>duckdb::PhysicalPlanGenerator::CreatePlan (2,533,776,861 samples, 4.94%)</title><rect x="860.4" y="1813" width="58.3" height="15.0" fill="rgb(233,66,47)" rx="2" ry="2" />
<text  x="863.45" y="1823.5" >duckdb..</text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PipelineRenderNode, std::default_delete&lt;duckdb::PipelineRenderNode&gt;, true&gt;::~unique_ptr (7,048,509 samples, 0.01%)</title><rect x="1069.8" y="1765" width="0.1" height="15.0" fill="rgb(248,13,8)" rx="2" ry="2" />
<text  x="1072.78" y="1775.5" ></text>
</g>
<g >
<title>block_write_end (8,933,939 samples, 0.02%)</title><rect x="248.5" y="1509" width="0.2" height="15.0" fill="rgb(206,41,49)" rx="2" ry="2" />
<text  x="251.51" y="1519.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::ToString[abi:cxx11] (576,095,558 samples, 1.12%)</title><rect x="620.7" y="1829" width="13.3" height="15.0" fill="rgb(213,55,53)" rx="2" ry="2" />
<text  x="623.71" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnRefExpression, std::default_delete&lt;duckdb::ColumnRefExpression&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ColumnRefExpression&gt;, void&gt; (7,365,430 samples, 0.01%)</title><rect x="944.2" y="1669" width="0.2" height="15.0" fill="rgb(226,121,35)" rx="2" ry="2" />
<text  x="947.22" y="1679.5" ></text>
</g>
<g >
<title>duckdb::DataTable::LocalAppend (199,580,607 samples, 0.39%)</title><rect x="459.4" y="1797" width="4.6" height="15.0" fill="rgb(217,227,41)" rx="2" ry="2" />
<text  x="462.39" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ComparisonSimplificationRule::ComparisonSimplificationRule (38,685,071 samples, 0.08%)</title><rect x="791.5" y="1861" width="0.9" height="15.0" fill="rgb(223,100,8)" rx="2" ry="2" />
<text  x="794.51" y="1871.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_Vector_base (4,640,921 samples, 0.01%)</title><rect x="626.8" y="1717" width="0.1" height="15.0" fill="rgb(252,78,5)" rx="2" ry="2" />
<text  x="629.84" y="1727.5" ></text>
</g>
<g >
<title>__lsan::MarkIndirectlyLeakedCb (6,440,655 samples, 0.01%)</title><rect x="48.7" y="2021" width="0.2" height="15.0" fill="rgb(213,112,47)" rx="2" ry="2" />
<text  x="51.71" y="2031.5" ></text>
</g>
<g >
<title>duckdb::StringStats::Update (5,229,288 samples, 0.01%)</title><rect x="462.1" y="1605" width="0.1" height="15.0" fill="rgb(234,89,17)" rx="2" ry="2" />
<text  x="465.07" y="1615.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (4,512,659 samples, 0.01%)</title><rect x="831.5" y="1493" width="0.1" height="15.0" fill="rgb(227,107,8)" rx="2" ry="2" />
<text  x="834.46" y="1503.5" ></text>
</g>
<g >
<title>duckdb::DuckSchemaEntry::CreatePragmaFunction (5,591,169 samples, 0.01%)</title><rect x="1110.4" y="1813" width="0.2" height="15.0" fill="rgb(214,112,8)" rx="2" ry="2" />
<text  x="1113.44" y="1823.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionMatcher&gt;::operator (11,407,247 samples, 0.02%)</title><rect x="832.6" y="1637" width="0.2" height="15.0" fill="rgb(214,21,5)" rx="2" ry="2" />
<text  x="835.56" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, unsigned long, std::__detail::_Identity, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (4,588,130 samples, 0.01%)</title><rect x="691.2" y="1717" width="0.1" height="15.0" fill="rgb(231,98,31)" rx="2" ry="2" />
<text  x="694.16" y="1727.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (152,897,149 samples, 0.30%)</title><rect x="492.2" y="1813" width="3.5" height="15.0" fill="rgb(220,120,22)" rx="2" ry="2" />
<text  x="495.16" y="1823.5" ></text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (11,144,319 samples, 0.02%)</title><rect x="1189.4" y="2021" width="0.2" height="15.0" fill="rgb(227,104,23)" rx="2" ry="2" />
<text  x="1192.37" y="2031.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Catalog, std::default_delete&lt;duckdb::Catalog&gt; &gt;::~unique_ptr (15,089,061 samples, 0.03%)</title><rect x="1117.5" y="1701" width="0.3" height="15.0" fill="rgb(209,59,28)" rx="2" ry="2" />
<text  x="1120.47" y="1711.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::RowGroupCollection, std::allocator&lt;duckdb::RowGroupCollection&gt;,  (418,582,452 samples, 0.82%)</title><rect x="235.9" y="1605" width="9.7" height="15.0" fill="rgb(250,45,26)" rx="2" ry="2" />
<text  x="238.93" y="1615.5" ></text>
</g>
<g >
<title>duckdb::PhysicalPlanGenerator::CreatePlan (2,578,192,585 samples, 5.03%)</title><rect x="859.8" y="1829" width="59.3" height="15.0" fill="rgb(244,23,1)" rx="2" ry="2" />
<text  x="862.76" y="1839.5" >duckdb..</text>
</g>
<g >
<title>duckdb::Transformer::TransformSelectNode (446,442,668 samples, 0.87%)</title><rect x="526.3" y="1797" width="10.2" height="15.0" fill="rgb(205,74,43)" rx="2" ry="2" />
<text  x="529.26" y="1807.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (10,472,868 samples, 0.02%)</title><rect x="834.6" y="1717" width="0.2" height="15.0" fill="rgb(238,123,24)" rx="2" ry="2" />
<text  x="837.60" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ManyFunctionMatcher::~ManyFunctionMatcher (4,509,912 samples, 0.01%)</title><rect x="832.9" y="1365" width="0.1" height="15.0" fill="rgb(223,5,34)" rx="2" ry="2" />
<text  x="835.94" y="1375.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (7,242,694 samples, 0.01%)</title><rect x="108.5" y="1605" width="0.2" height="15.0" fill="rgb(220,46,48)" rx="2" ry="2" />
<text  x="111.52" y="1615.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (7,192,171 samples, 0.01%)</title><rect x="492.9" y="1461" width="0.2" height="15.0" fill="rgb(207,49,2)" rx="2" ry="2" />
<text  x="495.89" y="1471.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::AssertNotNull (7,339,658 samples, 0.01%)</title><rect x="257.1" y="1493" width="0.1" height="15.0" fill="rgb(250,218,0)" rx="2" ry="2" />
<text  x="260.06" y="1503.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::TableRef, std::default_delete&lt;duckdb::TableRef&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::ExpressionListRef&gt; &gt; (4,777,223 samples, 0.01%)</title><rect x="531.3" y="1717" width="0.1" height="15.0" fill="rgb(209,160,9)" rx="2" ry="2" />
<text  x="534.34" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ClientData, std::default_delete&lt;duckdb::ClientData&gt; &gt;::get (13,647,016 samples, 0.03%)</title><rect x="713.0" y="1813" width="0.3" height="15.0" fill="rgb(234,128,43)" rx="2" ry="2" />
<text  x="716.01" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1813" width="0.1" height="15.0" fill="rgb(242,53,8)" rx="2" ry="2" />
<text  x="14.25" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1765" width="0.1" height="15.0" fill="rgb(232,203,38)" rx="2" ry="2" />
<text  x="14.25" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundTableRef, std::default_delete&lt;duckdb::BoundTableRef&gt; &gt;::unique_ptr&lt;duckdb::BoundExpressionListRef, std::default_delete&lt;duckdb::BoundExpressionListRef&gt;, void&gt; (6,467,316 samples, 0.01%)</title><rect x="938.3" y="1717" width="0.2" height="15.0" fill="rgb(220,213,5)" rx="2" ry="2" />
<text  x="941.33" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::Pipeline*, duckdb::Pipeline*, std::allocator&lt;duckdb::Pipeline*&gt;, std::__detail::_Identity, std::equal_to&lt;duckdb::Pipeline*&gt;, std::hash&lt;duckdb::Pipeline*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (7,295,777 samples, 0.01%)</title><rect x="1096.9" y="1717" width="0.2" height="15.0" fill="rgb(228,19,5)" rx="2" ry="2" />
<text  x="1099.93" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::operator= (6,117,806 samples, 0.01%)</title><rect x="303.5" y="1541" width="0.1" height="15.0" fill="rgb(253,134,38)" rx="2" ry="2" />
<text  x="306.46" y="1551.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::~DataChunk (99,171,968 samples, 0.19%)</title><rect x="333.4" y="1685" width="2.2" height="15.0" fill="rgb(230,198,31)" rx="2" ry="2" />
<text  x="336.35" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RenderTree&gt;, void&gt; (4,489,594 samples, 0.01%)</title><rect x="1068.8" y="1733" width="0.1" height="15.0" fill="rgb(207,68,22)" rx="2" ry="2" />
<text  x="1071.80" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PipelineTask, std::default_delete&lt;duckdb::PipelineTask&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PipelineTask&gt;, void&gt; (4,570,435 samples, 0.01%)</title><rect x="94.8" y="1701" width="0.1" height="15.0" fill="rgb(249,186,39)" rx="2" ry="2" />
<text  x="97.76" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::emplace_back&lt;duckdb::VectorCache&gt; (23,013,098 samples, 0.04%)</title><rect x="894.2" y="1733" width="0.5" height="15.0" fill="rgb(217,133,10)" rx="2" ry="2" />
<text  x="897.18" y="1743.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;*&gt; (24,581,404 samples, 0.05%)</title><rect x="915.8" y="1541" width="0.6" height="15.0" fill="rgb(229,86,3)" rx="2" ry="2" />
<text  x="918.83" y="1551.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign (8,666,891 samples, 0.02%)</title><rect x="388.9" y="1861" width="0.2" height="15.0" fill="rgb(253,31,29)" rx="2" ry="2" />
<text  x="391.92" y="1871.5" ></text>
</g>
<g >
<title>duckdb::BindResult::BindResult (5,678,051 samples, 0.01%)</title><rect x="933.9" y="1653" width="0.1" height="15.0" fill="rgb(220,112,52)" rx="2" ry="2" />
<text  x="936.88" y="1663.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (5,616,788 samples, 0.01%)</title><rect x="731.2" y="1781" width="0.1" height="15.0" fill="rgb(230,196,0)" rx="2" ry="2" />
<text  x="734.18" y="1791.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt;, duckdb::LogicalType*, duckdb::LogicalType&gt; (4,966,921 samples, 0.01%)</title><rect x="913.3" y="1733" width="0.1" height="15.0" fill="rgb(229,109,54)" rx="2" ry="2" />
<text  x="916.29" y="1743.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::ProducerToken*, std::default_delete&lt;duckdb::ProducerToken&gt; &gt; (6,767,805 samples, 0.01%)</title><rect x="508.2" y="1845" width="0.1" height="15.0" fill="rgb(238,222,22)" rx="2" ry="2" />
<text  x="511.18" y="1855.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::StandardColumnData&gt; &gt;::construct&lt;duckdb::StandardColumnData, duckdb::BlockManager&amp;, duckdb::DataTableInfo&amp;, unsigned long&amp;, unsigned long&amp;, duckdb::LogicalType const&amp;, duckdb::optional_ptr&lt;duckdb::ColumnData&gt;&amp;&gt; (6,181,643 samples, 0.01%)</title><rect x="104.8" y="1525" width="0.1" height="15.0" fill="rgb(208,154,11)" rx="2" ry="2" />
<text  x="107.77" y="1535.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::operator[] (7,558,410 samples, 0.01%)</title><rect x="612.1" y="1765" width="0.2" height="15.0" fill="rgb(220,119,15)" rx="2" ry="2" />
<text  x="615.15" y="1775.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (4,734,476 samples, 0.01%)</title><rect x="996.5" y="1557" width="0.1" height="15.0" fill="rgb(218,184,37)" rx="2" ry="2" />
<text  x="999.52" y="1567.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1477" width="0.3" height="15.0" fill="rgb(254,27,28)" rx="2" ry="2" />
<text  x="835.82" y="1487.5" ></text>
</g>
<g >
<title>std::function&lt;void  (7,742,049 samples, 0.02%)</title><rect x="594.3" y="1749" width="0.1" height="15.0" fill="rgb(228,40,24)" rx="2" ry="2" />
<text  x="597.26" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Event::Finish (594,443,308 samples, 1.16%)</title><rect x="405.5" y="1845" width="13.7" height="15.0" fill="rgb(235,89,18)" rx="2" ry="2" />
<text  x="408.48" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt; &gt; &gt;::emplace_back&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt; &gt; (56,520,445 samples, 0.11%)</title><rect x="1063.9" y="1797" width="1.3" height="15.0" fill="rgb(247,185,54)" rx="2" ry="2" />
<text  x="1066.87" y="1807.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (23,632,182 samples, 0.05%)</title><rect x="46.7" y="1989" width="0.5" height="15.0" fill="rgb(210,224,53)" rx="2" ry="2" />
<text  x="49.67" y="1999.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::allocate (11,551,539 samples, 0.02%)</title><rect x="679.7" y="1717" width="0.2" height="15.0" fill="rgb(234,229,37)" rx="2" ry="2" />
<text  x="682.68" y="1727.5" ></text>
</g>
<g >
<title>__mod_memcg_state (5,307,631 samples, 0.01%)</title><rect x="1139.6" y="1877" width="0.1" height="15.0" fill="rgb(209,98,28)" rx="2" ry="2" />
<text  x="1142.55" y="1887.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::allocate (19,844,404 samples, 0.04%)</title><rect x="693.4" y="1733" width="0.4" height="15.0" fill="rgb(242,156,12)" rx="2" ry="2" />
<text  x="696.36" y="1743.5" ></text>
</g>
<g >
<title>duckdb::CommonAggregateOptimizer::VisitOperator (40,532,872 samples, 0.08%)</title><rect x="726.5" y="1717" width="0.9" height="15.0" fill="rgb(206,156,53)" rx="2" ry="2" />
<text  x="729.49" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::CatalogLookup, std::allocator&lt;duckdb::CatalogLookup&gt; &gt;::~vector (4,872,217 samples, 0.01%)</title><rect x="1009.6" y="1765" width="0.1" height="15.0" fill="rgb(205,96,1)" rx="2" ry="2" />
<text  x="1012.56" y="1775.5" ></text>
</g>
<g >
<title>duckdb::RegexpFun::RegisterFunction (4,791,356 samples, 0.01%)</title><rect x="1111.6" y="1877" width="0.1" height="15.0" fill="rgb(254,166,50)" rx="2" ry="2" />
<text  x="1114.58" y="1887.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;,  (4,408,970 samples, 0.01%)</title><rect x="370.3" y="1701" width="0.1" height="15.0" fill="rgb(215,52,43)" rx="2" ry="2" />
<text  x="373.35" y="1711.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::PipelineFinishEvent&gt;::destroy&lt;duckdb::PipelineFinishEvent&gt; (33,208,580 samples, 0.06%)</title><rect x="355.9" y="1669" width="0.7" height="15.0" fill="rgb(251,75,3)" rx="2" ry="2" />
<text  x="358.87" y="1679.5" ></text>
</g>
<g >
<title>duckdb::Vector::ResetFromCache (17,086,418 samples, 0.03%)</title><rect x="893.4" y="1669" width="0.4" height="15.0" fill="rgb(251,173,40)" rx="2" ry="2" />
<text  x="896.42" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::UnifiedVectorFormat, std::allocator&lt;duckdb::UnifiedVectorFormat&gt; &gt;::~vector (17,187,838 samples, 0.03%)</title><rect x="374.7" y="1893" width="0.4" height="15.0" fill="rgb(250,30,28)" rx="2" ry="2" />
<text  x="377.68" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&gt; (15,586,615 samples, 0.03%)</title><rect x="371.2" y="1813" width="0.4" height="15.0" fill="rgb(251,55,8)" rx="2" ry="2" />
<text  x="374.23" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VisitOperator (99,182,448 samples, 0.19%)</title><rect x="842.3" y="1813" width="2.2" height="15.0" fill="rgb(222,137,35)" rx="2" ry="2" />
<text  x="845.27" y="1823.5" ></text>
</g>
<g >
<title>ptep_clear_flush (38,723,575 samples, 0.08%)</title><rect x="167.0" y="1893" width="0.8" height="15.0" fill="rgb(207,140,25)" rx="2" ry="2" />
<text  x="169.95" y="1903.5" ></text>
</g>
<g >
<title>__libc_start_main (5,374,120 samples, 0.01%)</title><rect x="47.4" y="2021" width="0.1" height="15.0" fill="rgb(246,76,47)" rx="2" ry="2" />
<text  x="50.40" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_check_len (5,293,440 samples, 0.01%)</title><rect x="838.6" y="1765" width="0.1" height="15.0" fill="rgb(254,89,8)" rx="2" ry="2" />
<text  x="841.60" y="1775.5" ></text>
</g>
<g >
<title>dequeue_task_fair (5,028,594 samples, 0.01%)</title><rect x="505.8" y="1669" width="0.1" height="15.0" fill="rgb(240,44,17)" rx="2" ry="2" />
<text  x="508.82" y="1679.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt; &gt;::construct&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, unsigned long&amp;&gt; (24,841,184 samples, 0.05%)</title><rect x="363.0" y="1653" width="0.6" height="15.0" fill="rgb(223,125,14)" rx="2" ry="2" />
<text  x="366.02" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnRefExpression, std::default_delete&lt;duckdb::ColumnRefExpression&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ColumnRefExpression&gt;, void&gt; (7,365,430 samples, 0.01%)</title><rect x="944.2" y="1685" width="0.2" height="15.0" fill="rgb(213,18,38)" rx="2" ry="2" />
<text  x="947.22" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ifree (66,492,295 samples, 0.13%)</title><rect x="391.2" y="1525" width="1.5" height="15.0" fill="rgb(205,44,16)" rx="2" ry="2" />
<text  x="394.15" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorMetaData, std::allocator&lt;duckdb::VectorMetaData&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorMetaData const&amp;&gt; (20,133,936 samples, 0.04%)</title><rect x="884.4" y="1701" width="0.4" height="15.0" fill="rgb(233,162,29)" rx="2" ry="2" />
<text  x="887.37" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ChunkInfo, std::default_delete&lt;duckdb::ChunkInfo&gt; &gt;::~unique_ptr (16,878,144 samples, 0.03%)</title><rect x="244.6" y="1077" width="0.4" height="15.0" fill="rgb(240,65,36)" rx="2" ry="2" />
<text  x="247.63" y="1087.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::unique_ptr&lt;duckdb::StarExpression, std::default_delete&lt;std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt; &gt;, void&gt; (8,681,519 samples, 0.02%)</title><rect x="533.7" y="1765" width="0.2" height="15.0" fill="rgb(251,61,43)" rx="2" ry="2" />
<text  x="536.71" y="1775.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, duckdb::unique_ptr&lt;duckdb::TableAppendState, std::default_delete&lt;duckdb::TableAppendState&gt;, true&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, duckdb::unique_ptr&lt;duckdb::TableAppendState, std::default_delete&lt;duckdb::TableAppendState&gt;, true&gt; &gt; &gt; &gt;::~unordered_map (13,273,450 samples, 0.03%)</title><rect x="246.6" y="1797" width="0.3" height="15.0" fill="rgb(253,160,49)" rx="2" ry="2" />
<text  x="249.63" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1877" width="0.1" height="15.0" fill="rgb(236,49,54)" rx="2" ry="2" />
<text  x="14.25" y="1887.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::litbufdup (4,800,511 samples, 0.01%)</title><rect x="523.1" y="1829" width="0.1" height="15.0" fill="rgb(225,192,32)" rx="2" ry="2" />
<text  x="526.11" y="1839.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ColumnDataAllocator&gt;::~shared_ptr (364,194,645 samples, 0.71%)</title><rect x="341.8" y="1349" width="8.4" height="15.0" fill="rgb(235,214,18)" rx="2" ry="2" />
<text  x="344.79" y="1359.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (100,574,591 samples, 0.20%)</title><rect x="1117.4" y="1957" width="2.3" height="15.0" fill="rgb(235,4,10)" rx="2" ry="2" />
<text  x="1120.43" y="1967.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::Build (11,064,021 samples, 0.02%)</title><rect x="1079.3" y="1829" width="0.2" height="15.0" fill="rgb(224,139,32)" rx="2" ry="2" />
<text  x="1082.27" y="1839.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (16,445,185 samples, 0.03%)</title><rect x="729.4" y="1637" width="0.4" height="15.0" fill="rgb(220,191,11)" rx="2" ry="2" />
<text  x="732.43" y="1647.5" ></text>
</g>
<g >
<title>do_writepages (109,007,228 samples, 0.21%)</title><rect x="249.6" y="1605" width="2.5" height="15.0" fill="rgb(211,86,42)" rx="2" ry="2" />
<text  x="252.59" y="1615.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::_M_ptr (5,930,335 samples, 0.01%)</title><rect x="826.5" y="1765" width="0.1" height="15.0" fill="rgb(219,0,48)" rx="2" ry="2" />
<text  x="829.49" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (98,427,406 samples, 0.19%)</title><rect x="453.1" y="1605" width="2.3" height="15.0" fill="rgb(249,57,14)" rx="2" ry="2" />
<text  x="456.14" y="1615.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (13,933,071 samples, 0.03%)</title><rect x="508.7" y="1861" width="0.3" height="15.0" fill="rgb(228,16,36)" rx="2" ry="2" />
<text  x="511.69" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (95,823,729 samples, 0.19%)</title><rect x="436.9" y="1573" width="2.2" height="15.0" fill="rgb(244,215,47)" rx="2" ry="2" />
<text  x="439.86" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_new (5,894,702 samples, 0.01%)</title><rect x="107.4" y="1269" width="0.2" height="15.0" fill="rgb(224,134,29)" rx="2" ry="2" />
<text  x="110.43" y="1279.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::SelectionData&gt;::shared_ptr&lt;std::allocator&lt;duckdb::SelectionData&gt;, unsigned long&amp;&gt; (10,847,872 samples, 0.02%)</title><rect x="315.5" y="1541" width="0.2" height="15.0" fill="rgb(250,3,49)" rx="2" ry="2" />
<text  x="318.46" y="1551.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::vector (6,356,650 samples, 0.01%)</title><rect x="939.9" y="1637" width="0.2" height="15.0" fill="rgb(244,83,30)" rx="2" ry="2" />
<text  x="942.94" y="1647.5" ></text>
</g>
<g >
<title>duckdb::Vector::ResetFromCache (13,261,561 samples, 0.03%)</title><rect x="475.6" y="1765" width="0.3" height="15.0" fill="rgb(234,206,12)" rx="2" ry="2" />
<text  x="478.64" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Binding::GetBindingIndex (5,854,608 samples, 0.01%)</title><rect x="958.6" y="1653" width="0.1" height="15.0" fill="rgb(216,229,21)" rx="2" ry="2" />
<text  x="961.55" y="1663.5" ></text>
</g>
<g >
<title>duckdb::SelectNode::SelectNode (19,267,805 samples, 0.04%)</title><rect x="532.5" y="1749" width="0.4" height="15.0" fill="rgb(211,84,40)" rx="2" ry="2" />
<text  x="535.50" y="1759.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::SpecificFunctionMatcher, char const  (5,333,055 samples, 0.01%)</title><rect x="796.9" y="1845" width="0.2" height="15.0" fill="rgb(229,197,40)" rx="2" ry="2" />
<text  x="799.93" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ConstantFoldingRule, std::default_delete&lt;duckdb::ConstantFoldingRule&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConstantFoldingRule&gt;, void&gt; (7,828,936 samples, 0.02%)</title><rect x="796.2" y="1845" width="0.1" height="15.0" fill="rgb(216,203,18)" rx="2" ry="2" />
<text  x="799.16" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::__detail::_Select1st, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7,045,152 samples, 0.01%)</title><rect x="1000.3" y="1605" width="0.2" height="15.0" fill="rgb(217,118,37)" rx="2" ry="2" />
<text  x="1003.31" y="1615.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::ExpressionBinder (12,537,506 samples, 0.02%)</title><rect x="961.2" y="1717" width="0.3" height="15.0" fill="rgb(213,218,35)" rx="2" ry="2" />
<text  x="964.24" y="1727.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base (5,495,163 samples, 0.01%)</title><rect x="701.9" y="1845" width="0.1" height="15.0" fill="rgb(231,19,16)" rx="2" ry="2" />
<text  x="704.92" y="1855.5" ></text>
</g>
<g >
<title>duckdb::BindResult::BindResult (7,280,797 samples, 0.01%)</title><rect x="952.9" y="1653" width="0.2" height="15.0" fill="rgb(210,208,17)" rx="2" ry="2" />
<text  x="955.90" y="1663.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::WriteData (4,887,733 samples, 0.01%)</title><rect x="314.3" y="1605" width="0.2" height="15.0" fill="rgb(226,204,32)" rx="2" ry="2" />
<text  x="317.35" y="1615.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Pipeline,  (25,978,764 samples, 0.05%)</title><rect x="356.0" y="1605" width="0.6" height="15.0" fill="rgb(240,66,46)" rx="2" ry="2" />
<text  x="359.04" y="1615.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::~PhysicalOperator (530,744,623 samples, 1.03%)</title><rect x="338.0" y="1605" width="12.2" height="15.0" fill="rgb(253,10,19)" rx="2" ry="2" />
<text  x="341.04" y="1615.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (9,861,444 samples, 0.02%)</title><rect x="718.5" y="1717" width="0.3" height="15.0" fill="rgb(220,174,40)" rx="2" ry="2" />
<text  x="721.53" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CaseExpressionMatcher, std::default_delete&lt;duckdb::CaseExpressionMatcher&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::CaseExpressionMatcher&gt;, void&gt; (8,604,508 samples, 0.02%)</title><rect x="790.6" y="1813" width="0.2" height="15.0" fill="rgb(236,166,18)" rx="2" ry="2" />
<text  x="793.64" y="1823.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt; &gt; (29,295,516 samples, 0.06%)</title><rect x="236.2" y="1445" width="0.7" height="15.0" fill="rgb(207,122,15)" rx="2" ry="2" />
<text  x="239.24" y="1455.5" ></text>
</g>
<g >
<title>duckdb::Rule::Rule (6,287,520 samples, 0.01%)</title><rect x="794.3" y="1845" width="0.2" height="15.0" fill="rgb(215,221,31)" rx="2" ry="2" />
<text  x="797.32" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="917" width="0.1" height="15.0" fill="rgb(232,84,39)" rx="2" ry="2" />
<text  x="14.25" y="927.5" ></text>
</g>
<g >
<title>duckdb::Catalog::CreateFunction (112,573,669 samples, 0.22%)</title><rect x="1112.8" y="1909" width="2.6" height="15.0" fill="rgb(246,158,49)" rx="2" ry="2" />
<text  x="1115.81" y="1919.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::reset (7,879,976 samples, 0.02%)</title><rect x="935.1" y="1669" width="0.2" height="15.0" fill="rgb(240,93,31)" rx="2" ry="2" />
<text  x="938.12" y="1679.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (22,573,672 samples, 0.04%)</title><rect x="1140.2" y="1893" width="0.5" height="15.0" fill="rgb(219,161,22)" rx="2" ry="2" />
<text  x="1143.21" y="1903.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::BlockHandle&gt;::destroy&lt;duckdb::BlockHandle&gt; (81,650,180 samples, 0.16%)</title><rect x="242.0" y="661" width="1.9" height="15.0" fill="rgb(223,134,21)" rx="2" ry="2" />
<text  x="244.97" y="671.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::AddTiming (8,970,623 samples, 0.02%)</title><rect x="105.7" y="1749" width="0.2" height="15.0" fill="rgb(231,53,37)" rx="2" ry="2" />
<text  x="108.71" y="1759.5" ></text>
</g>
<g >
<title>__handle_mm_fault (14,108,584 samples, 0.03%)</title><rect x="56.0" y="1925" width="0.4" height="15.0" fill="rgb(245,226,48)" rx="2" ry="2" />
<text  x="59.03" y="1935.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::unique_ptr (6,538,568 samples, 0.01%)</title><rect x="951.2" y="1605" width="0.1" height="15.0" fill="rgb(206,229,25)" rx="2" ry="2" />
<text  x="954.18" y="1615.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_free (73,398,441 samples, 0.14%)</title><rect x="481.8" y="1429" width="1.7" height="15.0" fill="rgb(246,86,27)" rx="2" ry="2" />
<text  x="484.80" y="1439.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::InsertLocalState, duckdb::ClientContext&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt; const&amp;, duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; const&amp;&gt; (36,052,051 samples, 0.07%)</title><rect x="107.2" y="1781" width="0.8" height="15.0" fill="rgb(211,129,26)" rx="2" ry="2" />
<text  x="110.20" y="1791.5" ></text>
</g>
<g >
<title>__do_page_fault (20,830,788 samples, 0.04%)</title><rect x="55.9" y="1973" width="0.5" height="15.0" fill="rgb(209,120,54)" rx="2" ry="2" />
<text  x="58.90" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="789" width="0.1" height="15.0" fill="rgb(209,32,22)" rx="2" ry="2" />
<text  x="14.25" y="799.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (6,842,132 samples, 0.01%)</title><rect x="108.1" y="1701" width="0.2" height="15.0" fill="rgb(229,138,32)" rx="2" ry="2" />
<text  x="111.09" y="1711.5" ></text>
</g>
<g >
<title>duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;::~SegmentNode (132,106,251 samples, 0.26%)</title><rect x="238.2" y="853" width="3.1" height="15.0" fill="rgb(219,25,19)" rx="2" ry="2" />
<text  x="241.24" y="863.5" ></text>
</g>
<g >
<title>duckdb::LogicalExpressionGet::GetColumnBindings (8,094,816 samples, 0.02%)</title><rect x="846.8" y="1829" width="0.2" height="15.0" fill="rgb(249,155,31)" rx="2" ry="2" />
<text  x="849.80" y="1839.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::GlobalSinkState&gt;::operator (68,344,415 samples, 0.13%)</title><rect x="338.2" y="1557" width="1.6" height="15.0" fill="rgb(241,58,11)" rx="2" ry="2" />
<text  x="341.22" y="1567.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::RegexOptimizationRule, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (9,325,684 samples, 0.02%)</title><rect x="824.6" y="1877" width="0.2" height="15.0" fill="rgb(220,165,16)" rx="2" ry="2" />
<text  x="827.62" y="1887.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt;, duckdb::LogicalType*, duckdb::LogicalType&gt; (8,538,209 samples, 0.02%)</title><rect x="908.8" y="1701" width="0.2" height="15.0" fill="rgb(224,56,14)" rx="2" ry="2" />
<text  x="911.83" y="1711.5" ></text>
</g>
<g >
<title>std::function&lt;void  (5,398,013 samples, 0.01%)</title><rect x="547.2" y="1781" width="0.1" height="15.0" fill="rgb(207,57,3)" rx="2" ry="2" />
<text  x="550.20" y="1791.5" ></text>
</g>
<g >
<title>pthread_mutex_unlock (19,279,002 samples, 0.04%)</title><rect x="94.0" y="1653" width="0.4" height="15.0" fill="rgb(230,203,40)" rx="2" ry="2" />
<text  x="96.95" y="1663.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::AllocateMemory (131,316,817 samples, 0.26%)</title><rect x="379.8" y="1845" width="3.0" height="15.0" fill="rgb(252,105,31)" rx="2" ry="2" />
<text  x="382.82" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_tcache_enabled_data_init (8,504,245 samples, 0.02%)</title><rect x="107.4" y="1365" width="0.2" height="15.0" fill="rgb(219,36,36)" rx="2" ry="2" />
<text  x="110.43" y="1375.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ConstantExpressionMatcher, std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt;, void&gt; (6,975,895 samples, 0.01%)</title><rect x="784.3" y="1829" width="0.1" height="15.0" fill="rgb(212,141,13)" rx="2" ry="2" />
<text  x="787.25" y="1839.5" ></text>
</g>
<g >
<title>duckdb::make_unsafe_uniq_array&lt;unsigned int&gt; (5,781,312 samples, 0.01%)</title><rect x="256.9" y="1493" width="0.2" height="15.0" fill="rgb(220,142,18)" rx="2" ry="2" />
<text  x="259.92" y="1503.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;duckdb::PreservedError const*, std::vector&lt;duckdb::PreservedError, std::allocator&lt;duckdb::PreservedError&gt; &gt; &gt; (5,094,756 samples, 0.01%)</title><rect x="398.0" y="1877" width="0.1" height="15.0" fill="rgb(221,197,42)" rx="2" ry="2" />
<text  x="400.96" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt; &gt; (34,827,312 samples, 0.07%)</title><rect x="539.4" y="1893" width="0.8" height="15.0" fill="rgb(209,156,34)" rx="2" ry="2" />
<text  x="542.43" y="1903.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::Bind (341,152,386 samples, 0.67%)</title><rect x="950.0" y="1749" width="7.9" height="15.0" fill="rgb(230,111,2)" rx="2" ry="2" />
<text  x="953.02" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::operator= (7,024,914 samples, 0.01%)</title><rect x="938.5" y="1717" width="0.2" height="15.0" fill="rgb(206,198,19)" rx="2" ry="2" />
<text  x="941.55" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt; &gt; &gt;::emplace_back&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt; &gt; (13,512,828 samples, 0.03%)</title><rect x="427.6" y="1557" width="0.3" height="15.0" fill="rgb(225,201,30)" rx="2" ry="2" />
<text  x="430.61" y="1567.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (426,133,737 samples, 0.83%)</title><rect x="302.5" y="1621" width="9.8" height="15.0" fill="rgb(227,129,28)" rx="2" ry="2" />
<text  x="305.51" y="1631.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (5,999,887 samples, 0.01%)</title><rect x="817.2" y="1733" width="0.1" height="15.0" fill="rgb(240,160,42)" rx="2" ry="2" />
<text  x="820.21" y="1743.5" ></text>
</g>
<g >
<title>blk_mq_dispatch_rq_list (34,428,349 samples, 0.07%)</title><rect x="249.7" y="1413" width="0.8" height="15.0" fill="rgb(246,159,46)" rx="2" ry="2" />
<text  x="252.72" y="1423.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt;::~vector (19,146,016 samples, 0.04%)</title><rect x="1036.4" y="1589" width="0.4" height="15.0" fill="rgb(238,24,20)" rx="2" ry="2" />
<text  x="1039.39" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PartialBlockManager, std::default_delete&lt;duckdb::PartialBlockManager&gt; &gt;::get (4,643,192 samples, 0.01%)</title><rect x="233.3" y="1733" width="0.1" height="15.0" fill="rgb(225,121,47)" rx="2" ry="2" />
<text  x="236.29" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::get (6,036,649 samples, 0.01%)</title><rect x="771.6" y="1765" width="0.1" height="15.0" fill="rgb(245,218,9)" rx="2" ry="2" />
<text  x="774.57" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1525" width="0.1" height="15.0" fill="rgb(248,104,4)" rx="2" ry="2" />
<text  x="14.25" y="1535.5" ></text>
</g>
<g >
<title>duckdb::ValidityInitScan (39,418,973 samples, 0.08%)</title><rect x="213.8" y="1605" width="0.9" height="15.0" fill="rgb(234,13,26)" rx="2" ry="2" />
<text  x="216.80" y="1615.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::RenderTree&gt;::operator (10,740,617 samples, 0.02%)</title><rect x="1077.8" y="1749" width="0.3" height="15.0" fill="rgb(222,123,54)" rx="2" ry="2" />
<text  x="1080.83" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (4,422,751 samples, 0.01%)</title><rect x="883.6" y="1637" width="0.1" height="15.0" fill="rgb(211,63,15)" rx="2" ry="2" />
<text  x="886.56" y="1647.5" ></text>
</g>
<g >
<title>release_pages (44,314,552 samples, 0.09%)</title><rect x="1178.7" y="1829" width="1.0" height="15.0" fill="rgb(247,106,30)" rx="2" ry="2" />
<text  x="1181.71" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RowGroup, std::default_delete&lt;duckdb::RowGroup&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RowGroup&gt;, void&gt; (4,461,900 samples, 0.01%)</title><rect x="458.1" y="1701" width="0.1" height="15.0" fill="rgb(219,12,41)" rx="2" ry="2" />
<text  x="461.08" y="1711.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetEntry (10,372,771 samples, 0.02%)</title><rect x="1115.1" y="1861" width="0.3" height="15.0" fill="rgb(218,53,5)" rx="2" ry="2" />
<text  x="1118.12" y="1871.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (63,952,340 samples, 0.12%)</title><rect x="221.5" y="1525" width="1.4" height="15.0" fill="rgb(221,16,54)" rx="2" ry="2" />
<text  x="224.48" y="1535.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_codepoint (5,276,277 samples, 0.01%)</title><rect x="561.2" y="1781" width="0.1" height="15.0" fill="rgb(217,167,6)" rx="2" ry="2" />
<text  x="564.18" y="1791.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::SwizzleMetaData, true&gt;::vector (13,821,298 samples, 0.03%)</title><rect x="884.4" y="1637" width="0.4" height="15.0" fill="rgb(206,6,35)" rx="2" ry="2" />
<text  x="887.43" y="1647.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (7,454,947 samples, 0.01%)</title><rect x="579.9" y="1797" width="0.2" height="15.0" fill="rgb(236,81,6)" rx="2" ry="2" />
<text  x="582.93" y="1807.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*&gt; (9,916,935 samples, 0.02%)</title><rect x="831.9" y="1525" width="0.2" height="15.0" fill="rgb(254,41,53)" rx="2" ry="2" />
<text  x="834.87" y="1535.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1941" width="0.1" height="15.0" fill="rgb(219,23,3)" rx="2" ry="2" />
<text  x="14.25" y="1951.5" ></text>
</g>
<g >
<title>duckdb::TransactionContext::SetActiveQuery (7,304,786 samples, 0.01%)</title><rect x="544.7" y="1909" width="0.2" height="15.0" fill="rgb(254,25,33)" rx="2" ry="2" />
<text  x="547.70" y="1919.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (69,834,188 samples, 0.14%)</title><rect x="741.2" y="1749" width="1.6" height="15.0" fill="rgb(251,181,44)" rx="2" ry="2" />
<text  x="744.22" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::unique_ptr (4,831,792 samples, 0.01%)</title><rect x="978.8" y="1765" width="0.1" height="15.0" fill="rgb(212,130,36)" rx="2" ry="2" />
<text  x="981.75" y="1775.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt;, duckdb::LogicalType*, duckdb::LogicalType&gt; (7,947,554 samples, 0.02%)</title><rect x="1045.2" y="1845" width="0.2" height="15.0" fill="rgb(222,9,8)" rx="2" ry="2" />
<text  x="1048.19" y="1855.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::~BufferHandle (5,320,570 samples, 0.01%)</title><rect x="226.6" y="1557" width="0.1" height="15.0" fill="rgb(223,20,35)" rx="2" ry="2" />
<text  x="229.62" y="1567.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::IsEmpty (5,010,641 samples, 0.01%)</title><rect x="198.8" y="1733" width="0.1" height="15.0" fill="rgb(208,11,54)" rx="2" ry="2" />
<text  x="201.77" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (4,668,065 samples, 0.01%)</title><rect x="817.3" y="1765" width="0.2" height="15.0" fill="rgb(232,72,40)" rx="2" ry="2" />
<text  x="820.34" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::MetaTransaction, std::default_delete&lt;duckdb::MetaTransaction&gt; &gt;::unique_ptr (10,270,022 samples, 0.02%)</title><rect x="331.7" y="1845" width="0.2" height="15.0" fill="rgb(246,47,33)" rx="2" ry="2" />
<text  x="334.67" y="1855.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::InitializeAppend (144,289,753 samples, 0.28%)</title><rect x="195.4" y="1733" width="3.4" height="15.0" fill="rgb(253,93,18)" rx="2" ry="2" />
<text  x="198.45" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="981" width="0.1" height="15.0" fill="rgb(208,81,28)" rx="2" ry="2" />
<text  x="14.25" y="991.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::release (8,865,908 samples, 0.02%)</title><rect x="552.9" y="1733" width="0.2" height="15.0" fill="rgb(210,23,40)" rx="2" ry="2" />
<text  x="555.86" y="1743.5" ></text>
</g>
<g >
<title>duckdb::BufferedSerializer::BufferedSerializer (22,665,177 samples, 0.04%)</title><rect x="584.6" y="1861" width="0.5" height="15.0" fill="rgb(220,93,12)" rx="2" ry="2" />
<text  x="587.63" y="1871.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::GetSources (7,129,633 samples, 0.01%)</title><rect x="850.6" y="1845" width="0.1" height="15.0" fill="rgb(233,154,36)" rx="2" ry="2" />
<text  x="853.58" y="1855.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (5,819,132 samples, 0.01%)</title><rect x="251.5" y="1525" width="0.1" height="15.0" fill="rgb(236,94,19)" rx="2" ry="2" />
<text  x="254.46" y="1535.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::NextGraphemeCluster (4,430,599 samples, 0.01%)</title><rect x="614.7" y="1781" width="0.1" height="15.0" fill="rgb(236,37,28)" rx="2" ry="2" />
<text  x="617.71" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::Verify (16,340,713 samples, 0.03%)</title><rect x="902.5" y="1701" width="0.3" height="15.0" fill="rgb(217,156,38)" rx="2" ry="2" />
<text  x="905.47" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_do_relocate (75,103,577 samples, 0.15%)</title><rect x="609.7" y="1717" width="1.7" height="15.0" fill="rgb(246,101,4)" rx="2" ry="2" />
<text  x="612.68" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (8,214,720 samples, 0.02%)</title><rect x="993.6" y="1621" width="0.2" height="15.0" fill="rgb(239,35,50)" rx="2" ry="2" />
<text  x="996.62" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::ToString[abi:cxx11] (580,433,567 samples, 1.13%)</title><rect x="620.7" y="1845" width="13.3" height="15.0" fill="rgb(230,58,14)" rx="2" ry="2" />
<text  x="623.68" y="1855.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::Ready (12,752,661 samples, 0.02%)</title><rect x="1085.0" y="1861" width="0.2" height="15.0" fill="rgb(226,18,0)" rx="2" ry="2" />
<text  x="1087.95" y="1871.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::~FileBuffer (47,909,515 samples, 0.09%)</title><rect x="242.6" y="565" width="1.1" height="15.0" fill="rgb(252,29,15)" rx="2" ry="2" />
<text  x="245.59" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::to_string (8,039,426 samples, 0.02%)</title><rect x="880.1" y="1621" width="0.2" height="15.0" fill="rgb(252,108,3)" rx="2" ry="2" />
<text  x="883.12" y="1631.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::StandardColumnData, duckdb::BlockManager&amp;, duckdb::DataTableInfo&amp;, unsigned long&amp;, unsigned long&amp;, duckdb::LogicalType const&amp;, duckdb::optional_ptr&lt;duckdb::ColumnData&gt;&amp;&gt; (7,569,833 samples, 0.01%)</title><rect x="104.7" y="1621" width="0.2" height="15.0" fill="rgb(249,59,37)" rx="2" ry="2" />
<text  x="107.74" y="1631.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (4,412,202 samples, 0.01%)</title><rect x="549.0" y="1541" width="0.1" height="15.0" fill="rgb(212,217,33)" rx="2" ry="2" />
<text  x="552.01" y="1551.5" ></text>
</g>
<g >
<title>duckdb::ExpressionRootInfo::ExpressionRootInfo (41,011,610 samples, 0.08%)</title><rect x="477.5" y="1749" width="0.9" height="15.0" fill="rgb(242,85,20)" rx="2" ry="2" />
<text  x="480.49" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, true&gt;::back (10,326,229 samples, 0.02%)</title><rect x="1093.4" y="1701" width="0.3" height="15.0" fill="rgb(217,45,48)" rx="2" ry="2" />
<text  x="1096.44" y="1711.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::StandardColumnData, std::allocator&lt;duckdb::StandardColumnData&gt;,  (6,867,077 samples, 0.01%)</title><rect x="104.8" y="1541" width="0.1" height="15.0" fill="rgb(251,152,27)" rx="2" ry="2" />
<text  x="107.75" y="1551.5" ></text>
</g>
<g >
<title>duckdb::CatalogTransaction::CatalogTransaction (23,320,249 samples, 0.05%)</title><rect x="1042.7" y="1845" width="0.6" height="15.0" fill="rgb(237,157,42)" rx="2" ry="2" />
<text  x="1045.72" y="1855.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (102,236,044 samples, 0.20%)</title><rect x="738.5" y="1717" width="2.4" height="15.0" fill="rgb(225,36,53)" rx="2" ry="2" />
<text  x="741.52" y="1727.5" ></text>
</g>
<g >
<title>__sanitizer::LargeMmapAllocator&lt;__asan::AsanMapUnmapCallback, __sanitizer::LargeMmapAllocatorPtrArrayDynamic, __sanitizer::LocalAddressSpaceView&gt;::GetBlockBeginFastLocked (79,925,940 samples, 0.16%)</title><rect x="52.4" y="2021" width="1.8" height="15.0" fill="rgb(235,70,20)" rx="2" ry="2" />
<text  x="55.37" y="2031.5" ></text>
</g>
<g >
<title>duckdb::ChunkVectorInfo::ChunkVectorInfo (28,959,480 samples, 0.06%)</title><rect x="100.7" y="1637" width="0.7" height="15.0" fill="rgb(209,123,51)" rx="2" ry="2" />
<text  x="103.72" y="1647.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::ClientData*, std::default_delete&lt;duckdb::ClientData&gt; &gt; (6,958,386 samples, 0.01%)</title><rect x="713.1" y="1781" width="0.2" height="15.0" fill="rgb(243,131,27)" rx="2" ry="2" />
<text  x="716.09" y="1791.5" ></text>
</g>
<g >
<title>__asan::GetMallocContextSize (4,426,438 samples, 0.01%)</title><rect x="87.8" y="2005" width="0.1" height="15.0" fill="rgb(211,18,25)" rx="2" ry="2" />
<text  x="90.81" y="2015.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1493" width="0.3" height="15.0" fill="rgb(236,121,40)" rx="2" ry="2" />
<text  x="1120.47" y="1503.5" ></text>
</g>
<g >
<title>duckdb::string_t::string_t (112,831,065 samples, 0.22%)</title><rect x="277.5" y="1525" width="2.6" height="15.0" fill="rgb(253,164,53)" rx="2" ry="2" />
<text  x="280.51" y="1535.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (8,057,047 samples, 0.02%)</title><rect x="960.3" y="1605" width="0.2" height="15.0" fill="rgb(205,157,26)" rx="2" ry="2" />
<text  x="963.33" y="1615.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotPut (8,352,667 samples, 0.02%)</title><rect x="1170.1" y="2037" width="0.2" height="15.0" fill="rgb(226,35,29)" rx="2" ry="2" />
<text  x="1173.11" y="2047.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::CatalogEntryEquality, duckdb::CatalogEntryHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_deallocate_buckets (4,451,109 samples, 0.01%)</title><rect x="924.5" y="1829" width="0.1" height="15.0" fill="rgb(225,52,44)" rx="2" ry="2" />
<text  x="927.54" y="1839.5" ></text>
</g>
<g >
<title>std::_Bvector_base&lt;std::allocator&lt;bool&gt; &gt;::~_Bvector_base (5,959,186 samples, 0.01%)</title><rect x="1057.0" y="1781" width="0.2" height="15.0" fill="rgb(223,198,8)" rx="2" ry="2" />
<text  x="1060.02" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (54,036,088 samples, 0.11%)</title><rect x="380.0" y="1749" width="1.2" height="15.0" fill="rgb(233,51,21)" rx="2" ry="2" />
<text  x="382.97" y="1759.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::FunctionExpressionMatcher&gt; (11,423,735 samples, 0.02%)</title><rect x="814.6" y="1845" width="0.2" height="15.0" fill="rgb(227,9,44)" rx="2" ry="2" />
<text  x="817.57" y="1855.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::DistinctStatistics&gt; (26,816,365 samples, 0.05%)</title><rect x="426.5" y="1413" width="0.6" height="15.0" fill="rgb(244,124,16)" rx="2" ry="2" />
<text  x="429.46" y="1423.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundCastData, std::default_delete&lt;duckdb::BoundCastData&gt;, true&gt;::unique_ptr (15,042,412 samples, 0.03%)</title><rect x="932.5" y="1653" width="0.4" height="15.0" fill="rgb(235,134,18)" rx="2" ry="2" />
<text  x="935.55" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt; &gt; (132,106,251 samples, 0.26%)</title><rect x="238.2" y="869" width="3.1" height="15.0" fill="rgb(244,29,27)" rx="2" ry="2" />
<text  x="241.24" y="879.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (14,682,157 samples, 0.03%)</title><rect x="10.1" y="2037" width="0.3" height="15.0" fill="rgb(253,220,49)" rx="2" ry="2" />
<text  x="13.05" y="2047.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (31,083,521 samples, 0.06%)</title><rect x="274.2" y="1541" width="0.7" height="15.0" fill="rgb(239,15,14)" rx="2" ry="2" />
<text  x="277.16" y="1551.5" ></text>
</g>
<g >
<title>duckdb::PipelineInitializeTask::~PipelineInitializeTask (10,593,211 samples, 0.02%)</title><rect x="144.7" y="1765" width="0.3" height="15.0" fill="rgb(252,168,28)" rx="2" ry="2" />
<text  x="147.72" y="1775.5" ></text>
</g>
<g >
<title>duckdb::SingleFileStorageCommitState::FlushCommit (253,682,156 samples, 0.49%)</title><rect x="247.0" y="1813" width="5.8" height="15.0" fill="rgb(231,167,31)" rx="2" ry="2" />
<text  x="249.97" y="1823.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (148,714,892 samples, 0.29%)</title><rect x="390.6" y="1733" width="3.4" height="15.0" fill="rgb(223,53,32)" rx="2" ry="2" />
<text  x="393.56" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Binding::TryGetBindingIndex (11,708,947 samples, 0.02%)</title><rect x="954.9" y="1573" width="0.3" height="15.0" fill="rgb(206,95,5)" rx="2" ry="2" />
<text  x="957.94" y="1583.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; (43,590,583 samples, 0.08%)</title><rect x="816.6" y="1813" width="1.0" height="15.0" fill="rgb(217,126,29)" rx="2" ry="2" />
<text  x="819.58" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::ToString[abi:cxx11] (570,255,743 samples, 1.11%)</title><rect x="1065.2" y="1829" width="13.1" height="15.0" fill="rgb(225,167,35)" rx="2" ry="2" />
<text  x="1068.17" y="1839.5" ></text>
</g>
<g >
<title>duckdb::Vector::Reference (5,826,811 samples, 0.01%)</title><rect x="293.6" y="1653" width="0.2" height="15.0" fill="rgb(234,87,41)" rx="2" ry="2" />
<text  x="296.62" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::ChunkMetaData*&gt; (9,376,931 samples, 0.02%)</title><rect x="341.0" y="1125" width="0.2" height="15.0" fill="rgb(208,124,21)" rx="2" ry="2" />
<text  x="343.95" y="1135.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt;, true&gt;::~unique_ptr (26,752,607 samples, 0.05%)</title><rect x="619.9" y="1813" width="0.6" height="15.0" fill="rgb(225,223,53)" rx="2" ry="2" />
<text  x="622.85" y="1823.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::Scan (1,467,910,228 samples, 2.86%)</title><rect x="199.1" y="1765" width="33.7" height="15.0" fill="rgb(213,64,44)" rx="2" ry="2" />
<text  x="202.08" y="1775.5" >du..</text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&gt; (7,356,701 samples, 0.01%)</title><rect x="403.5" y="1765" width="0.2" height="15.0" fill="rgb(238,133,49)" rx="2" ry="2" />
<text  x="406.51" y="1775.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;*&gt; (9,311,152 samples, 0.02%)</title><rect x="971.8" y="1541" width="0.3" height="15.0" fill="rgb(237,32,6)" rx="2" ry="2" />
<text  x="974.85" y="1551.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ConjunctionExpressionMatcher&gt; (10,969,288 samples, 0.02%)</title><rect x="807.4" y="1845" width="0.2" height="15.0" fill="rgb(230,141,19)" rx="2" ry="2" />
<text  x="810.40" y="1855.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringSegmentState::~UncompressedStringSegmentState (19,794,556 samples, 0.04%)</title><rect x="238.6" y="709" width="0.4" height="15.0" fill="rgb(248,179,44)" rx="2" ry="2" />
<text  x="241.58" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::push_back (20,329,542 samples, 0.04%)</title><rect x="853.6" y="1781" width="0.4" height="15.0" fill="rgb(251,69,51)" rx="2" ry="2" />
<text  x="856.56" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundExpressionListRef, std::default_delete&lt;duckdb::BoundExpressionListRef&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BoundExpressionListRef&gt;, void&gt; (6,351,480 samples, 0.01%)</title><rect x="937.9" y="1717" width="0.2" height="15.0" fill="rgb(232,22,49)" rx="2" ry="2" />
<text  x="940.91" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (4,458,281 samples, 0.01%)</title><rect x="710.9" y="1813" width="0.1" height="15.0" fill="rgb(213,198,1)" rx="2" ry="2" />
<text  x="713.88" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (15,236,714 samples, 0.03%)</title><rect x="1024.5" y="1813" width="0.4" height="15.0" fill="rgb(209,41,48)" rx="2" ry="2" />
<text  x="1027.54" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::AssertNotNull (45,419,636 samples, 0.09%)</title><rect x="204.0" y="1493" width="1.1" height="15.0" fill="rgb(213,163,41)" rx="2" ry="2" />
<text  x="207.04" y="1503.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, unsigned long&amp;&gt; (35,474,270 samples, 0.07%)</title><rect x="362.9" y="1765" width="0.8" height="15.0" fill="rgb(226,32,18)" rx="2" ry="2" />
<text  x="365.86" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::SelectionData&gt; &gt;::construct&lt;duckdb::SelectionData, unsigned long&amp;&gt; (422,319,085 samples, 0.82%)</title><rect x="302.6" y="1589" width="9.7" height="15.0" fill="rgb(246,69,44)" rx="2" ry="2" />
<text  x="305.58" y="1599.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;duckdb::ScalarFunction const*, std::vector&lt;duckdb::ScalarFunction, std::allocator&lt;duckdb::ScalarFunction&gt; &gt; &gt;, duckdb::ScalarFunction*, duckdb::ScalarFunction&gt; (4,797,583 samples, 0.01%)</title><rect x="1116.8" y="1845" width="0.1" height="15.0" fill="rgb(237,2,15)" rx="2" ry="2" />
<text  x="1119.78" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::size (4,523,513 samples, 0.01%)</title><rect x="969.3" y="1701" width="0.2" height="15.0" fill="rgb(219,220,40)" rx="2" ry="2" />
<text  x="972.35" y="1711.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::EntryValue, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt; &gt;::find (14,131,639 samples, 0.03%)</title><rect x="1003.3" y="1701" width="0.4" height="15.0" fill="rgb(242,3,7)" rx="2" ry="2" />
<text  x="1006.33" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::ColumnSegment (139,248,422 samples, 0.27%)</title><rect x="442.8" y="1653" width="3.2" height="15.0" fill="rgb(214,123,35)" rx="2" ry="2" />
<text  x="445.81" y="1663.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::operator= (10,608,787 samples, 0.02%)</title><rect x="1039.6" y="1893" width="0.2" height="15.0" fill="rgb(209,32,11)" rx="2" ry="2" />
<text  x="1042.57" y="1903.5" ></text>
</g>
<g >
<title>std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;QSymbol*, std::vector&lt;QSymbol, std::allocator&lt;QSymbol&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;buildSymbolTable (4,896,991 samples, 0.01%)</title><rect x="1118.9" y="981" width="0.1" height="15.0" fill="rgb(253,62,46)" rx="2" ry="2" />
<text  x="1121.87" y="991.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::~unique_ptr (17,840,917 samples, 0.03%)</title><rect x="642.6" y="1845" width="0.4" height="15.0" fill="rgb(223,9,29)" rx="2" ry="2" />
<text  x="645.62" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::push_back (20,513,967 samples, 0.04%)</title><rect x="820.0" y="1845" width="0.5" height="15.0" fill="rgb(210,71,9)" rx="2" ry="2" />
<text  x="823.04" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::~unique_ptr (14,583,256 samples, 0.03%)</title><rect x="620.0" y="1701" width="0.4" height="15.0" fill="rgb(235,82,5)" rx="2" ry="2" />
<text  x="623.04" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ProgressBar, std::default_delete&lt;duckdb::ProgressBar&gt;, true&gt;::reset (6,837,864 samples, 0.01%)</title><rect x="359.0" y="1893" width="0.1" height="15.0" fill="rgb(244,226,11)" rx="2" ry="2" />
<text  x="361.99" y="1903.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;, true&gt;::~vector (7,592,435 samples, 0.01%)</title><rect x="1107.7" y="1973" width="0.2" height="15.0" fill="rgb(217,169,28)" rx="2" ry="2" />
<text  x="1110.73" y="1983.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_assert_mapped (9,265,939 samples, 0.02%)</title><rect x="346.7" y="661" width="0.2" height="15.0" fill="rgb(237,173,40)" rx="2" ry="2" />
<text  x="349.71" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::EnumComparisonRule, std::default_delete&lt;duckdb::EnumComparisonRule&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::EnumComparisonRule&gt;, void&gt; (8,252,070 samples, 0.02%)</title><rect x="806.8" y="1845" width="0.2" height="15.0" fill="rgb(241,223,33)" rx="2" ry="2" />
<text  x="809.78" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CompressionAppendState, std::default_delete&lt;duckdb::CompressionAppendState&gt; &gt;::operator= (11,200,901 samples, 0.02%)</title><rect x="450.0" y="1669" width="0.3" height="15.0" fill="rgb(207,138,42)" rx="2" ry="2" />
<text  x="453.05" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (7,990,895 samples, 0.02%)</title><rect x="959.4" y="1637" width="0.2" height="15.0" fill="rgb(233,75,31)" rx="2" ry="2" />
<text  x="962.41" y="1647.5" ></text>
</g>
<g >
<title>std::swap&lt;duckdb::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics&gt;, false&gt; &gt; (11,157,535 samples, 0.02%)</title><rect x="433.8" y="1637" width="0.2" height="15.0" fill="rgb(207,41,22)" rx="2" ry="2" />
<text  x="436.78" y="1647.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;*&gt; (26,824,257 samples, 0.05%)</title><rect x="915.8" y="1637" width="0.6" height="15.0" fill="rgb(217,152,36)" rx="2" ry="2" />
<text  x="918.81" y="1647.5" ></text>
</g>
<g >
<title>sem_post@@GLIBC_2.2.5 (26,544,027 samples, 0.05%)</title><rect x="1058.6" y="1749" width="0.6" height="15.0" fill="rgb(236,129,53)" rx="2" ry="2" />
<text  x="1061.56" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unsafe_get_property (7,151,896 samples, 0.01%)</title><rect x="603.2" y="1733" width="0.2" height="15.0" fill="rgb(233,196,21)" rx="2" ry="2" />
<text  x="606.22" y="1743.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (8,044,408 samples, 0.02%)</title><rect x="1036.2" y="1525" width="0.2" height="15.0" fill="rgb(247,82,27)" rx="2" ry="2" />
<text  x="1039.21" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::~vector (7,635,558 samples, 0.01%)</title><rect x="627.0" y="1733" width="0.2" height="15.0" fill="rgb(224,130,19)" rx="2" ry="2" />
<text  x="630.04" y="1743.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (154,172,994 samples, 0.30%)</title><rect x="249.0" y="1733" width="3.6" height="15.0" fill="rgb(249,17,47)" rx="2" ry="2" />
<text  x="252.03" y="1743.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::~FunctionExpressionMatcher (12,111,852 samples, 0.02%)</title><rect x="831.4" y="1605" width="0.3" height="15.0" fill="rgb(212,67,32)" rx="2" ry="2" />
<text  x="834.44" y="1615.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocator (30,770,465 samples, 0.06%)</title><rect x="996.7" y="1605" width="0.7" height="15.0" fill="rgb(233,155,29)" rx="2" ry="2" />
<text  x="999.74" y="1615.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (12,386,319 samples, 0.02%)</title><rect x="902.5" y="1685" width="0.3" height="15.0" fill="rgb(205,155,14)" rx="2" ry="2" />
<text  x="905.53" y="1695.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_base (4,677,277 samples, 0.01%)</title><rect x="577.8" y="1669" width="0.1" height="15.0" fill="rgb(223,56,2)" rx="2" ry="2" />
<text  x="580.82" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (13,208,817 samples, 0.03%)</title><rect x="754.1" y="1717" width="0.3" height="15.0" fill="rgb(252,50,3)" rx="2" ry="2" />
<text  x="757.14" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::ConstantExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (11,715,731 samples, 0.02%)</title><rect x="815.3" y="1845" width="0.3" height="15.0" fill="rgb(208,137,36)" rx="2" ry="2" />
<text  x="818.32" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (10,509,499 samples, 0.02%)</title><rect x="863.1" y="1717" width="0.2" height="15.0" fill="rgb(211,87,7)" rx="2" ry="2" />
<text  x="866.06" y="1727.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Vector&gt; &gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (15,221,219 samples, 0.03%)</title><rect x="219.8" y="1669" width="0.3" height="15.0" fill="rgb(239,69,21)" rx="2" ry="2" />
<text  x="222.78" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_bin_flush_stashed (4,805,460 samples, 0.01%)</title><rect x="493.8" y="1397" width="0.1" height="15.0" fill="rgb(232,179,8)" rx="2" ry="2" />
<text  x="496.77" y="1407.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;*&gt; (132,106,251 samples, 0.26%)</title><rect x="238.2" y="901" width="3.1" height="15.0" fill="rgb(205,165,21)" rx="2" ry="2" />
<text  x="241.24" y="911.5" ></text>
</g>
<g >
<title>duckdb::ExpressionState::~ExpressionState (17,219,763 samples, 0.03%)</title><rect x="484.1" y="1525" width="0.4" height="15.0" fill="rgb(240,23,50)" rx="2" ry="2" />
<text  x="487.12" y="1535.5" ></text>
</g>
<g >
<title>duckdb::make_unsafe_uniq_array&lt;unsigned int&gt; (5,773,164 samples, 0.01%)</title><rect x="303.2" y="1541" width="0.1" height="15.0" fill="rgb(214,222,5)" rx="2" ry="2" />
<text  x="306.21" y="1551.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundQueryNode, std::default_delete&lt;duckdb::BoundQueryNode&gt;, true&gt;::~unique_ptr (81,968,538 samples, 0.16%)</title><rect x="979.7" y="1797" width="1.8" height="15.0" fill="rgb(253,16,8)" rx="2" ry="2" />
<text  x="982.66" y="1807.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_allocate (5,288,242 samples, 0.01%)</title><rect x="1073.4" y="1701" width="0.1" height="15.0" fill="rgb(240,87,2)" rx="2" ry="2" />
<text  x="1076.35" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (7,362,808 samples, 0.01%)</title><rect x="830.6" y="1653" width="0.2" height="15.0" fill="rgb(234,225,16)" rx="2" ry="2" />
<text  x="833.61" y="1663.5" ></text>
</g>
<g >
<title>duckdb::ExpressionRewriter::VisitOperator (212,746,126 samples, 0.41%)</title><rect x="736.3" y="1749" width="4.9" height="15.0" fill="rgb(205,226,46)" rx="2" ry="2" />
<text  x="739.28" y="1759.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::PhysicalInsert (65,054,024 samples, 0.13%)</title><rect x="855.2" y="1813" width="1.5" height="15.0" fill="rgb(221,179,26)" rx="2" ry="2" />
<text  x="858.24" y="1823.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (23,702,512 samples, 0.05%)</title><rect x="622.2" y="1749" width="0.6" height="15.0" fill="rgb(218,222,11)" rx="2" ry="2" />
<text  x="625.24" y="1759.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::AllocatorDebugInfo&gt; (5,088,946 samples, 0.01%)</title><rect x="376.8" y="1813" width="0.1" height="15.0" fill="rgb(223,75,17)" rx="2" ry="2" />
<text  x="379.79" y="1823.5" ></text>
</g>
<g >
<title>duckdb::StringHeap::~StringHeap (10,417,979 samples, 0.02%)</title><rect x="340.7" y="1189" width="0.2" height="15.0" fill="rgb(254,36,11)" rx="2" ry="2" />
<text  x="343.70" y="1199.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt; &gt; &gt;::_M_move_assign (6,473,857 samples, 0.01%)</title><rect x="466.5" y="1733" width="0.1" height="15.0" fill="rgb(224,16,17)" rx="2" ry="2" />
<text  x="469.47" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (5,600,913 samples, 0.01%)</title><rect x="37.4" y="2021" width="0.1" height="15.0" fill="rgb(218,33,48)" rx="2" ry="2" />
<text  x="40.41" y="2031.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (4,534,368 samples, 0.01%)</title><rect x="334.1" y="1237" width="0.1" height="15.0" fill="rgb(249,39,47)" rx="2" ry="2" />
<text  x="337.07" y="1247.5" ></text>
</g>
<g >
<title>duckdb::MetaTransaction::MetaTransaction (7,366,622 samples, 0.01%)</title><rect x="543.2" y="1861" width="0.2" height="15.0" fill="rgb(247,72,41)" rx="2" ry="2" />
<text  x="546.23" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ColumnScanState::~ColumnScanState (19,125,990 samples, 0.04%)</title><rect x="226.8" y="1541" width="0.4" height="15.0" fill="rgb(207,5,0)" rx="2" ry="2" />
<text  x="229.79" y="1551.5" ></text>
</g>
<g >
<title>duckdb::BindContext::CreateColumnReference (62,825,304 samples, 0.12%)</title><rect x="958.3" y="1701" width="1.5" height="15.0" fill="rgb(231,207,18)" rx="2" ry="2" />
<text  x="961.31" y="1711.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::TableRef&gt;::operator (29,552,959 samples, 0.06%)</title><rect x="971.7" y="1733" width="0.6" height="15.0" fill="rgb(244,54,40)" rx="2" ry="2" />
<text  x="974.66" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt; &gt;::unique_ptr&lt;duckdb::InsertStatement, std::default_delete&lt;duckdb::InsertStatement&gt;, void&gt; (8,819,251 samples, 0.02%)</title><rect x="538.8" y="1829" width="0.2" height="15.0" fill="rgb(243,16,7)" rx="2" ry="2" />
<text  x="541.84" y="1839.5" ></text>
</g>
<g >
<title>std::function&lt;void  (95,419,110 samples, 0.19%)</title><rect x="762.5" y="1749" width="2.2" height="15.0" fill="rgb(237,95,45)" rx="2" ry="2" />
<text  x="765.47" y="1759.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ArenaAllocatorData, duckdb::ArenaAllocator&amp;&gt; (6,632,692 samples, 0.01%)</title><rect x="377.4" y="1829" width="0.1" height="15.0" fill="rgb(229,135,37)" rx="2" ry="2" />
<text  x="380.36" y="1839.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderNode (17,137,350 samples, 0.03%)</title><rect x="550.5" y="1685" width="0.4" height="15.0" fill="rgb(210,189,46)" rx="2" ry="2" />
<text  x="553.47" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;::operator= (4,384,548 samples, 0.01%)</title><rect x="918.5" y="1797" width="0.1" height="15.0" fill="rgb(220,147,53)" rx="2" ry="2" />
<text  x="921.50" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1301" width="0.1" height="15.0" fill="rgb(246,36,7)" rx="2" ry="2" />
<text  x="14.25" y="1311.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (6,793,654 samples, 0.01%)</title><rect x="813.5" y="1797" width="0.1" height="15.0" fill="rgb(229,72,37)" rx="2" ry="2" />
<text  x="816.47" y="1807.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ChunkInfo, std::default_delete&lt;duckdb::ChunkInfo&gt; &gt;::__uniq_ptr_impl (6,452,228 samples, 0.01%)</title><rect x="415.8" y="1509" width="0.1" height="15.0" fill="rgb(231,195,47)" rx="2" ry="2" />
<text  x="418.78" y="1519.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_flush_cache (6,119,563 samples, 0.01%)</title><rect x="19.6" y="1909" width="0.1" height="15.0" fill="rgb(230,215,24)" rx="2" ry="2" />
<text  x="22.60" y="1919.5" ></text>
</g>
<g >
<title>duckdb::PreservedError::PreservedError (4,944,827 samples, 0.01%)</title><rect x="358.6" y="1893" width="0.1" height="15.0" fill="rgb(214,58,41)" rx="2" ry="2" />
<text  x="361.59" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::MoveConstantsRule, std::default_delete&lt;duckdb::MoveConstantsRule&gt; &gt;::release (4,854,766 samples, 0.01%)</title><rect x="824.2" y="1845" width="0.1" height="15.0" fill="rgb(229,157,9)" rx="2" ry="2" />
<text  x="827.19" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::reference_wrapper&lt;duckdb::Expression&gt;, true&gt;::~vector (7,790,612 samples, 0.02%)</title><rect x="740.1" y="1621" width="0.2" height="15.0" fill="rgb(216,228,6)" rx="2" ry="2" />
<text  x="743.07" y="1631.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt; &gt;::operator bool (4,905,584 samples, 0.01%)</title><rect x="349.8" y="981" width="0.1" height="15.0" fill="rgb(228,81,52)" rx="2" ry="2" />
<text  x="352.80" y="991.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::CastExpressionMatcher, std::default_delete&lt;duckdb::CastExpressionMatcher&gt;, void&gt; (9,154,806 samples, 0.02%)</title><rect x="804.6" y="1829" width="0.2" height="15.0" fill="rgb(239,39,20)" rx="2" ry="2" />
<text  x="807.56" y="1839.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::QueryProfiler, std::allocator&lt;duckdb::QueryProfiler&gt;,  (25,697,076 samples, 0.05%)</title><rect x="352.4" y="1749" width="0.6" height="15.0" fill="rgb(245,112,7)" rx="2" ry="2" />
<text  x="355.44" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::operator (14,234,336 samples, 0.03%)</title><rect x="642.1" y="1861" width="0.4" height="15.0" fill="rgb(213,166,31)" rx="2" ry="2" />
<text  x="645.14" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::~vector (11,554,796 samples, 0.02%)</title><rect x="839.6" y="1797" width="0.3" height="15.0" fill="rgb(209,226,26)" rx="2" ry="2" />
<text  x="842.61" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (6,940,816 samples, 0.01%)</title><rect x="830.0" y="1493" width="0.1" height="15.0" fill="rgb(235,185,19)" rx="2" ry="2" />
<text  x="832.95" y="1503.5" ></text>
</g>
<g >
<title>duckdb::StringStats::CreateEmpty (8,456,403 samples, 0.02%)</title><rect x="434.1" y="1637" width="0.2" height="15.0" fill="rgb(218,206,4)" rx="2" ry="2" />
<text  x="437.06" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (7,362,808 samples, 0.01%)</title><rect x="830.6" y="1669" width="0.2" height="15.0" fill="rgb(233,9,0)" rx="2" ry="2" />
<text  x="833.61" y="1679.5" ></text>
</g>
<g >
<title>__asan::Allocator::QuarantineChunk (51,267,170 samples, 0.10%)</title><rect x="30.4" y="2021" width="1.2" height="15.0" fill="rgb(241,215,40)" rx="2" ry="2" />
<text  x="33.44" y="2031.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (152,300,191 samples, 0.30%)</title><rect x="365.9" y="1813" width="3.5" height="15.0" fill="rgb(208,20,37)" rx="2" ry="2" />
<text  x="368.89" y="1823.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Deque_base (8,303,514 samples, 0.02%)</title><rect x="404.4" y="1813" width="0.2" height="15.0" fill="rgb(214,8,8)" rx="2" ry="2" />
<text  x="407.41" y="1823.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unordered_set (4,509,912 samples, 0.01%)</title><rect x="832.9" y="1333" width="0.1" height="15.0" fill="rgb(222,197,17)" rx="2" ry="2" />
<text  x="835.94" y="1343.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::RowGroupCollection&gt;::shared_ptr&lt;std::allocator&lt;duckdb::RowGroupCollection&gt;, std::shared_ptr&lt;duckdb::DataTableInfo&gt;&amp;, duckdb::BlockManager&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, long const&amp;, int&gt; (79,693,963 samples, 0.16%)</title><rect x="428.6" y="1573" width="1.8" height="15.0" fill="rgb(210,14,19)" rx="2" ry="2" />
<text  x="431.61" y="1583.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::ComparisonExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (6,288,072 samples, 0.01%)</title><rect x="792.0" y="1845" width="0.2" height="15.0" fill="rgb(228,113,2)" rx="2" ry="2" />
<text  x="795.02" y="1855.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::GetSources (22,684,703 samples, 0.04%)</title><rect x="850.0" y="1861" width="0.6" height="15.0" fill="rgb(208,40,29)" rx="2" ry="2" />
<text  x="853.04" y="1871.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt;::_M_ptr (5,699,016 samples, 0.01%)</title><rect x="514.4" y="1861" width="0.1" height="15.0" fill="rgb(250,39,1)" rx="2" ry="2" />
<text  x="517.35" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;::~unique_ptr (68,121,893 samples, 0.13%)</title><rect x="1037.8" y="1893" width="1.6" height="15.0" fill="rgb(250,156,50)" rx="2" ry="2" />
<text  x="1040.84" y="1903.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_salloc (6,094,658 samples, 0.01%)</title><rect x="221.9" y="1301" width="0.1" height="15.0" fill="rgb(215,210,23)" rx="2" ry="2" />
<text  x="224.90" y="1311.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, duckdb::OperatorInformation, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt; &gt;::~unordered_map (42,412,414 samples, 0.08%)</title><rect x="499.6" y="1765" width="1.0" height="15.0" fill="rgb(219,138,42)" rx="2" ry="2" />
<text  x="502.63" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="181" width="0.1" height="15.0" fill="rgb(212,99,8)" rx="2" ry="2" />
<text  x="14.25" y="191.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long&amp;&gt; (4,485,207 samples, 0.01%)</title><rect x="562.6" y="1781" width="0.1" height="15.0" fill="rgb(229,41,30)" rx="2" ry="2" />
<text  x="565.57" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::pai_alloc (89,792,961 samples, 0.18%)</title><rect x="875.7" y="1317" width="2.0" height="15.0" fill="rgb(254,130,10)" rx="2" ry="2" />
<text  x="878.68" y="1327.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::RowGroupSegmentTree, std::allocator&lt;duckdb::RowGroupSegmentTree&gt;, duckdb::RowGroupCollection&amp;&gt; (24,441,856 samples, 0.05%)</title><rect x="429.2" y="1445" width="0.6" height="15.0" fill="rgb(247,118,44)" rx="2" ry="2" />
<text  x="432.20" y="1455.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::~unique_ptr (17,296,754 samples, 0.03%)</title><rect x="581.6" y="1765" width="0.4" height="15.0" fill="rgb(251,139,5)" rx="2" ry="2" />
<text  x="584.55" y="1775.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (17,461,032 samples, 0.03%)</title><rect x="706.0" y="1749" width="0.4" height="15.0" fill="rgb(250,133,26)" rx="2" ry="2" />
<text  x="709.05" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt; &gt;::operator bool (5,150,262 samples, 0.01%)</title><rect x="194.6" y="1733" width="0.1" height="15.0" fill="rgb(247,56,20)" rx="2" ry="2" />
<text  x="197.62" y="1743.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;duckdb::DatabaseInstance,  (4,772,028 samples, 0.01%)</title><rect x="502.0" y="1861" width="0.2" height="15.0" fill="rgb(231,180,48)" rx="2" ry="2" />
<text  x="505.05" y="1871.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::VectorCacheBuffer (126,722,330 samples, 0.25%)</title><rect x="366.4" y="1685" width="2.9" height="15.0" fill="rgb(245,217,27)" rx="2" ry="2" />
<text  x="369.35" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Binder::BindNode (2,051,240,777 samples, 4.00%)</title><rect x="926.3" y="1797" width="47.2" height="15.0" fill="rgb(242,48,31)" rx="2" ry="2" />
<text  x="929.29" y="1807.5" >duck..</text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (24,863,507 samples, 0.05%)</title><rect x="166.3" y="1893" width="0.6" height="15.0" fill="rgb(217,155,25)" rx="2" ry="2" />
<text  x="169.33" y="1903.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_decay (5,753,970 samples, 0.01%)</title><rect x="19.4" y="1909" width="0.1" height="15.0" fill="rgb(238,77,5)" rx="2" ry="2" />
<text  x="22.41" y="1919.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (146,706,141 samples, 0.29%)</title><rect x="486.4" y="1781" width="3.4" height="15.0" fill="rgb(224,119,53)" rx="2" ry="2" />
<text  x="489.44" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ColumnScanState::~ColumnScanState (35,169,050 samples, 0.07%)</title><rect x="226.6" y="1653" width="0.8" height="15.0" fill="rgb(224,169,2)" rx="2" ry="2" />
<text  x="229.60" y="1663.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::PipelineInitializeEvent, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (42,059,013 samples, 0.08%)</title><rect x="1051.2" y="1813" width="0.9" height="15.0" fill="rgb(236,162,28)" rx="2" ry="2" />
<text  x="1054.17" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::~vector (4,513,520 samples, 0.01%)</title><rect x="837.6" y="1781" width="0.1" height="15.0" fill="rgb(250,179,27)" rx="2" ry="2" />
<text  x="840.61" y="1791.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;*&gt; (9,693,705 samples, 0.02%)</title><rect x="1089.4" y="1717" width="0.2" height="15.0" fill="rgb(217,109,6)" rx="2" ry="2" />
<text  x="1092.42" y="1727.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_allocate (4,747,969 samples, 0.01%)</title><rect x="672.5" y="1733" width="0.2" height="15.0" fill="rgb(241,177,20)" rx="2" ry="2" />
<text  x="675.54" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::operator (4,592,776 samples, 0.01%)</title><rect x="643.7" y="1877" width="0.1" height="15.0" fill="rgb(207,163,17)" rx="2" ry="2" />
<text  x="646.66" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::PreservedError, std::allocator&lt;duckdb::PreservedError&gt; &gt;::begin (14,051,024 samples, 0.03%)</title><rect x="398.8" y="1861" width="0.3" height="15.0" fill="rgb(247,158,50)" rx="2" ry="2" />
<text  x="401.82" y="1871.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::~FileBuffer (47,909,515 samples, 0.09%)</title><rect x="242.6" y="581" width="1.1" height="15.0" fill="rgb(246,69,37)" rx="2" ry="2" />
<text  x="245.59" y="591.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;::operator (4,543,959 samples, 0.01%)</title><rect x="1086.9" y="1829" width="0.1" height="15.0" fill="rgb(208,201,23)" rx="2" ry="2" />
<text  x="1089.86" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (64,837,135 samples, 0.13%)</title><rect x="705.4" y="1797" width="1.5" height="15.0" fill="rgb(247,187,0)" rx="2" ry="2" />
<text  x="708.38" y="1807.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::SelectionData&gt;::shared_ptr&lt;std::allocator&lt;duckdb::SelectionData&gt;, unsigned long&amp;&gt; (455,714,400 samples, 0.89%)</title><rect x="256.2" y="1605" width="10.5" height="15.0" fill="rgb(208,205,47)" rx="2" ry="2" />
<text  x="259.23" y="1615.5" ></text>
</g>
<g >
<title>duckdb::Binder::HasMatchingBinding (32,017,831 samples, 0.06%)</title><rect x="954.6" y="1605" width="0.7" height="15.0" fill="rgb(221,57,50)" rx="2" ry="2" />
<text  x="957.55" y="1615.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::InClauseExpressionMatcher, std::default_delete&lt;duckdb::InClauseExpressionMatcher&gt; &gt;::__uniq_ptr_impl (8,538,313 samples, 0.02%)</title><rect x="810.3" y="1797" width="0.2" height="15.0" fill="rgb(248,66,2)" rx="2" ry="2" />
<text  x="813.28" y="1807.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::_M_ptr (5,281,546 samples, 0.01%)</title><rect x="827.5" y="1749" width="0.2" height="15.0" fill="rgb(238,64,28)" rx="2" ry="2" />
<text  x="830.54" y="1759.5" ></text>
</g>
<g >
<title>__do_page_fault (255,445,716 samples, 0.50%)</title><rect x="1135.2" y="1989" width="5.9" height="15.0" fill="rgb(211,125,30)" rx="2" ry="2" />
<text  x="1138.25" y="1999.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt;::reset (807,652,484 samples, 1.57%)</title><rect x="333.1" y="1861" width="18.6" height="15.0" fill="rgb(247,212,51)" rx="2" ry="2" />
<text  x="336.15" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Binding::Binding (56,777,312 samples, 0.11%)</title><rect x="929.1" y="1701" width="1.3" height="15.0" fill="rgb(242,97,24)" rx="2" ry="2" />
<text  x="932.12" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable (6,354,547 samples, 0.01%)</title><rect x="858.2" y="1797" width="0.1" height="15.0" fill="rgb(225,130,9)" rx="2" ry="2" />
<text  x="861.19" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (97,560,270 samples, 0.19%)</title><rect x="217.3" y="1605" width="2.2" height="15.0" fill="rgb(241,8,9)" rx="2" ry="2" />
<text  x="220.28" y="1615.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::InitializeScan (39,074,067 samples, 0.08%)</title><rect x="225.1" y="1717" width="0.9" height="15.0" fill="rgb(214,101,11)" rx="2" ry="2" />
<text  x="228.11" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::ColumnBinding, std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (9,856,992 samples, 0.02%)</title><rect x="765.5" y="1749" width="0.2" height="15.0" fill="rgb(218,100,45)" rx="2" ry="2" />
<text  x="768.47" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ColumnList::ColumnListIterator::ColumnLogicalIteratorInternal::operator* (6,942,581 samples, 0.01%)</title><rect x="855.7" y="1781" width="0.1" height="15.0" fill="rgb(244,15,6)" rx="2" ry="2" />
<text  x="858.65" y="1791.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::ExpressionMatcher*, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::tuple&lt;duckdb::ExpressionMatcher*&amp;, std::default_delete&lt;duckdb::FunctionExpressionMatcher&gt;, true&gt; (4,527,893 samples, 0.01%)</title><rect x="785.8" y="1797" width="0.1" height="15.0" fill="rgb(214,192,52)" rx="2" ry="2" />
<text  x="788.80" y="1807.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;::vector (6,356,650 samples, 0.01%)</title><rect x="939.9" y="1653" width="0.2" height="15.0" fill="rgb(225,30,24)" rx="2" ry="2" />
<text  x="942.94" y="1663.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::~PipelineExecutor (13,641,720 samples, 0.03%)</title><rect x="108.5" y="1781" width="0.3" height="15.0" fill="rgb(240,42,32)" rx="2" ry="2" />
<text  x="111.52" y="1791.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ProgressBar, std::default_delete&lt;duckdb::ProgressBar&gt; &gt;::_M_ptr (22,916,900 samples, 0.04%)</title><rect x="512.6" y="1877" width="0.5" height="15.0" fill="rgb(225,98,41)" rx="2" ry="2" />
<text  x="515.60" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1717" width="1.9" height="15.0" fill="rgb(230,137,25)" rx="2" ry="2" />
<text  x="1120.81" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (66,571,378 samples, 0.13%)</title><rect x="492.7" y="1557" width="1.5" height="15.0" fill="rgb(254,11,35)" rx="2" ry="2" />
<text  x="495.68" y="1567.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;duckdb::ColumnScanState*, unsigned long, duckdb::ColumnScanState&gt; (5,708,531 samples, 0.01%)</title><rect x="223.8" y="1653" width="0.1" height="15.0" fill="rgb(213,27,32)" rx="2" ry="2" />
<text  x="226.77" y="1663.5" ></text>
</g>
<g >
<title>duckdb::FilterCombiner::HasFilters (5,450,373 samples, 0.01%)</title><rect x="747.0" y="1733" width="0.1" height="15.0" fill="rgb(254,26,53)" rx="2" ry="2" />
<text  x="750.00" y="1743.5" ></text>
</g>
<g >
<title>duckdb::MaterializedQueryResult::Collection (5,531,149 samples, 0.01%)</title><rect x="385.6" y="1925" width="0.1" height="15.0" fill="rgb(222,187,19)" rx="2" ry="2" />
<text  x="388.55" y="1935.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::~PhysicalOperator (4,625,487 samples, 0.01%)</title><rect x="915.5" y="1509" width="0.1" height="15.0" fill="rgb(228,181,5)" rx="2" ry="2" />
<text  x="918.54" y="1519.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (64,936,625 samples, 0.13%)</title><rect x="184.7" y="2021" width="1.5" height="15.0" fill="rgb(229,152,39)" rx="2" ry="2" />
<text  x="187.71" y="2031.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_event (6,832,039 samples, 0.01%)</title><rect x="349.1" y="757" width="0.2" height="15.0" fill="rgb(248,223,1)" rx="2" ry="2" />
<text  x="352.12" y="767.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt;::get (7,146,446 samples, 0.01%)</title><rect x="512.1" y="1893" width="0.1" height="15.0" fill="rgb(241,162,51)" rx="2" ry="2" />
<text  x="515.07" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (9,556,431 samples, 0.02%)</title><rect x="965.9" y="1733" width="0.3" height="15.0" fill="rgb(222,159,8)" rx="2" ry="2" />
<text  x="968.94" y="1743.5" ></text>
</g>
<g >
<title>duckdb::LogicalInsert::LogicalInsert (29,325,420 samples, 0.06%)</title><rect x="1012.6" y="1813" width="0.7" height="15.0" fill="rgb(234,136,10)" rx="2" ry="2" />
<text  x="1015.64" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_impl (5,672,450 samples, 0.01%)</title><rect x="438.3" y="1397" width="0.2" height="15.0" fill="rgb(206,12,25)" rx="2" ry="2" />
<text  x="441.34" y="1407.5" ></text>
</g>
<g >
<title>duckdb::ThreadContext::ThreadContext (10,675,656 samples, 0.02%)</title><rect x="495.8" y="1829" width="0.2" height="15.0" fill="rgb(224,106,13)" rx="2" ry="2" />
<text  x="498.78" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign (14,388,561 samples, 0.03%)</title><rect x="1100.8" y="1813" width="0.4" height="15.0" fill="rgb(240,28,33)" rx="2" ry="2" />
<text  x="1103.83" y="1823.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::TypeMatcherId, duckdb::LogicalTypeId&gt; (11,604,148 samples, 0.02%)</title><rect x="803.8" y="1845" width="0.3" height="15.0" fill="rgb(238,180,12)" rx="2" ry="2" />
<text  x="806.80" y="1855.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt; &gt; (4,721,884 samples, 0.01%)</title><rect x="785.6" y="1813" width="0.1" height="15.0" fill="rgb(236,179,7)" rx="2" ry="2" />
<text  x="788.56" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::Pipeline&gt;, duckdb::ReferenceHashFunction&lt;duckdb::Pipeline&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (4,976,010 samples, 0.01%)</title><rect x="1062.6" y="1797" width="0.1" height="15.0" fill="rgb(254,225,20)" rx="2" ry="2" />
<text  x="1065.60" y="1807.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::shared_ptr&lt;std::allocator&lt;duckdb::VectorBuffer&gt;, unsigned long&gt; (36,832,169 samples, 0.07%)</title><rect x="901.3" y="1589" width="0.9" height="15.0" fill="rgb(214,183,0)" rx="2" ry="2" />
<text  x="904.32" y="1599.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (40,472,268 samples, 0.08%)</title><rect x="725.2" y="1701" width="0.9" height="15.0" fill="rgb(212,135,15)" rx="2" ry="2" />
<text  x="728.18" y="1711.5" ></text>
</g>
<g >
<title>__vma_adjust (13,115,743 samples, 0.03%)</title><rect x="1171.2" y="1877" width="0.3" height="15.0" fill="rgb(247,216,28)" rx="2" ry="2" />
<text  x="1174.24" y="1887.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (55,156,289 samples, 0.11%)</title><rect x="221.5" y="1445" width="1.3" height="15.0" fill="rgb(248,58,49)" rx="2" ry="2" />
<text  x="224.51" y="1455.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::VectorCache&gt; (98,545,373 samples, 0.19%)</title><rect x="481.5" y="1653" width="2.2" height="15.0" fill="rgb(210,149,17)" rx="2" ry="2" />
<text  x="484.48" y="1663.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;::operator[] (5,815,663 samples, 0.01%)</title><rect x="1011.6" y="1813" width="0.1" height="15.0" fill="rgb(227,17,32)" rx="2" ry="2" />
<text  x="1014.60" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Catalog, std::default_delete&lt;duckdb::Catalog&gt;, true&gt;::~unique_ptr (15,089,061 samples, 0.03%)</title><rect x="1117.5" y="1717" width="0.3" height="15.0" fill="rgb(211,180,21)" rx="2" ry="2" />
<text  x="1120.47" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::push_back (20,603,443 samples, 0.04%)</title><rect x="371.1" y="1845" width="0.5" height="15.0" fill="rgb(216,6,20)" rx="2" ry="2" />
<text  x="374.13" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; (36,199,877 samples, 0.07%)</title><rect x="825.9" y="1829" width="0.9" height="15.0" fill="rgb(243,189,21)" rx="2" ry="2" />
<text  x="828.92" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TaskScheduler, std::default_delete&lt;duckdb::TaskScheduler&gt;, true&gt;::operator* (5,036,984 samples, 0.01%)</title><rect x="503.2" y="1861" width="0.1" height="15.0" fill="rgb(234,172,10)" rx="2" ry="2" />
<text  x="506.18" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LikeOptimizationRule, std::default_delete&lt;duckdb::LikeOptimizationRule&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::LikeOptimizationRule&gt;, void&gt; (4,725,732 samples, 0.01%)</title><rect x="813.8" y="1845" width="0.1" height="15.0" fill="rgb(243,71,44)" rx="2" ry="2" />
<text  x="816.79" y="1855.5" ></text>
</g>
<g >
<title>duckdb::MappingValue::~MappingValue (13,077,913 samples, 0.03%)</title><rect x="1117.5" y="949" width="0.3" height="15.0" fill="rgb(237,83,22)" rx="2" ry="2" />
<text  x="1120.49" y="959.5" ></text>
</g>
<g >
<title>duckdb::SelectionVector::SelectionVector (437,330,636 samples, 0.85%)</title><rect x="302.3" y="1717" width="10.1" height="15.0" fill="rgb(228,89,34)" rx="2" ry="2" />
<text  x="305.32" y="1727.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::PipelineInitializeTask, duckdb::Pipeline&amp;, std::shared_ptr&lt;duckdb::Event&gt; &gt; (14,419,781 samples, 0.03%)</title><rect x="1059.4" y="1813" width="0.4" height="15.0" fill="rgb(242,32,38)" rx="2" ry="2" />
<text  x="1062.42" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CompressionAppendState, std::default_delete&lt;duckdb::CompressionAppendState&gt;, true&gt;::~unique_ptr (15,748,050 samples, 0.03%)</title><rect x="339.2" y="1397" width="0.3" height="15.0" fill="rgb(220,85,32)" rx="2" ry="2" />
<text  x="342.19" y="1407.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt; &gt;::~unique_ptr (23,038,411 samples, 0.04%)</title><rect x="324.6" y="1557" width="0.5" height="15.0" fill="rgb(218,184,7)" rx="2" ry="2" />
<text  x="327.55" y="1567.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::CreateProducer (47,911,550 samples, 0.09%)</title><rect x="1090.5" y="1861" width="1.1" height="15.0" fill="rgb(224,85,6)" rx="2" ry="2" />
<text  x="1093.45" y="1871.5" ></text>
</g>
<g >
<title>duckdb::MappingValue::~MappingValue (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1397" width="0.3" height="15.0" fill="rgb(229,63,5)" rx="2" ry="2" />
<text  x="1120.47" y="1407.5" ></text>
</g>
<g >
<title>duckdb::BoundStatement::BoundStatement (12,525,919 samples, 0.02%)</title><rect x="986.4" y="1829" width="0.3" height="15.0" fill="rgb(226,156,12)" rx="2" ry="2" />
<text  x="989.41" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BoundReferenceExpression::BoundReferenceExpression (4,649,460 samples, 0.01%)</title><rect x="844.8" y="1701" width="0.1" height="15.0" fill="rgb(212,171,43)" rx="2" ry="2" />
<text  x="847.83" y="1711.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::GetSources (40,934,450 samples, 0.08%)</title><rect x="853.1" y="1797" width="1.0" height="15.0" fill="rgb(218,114,16)" rx="2" ry="2" />
<text  x="856.12" y="1807.5" ></text>
</g>
<g >
<title>__lsan::CollectIgnoredCb (17,360,262 samples, 0.03%)</title><rect x="1125.4" y="2037" width="0.4" height="15.0" fill="rgb(235,203,37)" rx="2" ry="2" />
<text  x="1128.42" y="2047.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, true&gt;::~vector (9,916,935 samples, 0.02%)</title><rect x="831.9" y="1589" width="0.2" height="15.0" fill="rgb(239,56,5)" rx="2" ry="2" />
<text  x="834.87" y="1599.5" ></text>
</g>
<g >
<title>duckdb::Event::FinishTask (220,141,802 samples, 0.43%)</title><rect x="91.3" y="1829" width="5.1" height="15.0" fill="rgb(207,185,42)" rx="2" ry="2" />
<text  x="94.33" y="1839.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unordered_set (12,119,369 samples, 0.02%)</title><rect x="337.6" y="1669" width="0.3" height="15.0" fill="rgb(229,159,52)" rx="2" ry="2" />
<text  x="340.65" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::unique_ptr&lt;duckdb::BoundConstantExpression, std::default_delete&lt;duckdb::BoundConstantExpression&gt;, void&gt; (7,958,676 samples, 0.02%)</title><rect x="983.4" y="1797" width="0.2" height="15.0" fill="rgb(207,55,37)" rx="2" ry="2" />
<text  x="986.37" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Event::Finish (218,859,080 samples, 0.43%)</title><rect x="91.4" y="1813" width="5.0" height="15.0" fill="rgb(216,120,7)" rx="2" ry="2" />
<text  x="94.36" y="1823.5" ></text>
</g>
<g >
<title>duckdb::IndexVector&lt;unsigned long, duckdb::PhysicalIndex&gt;::IndexVector (14,802,274 samples, 0.03%)</title><rect x="854.9" y="1813" width="0.3" height="15.0" fill="rgb(224,226,41)" rx="2" ry="2" />
<text  x="857.86" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (14,823,906 samples, 0.03%)</title><rect x="391.5" y="1429" width="0.4" height="15.0" fill="rgb(237,152,13)" rx="2" ry="2" />
<text  x="394.52" y="1439.5" ></text>
</g>
<g >
<title>duckdb::BufferedSerializer::BufferedSerializer (13,885,003 samples, 0.03%)</title><rect x="584.6" y="1845" width="0.4" height="15.0" fill="rgb(236,179,46)" rx="2" ry="2" />
<text  x="587.64" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;::unique_ptr&lt;duckdb::PhysicalDummyScan, std::default_delete&lt;std::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt; &gt; &gt;, void&gt; (10,990,398 samples, 0.02%)</title><rect x="909.1" y="1749" width="0.3" height="15.0" fill="rgb(207,15,30)" rx="2" ry="2" />
<text  x="912.11" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_Hashtable_alloc (4,483,664 samples, 0.01%)</title><rect x="696.0" y="1797" width="0.2" height="15.0" fill="rgb(235,135,1)" rx="2" ry="2" />
<text  x="699.05" y="1807.5" ></text>
</g>
<g >
<title>duckdb::string_t::IsInlined (15,956,805 samples, 0.03%)</title><rect x="279.7" y="1509" width="0.4" height="15.0" fill="rgb(213,125,7)" rx="2" ry="2" />
<text  x="282.74" y="1519.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::AssertNotNull (49,754,739 samples, 0.10%)</title><rect x="258.9" y="1477" width="1.1" height="15.0" fill="rgb(224,196,10)" rx="2" ry="2" />
<text  x="261.86" y="1487.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt; &gt; &gt;::max_size (5,026,213 samples, 0.01%)</title><rect x="1064.7" y="1749" width="0.1" height="15.0" fill="rgb(214,77,16)" rx="2" ry="2" />
<text  x="1067.66" y="1759.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::AddFunction (4,778,029 samples, 0.01%)</title><rect x="1111.3" y="1861" width="0.1" height="15.0" fill="rgb(233,172,37)" rx="2" ry="2" />
<text  x="1114.34" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Vector::ResetFromCache (8,644,846 samples, 0.02%)</title><rect x="494.9" y="1701" width="0.2" height="15.0" fill="rgb(206,143,35)" rx="2" ry="2" />
<text  x="497.89" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnAppendState, std::allocator&lt;duckdb::ColumnAppendState&gt; &gt;::_M_realloc_insert&lt;duckdb::ColumnAppendState&gt; (19,945,287 samples, 0.04%)</title><rect x="197.9" y="1669" width="0.4" height="15.0" fill="rgb(213,89,31)" rx="2" ry="2" />
<text  x="200.89" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics&gt;, false&gt;::unique_ptr (8,504,969 samples, 0.02%)</title><rect x="433.8" y="1621" width="0.2" height="15.0" fill="rgb(237,89,39)" rx="2" ry="2" />
<text  x="436.85" y="1631.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::eset_remove (13,875,756 samples, 0.03%)</title><rect x="876.8" y="1205" width="0.4" height="15.0" fill="rgb(235,138,7)" rx="2" ry="2" />
<text  x="879.84" y="1215.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt;, true&gt;::~unique_ptr (99,210,826 samples, 0.19%)</title><rect x="241.6" y="821" width="2.3" height="15.0" fill="rgb(220,150,19)" rx="2" ry="2" />
<text  x="244.64" y="831.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned long [], std::default_delete&lt;unsigned long&gt;, false&gt;::operator= (7,460,596 samples, 0.01%)</title><rect x="474.0" y="1525" width="0.1" height="15.0" fill="rgb(243,157,42)" rx="2" ry="2" />
<text  x="476.96" y="1535.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TableStatisticsLock, std::default_delete&lt;duckdb::TableStatisticsLock&gt; &gt;::~unique_ptr (5,218,644 samples, 0.01%)</title><rect x="231.5" y="1637" width="0.1" height="15.0" fill="rgb(206,47,27)" rx="2" ry="2" />
<text  x="234.50" y="1647.5" ></text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (10,431,769 samples, 0.02%)</title><rect x="147.4" y="1989" width="0.3" height="15.0" fill="rgb(252,228,45)" rx="2" ry="2" />
<text  x="150.43" y="1999.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (12,421,922 samples, 0.02%)</title><rect x="895.5" y="1621" width="0.3" height="15.0" fill="rgb(215,170,50)" rx="2" ry="2" />
<text  x="898.50" y="1631.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::IsActiveResult (28,163,446 samples, 0.05%)</title><rect x="514.2" y="1909" width="0.6" height="15.0" fill="rgb(211,65,6)" rx="2" ry="2" />
<text  x="517.17" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::~vector (5,883,313 samples, 0.01%)</title><rect x="356.4" y="1477" width="0.2" height="15.0" fill="rgb(231,122,26)" rx="2" ry="2" />
<text  x="359.45" y="1487.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;unsigned long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt; &gt; (166,770,369 samples, 0.33%)</title><rect x="665.2" y="1749" width="3.8" height="15.0" fill="rgb(245,144,1)" rx="2" ry="2" />
<text  x="668.17" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Value::Value (5,020,635 samples, 0.01%)</title><rect x="528.8" y="1669" width="0.1" height="15.0" fill="rgb(213,204,44)" rx="2" ry="2" />
<text  x="531.83" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*&gt; (11,917,832 samples, 0.02%)</title><rect x="631.1" y="1717" width="0.3" height="15.0" fill="rgb(234,190,24)" rx="2" ry="2" />
<text  x="634.11" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt; &gt; &gt;::~vector (4,720,482 samples, 0.01%)</title><rect x="1089.5" y="1573" width="0.1" height="15.0" fill="rgb(237,179,43)" rx="2" ry="2" />
<text  x="1092.46" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::emplace_back&lt;duckdb::VectorCache&gt; (11,884,833 samples, 0.02%)</title><rect x="291.6" y="1669" width="0.3" height="15.0" fill="rgb(236,110,25)" rx="2" ry="2" />
<text  x="294.61" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ComparisonExpressionMatcher, std::default_delete&lt;duckdb::ComparisonExpressionMatcher&gt;, true&gt;::operator (4,560,166 samples, 0.01%)</title><rect x="791.9" y="1845" width="0.1" height="15.0" fill="rgb(226,20,19)" rx="2" ry="2" />
<text  x="794.90" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_conjure_hashtable (4,541,328 samples, 0.01%)</title><rect x="669.1" y="1749" width="0.1" height="15.0" fill="rgb(218,150,33)" rx="2" ry="2" />
<text  x="672.12" y="1759.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateStatistics (5,186,796 samples, 0.01%)</title><rect x="766.8" y="1653" width="0.1" height="15.0" fill="rgb(219,106,24)" rx="2" ry="2" />
<text  x="769.80" y="1663.5" ></text>
</g>
<g >
<title>duckdb::Executor::~Executor (169,866,427 samples, 0.33%)</title><rect x="333.3" y="1765" width="3.9" height="15.0" fill="rgb(231,57,8)" rx="2" ry="2" />
<text  x="336.26" y="1775.5" ></text>
</g>
<g >
<title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (18,768,662 samples, 0.04%)</title><rect x="22.7" y="2005" width="0.4" height="15.0" fill="rgb(246,180,29)" rx="2" ry="2" />
<text  x="25.71" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (5,959,370 samples, 0.01%)</title><rect x="921.5" y="1829" width="0.1" height="15.0" fill="rgb(233,219,51)" rx="2" ry="2" />
<text  x="924.46" y="1839.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::VectorCache*&gt; (5,646,698 samples, 0.01%)</title><rect x="106.9" y="1637" width="0.1" height="15.0" fill="rgb(213,46,1)" rx="2" ry="2" />
<text  x="109.87" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::pac_dalloc_impl (78,075,127 samples, 0.15%)</title><rect x="346.6" y="709" width="1.7" height="15.0" fill="rgb(241,92,8)" rx="2" ry="2" />
<text  x="349.55" y="719.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::~vector (5,235,608 samples, 0.01%)</title><rect x="1036.9" y="1813" width="0.1" height="15.0" fill="rgb(250,117,32)" rx="2" ry="2" />
<text  x="1039.88" y="1823.5" ></text>
</g>
<g >
<title>duckdb::CommonAggregateOptimizer::VisitOperator (64,967,114 samples, 0.13%)</title><rect x="726.4" y="1813" width="1.5" height="15.0" fill="rgb(250,23,25)" rx="2" ry="2" />
<text  x="729.45" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (6,513,445 samples, 0.01%)</title><rect x="1100.9" y="1797" width="0.1" height="15.0" fill="rgb(238,141,42)" rx="2" ry="2" />
<text  x="1103.85" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (10,036,289 samples, 0.02%)</title><rect x="292.3" y="1461" width="0.2" height="15.0" fill="rgb(206,170,14)" rx="2" ry="2" />
<text  x="295.26" y="1471.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::shared_ptr&lt;duckdb::LocalTableStorage&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt; &gt;::insert&lt;std::pair&lt;duckdb::DataTable&amp;, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt; (40,921,468 samples, 0.08%)</title><rect x="431.5" y="1749" width="1.0" height="15.0" fill="rgb(247,151,36)" rx="2" ry="2" />
<text  x="434.51" y="1759.5" ></text>
</g>
<g >
<title>buildSymbolTable (34,215,238 samples, 0.07%)</title><rect x="1118.3" y="1045" width="0.7" height="15.0" fill="rgb(230,89,10)" rx="2" ry="2" />
<text  x="1121.26" y="1055.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::PipelineInitializeTask, std::default_delete&lt;duckdb::PipelineInitializeTask&gt; &gt;::__uniq_ptr_impl (5,071,273 samples, 0.01%)</title><rect x="1059.6" y="1765" width="0.1" height="15.0" fill="rgb(213,17,22)" rx="2" ry="2" />
<text  x="1062.57" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::GlobalSourceState, std::default_delete&lt;duckdb::GlobalSourceState&gt; &gt;::~unique_ptr (14,357,427 samples, 0.03%)</title><rect x="356.1" y="1477" width="0.3" height="15.0" fill="rgb(215,197,36)" rx="2" ry="2" />
<text  x="359.12" y="1487.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (6,278,605 samples, 0.01%)</title><rect x="577.8" y="1685" width="0.1" height="15.0" fill="rgb(219,9,0)" rx="2" ry="2" />
<text  x="580.80" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_no_sample (17,304,696 samples, 0.03%)</title><rect x="103.2" y="1413" width="0.4" height="15.0" fill="rgb(240,50,16)" rx="2" ry="2" />
<text  x="106.15" y="1423.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::operator= (6,718,426 samples, 0.01%)</title><rect x="386.0" y="1877" width="0.1" height="15.0" fill="rgb(222,48,15)" rx="2" ry="2" />
<text  x="388.99" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="469" width="0.1" height="15.0" fill="rgb(214,152,8)" rx="2" ry="2" />
<text  x="14.25" y="479.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::QueryResult, std::default_delete&lt;duckdb::QueryResult&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::MaterializedQueryResult&gt; &gt; (5,454,403 samples, 0.01%)</title><rect x="395.3" y="1893" width="0.1" height="15.0" fill="rgb(208,72,37)" rx="2" ry="2" />
<text  x="398.26" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::resize (11,103,446 samples, 0.02%)</title><rect x="1020.7" y="1829" width="0.3" height="15.0" fill="rgb(238,97,17)" rx="2" ry="2" />
<text  x="1023.74" y="1839.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (14,820,100 samples, 0.03%)</title><rect x="211.9" y="1621" width="0.3" height="15.0" fill="rgb(252,42,38)" rx="2" ry="2" />
<text  x="214.87" y="1631.5" ></text>
</g>
<g >
<title>duckdb::StringUtil::Lower (5,583,424 samples, 0.01%)</title><rect x="1004.8" y="1669" width="0.1" height="15.0" fill="rgb(240,185,5)" rx="2" ry="2" />
<text  x="1007.78" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::~vector (66,037,647 samples, 0.13%)</title><rect x="497.9" y="1765" width="1.6" height="15.0" fill="rgb(219,114,54)" rx="2" ry="2" />
<text  x="500.94" y="1775.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::RowGroupSegmentTree, std::allocator&lt;duckdb::RowGroupSegmentTree&gt;,  (358,626,288 samples, 0.70%)</title><rect x="237.2" y="1477" width="8.3" height="15.0" fill="rgb(210,47,19)" rx="2" ry="2" />
<text  x="240.21" y="1487.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_check_len (5,071,669 samples, 0.01%)</title><rect x="809.6" y="1797" width="0.1" height="15.0" fill="rgb(232,62,42)" rx="2" ry="2" />
<text  x="812.60" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::SelectionData,  (15,018,435 samples, 0.03%)</title><rect x="296.5" y="1589" width="0.3" height="15.0" fill="rgb(218,226,4)" rx="2" ry="2" />
<text  x="299.48" y="1599.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (86,491,234 samples, 0.17%)</title><rect x="217.5" y="1557" width="2.0" height="15.0" fill="rgb(245,83,43)" rx="2" ry="2" />
<text  x="220.48" y="1567.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::StorageCommitState, std::default_delete&lt;duckdb::StorageCommitState&gt;, true&gt;::operator= (16,088,139 samples, 0.03%)</title><rect x="317.8" y="1813" width="0.3" height="15.0" fill="rgb(254,100,27)" rx="2" ry="2" />
<text  x="320.76" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt;::unique_ptr&lt;duckdb::SpecificFunctionMatcher, std::default_delete&lt;duckdb::SpecificFunctionMatcher&gt;, void&gt; (10,216,671 samples, 0.02%)</title><rect x="797.7" y="1829" width="0.2" height="15.0" fill="rgb(241,223,24)" rx="2" ry="2" />
<text  x="800.66" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BufferManager, std::default_delete&lt;duckdb::BufferManager&gt;, true&gt;::operator* (4,437,830 samples, 0.01%)</title><rect x="267.4" y="1541" width="0.1" height="15.0" fill="rgb(224,224,20)" rx="2" ry="2" />
<text  x="270.36" y="1551.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::push_back (11,532,466 samples, 0.02%)</title><rect x="316.3" y="1717" width="0.2" height="15.0" fill="rgb(223,120,50)" rx="2" ry="2" />
<text  x="319.26" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (5,825,649 samples, 0.01%)</title><rect x="493.4" y="1429" width="0.1" height="15.0" fill="rgb(210,218,10)" rx="2" ry="2" />
<text  x="496.38" y="1439.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::BaseStatistics (23,359,762 samples, 0.05%)</title><rect x="433.5" y="1653" width="0.5" height="15.0" fill="rgb(220,22,8)" rx="2" ry="2" />
<text  x="436.50" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CastExpressionMatcher, std::default_delete&lt;duckdb::CastExpressionMatcher&gt;, true&gt;::operator (5,425,682 samples, 0.01%)</title><rect x="804.1" y="1845" width="0.1" height="15.0" fill="rgb(241,64,0)" rx="2" ry="2" />
<text  x="807.08" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Vector, true&gt;::~vector (6,583,865 samples, 0.01%)</title><rect x="321.4" y="1749" width="0.1" height="15.0" fill="rgb(246,137,43)" rx="2" ry="2" />
<text  x="324.39" y="1759.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::SetValue (48,721,313 samples, 0.09%)</title><rect x="362.8" y="1829" width="1.1" height="15.0" fill="rgb(205,186,29)" rx="2" ry="2" />
<text  x="365.78" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (28,541,527 samples, 0.06%)</title><rect x="691.4" y="1749" width="0.6" height="15.0" fill="rgb(254,109,41)" rx="2" ry="2" />
<text  x="694.39" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionState, std::default_delete&lt;duckdb::ExpressionState&gt;, true&gt;::unique_ptr (4,389,240 samples, 0.01%)</title><rect x="904.4" y="1701" width="0.1" height="15.0" fill="rgb(211,123,27)" rx="2" ry="2" />
<text  x="907.37" y="1711.5" ></text>
</g>
<g >
<title>duckdb::Catalog::GetSystemCatalog (8,908,396 samples, 0.02%)</title><rect x="542.9" y="1861" width="0.2" height="15.0" fill="rgb(242,23,0)" rx="2" ry="2" />
<text  x="545.86" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ConstantExpressionMatcher, std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt;, void&gt; (4,586,508 samples, 0.01%)</title><rect x="796.6" y="1829" width="0.1" height="15.0" fill="rgb(239,173,22)" rx="2" ry="2" />
<text  x="799.55" y="1839.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;::operator (27,628,984 samples, 0.05%)</title><rect x="1122.2" y="1733" width="0.6" height="15.0" fill="rgb(210,155,17)" rx="2" ry="2" />
<text  x="1125.21" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="357" width="0.1" height="15.0" fill="rgb(225,152,34)" rx="2" ry="2" />
<text  x="14.25" y="367.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::QueryProfiler, std::allocator&lt;duckdb::QueryProfiler&gt;, duckdb::ClientContext&amp;&gt; (43,671,473 samples, 0.09%)</title><rect x="353.2" y="1861" width="1.0" height="15.0" fill="rgb(244,4,11)" rx="2" ry="2" />
<text  x="356.21" y="1871.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::reference_wrapper&lt;duckdb::Rule&gt;, true&gt;::vector (4,712,796 samples, 0.01%)</title><rect x="783.7" y="1861" width="0.1" height="15.0" fill="rgb(221,6,3)" rx="2" ry="2" />
<text  x="786.65" y="1871.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::Finalize (41,400,184 samples, 0.08%)</title><rect x="100.7" y="1733" width="1.0" height="15.0" fill="rgb(221,162,24)" rx="2" ry="2" />
<text  x="103.72" y="1743.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Free (5,135,565 samples, 0.01%)</title><rect x="108.5" y="1461" width="0.2" height="15.0" fill="rgb(228,0,54)" rx="2" ry="2" />
<text  x="111.53" y="1471.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::Vector*&gt; (13,995,583 samples, 0.03%)</title><rect x="481.1" y="1669" width="0.3" height="15.0" fill="rgb(247,122,6)" rx="2" ry="2" />
<text  x="484.10" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (9,806,928 samples, 0.02%)</title><rect x="664.0" y="1749" width="0.2" height="15.0" fill="rgb(223,99,29)" rx="2" ry="2" />
<text  x="666.99" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RenderTreeNode&gt;, void&gt; (4,631,030 samples, 0.01%)</title><rect x="1068.4" y="1701" width="0.2" height="15.0" fill="rgb(226,183,3)" rx="2" ry="2" />
<text  x="1071.45" y="1711.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt;::allocate (5,721,012 samples, 0.01%)</title><rect x="36.5" y="2021" width="0.1" height="15.0" fill="rgb(205,129,3)" rx="2" ry="2" />
<text  x="39.51" y="2031.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::allocate (6,046,946 samples, 0.01%)</title><rect x="628.2" y="1701" width="0.2" height="15.0" fill="rgb(205,53,20)" rx="2" ry="2" />
<text  x="631.24" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Executor, std::default_delete&lt;duckdb::Executor&gt;, true&gt;::AssertNotNull (5,600,258 samples, 0.01%)</title><rect x="511.0" y="1893" width="0.1" height="15.0" fill="rgb(219,214,29)" rx="2" ry="2" />
<text  x="514.01" y="1903.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::RenderTree&gt;::operator (11,132,540 samples, 0.02%)</title><rect x="641.0" y="1749" width="0.3" height="15.0" fill="rgb(247,199,49)" rx="2" ry="2" />
<text  x="644.02" y="1759.5" ></text>
</g>
<g >
<title>std::function&lt;void  (5,401,653 samples, 0.01%)</title><rect x="623.0" y="1749" width="0.1" height="15.0" fill="rgb(213,198,3)" rx="2" ry="2" />
<text  x="626.01" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (12,900,102 samples, 0.03%)</title><rect x="891.1" y="1397" width="0.3" height="15.0" fill="rgb(244,0,1)" rx="2" ry="2" />
<text  x="894.13" y="1407.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::LocalTableStorage,  (25,727,938 samples, 0.05%)</title><rect x="102.1" y="1653" width="0.6" height="15.0" fill="rgb(213,70,47)" rx="2" ry="2" />
<text  x="105.07" y="1663.5" ></text>
</g>
<g >
<title>__asan_memcpy (23,874,927 samples, 0.05%)</title><rect x="271.4" y="1557" width="0.6" height="15.0" fill="rgb(239,114,19)" rx="2" ry="2" />
<text  x="274.42" y="1567.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ChunkMetaData, true&gt;::~vector (7,926,494 samples, 0.02%)</title><rect x="1122.4" y="1701" width="0.2" height="15.0" fill="rgb(233,66,27)" rx="2" ry="2" />
<text  x="1125.39" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (84,880,017 samples, 0.17%)</title><rect x="366.5" y="1605" width="2.0" height="15.0" fill="rgb(237,82,18)" rx="2" ry="2" />
<text  x="369.54" y="1615.5" ></text>
</g>
<g >
<title>__blk_mq_run_hw_queue (39,788,254 samples, 0.08%)</title><rect x="249.7" y="1477" width="0.9" height="15.0" fill="rgb(242,199,51)" rx="2" ry="2" />
<text  x="252.69" y="1487.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1237" width="0.1" height="15.0" fill="rgb(215,75,19)" rx="2" ry="2" />
<text  x="14.25" y="1247.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocate (59,650,790 samples, 0.12%)</title><rect x="486.9" y="1573" width="1.4" height="15.0" fill="rgb(210,167,47)" rx="2" ry="2" />
<text  x="489.90" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;, std::allocator&lt;std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt;::vector (6,710,336 samples, 0.01%)</title><rect x="532.5" y="1701" width="0.2" height="15.0" fill="rgb(254,88,42)" rx="2" ry="2" />
<text  x="535.50" y="1711.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::Reset (56,546,826 samples, 0.11%)</title><rect x="221.5" y="1461" width="1.3" height="15.0" fill="rgb(235,97,15)" rx="2" ry="2" />
<text  x="224.49" y="1471.5" ></text>
</g>
<g >
<title>__lsan::PointsIntoChunk (19,383,806 samples, 0.04%)</title><rect x="49.0" y="2021" width="0.4" height="15.0" fill="rgb(228,128,35)" rx="2" ry="2" />
<text  x="51.99" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnAppendState, std::allocator&lt;duckdb::ColumnAppendState&gt; &gt;::_M_check_len (5,844,239 samples, 0.01%)</title><rect x="451.9" y="1669" width="0.2" height="15.0" fill="rgb(247,86,54)" rx="2" ry="2" />
<text  x="454.95" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::ColumnScanState*&gt; (19,125,990 samples, 0.04%)</title><rect x="226.8" y="1573" width="0.4" height="15.0" fill="rgb(224,49,28)" rx="2" ry="2" />
<text  x="229.79" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (4,848,298 samples, 0.01%)</title><rect x="334.3" y="1285" width="0.1" height="15.0" fill="rgb(208,13,12)" rx="2" ry="2" />
<text  x="337.32" y="1295.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::HasNode (5,365,465 samples, 0.01%)</title><rect x="632.5" y="1765" width="0.1" height="15.0" fill="rgb(250,79,38)" rx="2" ry="2" />
<text  x="635.49" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::InitializeScan (19,329,314 samples, 0.04%)</title><rect x="225.4" y="1685" width="0.4" height="15.0" fill="rgb(227,118,11)" rx="2" ry="2" />
<text  x="228.37" y="1695.5" ></text>
</g>
<g >
<title>duckdb::InsertLocalState::~InsertLocalState (11,191,624 samples, 0.02%)</title><rect x="106.8" y="1733" width="0.3" height="15.0" fill="rgb(235,77,50)" rx="2" ry="2" />
<text  x="109.84" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (9,502,016 samples, 0.02%)</title><rect x="732.2" y="1701" width="0.2" height="15.0" fill="rgb(223,65,35)" rx="2" ry="2" />
<text  x="735.23" y="1711.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::DictionaryBuffer, std::allocator&lt;duckdb::DictionaryBuffer&gt;, duckdb::SelectionVector const&amp;&gt; (21,694,471 samples, 0.04%)</title><rect x="293.9" y="1637" width="0.5" height="15.0" fill="rgb(228,133,44)" rx="2" ry="2" />
<text  x="296.85" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;::reset (51,679,724 samples, 0.10%)</title><rect x="242.5" y="629" width="1.2" height="15.0" fill="rgb(247,83,14)" rx="2" ry="2" />
<text  x="245.52" y="639.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Vector, true&gt;::~vector (7,242,694 samples, 0.01%)</title><rect x="108.5" y="1749" width="0.2" height="15.0" fill="rgb(206,106,39)" rx="2" ry="2" />
<text  x="111.52" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::pa_alloc (104,479,043 samples, 0.20%)</title><rect x="875.4" y="1333" width="2.4" height="15.0" fill="rgb(223,125,22)" rx="2" ry="2" />
<text  x="878.37" y="1343.5" ></text>
</g>
<g >
<title>buildSymbolTable (24,542,542 samples, 0.05%)</title><rect x="1118.5" y="1029" width="0.5" height="15.0" fill="rgb(220,28,4)" rx="2" ry="2" />
<text  x="1121.48" y="1039.5" ></text>
</g>
<g >
<title>duckdb::EntryIndex::GetEntry (16,115,391 samples, 0.03%)</title><rect x="1003.3" y="1717" width="0.4" height="15.0" fill="rgb(249,49,16)" rx="2" ry="2" />
<text  x="1006.28" y="1727.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (68,937,516 samples, 0.13%)</title><rect x="548.3" y="1653" width="1.6" height="15.0" fill="rgb(239,175,26)" rx="2" ry="2" />
<text  x="551.27" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector&gt; (13,219,391 samples, 0.03%)</title><rect x="481.1" y="1653" width="0.3" height="15.0" fill="rgb(240,73,53)" rx="2" ry="2" />
<text  x="484.12" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::AllocatedData, std::allocator&lt;duckdb::AllocatedData&gt; &gt;::emplace_back&lt;duckdb::AllocatedData&gt; (29,378,732 samples, 0.06%)</title><rect x="382.1" y="1813" width="0.6" height="15.0" fill="rgb(219,69,31)" rx="2" ry="2" />
<text  x="385.06" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::Append (56,082,085 samples, 0.11%)</title><rect x="461.4" y="1733" width="1.2" height="15.0" fill="rgb(230,51,53)" rx="2" ry="2" />
<text  x="464.35" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (9,603,025 samples, 0.02%)</title><rect x="938.9" y="1717" width="0.2" height="15.0" fill="rgb(220,59,13)" rx="2" ry="2" />
<text  x="941.92" y="1727.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (418,582,452 samples, 0.82%)</title><rect x="235.9" y="1637" width="9.7" height="15.0" fill="rgb(209,192,4)" rx="2" ry="2" />
<text  x="238.93" y="1647.5" ></text>
</g>
<g >
<title>duckdb::Catalog::GetSystemCatalog (5,449,253 samples, 0.01%)</title><rect x="988.1" y="1749" width="0.1" height="15.0" fill="rgb(245,198,39)" rx="2" ry="2" />
<text  x="991.10" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnDataCopyFunction, std::allocator&lt;duckdb::ColumnDataCopyFunction&gt; &gt;::emplace_back&lt;duckdb::ColumnDataCopyFunction&gt; (5,213,340 samples, 0.01%)</title><rect x="97.2" y="1701" width="0.2" height="15.0" fill="rgb(242,27,31)" rx="2" ry="2" />
<text  x="100.24" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt; &gt; &gt;::~vector (21,409,375 samples, 0.04%)</title><rect x="500.0" y="1445" width="0.5" height="15.0" fill="rgb(238,157,25)" rx="2" ry="2" />
<text  x="502.98" y="1455.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (4,378,020 samples, 0.01%)</title><rect x="896.4" y="1397" width="0.1" height="15.0" fill="rgb(214,152,29)" rx="2" ry="2" />
<text  x="899.39" y="1407.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::ExecutePendingQueryInternal (14,315,899,032 samples, 27.91%)</title><rect x="186.9" y="1973" width="329.3" height="15.0" fill="rgb(209,102,26)" rx="2" ry="2" />
<text  x="189.89" y="1983.5" >duckdb::ClientContext::ExecutePendingQueryIn..</text>
</g>
<g >
<title>duckdb::DataChunk::GetTypes (17,594,899 samples, 0.03%)</title><rect x="865.0" y="1765" width="0.4" height="15.0" fill="rgb(253,35,17)" rx="2" ry="2" />
<text  x="868.01" y="1775.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;duckdb::BlockHandle&gt;::weak_ptr&lt;duckdb::BlockHandle, void&gt; (4,852,199 samples, 0.01%)</title><rect x="871.4" y="1621" width="0.1" height="15.0" fill="rgb(217,137,24)" rx="2" ry="2" />
<text  x="874.38" y="1631.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (7,633,484 samples, 0.01%)</title><rect x="798.2" y="1797" width="0.1" height="15.0" fill="rgb(224,144,48)" rx="2" ry="2" />
<text  x="801.16" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt;, true&gt;::operator (6,574,787 samples, 0.01%)</title><rect x="417.2" y="1605" width="0.1" height="15.0" fill="rgb(233,191,28)" rx="2" ry="2" />
<text  x="420.16" y="1615.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::ResetSink (178,485,924 samples, 0.35%)</title><rect x="96.4" y="1829" width="4.1" height="15.0" fill="rgb(228,51,30)" rx="2" ry="2" />
<text  x="99.42" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_malloc (133,603,726 samples, 0.26%)</title><rect x="875.0" y="1413" width="3.1" height="15.0" fill="rgb(219,199,23)" rx="2" ry="2" />
<text  x="878.00" y="1423.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (50,041,640 samples, 0.10%)</title><rect x="401.2" y="1573" width="1.1" height="15.0" fill="rgb(222,148,44)" rx="2" ry="2" />
<text  x="404.15" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&gt; (16,335,271 samples, 0.03%)</title><rect x="894.3" y="1717" width="0.4" height="15.0" fill="rgb(235,112,37)" rx="2" ry="2" />
<text  x="897.31" y="1727.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (40,309,528 samples, 0.08%)</title><rect x="84.5" y="2021" width="0.9" height="15.0" fill="rgb(251,145,29)" rx="2" ry="2" />
<text  x="87.52" y="2031.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (6,696,073 samples, 0.01%)</title><rect x="472.0" y="1685" width="0.2" height="15.0" fill="rgb(238,140,36)" rx="2" ry="2" />
<text  x="475.00" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::ConstantFoldingRule, std::default_delete&lt;duckdb::ConstantFoldingRule&gt;, void&gt; (7,708,982 samples, 0.02%)</title><rect x="822.0" y="1861" width="0.2" height="15.0" fill="rgb(242,199,48)" rx="2" ry="2" />
<text  x="825.02" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;::reset (247,094,849 samples, 0.48%)</title><rect x="344.1" y="981" width="5.7" height="15.0" fill="rgb(218,134,10)" rx="2" ry="2" />
<text  x="347.08" y="991.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; (8,939,247 samples, 0.02%)</title><rect x="1036.5" y="1333" width="0.2" height="15.0" fill="rgb(240,85,13)" rx="2" ry="2" />
<text  x="1039.47" y="1343.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::SpecificFunctionMatcher&gt; &gt; (4,604,794 samples, 0.01%)</title><rect x="819.8" y="1813" width="0.1" height="15.0" fill="rgb(248,217,2)" rx="2" ry="2" />
<text  x="822.79" y="1823.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (172,466,043 samples, 0.34%)</title><rect x="842.2" y="1861" width="4.0" height="15.0" fill="rgb(228,35,7)" rx="2" ry="2" />
<text  x="845.19" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; (51,406,080 samples, 0.10%)</title><rect x="787.9" y="1813" width="1.2" height="15.0" fill="rgb(248,85,46)" rx="2" ry="2" />
<text  x="790.90" y="1823.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_Tuple_impl (4,455,467 samples, 0.01%)</title><rect x="707.8" y="1813" width="0.1" height="15.0" fill="rgb(209,184,39)" rx="2" ry="2" />
<text  x="710.83" y="1823.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::EndPhase (41,603,114 samples, 0.08%)</title><rect x="1022.9" y="1861" width="0.9" height="15.0" fill="rgb(207,46,34)" rx="2" ry="2" />
<text  x="1025.88" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnAppendState [], std::default_delete&lt;duckdb::ColumnAppendState&gt;, false&gt;::~unique_ptr (32,186,832 samples, 0.06%)</title><rect x="233.6" y="1749" width="0.7" height="15.0" fill="rgb(215,203,21)" rx="2" ry="2" />
<text  x="236.58" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnDataCopyFunction, true&gt;::operator[] (5,608,879 samples, 0.01%)</title><rect x="865.9" y="1765" width="0.1" height="15.0" fill="rgb(244,185,5)" rx="2" ry="2" />
<text  x="868.87" y="1775.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;*&gt; (31,490,367 samples, 0.06%)</title><rect x="1122.2" y="1797" width="0.7" height="15.0" fill="rgb(214,93,6)" rx="2" ry="2" />
<text  x="1125.15" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::HyperLogLog, std::default_delete&lt;duckdb::HyperLogLog&gt; &gt;::~unique_ptr (7,410,394 samples, 0.01%)</title><rect x="236.6" y="1221" width="0.2" height="15.0" fill="rgb(249,152,29)" rx="2" ry="2" />
<text  x="239.60" y="1231.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt;, true&gt;::operator= (6,900,641 samples, 0.01%)</title><rect x="804.9" y="1845" width="0.2" height="15.0" fill="rgb(248,1,42)" rx="2" ry="2" />
<text  x="807.92" y="1855.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::ColumnBinding, unsigned long, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, unsigned long&gt; &gt; &gt;::~unordered_map (6,926,270 samples, 0.01%)</title><rect x="728.4" y="1717" width="0.1" height="15.0" fill="rgb(208,29,42)" rx="2" ry="2" />
<text  x="731.36" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*, true&gt;::~vector (6,534,626 samples, 0.01%)</title><rect x="730.6" y="1797" width="0.2" height="15.0" fill="rgb(236,38,5)" rx="2" ry="2" />
<text  x="733.65" y="1807.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::vector (8,768,217 samples, 0.02%)</title><rect x="575.4" y="1797" width="0.2" height="15.0" fill="rgb(212,9,50)" rx="2" ry="2" />
<text  x="578.36" y="1807.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::Finalize (16,250,643 samples, 0.03%)</title><rect x="592.9" y="1845" width="0.3" height="15.0" fill="rgb(219,102,14)" rx="2" ry="2" />
<text  x="595.87" y="1855.5" ></text>
</g>
<g >
<title>__asan::PoisonShadow (27,547,768 samples, 0.05%)</title><rect x="32.9" y="2021" width="0.6" height="15.0" fill="rgb(211,49,30)" rx="2" ry="2" />
<text  x="35.86" y="2031.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt;::construct&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (5,901,884 samples, 0.01%)</title><rect x="472.0" y="1669" width="0.2" height="15.0" fill="rgb(246,6,40)" rx="2" ry="2" />
<text  x="475.02" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (7,394,084 samples, 0.01%)</title><rect x="614.5" y="1733" width="0.2" height="15.0" fill="rgb(234,141,4)" rx="2" ry="2" />
<text  x="617.52" y="1743.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::ResetFromCache (4,971,011 samples, 0.01%)</title><rect x="494.9" y="1669" width="0.1" height="15.0" fill="rgb(234,70,24)" rx="2" ry="2" />
<text  x="497.92" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::unique_ptr (10,315,831 samples, 0.02%)</title><rect x="530.2" y="1637" width="0.3" height="15.0" fill="rgb(245,0,53)" rx="2" ry="2" />
<text  x="533.24" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::large_malloc (127,571,602 samples, 0.25%)</title><rect x="875.1" y="1381" width="2.9" height="15.0" fill="rgb(212,99,5)" rx="2" ry="2" />
<text  x="878.10" y="1391.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::operator= (5,229,806 samples, 0.01%)</title><rect x="986.9" y="1813" width="0.1" height="15.0" fill="rgb(246,72,2)" rx="2" ry="2" />
<text  x="989.92" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_next_event_compute (5,025,894 samples, 0.01%)</title><rect x="438.4" y="1381" width="0.1" height="15.0" fill="rgb(219,36,18)" rx="2" ry="2" />
<text  x="441.35" y="1391.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::StandardColumnData&gt; &gt;::construct&lt;duckdb::StandardColumnData, duckdb::BlockManager&amp;, duckdb::DataTableInfo&amp;, unsigned long&amp;, unsigned long&amp;, duckdb::LogicalType const&amp;, duckdb::optional_ptr&lt;duckdb::ColumnData&gt;&amp;&gt; (88,913,515 samples, 0.17%)</title><rect x="453.2" y="1573" width="2.1" height="15.0" fill="rgb(225,61,37)" rx="2" ry="2" />
<text  x="456.24" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::isalloc (7,340,018 samples, 0.01%)</title><rect x="401.7" y="1493" width="0.1" height="15.0" fill="rgb(207,98,52)" rx="2" ry="2" />
<text  x="404.66" y="1503.5" ></text>
</g>
<g >
<title>duckdb::EmptyNeedleRemovalRule::~EmptyNeedleRemovalRule (14,165,064 samples, 0.03%)</title><rect x="831.4" y="1717" width="0.3" height="15.0" fill="rgb(253,24,3)" rx="2" ry="2" />
<text  x="834.39" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (9,270,083 samples, 0.02%)</title><rect x="573.3" y="1733" width="0.2" height="15.0" fill="rgb(234,13,43)" rx="2" ry="2" />
<text  x="576.26" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::FilterPushdown::Filter, std::default_delete&lt;duckdb::FilterPushdown::Filter&gt;, true&gt;, true&gt;::vector (4,660,949 samples, 0.01%)</title><rect x="745.2" y="1797" width="0.1" height="15.0" fill="rgb(240,126,22)" rx="2" ry="2" />
<text  x="748.15" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::ColumnDataCollection (62,777,488 samples, 0.12%)</title><rect x="910.0" y="1749" width="1.5" height="15.0" fill="rgb(252,197,44)" rx="2" ry="2" />
<text  x="913.04" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnAppendState&gt; (4,558,187 samples, 0.01%)</title><rect x="339.6" y="1317" width="0.1" height="15.0" fill="rgb(254,194,23)" rx="2" ry="2" />
<text  x="342.64" y="1327.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt; &gt;::get_deleter (4,602,916 samples, 0.01%)</title><rect x="322.6" y="1781" width="0.2" height="15.0" fill="rgb(205,9,47)" rx="2" ry="2" />
<text  x="325.64" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_alloc_event (18,696,255 samples, 0.04%)</title><rect x="367.8" y="1541" width="0.4" height="15.0" fill="rgb(216,80,44)" rx="2" ry="2" />
<text  x="370.78" y="1551.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::InitializeAppend (60,836,130 samples, 0.12%)</title><rect x="195.9" y="1685" width="1.4" height="15.0" fill="rgb(217,5,3)" rx="2" ry="2" />
<text  x="198.95" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_get_from_ind (4,539,321 samples, 0.01%)</title><rect x="897.2" y="1429" width="0.1" height="15.0" fill="rgb(234,22,34)" rx="2" ry="2" />
<text  x="900.16" y="1439.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::unique_ptr (9,347,983 samples, 0.02%)</title><rect x="552.1" y="1765" width="0.2" height="15.0" fill="rgb(215,67,1)" rx="2" ry="2" />
<text  x="555.07" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Catalog::GetCatalogTransaction (188,503,094 samples, 0.37%)</title><rect x="988.6" y="1717" width="4.4" height="15.0" fill="rgb(248,162,50)" rx="2" ry="2" />
<text  x="991.63" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::Append (5,584,676 samples, 0.01%)</title><rect x="105.4" y="1669" width="0.1" height="15.0" fill="rgb(219,35,18)" rx="2" ry="2" />
<text  x="108.39" y="1679.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (16,188,816 samples, 0.03%)</title><rect x="782.1" y="1861" width="0.4" height="15.0" fill="rgb(241,215,39)" rx="2" ry="2" />
<text  x="785.11" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PipelineInitializeTask, std::default_delete&lt;duckdb::PipelineInitializeTask&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PipelineInitializeTask&gt;, void&gt; (5,724,355 samples, 0.01%)</title><rect x="1059.6" y="1781" width="0.1" height="15.0" fill="rgb(220,166,32)" rx="2" ry="2" />
<text  x="1062.55" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::~unique_ptr (9,881,756 samples, 0.02%)</title><rect x="350.6" y="1493" width="0.2" height="15.0" fill="rgb(229,64,43)" rx="2" ry="2" />
<text  x="353.56" y="1503.5" ></text>
</g>
<g >
<title>std::function&lt;void  (68,937,516 samples, 0.13%)</title><rect x="548.3" y="1685" width="1.6" height="15.0" fill="rgb(254,108,42)" rx="2" ry="2" />
<text  x="551.27" y="1695.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;,  (10,430,461 samples, 0.02%)</title><rect x="296.5" y="1557" width="0.3" height="15.0" fill="rgb(246,177,2)" rx="2" ry="2" />
<text  x="299.53" y="1567.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::VectorCache&gt; (5,646,698 samples, 0.01%)</title><rect x="106.9" y="1605" width="0.1" height="15.0" fill="rgb(232,83,0)" rx="2" ry="2" />
<text  x="109.87" y="1615.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_try_lookup_fast (4,886,859 samples, 0.01%)</title><rect x="483.3" y="1397" width="0.1" height="15.0" fill="rgb(208,163,24)" rx="2" ry="2" />
<text  x="486.29" y="1407.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (15,281,390 samples, 0.03%)</title><rect x="718.4" y="1749" width="0.4" height="15.0" fill="rgb(217,11,40)" rx="2" ry="2" />
<text  x="721.41" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RenderTreeNode&gt;, void&gt; (7,623,809 samples, 0.01%)</title><rect x="551.6" y="1717" width="0.1" height="15.0" fill="rgb(234,222,50)" rx="2" ry="2" />
<text  x="554.56" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (11,799,564 samples, 0.02%)</title><rect x="348.7" y="773" width="0.3" height="15.0" fill="rgb(251,117,2)" rx="2" ry="2" />
<text  x="351.72" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::__to_xstring&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, char&gt; (12,475,265 samples, 0.02%)</title><rect x="440.1" y="1621" width="0.3" height="15.0" fill="rgb(205,228,47)" rx="2" ry="2" />
<text  x="443.07" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LogicalInsert::GetColumnBindings (8,679,007 samples, 0.02%)</title><rect x="842.0" y="1861" width="0.2" height="15.0" fill="rgb(227,68,25)" rx="2" ry="2" />
<text  x="844.99" y="1871.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::LocalTableStorage,  (456,088,986 samples, 0.89%)</title><rect x="235.3" y="1781" width="10.5" height="15.0" fill="rgb(229,8,42)" rx="2" ry="2" />
<text  x="238.31" y="1791.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::Get (45,534,540 samples, 0.09%)</title><rect x="712.7" y="1861" width="1.1" height="15.0" fill="rgb(233,85,28)" rx="2" ry="2" />
<text  x="715.73" y="1871.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::SelectionData&gt;::construct&lt;duckdb::SelectionData, unsigned long&amp;&gt; (421,694,888 samples, 0.82%)</title><rect x="302.6" y="1573" width="9.7" height="15.0" fill="rgb(231,30,19)" rx="2" ry="2" />
<text  x="305.60" y="1583.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Binder,  (73,068,185 samples, 0.14%)</title><rect x="1030.4" y="1861" width="1.7" height="15.0" fill="rgb(217,17,54)" rx="2" ry="2" />
<text  x="1033.39" y="1871.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_base (4,719,270 samples, 0.01%)</title><rect x="776.0" y="1733" width="0.1" height="15.0" fill="rgb(233,1,50)" rx="2" ry="2" />
<text  x="778.97" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;::operator= (13,005,742 samples, 0.03%)</title><rect x="965.5" y="1749" width="0.3" height="15.0" fill="rgb(254,29,37)" rx="2" ry="2" />
<text  x="968.54" y="1759.5" ></text>
</g>
<g >
<title>__sanitizer::internal_memcpy (5,389,079 samples, 0.01%)</title><rect x="67.9" y="2021" width="0.1" height="15.0" fill="rgb(226,36,25)" rx="2" ry="2" />
<text  x="70.91" y="2031.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_update_edata_state (5,517,738 samples, 0.01%)</title><rect x="347.1" y="629" width="0.1" height="15.0" fill="rgb(219,194,26)" rx="2" ry="2" />
<text  x="350.06" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;unsigned long, true, false&gt;::operator* (6,591,989 samples, 0.01%)</title><rect x="674.3" y="1797" width="0.1" height="15.0" fill="rgb(243,92,43)" rx="2" ry="2" />
<text  x="677.29" y="1807.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::MappingValue&gt;::operator (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1573" width="1.9" height="15.0" fill="rgb(221,52,1)" rx="2" ry="2" />
<text  x="1120.81" y="1583.5" ></text>
</g>
<g >
<title>duckdb::InCatalogEntry::InCatalogEntry (4,792,219 samples, 0.01%)</title><rect x="1114.6" y="1797" width="0.1" height="15.0" fill="rgb(225,39,32)" rx="2" ry="2" />
<text  x="1117.61" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,384,743 samples, 0.02%)</title><rect x="613.6" y="1733" width="0.2" height="15.0" fill="rgb(213,210,44)" rx="2" ry="2" />
<text  x="616.60" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Binder::BindDefaultValues (82,212,175 samples, 0.16%)</title><rect x="982.4" y="1829" width="1.9" height="15.0" fill="rgb(214,148,30)" rx="2" ry="2" />
<text  x="985.39" y="1839.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (154,444,313 samples, 0.30%)</title><rect x="365.8" y="1829" width="3.6" height="15.0" fill="rgb(227,38,35)" rx="2" ry="2" />
<text  x="368.84" y="1839.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringAppendBase (4,715,471 samples, 0.01%)</title><rect x="1119.2" y="981" width="0.1" height="15.0" fill="rgb(222,145,5)" rx="2" ry="2" />
<text  x="1122.18" y="991.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::InsertGlobalState, duckdb::ClientContext&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt; const&amp;, duckdb::DuckTableEntry&amp;&gt; (119,292,495 samples, 0.23%)</title><rect x="96.8" y="1797" width="2.7" height="15.0" fill="rgb(217,39,38)" rx="2" ry="2" />
<text  x="99.78" y="1807.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;unsigned long const*, unsigned long*, unsigned long&gt; (33,195,985 samples, 0.06%)</title><rect x="651.9" y="1701" width="0.7" height="15.0" fill="rgb(240,174,8)" rx="2" ry="2" />
<text  x="654.87" y="1711.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::unordered_set (14,355,225 samples, 0.03%)</title><rect x="800.6" y="1829" width="0.3" height="15.0" fill="rgb(253,51,27)" rx="2" ry="2" />
<text  x="803.61" y="1839.5" ></text>
</g>
<g >
<title>duckdb::Event::FinishTask (45,694,913 samples, 0.09%)</title><rect x="100.7" y="1829" width="1.0" height="15.0" fill="rgb(223,155,11)" rx="2" ry="2" />
<text  x="103.67" y="1839.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, true&gt;::~vector (6,798,886 samples, 0.01%)</title><rect x="831.6" y="1589" width="0.1" height="15.0" fill="rgb(245,160,36)" rx="2" ry="2" />
<text  x="834.56" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::unique_ptr (4,497,474 samples, 0.01%)</title><rect x="622.0" y="1653" width="0.1" height="15.0" fill="rgb(239,28,10)" rx="2" ry="2" />
<text  x="625.02" y="1663.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (134,237,332 samples, 0.26%)</title><rect x="548.0" y="1733" width="3.1" height="15.0" fill="rgb(219,194,8)" rx="2" ry="2" />
<text  x="550.99" y="1743.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~_Deque_base (8,576,322 samples, 0.02%)</title><rect x="501.1" y="1765" width="0.2" height="15.0" fill="rgb(221,86,4)" rx="2" ry="2" />
<text  x="504.12" y="1775.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::operator= (8,225,424 samples, 0.02%)</title><rect x="301.7" y="1685" width="0.2" height="15.0" fill="rgb(223,143,15)" rx="2" ry="2" />
<text  x="304.71" y="1695.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, duckdb::ReferenceHashFunction&lt;duckdb::SchemaCatalogEntry&gt;, duckdb::ReferenceEquality&lt;duckdb::SchemaCatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt; &gt; &gt;::~unordered_set (15,494,328 samples, 0.03%)</title><rect x="1008.2" y="1765" width="0.3" height="15.0" fill="rgb(227,40,19)" rx="2" ry="2" />
<text  x="1011.19" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (7,468,253 samples, 0.01%)</title><rect x="923.7" y="1813" width="0.1" height="15.0" fill="rgb(241,212,26)" rx="2" ry="2" />
<text  x="926.67" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Vector::Vector (20,706,818 samples, 0.04%)</title><rect x="488.8" y="1685" width="0.5" height="15.0" fill="rgb(223,19,38)" rx="2" ry="2" />
<text  x="491.84" y="1695.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (9,438,159 samples, 0.02%)</title><rect x="1025.2" y="1781" width="0.2" height="15.0" fill="rgb(252,39,27)" rx="2" ry="2" />
<text  x="1028.20" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_event (11,476,535 samples, 0.02%)</title><rect x="493.7" y="1413" width="0.3" height="15.0" fill="rgb(229,39,4)" rx="2" ry="2" />
<text  x="496.72" y="1423.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ChunkMetaData, true&gt;::~vector (15,191,924 samples, 0.03%)</title><rect x="340.9" y="1189" width="0.4" height="15.0" fill="rgb(249,33,6)" rx="2" ry="2" />
<text  x="343.94" y="1199.5" ></text>
</g>
<g >
<title>std::function&lt;void  (20,420,635 samples, 0.04%)</title><rect x="1067.1" y="1717" width="0.5" height="15.0" fill="rgb(247,123,41)" rx="2" ry="2" />
<text  x="1070.10" y="1727.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;std::shared_ptr&lt;duckdb::Task&gt;, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::try_dequeue_from_producer&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; (50,766,881 samples, 0.10%)</title><rect x="504.3" y="1861" width="1.1" height="15.0" fill="rgb(218,70,53)" rx="2" ry="2" />
<text  x="507.26" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_relocate (39,938,474 samples, 0.08%)</title><rect x="629.2" y="1717" width="1.0" height="15.0" fill="rgb(226,92,25)" rx="2" ry="2" />
<text  x="632.24" y="1727.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::TemplatedScan&lt; (762,434,572 samples, 1.49%)</title><rect x="199.4" y="1701" width="17.6" height="15.0" fill="rgb(223,148,21)" rx="2" ry="2" />
<text  x="202.42" y="1711.5" ></text>
</g>
<g >
<title>duckdb::CollectionScanState::GetAdaptiveFilter (4,404,614 samples, 0.01%)</title><rect x="199.6" y="1685" width="0.1" height="15.0" fill="rgb(223,201,31)" rx="2" ry="2" />
<text  x="202.59" y="1695.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (87,759,926 samples, 0.17%)</title><rect x="492.4" y="1669" width="2.1" height="15.0" fill="rgb(233,88,28)" rx="2" ry="2" />
<text  x="495.45" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; &gt;::_S_relocate (4,567,586 samples, 0.01%)</title><rect x="905.9" y="1685" width="0.1" height="15.0" fill="rgb(254,22,11)" rx="2" ry="2" />
<text  x="908.85" y="1695.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;*&gt; (26,824,257 samples, 0.05%)</title><rect x="915.8" y="1653" width="0.6" height="15.0" fill="rgb(210,59,3)" rx="2" ry="2" />
<text  x="918.81" y="1663.5" ></text>
</g>
<g >
<title>std::function&lt;void  (17,449,468 samples, 0.03%)</title><rect x="727.4" y="1701" width="0.4" height="15.0" fill="rgb(217,48,4)" rx="2" ry="2" />
<text  x="730.44" y="1711.5" ></text>
</g>
<g >
<title>duckdb::FilterPushdown::PushdownProjection (113,762,837 samples, 0.22%)</title><rect x="746.4" y="1765" width="2.6" height="15.0" fill="rgb(210,124,11)" rx="2" ry="2" />
<text  x="749.38" y="1775.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::CompressionAppendState, duckdb::BufferHandle&gt; (5,829,653 samples, 0.01%)</title><rect x="196.6" y="1653" width="0.1" height="15.0" fill="rgb(252,179,21)" rx="2" ry="2" />
<text  x="199.61" y="1663.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_salloc (7,404,622 samples, 0.01%)</title><rect x="482.2" y="1317" width="0.1" height="15.0" fill="rgb(235,187,5)" rx="2" ry="2" />
<text  x="485.17" y="1327.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (7,413,524 samples, 0.01%)</title><rect x="166.0" y="1861" width="0.1" height="15.0" fill="rgb(235,169,33)" rx="2" ry="2" />
<text  x="168.96" y="1871.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (9,008,921 samples, 0.02%)</title><rect x="772.8" y="1861" width="0.2" height="15.0" fill="rgb(235,172,15)" rx="2" ry="2" />
<text  x="775.78" y="1871.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ProgressBar, std::default_delete&lt;duckdb::ProgressBar&gt; &gt;::get (34,371,451 samples, 0.07%)</title><rect x="512.6" y="1893" width="0.8" height="15.0" fill="rgb(215,157,30)" rx="2" ry="2" />
<text  x="515.58" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::resize (60,927,509 samples, 0.12%)</title><rect x="616.6" y="1781" width="1.4" height="15.0" fill="rgb(210,164,3)" rx="2" ry="2" />
<text  x="619.57" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::extent_record (64,414,426 samples, 0.13%)</title><rect x="346.7" y="677" width="1.5" height="15.0" fill="rgb(231,37,15)" rx="2" ry="2" />
<text  x="349.71" y="687.5" ></text>
</g>
<g >
<title>duckdb::DuckSchemaEntry::AddEntryInternal (64,667,263 samples, 0.13%)</title><rect x="1112.9" y="1845" width="1.5" height="15.0" fill="rgb(228,141,36)" rx="2" ry="2" />
<text  x="1115.92" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::~unique_ptr (8,939,247 samples, 0.02%)</title><rect x="1036.5" y="1301" width="0.2" height="15.0" fill="rgb(228,58,48)" rx="2" ry="2" />
<text  x="1039.47" y="1311.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::SelectStatement&gt;::operator (28,970,549 samples, 0.06%)</title><rect x="1038.3" y="1781" width="0.7" height="15.0" fill="rgb(227,83,31)" rx="2" ry="2" />
<text  x="1041.33" y="1791.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::LogicalExpressionGet, std::default_delete&lt;duckdb::LogicalExpressionGet&gt; &gt;::__uniq_ptr_impl (4,981,811 samples, 0.01%)</title><rect x="975.6" y="1685" width="0.1" height="15.0" fill="rgb(216,199,22)" rx="2" ry="2" />
<text  x="978.57" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_impl (9,035,052 samples, 0.02%)</title><rect x="401.9" y="1429" width="0.2" height="15.0" fill="rgb(205,171,42)" rx="2" ry="2" />
<text  x="404.92" y="1439.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::EndOperator (36,273,065 samples, 0.07%)</title><rect x="420.1" y="1813" width="0.9" height="15.0" fill="rgb(241,217,19)" rx="2" ry="2" />
<text  x="423.13" y="1823.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::unordered_set (7,153,246 samples, 0.01%)</title><rect x="858.2" y="1813" width="0.2" height="15.0" fill="rgb(236,184,14)" rx="2" ry="2" />
<text  x="861.19" y="1823.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; (30,782,963 samples, 0.06%)</title><rect x="1122.2" y="1781" width="0.7" height="15.0" fill="rgb(232,167,13)" rx="2" ry="2" />
<text  x="1125.17" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Vector::ResetFromCache (15,461,875 samples, 0.03%)</title><rect x="419.4" y="1829" width="0.4" height="15.0" fill="rgb(251,126,51)" rx="2" ry="2" />
<text  x="422.43" y="1839.5" ></text>
</g>
<g >
<title>duckdb::DataTable::AppendToIndexes (5,262,614 samples, 0.01%)</title><rect x="231.7" y="1685" width="0.1" height="15.0" fill="rgb(242,132,5)" rx="2" ry="2" />
<text  x="234.70" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformModifiers (21,796,701 samples, 0.04%)</title><rect x="527.0" y="1765" width="0.5" height="15.0" fill="rgb(249,75,34)" rx="2" ry="2" />
<text  x="530.03" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorMetaData&gt;::construct&lt;duckdb::VectorMetaData, duckdb::VectorMetaData const&amp;&gt; (7,624,630 samples, 0.01%)</title><rect x="383.3" y="1813" width="0.2" height="15.0" fill="rgb(205,133,3)" rx="2" ry="2" />
<text  x="386.34" y="1823.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::Verify (81,860,082 samples, 0.16%)</title><rect x="416.4" y="1701" width="1.9" height="15.0" fill="rgb(222,99,46)" rx="2" ry="2" />
<text  x="419.37" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (13,548,577 samples, 0.03%)</title><rect x="367.8" y="1493" width="0.3" height="15.0" fill="rgb(230,12,14)" rx="2" ry="2" />
<text  x="370.82" y="1503.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (29,811,168 samples, 0.06%)</title><rect x="10.5" y="2005" width="0.7" height="15.0" fill="rgb(232,106,5)" rx="2" ry="2" />
<text  x="13.55" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_realloc_insert&lt;duckdb::LogicalType const&amp;&gt; (10,189,442 samples, 0.02%)</title><rect x="375.6" y="1877" width="0.2" height="15.0" fill="rgb(245,192,13)" rx="2" ry="2" />
<text  x="378.59" y="1887.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (8,458,388 samples, 0.02%)</title><rect x="467.7" y="1733" width="0.2" height="15.0" fill="rgb(224,154,45)" rx="2" ry="2" />
<text  x="470.71" y="1743.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (65,780,571 samples, 0.13%)</title><rect x="344.4" y="805" width="1.5" height="15.0" fill="rgb(212,86,43)" rx="2" ry="2" />
<text  x="347.39" y="815.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::FunctionMatcher&gt;::operator (7,661,959 samples, 0.01%)</title><rect x="832.6" y="1557" width="0.2" height="15.0" fill="rgb(228,215,5)" rx="2" ry="2" />
<text  x="835.57" y="1567.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::BlockHandle&gt;::shared_ptr&lt;std::allocator&lt;duckdb::BlockHandle&gt;, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (45,596,124 samples, 0.09%)</title><rect x="441.0" y="1621" width="1.0" height="15.0" fill="rgb(225,99,22)" rx="2" ry="2" />
<text  x="443.97" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LocalTableManager::~LocalTableManager (9,079,958 samples, 0.02%)</title><rect x="327.2" y="1557" width="0.2" height="15.0" fill="rgb(206,15,0)" rx="2" ry="2" />
<text  x="330.24" y="1567.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::FileBuffer (25,060,435 samples, 0.05%)</title><rect x="103.0" y="1573" width="0.6" height="15.0" fill="rgb(211,9,36)" rx="2" ry="2" />
<text  x="106.02" y="1583.5" ></text>
</g>
<g >
<title>std::function&lt;void  (28,169,386 samples, 0.05%)</title><rect x="750.6" y="1749" width="0.6" height="15.0" fill="rgb(205,53,52)" rx="2" ry="2" />
<text  x="753.58" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6,580,406 samples, 0.01%)</title><rect x="480.0" y="1781" width="0.1" height="15.0" fill="rgb(207,177,13)" rx="2" ry="2" />
<text  x="482.96" y="1791.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ChunkMetaData*, duckdb::ChunkMetaData&gt; (11,700,055 samples, 0.02%)</title><rect x="341.0" y="1157" width="0.2" height="15.0" fill="rgb(243,179,8)" rx="2" ry="2" />
<text  x="343.95" y="1167.5" ></text>
</g>
<g >
<title>duckdb::FieldReader::ReadRequired&lt;duckdb::ExpressionType&gt; (6,829,964 samples, 0.01%)</title><rect x="588.7" y="1845" width="0.2" height="15.0" fill="rgb(222,98,8)" rx="2" ry="2" />
<text  x="591.73" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (5,571,187 samples, 0.01%)</title><rect x="878.8" y="1397" width="0.1" height="15.0" fill="rgb(231,187,45)" rx="2" ry="2" />
<text  x="881.75" y="1407.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::~ColumnSegment (91,348,901 samples, 0.18%)</title><rect x="241.8" y="773" width="2.1" height="15.0" fill="rgb(224,166,53)" rx="2" ry="2" />
<text  x="244.77" y="783.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Event*, std::allocator&lt;duckdb::Event*&gt; &gt;::_M_check_len (11,535,612 samples, 0.02%)</title><rect x="1046.7" y="1749" width="0.2" height="15.0" fill="rgb(235,158,0)" rx="2" ry="2" />
<text  x="1049.66" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Vector&gt; &gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (23,797,651 samples, 0.05%)</title><rect x="488.8" y="1717" width="0.5" height="15.0" fill="rgb(216,59,54)" rx="2" ry="2" />
<text  x="491.78" y="1727.5" ></text>
</g>
<g >
<title>duckdb::DuckTransaction::DuckTransaction (124,536,641 samples, 0.24%)</title><rect x="996.3" y="1653" width="2.9" height="15.0" fill="rgb(223,126,26)" rx="2" ry="2" />
<text  x="999.33" y="1663.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; const&amp;&gt; (6,717,810 samples, 0.01%)</title><rect x="733.0" y="1669" width="0.2" height="15.0" fill="rgb(205,32,35)" rx="2" ry="2" />
<text  x="736.00" y="1679.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Verify (14,907,985 samples, 0.03%)</title><rect x="459.4" y="1781" width="0.4" height="15.0" fill="rgb(230,104,49)" rx="2" ry="2" />
<text  x="462.42" y="1791.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::~DataChunk (73,093,979 samples, 0.14%)</title><rect x="297.3" y="1717" width="1.7" height="15.0" fill="rgb(210,137,4)" rx="2" ry="2" />
<text  x="300.28" y="1727.5" ></text>
</g>
<g >
<title>duckdb::TopN::Optimize (22,418,674 samples, 0.04%)</title><rect x="768.4" y="1813" width="0.5" height="15.0" fill="rgb(239,213,31)" rx="2" ry="2" />
<text  x="771.35" y="1823.5" ></text>
</g>
<g >
<title>duckdb::FilterPullup::Rewrite (22,837,425 samples, 0.04%)</title><rect x="744.0" y="1781" width="0.5" height="15.0" fill="rgb(225,74,18)" rx="2" ry="2" />
<text  x="746.99" y="1791.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::FunctionExpressionMatcher&gt; (7,057,142 samples, 0.01%)</title><rect x="796.8" y="1845" width="0.1" height="15.0" fill="rgb(251,53,25)" rx="2" ry="2" />
<text  x="799.77" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_move_assign (4,366,290 samples, 0.01%)</title><rect x="910.5" y="1685" width="0.1" height="15.0" fill="rgb(230,93,23)" rx="2" ry="2" />
<text  x="913.47" y="1695.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; const&amp;&gt; (9,814,315 samples, 0.02%)</title><rect x="733.0" y="1685" width="0.2" height="15.0" fill="rgb(252,99,36)" rx="2" ry="2" />
<text  x="736.00" y="1695.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::find (37,739,087 samples, 0.07%)</title><rect x="675.2" y="1797" width="0.8" height="15.0" fill="rgb(246,21,18)" rx="2" ry="2" />
<text  x="678.17" y="1807.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;, true&gt;::~vector (22,056,679 samples, 0.04%)</title><rect x="500.0" y="1461" width="0.5" height="15.0" fill="rgb(250,191,0)" rx="2" ry="2" />
<text  x="502.96" y="1471.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::inner_enqueue&lt; (8,676,888 samples, 0.02%)</title><rect x="470.2" y="1573" width="0.2" height="15.0" fill="rgb(225,226,32)" rx="2" ry="2" />
<text  x="473.20" y="1583.5" ></text>
</g>
<g >
<title>[unknown] (4,567,963 samples, 0.01%)</title><rect x="33.5" y="1989" width="0.1" height="15.0" fill="rgb(208,164,33)" rx="2" ry="2" />
<text  x="36.50" y="1999.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (41,376,566 samples, 0.08%)</title><rect x="192.8" y="1653" width="0.9" height="15.0" fill="rgb(243,69,26)" rx="2" ry="2" />
<text  x="195.78" y="1663.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; &gt; (4,421,976 samples, 0.01%)</title><rect x="1073.2" y="1701" width="0.2" height="15.0" fill="rgb(228,67,42)" rx="2" ry="2" />
<text  x="1076.25" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ConjunctionExpressionMatcher::~ConjunctionExpressionMatcher (8,716,164 samples, 0.02%)</title><rect x="832.1" y="1605" width="0.2" height="15.0" fill="rgb(213,206,23)" rx="2" ry="2" />
<text  x="835.14" y="1615.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::Flush (1,859,450,868 samples, 3.63%)</title><rect x="191.9" y="1797" width="42.8" height="15.0" fill="rgb(231,85,43)" rx="2" ry="2" />
<text  x="194.93" y="1807.5" >duck..</text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;::~shared_ptr (10,282,095 samples, 0.02%)</title><rect x="481.1" y="1589" width="0.3" height="15.0" fill="rgb(253,128,49)" rx="2" ry="2" />
<text  x="484.12" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PipelineRenderNode, std::default_delete&lt;duckdb::PipelineRenderNode&gt; &gt;::~unique_ptr (6,320,636 samples, 0.01%)</title><rect x="1069.8" y="1749" width="0.1" height="15.0" fill="rgb(225,112,50)" rx="2" ry="2" />
<text  x="1072.79" y="1759.5" ></text>
</g>
<g >
<title>duckdb::DataTable::ScanTableSegment (2,670,195,456 samples, 5.21%)</title><rect x="255.3" y="1733" width="61.5" height="15.0" fill="rgb(206,82,6)" rx="2" ry="2" />
<text  x="258.34" y="1743.5" >duckdb..</text>
</g>
<g >
<title>duckdb::ConcurrentQueue::DequeueFromProducer (5,092,368 samples, 0.01%)</title><rect x="354.8" y="1845" width="0.1" height="15.0" fill="rgb(206,209,6)" rx="2" ry="2" />
<text  x="357.80" y="1855.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;*&gt; (7,688,930 samples, 0.01%)</title><rect x="980.7" y="1669" width="0.2" height="15.0" fill="rgb(208,190,31)" rx="2" ry="2" />
<text  x="983.70" y="1679.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::EndOperator (50,569,293 samples, 0.10%)</title><rect x="361.4" y="1845" width="1.2" height="15.0" fill="rgb(220,156,38)" rx="2" ry="2" />
<text  x="364.41" y="1855.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::Elapsed (4,917,523 samples, 0.01%)</title><rect x="361.4" y="1829" width="0.1" height="15.0" fill="rgb(246,85,26)" rx="2" ry="2" />
<text  x="364.41" y="1839.5" ></text>
</g>
<g >
<title>duckdb::Value::Value (28,994,495 samples, 0.06%)</title><rect x="528.1" y="1685" width="0.7" height="15.0" fill="rgb(215,37,28)" rx="2" ry="2" />
<text  x="531.12" y="1695.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (7,296,029 samples, 0.01%)</title><rect x="516.9" y="1861" width="0.1" height="15.0" fill="rgb(247,189,34)" rx="2" ry="2" />
<text  x="519.85" y="1871.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (42,682,130 samples, 0.08%)</title><rect x="168.2" y="2021" width="1.0" height="15.0" fill="rgb(226,144,11)" rx="2" ry="2" />
<text  x="171.19" y="2031.5" ></text>
</g>
<g >
<title>duckdb::Binding::HasMatchingBinding (11,708,947 samples, 0.02%)</title><rect x="954.9" y="1589" width="0.3" height="15.0" fill="rgb(234,115,19)" rx="2" ry="2" />
<text  x="957.94" y="1599.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (37,727,035 samples, 0.07%)</title><rect x="687.8" y="1797" width="0.9" height="15.0" fill="rgb(220,126,1)" rx="2" ry="2" />
<text  x="690.80" y="1807.5" ></text>
</g>
<g >
<title>duckdb::InterruptState::~InterruptState (4,862,735 samples, 0.01%)</title><rect x="335.6" y="1685" width="0.1" height="15.0" fill="rgb(208,74,27)" rx="2" ry="2" />
<text  x="338.63" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::SpecificExpressionTypeMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt; &gt; &gt;, void&gt; (14,466,333 samples, 0.03%)</title><rect x="799.5" y="1845" width="0.3" height="15.0" fill="rgb(228,93,38)" rx="2" ry="2" />
<text  x="802.47" y="1855.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::LogicalOperator&gt;::operator (65,826,747 samples, 0.13%)</title><rect x="1035.8" y="1861" width="1.6" height="15.0" fill="rgb(243,156,45)" rx="2" ry="2" />
<text  x="1038.84" y="1871.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::PipelineFinishEvent, std::allocator&lt;duckdb::PipelineFinishEvent&gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (26,179,902 samples, 0.05%)</title><rect x="1050.5" y="1797" width="0.7" height="15.0" fill="rgb(252,95,47)" rx="2" ry="2" />
<text  x="1053.55" y="1807.5" ></text>
</g>
<g >
<title>do_page_fault (20,830,788 samples, 0.04%)</title><rect x="55.9" y="1989" width="0.5" height="15.0" fill="rgb(232,97,36)" rx="2" ry="2" />
<text  x="58.90" y="1999.5" ></text>
</g>
<g >
<title>duckdb::OperatorInformation::~OperatorInformation (30,851,871 samples, 0.06%)</title><rect x="499.8" y="1637" width="0.7" height="15.0" fill="rgb(209,169,33)" rx="2" ry="2" />
<text  x="502.81" y="1647.5" ></text>
</g>
<g >
<title>duckdb::UndoBuffer::UndoBuffer (48,585,719 samples, 0.09%)</title><rect x="989.3" y="1589" width="1.1" height="15.0" fill="rgb(239,15,4)" rx="2" ry="2" />
<text  x="992.31" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::vector (5,860,095 samples, 0.01%)</title><rect x="615.3" y="1765" width="0.1" height="15.0" fill="rgb(245,222,30)" rx="2" ry="2" />
<text  x="618.27" y="1775.5" ></text>
</g>
<g >
<title>duckdb::MetaTransaction::SetActiveQuery (4,743,233 samples, 0.01%)</title><rect x="544.7" y="1893" width="0.1" height="15.0" fill="rgb(245,186,40)" rx="2" ry="2" />
<text  x="547.71" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;*, std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, void, bool&gt; (4,391,512 samples, 0.01%)</title><rect x="553.2" y="1749" width="0.1" height="15.0" fill="rgb(217,87,13)" rx="2" ry="2" />
<text  x="556.19" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ColumnSegment&gt;, void&gt; (11,032,346 samples, 0.02%)</title><rect x="446.1" y="1637" width="0.2" height="15.0" fill="rgb(226,39,4)" rx="2" ry="2" />
<text  x="449.09" y="1647.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (9,130,186 samples, 0.02%)</title><rect x="80.6" y="1989" width="0.2" height="15.0" fill="rgb(235,155,35)" rx="2" ry="2" />
<text  x="83.60" y="1999.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics&gt;, false&gt;::unique_ptr (7,415,478 samples, 0.01%)</title><rect x="442.6" y="1621" width="0.1" height="15.0" fill="rgb(237,200,6)" rx="2" ry="2" />
<text  x="445.56" y="1631.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::CreatePreparedStatement (5,101,944 samples, 0.01%)</title><rect x="75.9" y="2021" width="0.2" height="15.0" fill="rgb(230,41,49)" rx="2" ry="2" />
<text  x="78.94" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="213" width="0.1" height="15.0" fill="rgb(227,112,39)" rx="2" ry="2" />
<text  x="14.25" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (10,906,426 samples, 0.02%)</title><rect x="707.2" y="1797" width="0.3" height="15.0" fill="rgb(231,157,29)" rx="2" ry="2" />
<text  x="710.21" y="1807.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionMatcher&gt;::operator (6,564,243 samples, 0.01%)</title><rect x="830.6" y="1637" width="0.2" height="15.0" fill="rgb(218,173,7)" rx="2" ry="2" />
<text  x="833.61" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1477" width="0.1" height="15.0" fill="rgb(251,43,51)" rx="2" ry="2" />
<text  x="14.25" y="1487.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::unique_ptr (11,055,771 samples, 0.02%)</title><rect x="976.5" y="1733" width="0.3" height="15.0" fill="rgb(207,0,42)" rx="2" ry="2" />
<text  x="979.52" y="1743.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (13,632,664 samples, 0.03%)</title><rect x="750.0" y="1749" width="0.3" height="15.0" fill="rgb(212,22,36)" rx="2" ry="2" />
<text  x="752.99" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::operator= (5,407,295 samples, 0.01%)</title><rect x="804.4" y="1845" width="0.1" height="15.0" fill="rgb(239,47,7)" rx="2" ry="2" />
<text  x="807.40" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt; &gt; &gt;::operator= (6,283,050 samples, 0.01%)</title><rect x="541.9" y="1941" width="0.1" height="15.0" fill="rgb(222,170,43)" rx="2" ry="2" />
<text  x="544.90" y="1951.5" ></text>
</g>
<g >
<title>__do_page_fault (8,771,019 samples, 0.02%)</title><rect x="67.6" y="1973" width="0.2" height="15.0" fill="rgb(237,217,6)" rx="2" ry="2" />
<text  x="70.59" y="1983.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (5,878,234 samples, 0.01%)</title><rect x="536.0" y="1717" width="0.2" height="15.0" fill="rgb(212,164,5)" rx="2" ry="2" />
<text  x="539.05" y="1727.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;duckdb::BoundColumnRefExpression&gt; &gt;::_M_ptr (4,457,681 samples, 0.01%)</title><rect x="587.8" y="1765" width="0.1" height="15.0" fill="rgb(225,152,33)" rx="2" ry="2" />
<text  x="590.78" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::QueryProfiler&gt;::construct&lt;duckdb::QueryProfiler, duckdb::ClientContext&amp;&gt; (18,737,078 samples, 0.04%)</title><rect x="353.6" y="1765" width="0.4" height="15.0" fill="rgb(206,203,18)" rx="2" ry="2" />
<text  x="356.55" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_default (30,461,292 samples, 0.06%)</title><rect x="297.6" y="1381" width="0.7" height="15.0" fill="rgb(246,30,46)" rx="2" ry="2" />
<text  x="300.55" y="1391.5" ></text>
</g>
<g >
<title>std::operator==&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; (4,508,202 samples, 0.01%)</title><rect x="376.4" y="1909" width="0.1" height="15.0" fill="rgb(230,31,3)" rx="2" ry="2" />
<text  x="379.42" y="1919.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::HTTPState&gt; (10,291,689 samples, 0.02%)</title><rect x="1040.3" y="1893" width="0.2" height="15.0" fill="rgb(249,223,29)" rx="2" ry="2" />
<text  x="1043.28" y="1903.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::ColumnDataCollectionSegment (72,939,442 samples, 0.14%)</title><rect x="866.7" y="1733" width="1.7" height="15.0" fill="rgb(250,34,22)" rx="2" ry="2" />
<text  x="869.71" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="741" width="0.1" height="15.0" fill="rgb(207,175,47)" rx="2" ry="2" />
<text  x="14.25" y="751.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (7,516,946 samples, 0.01%)</title><rect x="750.1" y="1685" width="0.1" height="15.0" fill="rgb(210,210,54)" rx="2" ry="2" />
<text  x="753.08" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (6,534,833 samples, 0.01%)</title><rect x="635.2" y="1733" width="0.2" height="15.0" fill="rgb(237,3,44)" rx="2" ry="2" />
<text  x="638.23" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::ExpressionExecutor (4,660,951 samples, 0.01%)</title><rect x="490.9" y="1765" width="0.1" height="15.0" fill="rgb(227,39,11)" rx="2" ry="2" />
<text  x="493.89" y="1775.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (5,421,520 samples, 0.01%)</title><rect x="380.2" y="1685" width="0.1" height="15.0" fill="rgb(234,8,44)" rx="2" ry="2" />
<text  x="383.17" y="1695.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (25,019,355 samples, 0.05%)</title><rect x="107.3" y="1733" width="0.5" height="15.0" fill="rgb(206,198,39)" rx="2" ry="2" />
<text  x="110.26" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BlockManager, std::default_delete&lt;duckdb::BlockManager&gt;, true&gt;::operator* (6,165,743 samples, 0.01%)</title><rect x="880.4" y="1637" width="0.1" height="15.0" fill="rgb(247,132,47)" rx="2" ry="2" />
<text  x="883.41" y="1647.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::Vector*&gt; (21,279,072 samples, 0.04%)</title><rect x="895.3" y="1701" width="0.5" height="15.0" fill="rgb(207,225,7)" rx="2" ry="2" />
<text  x="898.30" y="1711.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (5,306,276 samples, 0.01%)</title><rect x="708.2" y="1781" width="0.1" height="15.0" fill="rgb(230,109,44)" rx="2" ry="2" />
<text  x="711.22" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::unique_ptr (13,373,860 samples, 0.03%)</title><rect x="1035.4" y="1877" width="0.3" height="15.0" fill="rgb(236,8,17)" rx="2" ry="2" />
<text  x="1038.44" y="1887.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::UnifiedVectorFormat*, duckdb::UnifiedVectorFormat&gt; (11,992,911 samples, 0.02%)</title><rect x="374.7" y="1877" width="0.3" height="15.0" fill="rgb(234,210,37)" rx="2" ry="2" />
<text  x="377.69" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_node (17,114,756 samples, 0.03%)</title><rect x="696.9" y="1749" width="0.4" height="15.0" fill="rgb(251,211,25)" rx="2" ry="2" />
<text  x="699.87" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;::~unique_ptr (27,220,437 samples, 0.05%)</title><rect x="499.8" y="1525" width="0.7" height="15.0" fill="rgb(240,121,7)" rx="2" ry="2" />
<text  x="502.84" y="1535.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;,  (472,022,114 samples, 0.92%)</title><rect x="200.6" y="1573" width="10.8" height="15.0" fill="rgb(207,48,2)" rx="2" ry="2" />
<text  x="203.59" y="1583.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::CatalogLookup&gt; &gt;::construct&lt;duckdb::CatalogLookup, duckdb::Catalog&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (5,542,619 samples, 0.01%)</title><rect x="1010.1" y="1765" width="0.1" height="15.0" fill="rgb(228,105,42)" rx="2" ry="2" />
<text  x="1013.08" y="1775.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (78,973,444 samples, 0.15%)</title><rect x="873.0" y="1429" width="1.8" height="15.0" fill="rgb(224,210,23)" rx="2" ry="2" />
<text  x="876.02" y="1439.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::Pipeline*, std::pair&lt;duckdb::Pipeline* const, duckdb::Pipeline*&gt;, std::allocator&lt;std::pair&lt;duckdb::Pipeline* const, duckdb::Pipeline*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::Pipeline*&gt;, std::hash&lt;duckdb::Pipeline*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (4,467,149 samples, 0.01%)</title><rect x="1096.8" y="1717" width="0.1" height="15.0" fill="rgb(219,154,28)" rx="2" ry="2" />
<text  x="1099.79" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;*&gt; (10,479,785 samples, 0.02%)</title><rect x="915.4" y="1621" width="0.3" height="15.0" fill="rgb(251,52,3)" rx="2" ry="2" />
<text  x="918.42" y="1631.5" ></text>
</g>
<g >
<title>std::function&lt;void  (19,323,887 samples, 0.04%)</title><rect x="834.5" y="1781" width="0.4" height="15.0" fill="rgb(238,45,5)" rx="2" ry="2" />
<text  x="837.48" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Pipeline,  (5,037,967 samples, 0.01%)</title><rect x="1094.6" y="1637" width="0.1" height="15.0" fill="rgb(209,213,48)" rx="2" ry="2" />
<text  x="1097.58" y="1647.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::SetNode (4,443,670 samples, 0.01%)</title><rect x="634.5" y="1733" width="0.1" height="15.0" fill="rgb(208,203,26)" rx="2" ry="2" />
<text  x="637.51" y="1743.5" ></text>
</g>
<g >
<title>duckdb::PreservedError::operator= (7,515,381 samples, 0.01%)</title><rect x="231.9" y="1685" width="0.1" height="15.0" fill="rgb(241,201,17)" rx="2" ry="2" />
<text  x="234.86" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int []&gt; &gt;::unique_ptr&lt;unsigned int*, std::default_delete&lt;unsigned int []&gt;, void, bool&gt; (8,457,052 samples, 0.02%)</title><rect x="202.0" y="1477" width="0.2" height="15.0" fill="rgb(238,218,45)" rx="2" ry="2" />
<text  x="204.96" y="1487.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetMapping (37,079,964 samples, 0.07%)</title><rect x="1002.4" y="1717" width="0.9" height="15.0" fill="rgb(252,76,5)" rx="2" ry="2" />
<text  x="1005.42" y="1727.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorCacheBuffer&gt;::shared_ptr&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (144,565,112 samples, 0.28%)</title><rect x="889.6" y="1685" width="3.3" height="15.0" fill="rgb(242,215,34)" rx="2" ry="2" />
<text  x="892.61" y="1695.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Free (41,863,454 samples, 0.08%)</title><rect x="297.5" y="1413" width="1.0" height="15.0" fill="rgb(218,10,1)" rx="2" ry="2" />
<text  x="300.52" y="1423.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::AppendSegment (4,693,102 samples, 0.01%)</title><rect x="104.3" y="1637" width="0.1" height="15.0" fill="rgb(225,100,12)" rx="2" ry="2" />
<text  x="107.28" y="1647.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (9,959,688 samples, 0.02%)</title><rect x="166.7" y="1877" width="0.2" height="15.0" fill="rgb(215,15,39)" rx="2" ry="2" />
<text  x="169.67" y="1887.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundExpression, std::default_delete&lt;duckdb::BoundExpression&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BoundExpression&gt;, void&gt; (5,481,456 samples, 0.01%)</title><rect x="934.8" y="1685" width="0.2" height="15.0" fill="rgb(207,63,5)" rx="2" ry="2" />
<text  x="937.84" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Vector::ResetFromCache (12,065,887 samples, 0.02%)</title><rect x="402.9" y="1717" width="0.3" height="15.0" fill="rgb(244,73,22)" rx="2" ry="2" />
<text  x="405.88" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1173" width="0.1" height="15.0" fill="rgb(228,228,6)" rx="2" ry="2" />
<text  x="14.25" y="1183.5" ></text>
</g>
<g >
<title>duckdb::BindContext::GetBinding (9,530,930 samples, 0.02%)</title><rect x="958.3" y="1653" width="0.3" height="15.0" fill="rgb(207,137,9)" rx="2" ry="2" />
<text  x="961.33" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1125" width="0.1" height="15.0" fill="rgb(247,142,9)" rx="2" ry="2" />
<text  x="14.25" y="1135.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::~shared_ptr (88,046,952 samples, 0.17%)</title><rect x="895.9" y="1653" width="2.1" height="15.0" fill="rgb(254,88,5)" rx="2" ry="2" />
<text  x="898.93" y="1663.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_codepoint (5,388,547 samples, 0.01%)</title><rect x="603.4" y="1765" width="0.1" height="15.0" fill="rgb(224,130,35)" rx="2" ry="2" />
<text  x="606.39" y="1775.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::WriteToDisk (68,205,408 samples, 0.13%)</title><rect x="1117.8" y="1173" width="1.6" height="15.0" fill="rgb(230,177,35)" rx="2" ry="2" />
<text  x="1120.83" y="1183.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VerifyInternal (1,563,666,378 samples, 3.05%)</title><rect x="647.3" y="1813" width="36.0" height="15.0" fill="rgb(227,165,45)" rx="2" ry="2" />
<text  x="650.35" y="1823.5" >duc..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::ColumnDataAllocator&gt; &gt;::destroy&lt;duckdb::ColumnDataAllocator&gt; (358,243,586 samples, 0.70%)</title><rect x="341.9" y="1269" width="8.2" height="15.0" fill="rgb(224,15,41)" rx="2" ry="2" />
<text  x="344.91" y="1279.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::InitializeScan (7,676,720 samples, 0.01%)</title><rect x="468.6" y="1781" width="0.2" height="15.0" fill="rgb(213,71,30)" rx="2" ry="2" />
<text  x="471.64" y="1791.5" ></text>
</g>
<g >
<title>duckdb::PrivateAllocatorData::PrivateAllocatorData (4,540,268 samples, 0.01%)</title><rect x="377.4" y="1797" width="0.1" height="15.0" fill="rgb(215,31,37)" rx="2" ry="2" />
<text  x="380.36" y="1807.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::GetData (357,044,519 samples, 0.70%)</title><rect x="468.4" y="1829" width="8.2" height="15.0" fill="rgb(224,166,21)" rx="2" ry="2" />
<text  x="471.36" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (9,648,538 samples, 0.02%)</title><rect x="913.2" y="1749" width="0.2" height="15.0" fill="rgb(250,229,28)" rx="2" ry="2" />
<text  x="916.20" y="1759.5" ></text>
</g>
<g >
<title>duckdb::SegmentNode&lt;duckdb::RowGroup&gt;::~SegmentNode (337,780,428 samples, 0.66%)</title><rect x="237.5" y="1301" width="7.8" height="15.0" fill="rgb(222,109,16)" rx="2" ry="2" />
<text  x="240.50" y="1311.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&gt; (11,237,280 samples, 0.02%)</title><rect x="220.2" y="1669" width="0.3" height="15.0" fill="rgb(207,113,0)" rx="2" ry="2" />
<text  x="223.23" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;duckdb::BoundColumnRefExpression&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BoundColumnRefExpression&gt;, void&gt; (6,422,818 samples, 0.01%)</title><rect x="951.9" y="1605" width="0.1" height="15.0" fill="rgb(240,10,45)" rx="2" ry="2" />
<text  x="954.89" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (38,532,676 samples, 0.08%)</title><rect x="551.1" y="1781" width="0.9" height="15.0" fill="rgb(216,89,39)" rx="2" ry="2" />
<text  x="554.13" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (24,843,470 samples, 0.05%)</title><rect x="920.7" y="1813" width="0.5" height="15.0" fill="rgb(214,191,1)" rx="2" ry="2" />
<text  x="923.67" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_buckets (4,397,834 samples, 0.01%)</title><rect x="1101.0" y="1781" width="0.1" height="15.0" fill="rgb(227,60,42)" rx="2" ry="2" />
<text  x="1104.02" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt;::unique_ptr&lt;duckdb::ValidityScanState, std::default_delete&lt;std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt; &gt;, void&gt; (5,228,371 samples, 0.01%)</title><rect x="268.3" y="1573" width="0.2" height="15.0" fill="rgb(234,28,16)" rx="2" ry="2" />
<text  x="271.34" y="1583.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1733" width="0.1" height="15.0" fill="rgb(226,32,43)" rx="2" ry="2" />
<text  x="14.25" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (48,031,198 samples, 0.09%)</title><rect x="656.0" y="1701" width="1.1" height="15.0" fill="rgb(247,51,36)" rx="2" ry="2" />
<text  x="658.97" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt;, true&gt;::operator (5,675,418 samples, 0.01%)</title><rect x="515.3" y="1925" width="0.1" height="15.0" fill="rgb(250,123,39)" rx="2" ry="2" />
<text  x="518.26" y="1935.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::RowGroupSegmentTree, duckdb::RowGroupCollection&amp;&gt; (25,995,992 samples, 0.05%)</title><rect x="429.2" y="1461" width="0.6" height="15.0" fill="rgb(243,4,20)" rx="2" ry="2" />
<text  x="432.20" y="1471.5" ></text>
</g>
<g >
<title>do_user_addr_fault (273,877,760 samples, 0.53%)</title><rect x="161.8" y="1973" width="6.3" height="15.0" fill="rgb(244,76,9)" rx="2" ry="2" />
<text  x="164.78" y="1983.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::FunctionExpressionMatcher&gt; (4,507,938 samples, 0.01%)</title><rect x="800.4" y="1845" width="0.1" height="15.0" fill="rgb(210,133,30)" rx="2" ry="2" />
<text  x="803.39" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (5,072,262 samples, 0.01%)</title><rect x="11.3" y="37" width="0.1" height="15.0" fill="rgb(239,71,19)" rx="2" ry="2" />
<text  x="14.25" y="47.5" ></text>
</g>
<g >
<title>duckdb::Transformer::Clear (7,831,628 samples, 0.02%)</title><rect x="525.1" y="1909" width="0.2" height="15.0" fill="rgb(251,68,13)" rx="2" ry="2" />
<text  x="528.12" y="1919.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (57,396,453 samples, 0.11%)</title><rect x="498.1" y="1573" width="1.3" height="15.0" fill="rgb(237,18,6)" rx="2" ry="2" />
<text  x="501.08" y="1583.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (14,473,567 samples, 0.03%)</title><rect x="359.8" y="1845" width="0.4" height="15.0" fill="rgb(241,222,37)" rx="2" ry="2" />
<text  x="362.82" y="1855.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::PendingQueryResult&gt;::operator (22,132,292 samples, 0.04%)</title><rect x="1106.9" y="1941" width="0.5" height="15.0" fill="rgb(205,189,29)" rx="2" ry="2" />
<text  x="1109.86" y="1951.5" ></text>
</g>
<g >
<title>duckdb::BoundColumnRefExpression::Deserialize (102,493,652 samples, 0.20%)</title><rect x="585.6" y="1845" width="2.3" height="15.0" fill="rgb(230,105,32)" rx="2" ry="2" />
<text  x="588.57" y="1855.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long, std::deque&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;::~stack (12,244,151 samples, 0.02%)</title><rect x="501.0" y="1797" width="0.3" height="15.0" fill="rgb(236,26,23)" rx="2" ry="2" />
<text  x="504.05" y="1807.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;*&gt; (22,986,002 samples, 0.04%)</title><rect x="1096.2" y="1685" width="0.5" height="15.0" fill="rgb(249,81,41)" rx="2" ry="2" />
<text  x="1099.17" y="1695.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (11,724,519 samples, 0.02%)</title><rect x="1117.5" y="869" width="0.3" height="15.0" fill="rgb(224,38,41)" rx="2" ry="2" />
<text  x="1120.50" y="879.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::~FileBuffer (59,734,837 samples, 0.12%)</title><rect x="239.6" y="581" width="1.4" height="15.0" fill="rgb(230,4,44)" rx="2" ry="2" />
<text  x="242.59" y="591.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (6,516,403 samples, 0.01%)</title><rect x="832.1" y="1477" width="0.2" height="15.0" fill="rgb(228,56,52)" rx="2" ry="2" />
<text  x="835.14" y="1487.5" ></text>
</g>
<g >
<title>duckdb::string_t::GetSize (21,540,876 samples, 0.04%)</title><rect x="279.2" y="1509" width="0.5" height="15.0" fill="rgb(234,4,36)" rx="2" ry="2" />
<text  x="282.22" y="1519.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::operator= (239,568,492 samples, 0.47%)</title><rect x="409.0" y="1653" width="5.5" height="15.0" fill="rgb(236,152,27)" rx="2" ry="2" />
<text  x="411.99" y="1663.5" ></text>
</g>
<g >
<title>duckdb::LocalTableManager::LocalTableManager (4,857,166 samples, 0.01%)</title><rect x="998.8" y="1605" width="0.1" height="15.0" fill="rgb(232,58,17)" rx="2" ry="2" />
<text  x="1001.81" y="1615.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (12,967,744 samples, 0.03%)</title><rect x="615.4" y="1749" width="0.3" height="15.0" fill="rgb(243,37,37)" rx="2" ry="2" />
<text  x="618.42" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (4,385,163 samples, 0.01%)</title><rect x="1090.3" y="1829" width="0.1" height="15.0" fill="rgb(252,193,4)" rx="2" ry="2" />
<text  x="1093.34" y="1839.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (15,847,318 samples, 0.03%)</title><rect x="546.8" y="1717" width="0.4" height="15.0" fill="rgb(250,99,7)" rx="2" ry="2" />
<text  x="549.82" y="1727.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::PhysicalDummyScan, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, unsigned long&amp;&gt; (54,277,023 samples, 0.11%)</title><rect x="907.8" y="1749" width="1.3" height="15.0" fill="rgb(235,17,6)" rx="2" ry="2" />
<text  x="910.85" y="1759.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::ResetFromCache (9,948,696 samples, 0.02%)</title><rect x="893.5" y="1637" width="0.3" height="15.0" fill="rgb(235,101,11)" rx="2" ry="2" />
<text  x="896.53" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (23,632,182 samples, 0.05%)</title><rect x="46.7" y="2005" width="0.5" height="15.0" fill="rgb(230,196,4)" rx="2" ry="2" />
<text  x="49.67" y="2015.5" ></text>
</g>
<g >
<title>__schedule (33,989,180 samples, 0.07%)</title><rect x="74.7" y="1893" width="0.8" height="15.0" fill="rgb(234,130,13)" rx="2" ry="2" />
<text  x="77.69" y="1903.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (7,769,911 samples, 0.02%)</title><rect x="954.7" y="1525" width="0.2" height="15.0" fill="rgb(230,94,16)" rx="2" ry="2" />
<text  x="957.72" y="1535.5" ></text>
</g>
<g >
<title>blk_mq_make_request (21,045,169 samples, 0.04%)</title><rect x="250.8" y="1525" width="0.5" height="15.0" fill="rgb(249,6,50)" rx="2" ry="2" />
<text  x="253.81" y="1535.5" ></text>
</g>
<g >
<title>duckdb::LogicalExpressionGet::GetName[abi:cxx11] (4,399,385 samples, 0.01%)</title><rect x="595.8" y="1669" width="0.1" height="15.0" fill="rgb(223,210,11)" rx="2" ry="2" />
<text  x="598.79" y="1679.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (70,638,954 samples, 0.14%)</title><rect x="741.2" y="1765" width="1.6" height="15.0" fill="rgb(235,210,23)" rx="2" ry="2" />
<text  x="744.20" y="1775.5" ></text>
</g>
<g >
<title>psi_task_change (5,811,598 samples, 0.01%)</title><rect x="1058.9" y="1589" width="0.1" height="15.0" fill="rgb(237,134,25)" rx="2" ry="2" />
<text  x="1061.92" y="1599.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::~DataChunk (176,985,552 samples, 0.35%)</title><rect x="390.3" y="1877" width="4.1" height="15.0" fill="rgb(215,117,14)" rx="2" ry="2" />
<text  x="393.32" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&amp;&gt; (28,104,646 samples, 0.05%)</title><rect x="402.7" y="1781" width="0.7" height="15.0" fill="rgb(205,3,44)" rx="2" ry="2" />
<text  x="405.72" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (4,392,011 samples, 0.01%)</title><rect x="82.8" y="2005" width="0.1" height="15.0" fill="rgb(250,26,46)" rx="2" ry="2" />
<text  x="85.77" y="2015.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::GetEntryIndex (11,157,715 samples, 0.02%)</title><rect x="285.3" y="1525" width="0.3" height="15.0" fill="rgb(243,149,14)" rx="2" ry="2" />
<text  x="288.33" y="1535.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::GetChildren (15,844,451 samples, 0.03%)</title><rect x="1085.5" y="1829" width="0.4" height="15.0" fill="rgb(210,16,9)" rx="2" ry="2" />
<text  x="1088.51" y="1839.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::ResolveOperatorTypes (56,177,582 samples, 0.11%)</title><rect x="846.8" y="1845" width="1.3" height="15.0" fill="rgb(240,27,17)" rx="2" ry="2" />
<text  x="849.79" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt;, true&gt;::~unique_ptr (11,749,224 samples, 0.02%)</title><rect x="829.6" y="1589" width="0.3" height="15.0" fill="rgb(210,175,44)" rx="2" ry="2" />
<text  x="832.60" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::operator= (12,357,869 samples, 0.02%)</title><rect x="805.2" y="1829" width="0.3" height="15.0" fill="rgb(234,137,9)" rx="2" ry="2" />
<text  x="808.22" y="1839.5" ></text>
</g>
<g >
<title>duckdb::DataTable::AppendToIndexes (10,095,137 samples, 0.02%)</title><rect x="459.9" y="1765" width="0.2" height="15.0" fill="rgb(239,174,52)" rx="2" ry="2" />
<text  x="462.86" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (12,617,170 samples, 0.02%)</title><rect x="549.2" y="1621" width="0.3" height="15.0" fill="rgb(247,86,27)" rx="2" ry="2" />
<text  x="552.21" y="1631.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (13,529,000 samples, 0.03%)</title><rect x="19.7" y="2005" width="0.4" height="15.0" fill="rgb(242,170,7)" rx="2" ry="2" />
<text  x="22.74" y="2015.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt; (4,416,413 samples, 0.01%)</title><rect x="1068.1" y="1701" width="0.1" height="15.0" fill="rgb(228,177,12)" rx="2" ry="2" />
<text  x="1071.10" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt; &gt;::~unique_ptr (6,538,466 samples, 0.01%)</title><rect x="1122.2" y="1637" width="0.2" height="15.0" fill="rgb(231,213,12)" rx="2" ry="2" />
<text  x="1125.21" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (5,953,429 samples, 0.01%)</title><rect x="332.2" y="1765" width="0.1" height="15.0" fill="rgb(252,66,3)" rx="2" ry="2" />
<text  x="335.21" y="1775.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unordered_set (5,292,453 samples, 0.01%)</title><rect x="832.6" y="1509" width="0.1" height="15.0" fill="rgb(229,172,32)" rx="2" ry="2" />
<text  x="835.61" y="1519.5" ></text>
</g>
<g >
<title>duckdb::TransactionContext::ClearTransaction (6,958,407 samples, 0.01%)</title><rect x="331.5" y="1861" width="0.2" height="15.0" fill="rgb(244,156,3)" rx="2" ry="2" />
<text  x="334.49" y="1871.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;::~pair (45,927,718 samples, 0.09%)</title><rect x="861.6" y="1637" width="1.1" height="15.0" fill="rgb(219,146,54)" rx="2" ry="2" />
<text  x="864.60" y="1647.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::Initialize (14,863,772 samples, 0.03%)</title><rect x="489.9" y="1749" width="0.3" height="15.0" fill="rgb(241,32,41)" rx="2" ry="2" />
<text  x="492.86" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr (12,083,836 samples, 0.02%)</title><rect x="828.3" y="1701" width="0.3" height="15.0" fill="rgb(247,204,45)" rx="2" ry="2" />
<text  x="831.29" y="1711.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ColumnBinding, true&gt;::operator= (5,767,595 samples, 0.01%)</title><rect x="844.4" y="1797" width="0.1" height="15.0" fill="rgb(212,213,48)" rx="2" ry="2" />
<text  x="847.42" y="1807.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::ToStream (923,322,268 samples, 1.80%)</title><rect x="598.6" y="1813" width="21.2" height="15.0" fill="rgb(213,107,30)" rx="2" ry="2" />
<text  x="601.58" y="1823.5" >d..</text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::PipelineInitializeEvent, std::allocator&lt;duckdb::PipelineInitializeEvent&gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (39,830,859 samples, 0.08%)</title><rect x="1051.2" y="1797" width="0.9" height="15.0" fill="rgb(246,142,10)" rx="2" ry="2" />
<text  x="1054.20" y="1807.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionListRef&gt; (14,506,405 samples, 0.03%)</title><rect x="530.8" y="1749" width="0.3" height="15.0" fill="rgb(237,150,38)" rx="2" ry="2" />
<text  x="533.77" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_cleanup (14,514,945 samples, 0.03%)</title><rect x="19.4" y="1941" width="0.3" height="15.0" fill="rgb(244,153,25)" rx="2" ry="2" />
<text  x="22.41" y="1951.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::Reset (68,992,087 samples, 0.13%)</title><rect x="333.6" y="1413" width="1.6" height="15.0" fill="rgb(236,56,30)" rx="2" ry="2" />
<text  x="336.60" y="1423.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::StartOperator (4,444,068 samples, 0.01%)</title><rect x="476.6" y="1813" width="0.1" height="15.0" fill="rgb(247,120,23)" rx="2" ry="2" />
<text  x="479.61" y="1823.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::SegmentScanState&gt;::operator (12,052,358 samples, 0.02%)</title><rect x="226.9" y="1493" width="0.2" height="15.0" fill="rgb(221,117,28)" rx="2" ry="2" />
<text  x="229.86" y="1503.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::RowGroupCollection (46,220,299 samples, 0.09%)</title><rect x="428.9" y="1477" width="1.1" height="15.0" fill="rgb(224,212,47)" rx="2" ry="2" />
<text  x="431.92" y="1487.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TransactionManager, std::default_delete&lt;duckdb::TransactionManager&gt;, true&gt;::operator* (8,743,352 samples, 0.02%)</title><rect x="188.6" y="1829" width="0.2" height="15.0" fill="rgb(206,107,22)" rx="2" ry="2" />
<text  x="191.60" y="1839.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnDataCopyFunction*, duckdb::ColumnDataCopyFunction&gt; (4,457,526 samples, 0.01%)</title><rect x="338.3" y="1461" width="0.1" height="15.0" fill="rgb(249,50,33)" rx="2" ry="2" />
<text  x="341.32" y="1471.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::GlobalSourceState&gt;::operator (9,438,086 samples, 0.02%)</title><rect x="357.7" y="1605" width="0.2" height="15.0" fill="rgb(207,92,40)" rx="2" ry="2" />
<text  x="360.65" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_range_initialize&lt;unsigned long const*&gt; (10,942,603 samples, 0.02%)</title><rect x="776.1" y="1733" width="0.3" height="15.0" fill="rgb(230,39,36)" rx="2" ry="2" />
<text  x="779.15" y="1743.5" ></text>
</g>
<g >
<title>do_user_addr_fault (247,435,294 samples, 0.48%)</title><rect x="1135.4" y="1973" width="5.7" height="15.0" fill="rgb(245,141,46)" rx="2" ry="2" />
<text  x="1138.37" y="1983.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::FoldableConstantMatcher, std::default_delete&lt;duckdb::FoldableConstantMatcher&gt;, void&gt; (6,165,064 samples, 0.01%)</title><rect x="793.5" y="1829" width="0.2" height="15.0" fill="rgb(248,191,54)" rx="2" ry="2" />
<text  x="796.54" y="1839.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::Verify (326,295,254 samples, 0.64%)</title><rect x="634.0" y="1845" width="7.5" height="15.0" fill="rgb(244,32,13)" rx="2" ry="2" />
<text  x="637.04" y="1855.5" ></text>
</g>
<g >
<title>ata_qc_issue (6,625,004 samples, 0.01%)</title><rect x="250.1" y="1349" width="0.1" height="15.0" fill="rgb(216,25,11)" rx="2" ry="2" />
<text  x="253.08" y="1359.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (87,948,078 samples, 0.17%)</title><rect x="436.9" y="1541" width="2.1" height="15.0" fill="rgb(231,219,39)" rx="2" ry="2" />
<text  x="439.93" y="1551.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_alloc (7,807,938 samples, 0.02%)</title><rect x="487.3" y="1445" width="0.2" height="15.0" fill="rgb(234,126,42)" rx="2" ry="2" />
<text  x="490.31" y="1455.5" ></text>
</g>
<g >
<title>duckdb::FieldReader::ReadRequiredSerializable&lt;duckdb::LogicalType, duckdb::LogicalType&gt; (36,621,258 samples, 0.07%)</title><rect x="586.2" y="1829" width="0.8" height="15.0" fill="rgb(209,188,32)" rx="2" ry="2" />
<text  x="589.17" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnAppendState, std::allocator&lt;duckdb::ColumnAppendState&gt; &gt;::_S_max_size (4,434,778 samples, 0.01%)</title><rect x="452.0" y="1637" width="0.1" height="15.0" fill="rgb(235,109,41)" rx="2" ry="2" />
<text  x="454.97" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (9,020,791 samples, 0.02%)</title><rect x="946.2" y="1653" width="0.2" height="15.0" fill="rgb(237,223,32)" rx="2" ry="2" />
<text  x="949.22" y="1663.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::AttachedDatabase*, duckdb::Transaction*, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt; &gt;::find (5,403,988 samples, 0.01%)</title><rect x="991.2" y="1637" width="0.1" height="15.0" fill="rgb(235,38,9)" rx="2" ry="2" />
<text  x="994.22" y="1647.5" ></text>
</g>
<g >
<title>duckdb::StringUtil::BytesToHumanReadableString[abi:cxx11] (22,083,031 samples, 0.04%)</title><rect x="439.9" y="1653" width="0.5" height="15.0" fill="rgb(208,22,38)" rx="2" ry="2" />
<text  x="442.89" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::DatePartSimplificationRule, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (6,886,724 samples, 0.01%)</title><rect x="822.2" y="1877" width="0.2" height="15.0" fill="rgb(227,209,30)" rx="2" ry="2" />
<text  x="825.20" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (16,273,295 samples, 0.03%)</title><rect x="1089.9" y="1813" width="0.4" height="15.0" fill="rgb(206,214,41)" rx="2" ry="2" />
<text  x="1092.95" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::PendingPreparedStatement (2,683,539,087 samples, 5.23%)</title><rect x="1042.1" y="1909" width="61.8" height="15.0" fill="rgb(225,200,5)" rx="2" ry="2" />
<text  x="1045.12" y="1919.5" >duckdb..</text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::~unique_ptr (9,311,152 samples, 0.02%)</title><rect x="971.8" y="1493" width="0.3" height="15.0" fill="rgb(223,60,47)" rx="2" ry="2" />
<text  x="974.85" y="1503.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Executor, std::default_delete&lt;duckdb::Executor&gt;, true&gt;::operator (25,369,326 samples, 0.05%)</title><rect x="511.0" y="1909" width="0.6" height="15.0" fill="rgb(212,51,54)" rx="2" ry="2" />
<text  x="514.00" y="1919.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Vector&gt; &gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (25,782,858 samples, 0.05%)</title><rect x="893.4" y="1717" width="0.6" height="15.0" fill="rgb(248,178,30)" rx="2" ry="2" />
<text  x="896.39" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (4,352,124 samples, 0.01%)</title><rect x="239.8" y="405" width="0.1" height="15.0" fill="rgb(246,182,52)" rx="2" ry="2" />
<text  x="242.84" y="415.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::downcase_truncate_identifier (8,312,119 samples, 0.02%)</title><rect x="522.9" y="1829" width="0.2" height="15.0" fill="rgb(240,37,27)" rx="2" ry="2" />
<text  x="525.92" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BoundStatement::BoundStatement (4,407,215 samples, 0.01%)</title><rect x="979.5" y="1797" width="0.1" height="15.0" fill="rgb(231,173,30)" rx="2" ry="2" />
<text  x="982.53" y="1807.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (453,780,260 samples, 0.88%)</title><rect x="235.3" y="1749" width="10.4" height="15.0" fill="rgb(227,36,12)" rx="2" ry="2" />
<text  x="238.31" y="1759.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::FileBuffer (292,576,310 samples, 0.57%)</title><rect x="872.6" y="1605" width="6.7" height="15.0" fill="rgb(238,222,38)" rx="2" ry="2" />
<text  x="875.60" y="1615.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VersionNode&gt;::construct&lt;duckdb::VersionNode&gt; (14,664,093 samples, 0.03%)</title><rect x="415.6" y="1573" width="0.4" height="15.0" fill="rgb(217,73,32)" rx="2" ry="2" />
<text  x="418.63" y="1583.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringInitAppend (21,398,702 samples, 0.04%)</title><rect x="449.2" y="1685" width="0.4" height="15.0" fill="rgb(221,174,27)" rx="2" ry="2" />
<text  x="452.15" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::push_back (6,110,153 samples, 0.01%)</title><rect x="792.3" y="1845" width="0.1" height="15.0" fill="rgb(240,173,0)" rx="2" ry="2" />
<text  x="795.26" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::~unique_ptr (181,463,491 samples, 0.35%)</title><rect x="829.3" y="1749" width="4.1" height="15.0" fill="rgb(211,117,48)" rx="2" ry="2" />
<text  x="832.26" y="1759.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::operator= (4,378,181 samples, 0.01%)</title><rect x="217.5" y="1525" width="0.1" height="15.0" fill="rgb(228,51,44)" rx="2" ry="2" />
<text  x="220.53" y="1535.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::~unique_ptr (7,497,565 samples, 0.01%)</title><rect x="633.7" y="1669" width="0.2" height="15.0" fill="rgb(209,45,8)" rx="2" ry="2" />
<text  x="636.71" y="1679.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::SelectionData&gt; &gt;::construct&lt;duckdb::SelectionData, unsigned long&amp;&gt; (448,881,762 samples, 0.88%)</title><rect x="256.3" y="1541" width="10.3" height="15.0" fill="rgb(209,112,12)" rx="2" ry="2" />
<text  x="259.30" y="1551.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ArenaAllocatorData, duckdb::ArenaAllocator&amp;&gt; (9,790,136 samples, 0.02%)</title><rect x="997.4" y="1605" width="0.3" height="15.0" fill="rgb(218,52,39)" rx="2" ry="2" />
<text  x="1000.45" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBoxContent (178,316,590 samples, 0.35%)</title><rect x="836.6" y="1829" width="4.1" height="15.0" fill="rgb(222,166,25)" rx="2" ry="2" />
<text  x="839.59" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::ColumnAppendState&gt;::construct&lt;duckdb::ColumnAppendState, duckdb::ColumnAppendState&gt; (27,178,702 samples, 0.05%)</title><rect x="451.3" y="1653" width="0.6" height="15.0" fill="rgb(236,57,53)" rx="2" ry="2" />
<text  x="454.32" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (16,317,181 samples, 0.03%)</title><rect x="1032.6" y="1845" width="0.4" height="15.0" fill="rgb(205,209,48)" rx="2" ry="2" />
<text  x="1035.59" y="1855.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::RenderTree (18,304,542 samples, 0.04%)</title><rect x="1068.4" y="1733" width="0.4" height="15.0" fill="rgb(214,41,19)" rx="2" ry="2" />
<text  x="1071.38" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (5,247,576 samples, 0.01%)</title><rect x="778.2" y="1749" width="0.1" height="15.0" fill="rgb(210,173,33)" rx="2" ry="2" />
<text  x="781.23" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (31,342,986 samples, 0.06%)</title><rect x="801.5" y="1829" width="0.7" height="15.0" fill="rgb(230,60,16)" rx="2" ry="2" />
<text  x="804.45" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_no_sample (12,665,876 samples, 0.02%)</title><rect x="890.6" y="1445" width="0.3" height="15.0" fill="rgb(243,125,31)" rx="2" ry="2" />
<text  x="893.61" y="1455.5" ></text>
</g>
<g >
<title>duckdb::Catalog::GetCatalogTransaction (27,764,623 samples, 0.05%)</title><rect x="1042.7" y="1861" width="0.6" height="15.0" fill="rgb(212,54,51)" rx="2" ry="2" />
<text  x="1045.70" y="1871.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::isalloc (6,356,705 samples, 0.01%)</title><rect x="289.9" y="1381" width="0.1" height="15.0" fill="rgb(221,86,54)" rx="2" ry="2" />
<text  x="292.86" y="1391.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (86,965,169 samples, 0.17%)</title><rect x="492.5" y="1637" width="2.0" height="15.0" fill="rgb(226,129,7)" rx="2" ry="2" />
<text  x="495.47" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::emplace_back&lt;unsigned long&amp;, unsigned long&amp;&gt; (54,654,232 samples, 0.11%)</title><rect x="837.8" y="1797" width="1.3" height="15.0" fill="rgb(251,30,40)" rx="2" ry="2" />
<text  x="840.85" y="1807.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::MetaPipeline&gt; &gt;::destroy&lt;duckdb::MetaPipeline&gt; (17,838,229 samples, 0.03%)</title><rect x="1096.3" y="1557" width="0.4" height="15.0" fill="rgb(253,205,19)" rx="2" ry="2" />
<text  x="1099.28" y="1567.5" ></text>
</g>
<g >
<title>std::function&lt;void  (5,180,519 samples, 0.01%)</title><rect x="740.3" y="1621" width="0.1" height="15.0" fill="rgb(231,193,18)" rx="2" ry="2" />
<text  x="743.30" y="1631.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, void&gt; (4,746,195 samples, 0.01%)</title><rect x="904.5" y="1717" width="0.1" height="15.0" fill="rgb(211,58,39)" rx="2" ry="2" />
<text  x="907.47" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::operator (10,790,942 samples, 0.02%)</title><rect x="788.6" y="1765" width="0.2" height="15.0" fill="rgb(217,108,50)" rx="2" ry="2" />
<text  x="791.58" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::ExpressionEquality&lt;duckdb::ParsedExpression&gt;, duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (6,515,216 samples, 0.01%)</title><rect x="967.6" y="1685" width="0.1" height="15.0" fill="rgb(214,144,2)" rx="2" ry="2" />
<text  x="970.58" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (12,900,102 samples, 0.03%)</title><rect x="891.1" y="1413" width="0.3" height="15.0" fill="rgb(240,229,6)" rx="2" ry="2" />
<text  x="894.13" y="1423.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::Sink (162,252,981 samples, 0.32%)</title><rect x="101.9" y="1765" width="3.8" height="15.0" fill="rgb(222,143,53)" rx="2" ry="2" />
<text  x="104.94" y="1775.5" ></text>
</g>
<g >
<title>deactivate_task (6,076,763 samples, 0.01%)</title><rect x="249.3" y="1525" width="0.2" height="15.0" fill="rgb(250,0,5)" rx="2" ry="2" />
<text  x="252.32" y="1535.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::OperatorProfiler (6,633,885 samples, 0.01%)</title><rect x="403.9" y="1829" width="0.1" height="15.0" fill="rgb(245,185,52)" rx="2" ry="2" />
<text  x="406.88" y="1839.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long&gt; (6,818,606 samples, 0.01%)</title><rect x="1076.2" y="1685" width="0.1" height="15.0" fill="rgb(240,162,15)" rx="2" ry="2" />
<text  x="1079.15" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VerifyInternal (459,707,972 samples, 0.90%)</title><rect x="649.4" y="1781" width="10.6" height="15.0" fill="rgb(219,39,33)" rx="2" ry="2" />
<text  x="652.44" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (9,261,264 samples, 0.02%)</title><rect x="516.8" y="1877" width="0.2" height="15.0" fill="rgb(243,205,29)" rx="2" ry="2" />
<text  x="519.81" y="1887.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::ConcurrentQueue*, std::default_delete&lt;duckdb::ConcurrentQueue&gt; &gt; (12,306,107 samples, 0.02%)</title><rect x="507.0" y="1829" width="0.3" height="15.0" fill="rgb(249,24,19)" rx="2" ry="2" />
<text  x="509.97" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::~unique_ptr (18,441,932 samples, 0.04%)</title><rect x="620.0" y="1733" width="0.4" height="15.0" fill="rgb(254,61,33)" rx="2" ry="2" />
<text  x="623.01" y="1743.5" ></text>
</g>
<g >
<title>duckdb::BufferEvictionNode::BufferEvictionNode (6,765,573 samples, 0.01%)</title><rect x="861.8" y="1557" width="0.2" height="15.0" fill="rgb(245,48,19)" rx="2" ry="2" />
<text  x="864.82" y="1567.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RowGroupCollection, std::default_delete&lt;duckdb::RowGroupCollection&gt;, true&gt;::unique_ptr (5,155,953 samples, 0.01%)</title><rect x="491.1" y="1781" width="0.1" height="15.0" fill="rgb(241,22,36)" rx="2" ry="2" />
<text  x="494.10" y="1791.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorCacheBuffer&gt;::shared_ptr&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (84,724,476 samples, 0.17%)</title><rect x="486.6" y="1685" width="2.0" height="15.0" fill="rgb(240,31,30)" rx="2" ry="2" />
<text  x="489.64" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (348,066,787 samples, 0.68%)</title><rect x="342.0" y="1077" width="8.0" height="15.0" fill="rgb(235,207,7)" rx="2" ry="2" />
<text  x="345.02" y="1087.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::Append (70,557,478 samples, 0.14%)</title><rect x="461.3" y="1749" width="1.6" height="15.0" fill="rgb(235,116,11)" rx="2" ry="2" />
<text  x="464.30" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*, duckdb::Vector&gt; (22,056,053 samples, 0.04%)</title><rect x="895.3" y="1733" width="0.5" height="15.0" fill="rgb(221,117,12)" rx="2" ry="2" />
<text  x="898.30" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="709" width="0.1" height="15.0" fill="rgb(220,23,51)" rx="2" ry="2" />
<text  x="14.25" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_realloc_insert&lt;duckdb::LogicalType const&amp;&gt; (9,064,119 samples, 0.02%)</title><rect x="856.0" y="1765" width="0.2" height="15.0" fill="rgb(211,177,7)" rx="2" ry="2" />
<text  x="858.98" y="1775.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;std::shared_ptr&lt;duckdb::Task&gt;, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::recycle_or_create_producer (7,825,284 samples, 0.02%)</title><rect x="1091.0" y="1797" width="0.2" height="15.0" fill="rgb(224,90,10)" rx="2" ry="2" />
<text  x="1094.00" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_node_allocator (6,634,639 samples, 0.01%)</title><rect x="680.1" y="1733" width="0.2" height="15.0" fill="rgb(232,108,0)" rx="2" ry="2" />
<text  x="683.13" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::Append (4,715,471 samples, 0.01%)</title><rect x="1119.2" y="1013" width="0.1" height="15.0" fill="rgb(254,51,5)" rx="2" ry="2" />
<text  x="1122.18" y="1023.5" ></text>
</g>
<g >
<title>duckdb::LocalAppendState::LocalAppendState (11,158,895 samples, 0.02%)</title><rect x="98.7" y="1765" width="0.3" height="15.0" fill="rgb(242,113,17)" rx="2" ry="2" />
<text  x="101.72" y="1775.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::IntegerTypeMatcher&gt; &gt; (5,283,537 samples, 0.01%)</title><rect x="787.1" y="1813" width="0.1" height="15.0" fill="rgb(238,95,33)" rx="2" ry="2" />
<text  x="790.12" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Executor::Reset (27,608,149 samples, 0.05%)</title><rect x="1097.4" y="1877" width="0.6" height="15.0" fill="rgb(248,64,1)" rx="2" ry="2" />
<text  x="1100.39" y="1887.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::BoundConstantExpression, duckdb::Value&gt; (19,600,774 samples, 0.04%)</title><rect x="982.6" y="1813" width="0.5" height="15.0" fill="rgb(253,101,22)" rx="2" ry="2" />
<text  x="985.60" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BindResult::BindResult (4,363,036 samples, 0.01%)</title><rect x="950.3" y="1685" width="0.1" height="15.0" fill="rgb(236,217,2)" rx="2" ry="2" />
<text  x="953.32" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::Finalize (568,845,100 samples, 1.11%)</title><rect x="405.8" y="1781" width="13.1" height="15.0" fill="rgb(241,95,48)" rx="2" ry="2" />
<text  x="408.81" y="1791.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::enqueue (26,718,924 samples, 0.05%)</title><rect x="870.6" y="1621" width="0.6" height="15.0" fill="rgb(246,141,54)" rx="2" ry="2" />
<text  x="873.58" y="1631.5" ></text>
</g>
<g >
<title>do_futex (23,847,321 samples, 0.05%)</title><rect x="1058.6" y="1685" width="0.6" height="15.0" fill="rgb(222,202,46)" rx="2" ry="2" />
<text  x="1061.61" y="1695.5" ></text>
</g>
<g >
<title>duckdb::DependencyList::~DependencyList (16,382,288 samples, 0.03%)</title><rect x="924.5" y="1877" width="0.4" height="15.0" fill="rgb(218,106,27)" rx="2" ry="2" />
<text  x="927.50" y="1887.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::ColumnDataCopyFunction&gt; &gt;::construct&lt;duckdb::ColumnDataCopyFunction, duckdb::ColumnDataCopyFunction&gt; (6,100,056 samples, 0.01%)</title><rect x="910.6" y="1685" width="0.2" height="15.0" fill="rgb(218,83,40)" rx="2" ry="2" />
<text  x="913.64" y="1695.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::PhysicalExpressionScan*, std::default_delete&lt;duckdb::PhysicalExpressionScan&gt; &gt; (5,630,053 samples, 0.01%)</title><rect x="914.9" y="1733" width="0.1" height="15.0" fill="rgb(235,111,12)" rx="2" ry="2" />
<text  x="917.91" y="1743.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ColumnDataCollection&gt;::operator (420,161,921 samples, 0.82%)</title><rect x="340.5" y="1381" width="9.7" height="15.0" fill="rgb(224,33,9)" rx="2" ry="2" />
<text  x="343.50" y="1391.5" ></text>
</g>
<g >
<title>smp_call_function_many (6,281,634 samples, 0.01%)</title><rect x="167.7" y="1813" width="0.1" height="15.0" fill="rgb(221,110,54)" rx="2" ry="2" />
<text  x="170.70" y="1823.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::Scan (1,448,808,224 samples, 2.82%)</title><rect x="199.1" y="1749" width="33.4" height="15.0" fill="rgb(243,135,16)" rx="2" ry="2" />
<text  x="202.12" y="1759.5" >du..</text>
</g>
<g >
<title>duckdb_jemalloc::isalloc (8,233,720 samples, 0.02%)</title><rect x="367.6" y="1541" width="0.2" height="15.0" fill="rgb(232,5,17)" rx="2" ry="2" />
<text  x="370.59" y="1551.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::InitializeScanWithOffset (53,742,906 samples, 0.10%)</title><rect x="299.9" y="1685" width="1.2" height="15.0" fill="rgb(232,175,6)" rx="2" ry="2" />
<text  x="302.87" y="1695.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (19,434,767 samples, 0.04%)</title><rect x="107.3" y="1685" width="0.4" height="15.0" fill="rgb(251,69,9)" rx="2" ry="2" />
<text  x="110.26" y="1695.5" ></text>
</g>
<g >
<title>duckdb::MaterializedQueryResult::~MaterializedQueryResult (163,220,708 samples, 0.32%)</title><rect x="1121.3" y="1941" width="3.7" height="15.0" fill="rgb(209,26,49)" rx="2" ry="2" />
<text  x="1124.28" y="1951.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueueProducerToken, std::default_delete&lt;duckdb::QueueProducerToken&gt;, true&gt;::operator (5,064,536 samples, 0.01%)</title><rect x="507.3" y="1877" width="0.1" height="15.0" fill="rgb(226,202,22)" rx="2" ry="2" />
<text  x="510.30" y="1887.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ConstantExpression, std::default_delete&lt;duckdb::ConstantExpression&gt; &gt;::release (6,014,053 samples, 0.01%)</title><rect x="529.6" y="1669" width="0.2" height="15.0" fill="rgb(246,21,5)" rx="2" ry="2" />
<text  x="532.64" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt; &gt;::_M_erase_at_end (99,083,332 samples, 0.19%)</title><rect x="355.1" y="1845" width="2.3" height="15.0" fill="rgb(230,36,42)" rx="2" ry="2" />
<text  x="358.12" y="1855.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple (11,946,079 samples, 0.02%)</title><rect x="710.1" y="1765" width="0.3" height="15.0" fill="rgb(205,171,7)" rx="2" ry="2" />
<text  x="713.09" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::size (5,120,723 samples, 0.01%)</title><rect x="578.7" y="1781" width="0.2" height="15.0" fill="rgb(210,30,52)" rx="2" ry="2" />
<text  x="581.74" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (51,315,448 samples, 0.10%)</title><rect x="380.0" y="1733" width="1.2" height="15.0" fill="rgb(232,146,16)" rx="2" ry="2" />
<text  x="383.00" y="1743.5" ></text>
</g>
<g >
<title>schedule (35,439,243 samples, 0.07%)</title><rect x="74.7" y="1909" width="0.8" height="15.0" fill="rgb(227,83,50)" rx="2" ry="2" />
<text  x="77.67" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt;::push_back (5,866,183 samples, 0.01%)</title><rect x="978.1" y="1749" width="0.1" height="15.0" fill="rgb(242,75,29)" rx="2" ry="2" />
<text  x="981.10" y="1759.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (53,436,010 samples, 0.10%)</title><rect x="842.6" y="1797" width="1.3" height="15.0" fill="rgb(252,150,24)" rx="2" ry="2" />
<text  x="845.63" y="1807.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;*&gt; (160,677,637 samples, 0.31%)</title><rect x="324.2" y="1733" width="3.7" height="15.0" fill="rgb(235,21,4)" rx="2" ry="2" />
<text  x="327.20" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::operator= (4,660,125 samples, 0.01%)</title><rect x="846.2" y="1845" width="0.1" height="15.0" fill="rgb(231,10,13)" rx="2" ry="2" />
<text  x="849.23" y="1855.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (8,011,328 samples, 0.02%)</title><rect x="296.8" y="1621" width="0.2" height="15.0" fill="rgb(248,224,10)" rx="2" ry="2" />
<text  x="299.84" y="1631.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::get_deleter (6,213,337 samples, 0.01%)</title><rect x="771.2" y="1781" width="0.1" height="15.0" fill="rgb(216,101,40)" rx="2" ry="2" />
<text  x="774.17" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_tcache_data_init (8,504,245 samples, 0.02%)</title><rect x="107.4" y="1349" width="0.2" height="15.0" fill="rgb(208,198,17)" rx="2" ry="2" />
<text  x="110.43" y="1359.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::QueryNode*, std::default_delete&lt;duckdb::QueryNode&gt; &gt;::tuple&lt;duckdb::QueryNode*&amp;, std::default_delete&lt;duckdb::SelectNode&gt;, true&gt; (5,146,152 samples, 0.01%)</title><rect x="534.4" y="1717" width="0.1" height="15.0" fill="rgb(216,12,1)" rx="2" ry="2" />
<text  x="537.40" y="1727.5" ></text>
</g>
<g >
<title>duckdb::InClauseRewriter::Rewrite (94,662,588 samples, 0.18%)</title><rect x="749.8" y="1813" width="2.2" height="15.0" fill="rgb(227,76,32)" rx="2" ry="2" />
<text  x="752.78" y="1823.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::Flush (10,292,017 samples, 0.02%)</title><rect x="106.6" y="1765" width="0.2" height="15.0" fill="rgb(244,186,2)" rx="2" ry="2" />
<text  x="109.55" y="1775.5" ></text>
</g>
<g >
<title>duckdb::CastFunctionSet::CastFunctionSet (11,183,114 samples, 0.02%)</title><rect x="1120.4" y="1957" width="0.3" height="15.0" fill="rgb(220,119,3)" rx="2" ry="2" />
<text  x="1123.42" y="1967.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::inner_enqueue&lt; (25,269,543 samples, 0.05%)</title><rect x="870.6" y="1605" width="0.6" height="15.0" fill="rgb(231,38,10)" rx="2" ry="2" />
<text  x="873.61" y="1615.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt; &gt; (16,230,886 samples, 0.03%)</title><rect x="801.7" y="1781" width="0.4" height="15.0" fill="rgb(232,206,32)" rx="2" ry="2" />
<text  x="804.69" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (12,819,536 samples, 0.02%)</title><rect x="459.4" y="1765" width="0.3" height="15.0" fill="rgb(253,129,9)" rx="2" ry="2" />
<text  x="462.44" y="1775.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (6,232,664 samples, 0.01%)</title><rect x="639.4" y="1717" width="0.1" height="15.0" fill="rgb(208,128,9)" rx="2" ry="2" />
<text  x="642.35" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (7,374,976 samples, 0.01%)</title><rect x="729.9" y="1669" width="0.1" height="15.0" fill="rgb(207,46,19)" rx="2" ry="2" />
<text  x="732.87" y="1679.5" ></text>
</g>
<g >
<title>duckdb::CommonAggregateOptimizer::VisitOperator (8,993,415 samples, 0.02%)</title><rect x="726.5" y="1669" width="0.2" height="15.0" fill="rgb(239,100,50)" rx="2" ry="2" />
<text  x="729.52" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc_large (7,140,733 samples, 0.01%)</title><rect x="334.0" y="1285" width="0.2" height="15.0" fill="rgb(241,115,49)" rx="2" ry="2" />
<text  x="337.02" y="1295.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::unique_ptr&lt;duckdb::LogicalInsert, std::default_delete&lt;duckdb::LogicalInsert&gt;, void&gt; (6,396,200 samples, 0.01%)</title><rect x="1014.1" y="1813" width="0.1" height="15.0" fill="rgb(208,51,17)" rx="2" ry="2" />
<text  x="1017.07" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; (28,314,293 samples, 0.06%)</title><rect x="754.8" y="1733" width="0.7" height="15.0" fill="rgb(212,93,45)" rx="2" ry="2" />
<text  x="757.81" y="1743.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::get_block_index_index_for_index (4,908,369 samples, 0.01%)</title><rect x="343.4" y="901" width="0.1" height="15.0" fill="rgb(238,51,27)" rx="2" ry="2" />
<text  x="346.36" y="911.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;duckdb::LogicalType*, unsigned long, duckdb::LogicalType&gt; (5,467,156 samples, 0.01%)</title><rect x="1020.8" y="1797" width="0.1" height="15.0" fill="rgb(247,220,10)" rx="2" ry="2" />
<text  x="1023.77" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::CreatePreparedStatement (14,352,256 samples, 0.03%)</title><rect x="1108.9" y="1845" width="0.3" height="15.0" fill="rgb(239,64,11)" rx="2" ry="2" />
<text  x="1111.86" y="1855.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (5,688,440 samples, 0.01%)</title><rect x="86.1" y="1989" width="0.1" height="15.0" fill="rgb(241,16,34)" rx="2" ry="2" />
<text  x="89.08" y="1999.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (4,388,935 samples, 0.01%)</title><rect x="927.8" y="1637" width="0.1" height="15.0" fill="rgb(227,191,33)" rx="2" ry="2" />
<text  x="930.77" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::empty (5,306,401 samples, 0.01%)</title><rect x="1093.5" y="1685" width="0.1" height="15.0" fill="rgb(230,202,43)" rx="2" ry="2" />
<text  x="1096.52" y="1695.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Binder&gt;::~shared_ptr (117,415,303 samples, 0.23%)</title><rect x="1016.0" y="1829" width="2.7" height="15.0" fill="rgb(227,24,21)" rx="2" ry="2" />
<text  x="1018.97" y="1839.5" ></text>
</g>
<g >
<title>duckdb::PhysicalColumnDataScan::PhysicalColumnDataScan (29,924,563 samples, 0.06%)</title><rect x="912.3" y="1765" width="0.7" height="15.0" fill="rgb(233,87,43)" rx="2" ry="2" />
<text  x="915.34" y="1775.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;unsigned int, std::default_delete&lt;unsigned int []&gt; &gt;::_M_ptr (195,237,314 samples, 0.38%)</title><rect x="206.1" y="1477" width="4.5" height="15.0" fill="rgb(244,86,41)" rx="2" ry="2" />
<text  x="209.08" y="1487.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::~DataChunk (117,828,513 samples, 0.23%)</title><rect x="481.1" y="1749" width="2.7" height="15.0" fill="rgb(242,115,32)" rx="2" ry="2" />
<text  x="484.05" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (8,588,229 samples, 0.02%)</title><rect x="777.0" y="1717" width="0.2" height="15.0" fill="rgb(253,14,48)" rx="2" ry="2" />
<text  x="779.98" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (9,282,581 samples, 0.02%)</title><rect x="698.7" y="1781" width="0.2" height="15.0" fill="rgb(239,113,10)" rx="2" ry="2" />
<text  x="701.72" y="1791.5" ></text>
</g>
<g >
<title>duckdb::MetaTransaction::~MetaTransaction (20,101,030 samples, 0.04%)</title><rect x="332.1" y="1813" width="0.4" height="15.0" fill="rgb(234,124,53)" rx="2" ry="2" />
<text  x="335.08" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt;::~unique_ptr (6,888,226 samples, 0.01%)</title><rect x="226.6" y="1637" width="0.2" height="15.0" fill="rgb(231,11,1)" rx="2" ry="2" />
<text  x="229.60" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::~unique_ptr (22,502,431 samples, 0.04%)</title><rect x="642.5" y="1861" width="0.5" height="15.0" fill="rgb(222,63,12)" rx="2" ry="2" />
<text  x="645.51" y="1871.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionState, duckdb::BoundConstantExpression const&amp;, duckdb::ExpressionExecutorState&amp;&gt; (14,216,276 samples, 0.03%)</title><rect x="903.6" y="1685" width="0.3" height="15.0" fill="rgb(216,35,7)" rx="2" ry="2" />
<text  x="906.61" y="1695.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::StandardColumnData, std::allocator&lt;duckdb::StandardColumnData&gt;, duckdb::BlockManager&amp;, duckdb::DataTableInfo&amp;, unsigned long&amp;, unsigned long&amp;, duckdb::LogicalType const&amp;, duckdb::optional_ptr&lt;duckdb::ColumnData&gt;&amp;&gt; (102,505,561 samples, 0.20%)</title><rect x="453.1" y="1653" width="2.3" height="15.0" fill="rgb(242,200,22)" rx="2" ry="2" />
<text  x="456.08" y="1663.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::ExpressionExecutor (132,878,902 samples, 0.26%)</title><rect x="903.4" y="1765" width="3.0" height="15.0" fill="rgb(252,4,0)" rx="2" ry="2" />
<text  x="906.36" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BoundUnnestNode&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BoundUnnestNode&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (5,803,394 samples, 0.01%)</title><rect x="981.4" y="1701" width="0.1" height="15.0" fill="rgb(213,11,6)" rx="2" ry="2" />
<text  x="984.36" y="1711.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::StringScanState, std::default_delete&lt;duckdb::StringScanState&gt; &gt;::__uniq_ptr_impl (9,143,369 samples, 0.02%)</title><rect x="213.3" y="1541" width="0.2" height="15.0" fill="rgb(253,106,10)" rx="2" ry="2" />
<text  x="216.27" y="1551.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, std::shared_ptr&lt;duckdb::QueryProfiler&gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long, std::shared_ptr&lt;duckdb::QueryProfiler&gt; &gt; &gt; (28,510,920 samples, 0.06%)</title><rect x="352.4" y="1861" width="0.7" height="15.0" fill="rgb(247,182,23)" rx="2" ry="2" />
<text  x="355.40" y="1871.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (10,763,195 samples, 0.02%)</title><rect x="16.2" y="2005" width="0.3" height="15.0" fill="rgb(227,5,35)" rx="2" ry="2" />
<text  x="19.21" y="2015.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, duckdb::TaskScheduler*, std::default_delete&lt;duckdb::TaskScheduler&gt; &gt; (8,611,225 samples, 0.02%)</title><rect x="502.9" y="1781" width="0.2" height="15.0" fill="rgb(206,55,23)" rx="2" ry="2" />
<text  x="505.87" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_next_event_compute (6,028,971 samples, 0.01%)</title><rect x="326.0" y="1301" width="0.1" height="15.0" fill="rgb(246,110,18)" rx="2" ry="2" />
<text  x="328.96" y="1311.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::ExecutePushInternal (168,488,659 samples, 0.33%)</title><rect x="101.8" y="1797" width="3.9" height="15.0" fill="rgb(254,140,17)" rx="2" ry="2" />
<text  x="104.81" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;unsigned long&gt;::_M_valptr (6,739,710 samples, 0.01%)</title><rect x="699.3" y="1749" width="0.2" height="15.0" fill="rgb(212,136,26)" rx="2" ry="2" />
<text  x="702.33" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics []&gt; &gt;::unique_ptr (6,642,917 samples, 0.01%)</title><rect x="442.6" y="1605" width="0.1" height="15.0" fill="rgb(224,199,4)" rx="2" ry="2" />
<text  x="445.58" y="1615.5" ></text>
</g>
<g >
<title>duckdb::ExtraTypeInfo::Serialize (9,799,910 samples, 0.02%)</title><rect x="590.7" y="1797" width="0.3" height="15.0" fill="rgb(229,20,28)" rx="2" ry="2" />
<text  x="593.73" y="1807.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt; (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1445" width="1.9" height="15.0" fill="rgb(252,33,24)" rx="2" ry="2" />
<text  x="1120.81" y="1455.5" ></text>
</g>
<g >
<title>duckdb::Catalog::CreatePragmaFunction (6,387,596 samples, 0.01%)</title><rect x="1110.7" y="1829" width="0.1" height="15.0" fill="rgb(232,167,16)" rx="2" ry="2" />
<text  x="1113.66" y="1839.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ColumnDataCollection, std::default_delete&lt;duckdb::ColumnDataCollection&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::ColumnDataCollection&gt; &gt; (5,244,209 samples, 0.01%)</title><rect x="912.7" y="1717" width="0.1" height="15.0" fill="rgb(248,6,32)" rx="2" ry="2" />
<text  x="915.68" y="1727.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::~VectorCacheBuffer (75,300,673 samples, 0.15%)</title><rect x="896.2" y="1541" width="1.7" height="15.0" fill="rgb(231,20,42)" rx="2" ry="2" />
<text  x="899.20" y="1551.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::insert (241,742,721 samples, 0.47%)</title><rect x="676.0" y="1797" width="5.6" height="15.0" fill="rgb(222,143,32)" rx="2" ry="2" />
<text  x="679.04" y="1807.5" ></text>
</g>
<g >
<title>duckdb::EntryValue::~EntryValue (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1397" width="1.9" height="15.0" fill="rgb(245,138,48)" rx="2" ry="2" />
<text  x="1120.81" y="1407.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (16,763,185 samples, 0.03%)</title><rect x="696.3" y="1781" width="0.4" height="15.0" fill="rgb(208,52,20)" rx="2" ry="2" />
<text  x="699.27" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; (32,373,608 samples, 0.06%)</title><rect x="812.4" y="1813" width="0.7" height="15.0" fill="rgb(240,108,44)" rx="2" ry="2" />
<text  x="815.40" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::~BufferHandle (4,401,856 samples, 0.01%)</title><rect x="287.7" y="1525" width="0.1" height="15.0" fill="rgb(215,7,45)" rx="2" ry="2" />
<text  x="290.69" y="1535.5" ></text>
</g>
<g >
<title>duckdb::ExpressionRewriter::VisitOperator (302,126,590 samples, 0.59%)</title><rect x="736.2" y="1781" width="7.0" height="15.0" fill="rgb(249,148,29)" rx="2" ry="2" />
<text  x="739.22" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Binder::Bind (4,213,866,566 samples, 8.22%)</title><rect x="925.4" y="1861" width="97.0" height="15.0" fill="rgb(207,158,52)" rx="2" ry="2" />
<text  x="928.45" y="1871.5" >duckdb::Bin..</text>
</g>
<g >
<title>duckdb::BlockHandle::Load (7,064,042 samples, 0.01%)</title><rect x="267.5" y="1557" width="0.1" height="15.0" fill="rgb(234,200,31)" rx="2" ry="2" />
<text  x="270.48" y="1567.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionMatcher&gt;::operator (6,105,032 samples, 0.01%)</title><rect x="833.2" y="1637" width="0.1" height="15.0" fill="rgb(242,146,19)" rx="2" ry="2" />
<text  x="836.20" y="1647.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long&gt; (16,011,547 samples, 0.03%)</title><rect x="617.0" y="1733" width="0.3" height="15.0" fill="rgb(205,80,53)" rx="2" ry="2" />
<text  x="619.96" y="1743.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::CreateTree (29,466,191 samples, 0.06%)</title><rect x="1085.9" y="1829" width="0.7" height="15.0" fill="rgb(249,13,5)" rx="2" ry="2" />
<text  x="1088.93" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BindContext::GetUsingBinding (13,010,552 samples, 0.03%)</title><rect x="943.5" y="1701" width="0.3" height="15.0" fill="rgb(244,69,44)" rx="2" ry="2" />
<text  x="946.46" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;::unique_ptr (11,540,608 samples, 0.02%)</title><rect x="1088.7" y="1749" width="0.2" height="15.0" fill="rgb(216,189,28)" rx="2" ry="2" />
<text  x="1091.68" y="1759.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::BlockHandle&gt;::destroy&lt;duckdb::BlockHandle&gt; (87,200,440 samples, 0.17%)</title><rect x="239.2" y="677" width="2.0" height="15.0" fill="rgb(252,9,3)" rx="2" ry="2" />
<text  x="242.22" y="687.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;duckdb::VectorMetaData*, duckdb::VectorMetaData*, std::allocator&lt;duckdb::VectorMetaData&gt; &gt; (8,760,194 samples, 0.02%)</title><rect x="864.3" y="1621" width="0.2" height="15.0" fill="rgb(243,6,33)" rx="2" ry="2" />
<text  x="867.26" y="1631.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::ColumnStatistics, std::allocator&lt;duckdb::ColumnStatistics&gt;,  (4,844,958 samples, 0.01%)</title><rect x="102.3" y="1429" width="0.1" height="15.0" fill="rgb(225,133,52)" rx="2" ry="2" />
<text  x="105.29" y="1439.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::EmptyNeedleRemovalRule, duckdb::ExpressionRewriter&amp;&gt; (126,904,150 samples, 0.25%)</title><rect x="800.1" y="1877" width="2.9" height="15.0" fill="rgb(227,175,23)" rx="2" ry="2" />
<text  x="803.10" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1349" width="0.3" height="15.0" fill="rgb(217,91,9)" rx="2" ry="2" />
<text  x="1120.47" y="1359.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::AppendData (5,584,676 samples, 0.01%)</title><rect x="105.4" y="1637" width="0.1" height="15.0" fill="rgb(226,185,46)" rx="2" ry="2" />
<text  x="108.39" y="1647.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::ResetFromCache (13,926,958 samples, 0.03%)</title><rect x="291.0" y="1573" width="0.3" height="15.0" fill="rgb(230,61,11)" rx="2" ry="2" />
<text  x="294.01" y="1583.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt; &gt; (8,895,623 samples, 0.02%)</title><rect x="1089.4" y="1685" width="0.2" height="15.0" fill="rgb(220,43,8)" rx="2" ry="2" />
<text  x="1092.44" y="1695.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::Append (133,602,686 samples, 0.26%)</title><rect x="228.6" y="1669" width="3.1" height="15.0" fill="rgb(208,68,13)" rx="2" ry="2" />
<text  x="231.63" y="1679.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ConstantExpressionMatcher&gt; (5,358,672 samples, 0.01%)</title><rect x="796.5" y="1845" width="0.2" height="15.0" fill="rgb(248,175,11)" rx="2" ry="2" />
<text  x="799.54" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::GlobalSinkState, std::default_delete&lt;duckdb::GlobalSinkState&gt;, true&gt;::~unique_ptr (72,590,715 samples, 0.14%)</title><rect x="338.1" y="1589" width="1.7" height="15.0" fill="rgb(219,112,46)" rx="2" ry="2" />
<text  x="341.12" y="1599.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (4,742,784 samples, 0.01%)</title><rect x="73.8" y="1797" width="0.1" height="15.0" fill="rgb(223,176,14)" rx="2" ry="2" />
<text  x="76.79" y="1807.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::VectorCacheBuffer (86,371,771 samples, 0.17%)</title><rect x="492.5" y="1621" width="2.0" height="15.0" fill="rgb(241,199,7)" rx="2" ry="2" />
<text  x="495.48" y="1631.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (20,007,602 samples, 0.04%)</title><rect x="595.3" y="1621" width="0.5" height="15.0" fill="rgb(243,54,21)" rx="2" ry="2" />
<text  x="598.32" y="1631.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;::pair (4,520,893 samples, 0.01%)</title><rect x="733.0" y="1653" width="0.2" height="15.0" fill="rgb(235,81,40)" rx="2" ry="2" />
<text  x="736.05" y="1663.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_try_acquire_edata_neighbor_impl (7,127,973 samples, 0.01%)</title><rect x="347.8" y="613" width="0.1" height="15.0" fill="rgb(219,102,53)" rx="2" ry="2" />
<text  x="350.76" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; (5,369,062 samples, 0.01%)</title><rect x="569.8" y="1669" width="0.1" height="15.0" fill="rgb(243,152,12)" rx="2" ry="2" />
<text  x="572.80" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (25,640,747 samples, 0.05%)</title><rect x="920.7" y="1829" width="0.5" height="15.0" fill="rgb(227,176,32)" rx="2" ry="2" />
<text  x="923.65" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::reset (12,401,886 samples, 0.02%)</title><rect x="946.7" y="1669" width="0.3" height="15.0" fill="rgb(213,216,27)" rx="2" ry="2" />
<text  x="949.67" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::Vector*&gt; (154,413,245 samples, 0.30%)</title><rect x="390.4" y="1797" width="3.6" height="15.0" fill="rgb(219,181,3)" rx="2" ry="2" />
<text  x="393.43" y="1807.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::FetchStringFromDict (9,628,675 samples, 0.02%)</title><rect x="215.4" y="1573" width="0.2" height="15.0" fill="rgb(235,106,35)" rx="2" ry="2" />
<text  x="218.42" y="1583.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;std::shared_ptr&lt;duckdb::Task&gt;, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::ProducerBase::dequeue&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; (32,937,907 samples, 0.06%)</title><rect x="109.2" y="1845" width="0.8" height="15.0" fill="rgb(208,89,7)" rx="2" ry="2" />
<text  x="112.21" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (5,545,550 samples, 0.01%)</title><rect x="38.9" y="2005" width="0.2" height="15.0" fill="rgb(231,4,45)" rx="2" ry="2" />
<text  x="41.93" y="2015.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::reference_wrapper&lt;duckdb::Expression&gt;, true&gt;::vector (7,107,815 samples, 0.01%)</title><rect x="739.9" y="1621" width="0.2" height="15.0" fill="rgb(209,192,17)" rx="2" ry="2" />
<text  x="742.91" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LogicalInsert::GetName[abi:cxx11] (11,350,896 samples, 0.02%)</title><rect x="551.2" y="1765" width="0.3" height="15.0" fill="rgb(205,72,50)" rx="2" ry="2" />
<text  x="554.23" y="1775.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (17,235,338 samples, 0.03%)</title><rect x="750.0" y="1765" width="0.4" height="15.0" fill="rgb(220,77,35)" rx="2" ry="2" />
<text  x="752.96" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ExpressionHeuristics::ExpressionHeuristics (145,235,862 samples, 0.28%)</title><rect x="730.9" y="1813" width="3.3" height="15.0" fill="rgb(254,82,35)" rx="2" ry="2" />
<text  x="733.87" y="1823.5" ></text>
</g>
<g >
<title>__handle_mm_fault (214,237,761 samples, 0.42%)</title><rect x="162.9" y="1941" width="5.0" height="15.0" fill="rgb(235,0,27)" rx="2" ry="2" />
<text  x="165.95" y="1951.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::~DataChunk (71,196,462 samples, 0.14%)</title><rect x="497.9" y="1797" width="1.7" height="15.0" fill="rgb(212,34,35)" rx="2" ry="2" />
<text  x="500.94" y="1807.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::HTTPState&gt;::operator= (12,359,892 samples, 0.02%)</title><rect x="1041.4" y="1893" width="0.3" height="15.0" fill="rgb(248,212,51)" rx="2" ry="2" />
<text  x="1044.37" y="1903.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringAppend (4,715,471 samples, 0.01%)</title><rect x="1119.2" y="997" width="0.1" height="15.0" fill="rgb(245,6,18)" rx="2" ry="2" />
<text  x="1122.18" y="1007.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; (6,590,586 samples, 0.01%)</title><rect x="917.7" y="1733" width="0.2" height="15.0" fill="rgb(241,165,6)" rx="2" ry="2" />
<text  x="920.75" y="1743.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ColumnStatistics,  (81,447,402 samples, 0.16%)</title><rect x="425.6" y="1509" width="1.9" height="15.0" fill="rgb(247,146,0)" rx="2" ry="2" />
<text  x="428.58" y="1519.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::FetchFromSource (492,926,038 samples, 0.96%)</title><rect x="465.7" y="1845" width="11.3" height="15.0" fill="rgb(215,175,35)" rx="2" ry="2" />
<text  x="468.66" y="1855.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::~PipelineExecutor (135,675,339 samples, 0.26%)</title><rect x="333.4" y="1701" width="3.1" height="15.0" fill="rgb(206,63,14)" rx="2" ry="2" />
<text  x="336.35" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::ConjunctionSimplificationRule, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (14,440,858 samples, 0.03%)</title><rect x="821.7" y="1877" width="0.3" height="15.0" fill="rgb(214,125,36)" rx="2" ry="2" />
<text  x="824.66" y="1887.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::SelectionData&gt;::~shared_ptr (4,378,740 samples, 0.01%)</title><rect x="315.8" y="1589" width="0.1" height="15.0" fill="rgb(232,57,47)" rx="2" ry="2" />
<text  x="318.76" y="1599.5" ></text>
</g>
<g >
<title>duckdb::UndoBuffer::CreateEntry (103,582,499 samples, 0.20%)</title><rect x="192.5" y="1765" width="2.4" height="15.0" fill="rgb(234,97,5)" rx="2" ry="2" />
<text  x="195.48" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::~vector (18,854,258 samples, 0.04%)</title><rect x="615.4" y="1765" width="0.4" height="15.0" fill="rgb(218,38,25)" rx="2" ry="2" />
<text  x="618.40" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_do_relocate (88,123,032 samples, 0.17%)</title><rect x="568.5" y="1733" width="2.0" height="15.0" fill="rgb(224,152,27)" rx="2" ry="2" />
<text  x="571.45" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_no_sample (11,849,828 samples, 0.02%)</title><rect x="367.3" y="1541" width="0.3" height="15.0" fill="rgb(252,92,19)" rx="2" ry="2" />
<text  x="370.32" y="1551.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::~VectorCacheBuffer (6,547,473 samples, 0.01%)</title><rect x="108.5" y="1525" width="0.2" height="15.0" fill="rgb(216,170,40)" rx="2" ry="2" />
<text  x="111.53" y="1535.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr (30,522,936 samples, 0.06%)</title><rect x="827.1" y="1781" width="0.7" height="15.0" fill="rgb(218,96,3)" rx="2" ry="2" />
<text  x="830.11" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::unique_ptr (5,453,321 samples, 0.01%)</title><rect x="781.2" y="1877" width="0.1" height="15.0" fill="rgb(206,10,7)" rx="2" ry="2" />
<text  x="784.21" y="1887.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::RowGroupCollection, std::allocator&lt;duckdb::RowGroupCollection&gt;, std::shared_ptr&lt;duckdb::DataTableInfo&gt;&amp;, duckdb::BlockManager&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, long const&amp;, int&gt; (81,047,036 samples, 0.16%)</title><rect x="428.6" y="1589" width="1.8" height="15.0" fill="rgb(236,14,29)" rx="2" ry="2" />
<text  x="431.58" y="1599.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::ExpressionMatcher*, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::tuple&lt;duckdb::ExpressionMatcher*&amp;, std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt;, true&gt; (4,721,884 samples, 0.01%)</title><rect x="785.6" y="1797" width="0.1" height="15.0" fill="rgb(236,151,47)" rx="2" ry="2" />
<text  x="788.56" y="1807.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_next_grapheme (94,586,513 samples, 0.18%)</title><rect x="558.0" y="1765" width="2.2" height="15.0" fill="rgb(231,153,46)" rx="2" ry="2" />
<text  x="560.99" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Binder&gt; &gt;::destroy&lt;duckdb::Binder&gt; (59,421,300 samples, 0.12%)</title><rect x="1030.7" y="1797" width="1.4" height="15.0" fill="rgb(215,179,36)" rx="2" ry="2" />
<text  x="1033.70" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ThreadContext::~ThreadContext (12,476,663 samples, 0.02%)</title><rect x="335.7" y="1685" width="0.3" height="15.0" fill="rgb(223,188,18)" rx="2" ry="2" />
<text  x="338.75" y="1695.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::PipelineExecutor, duckdb::ClientContext&amp;, duckdb::Pipeline&amp;&gt; (518,286,081 samples, 1.01%)</title><rect x="485.8" y="1861" width="12.0" height="15.0" fill="rgb(238,92,51)" rx="2" ry="2" />
<text  x="488.84" y="1871.5" ></text>
</g>
<g >
<title>duckdb::FilterPullup::FinishPullup (13,007,126 samples, 0.03%)</title><rect x="744.0" y="1733" width="0.3" height="15.0" fill="rgb(220,114,20)" rx="2" ry="2" />
<text  x="747.02" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::BlockPointer, true&gt;::vector (5,833,316 samples, 0.01%)</title><rect x="457.8" y="1701" width="0.1" height="15.0" fill="rgb(254,97,51)" rx="2" ry="2" />
<text  x="460.75" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (12,107,448 samples, 0.02%)</title><rect x="1003.3" y="1685" width="0.3" height="15.0" fill="rgb(232,9,34)" rx="2" ry="2" />
<text  x="1006.34" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Pipeline,  (31,747,656 samples, 0.06%)</title><rect x="357.5" y="1749" width="0.7" height="15.0" fill="rgb(232,28,26)" rx="2" ry="2" />
<text  x="360.48" y="1759.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::VectorChildBuffer, std::allocator&lt;duckdb::VectorChildBuffer&gt;, duckdb::Vector&gt; (41,549,546 samples, 0.08%)</title><rect x="294.4" y="1637" width="1.0" height="15.0" fill="rgb(217,54,9)" rx="2" ry="2" />
<text  x="297.45" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (41,308,429 samples, 0.08%)</title><rect x="656.1" y="1685" width="1.0" height="15.0" fill="rgb(240,227,4)" rx="2" ry="2" />
<text  x="659.12" y="1695.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::SelectionData&gt;::construct&lt;duckdb::SelectionData, unsigned long&amp;&gt; (8,336,186 samples, 0.02%)</title><rect x="296.6" y="1525" width="0.2" height="15.0" fill="rgb(216,55,22)" rx="2" ry="2" />
<text  x="299.58" y="1535.5" ></text>
</g>
<g >
<title>duckdb::SelectBinder::HasExpandedExpressions (5,982,363 samples, 0.01%)</title><rect x="962.2" y="1749" width="0.1" height="15.0" fill="rgb(223,2,39)" rx="2" ry="2" />
<text  x="965.16" y="1759.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (7,529,307 samples, 0.01%)</title><rect x="108.1" y="1733" width="0.2" height="15.0" fill="rgb(226,109,34)" rx="2" ry="2" />
<text  x="111.08" y="1743.5" ></text>
</g>
<g >
<title>std::function&lt;void  (9,269,952 samples, 0.02%)</title><rect x="735.1" y="1717" width="0.3" height="15.0" fill="rgb(218,23,6)" rx="2" ry="2" />
<text  x="738.14" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LocalSourceState, std::default_delete&lt;duckdb::LocalSourceState&gt;, true&gt;::operator= (9,350,892 samples, 0.02%)</title><rect x="496.6" y="1829" width="0.2" height="15.0" fill="rgb(252,33,19)" rx="2" ry="2" />
<text  x="499.55" y="1839.5" ></text>
</g>
<g >
<title>__asan_memcpy (4,506,050 samples, 0.01%)</title><rect x="703.3" y="1797" width="0.1" height="15.0" fill="rgb(231,130,23)" rx="2" ry="2" />
<text  x="706.28" y="1807.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::DictionaryBuffer, std::allocator&lt;duckdb::DictionaryBuffer&gt;,  (21,851,792 samples, 0.04%)</title><rect x="292.1" y="1573" width="0.5" height="15.0" fill="rgb(217,207,4)" rx="2" ry="2" />
<text  x="295.05" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (70,662,276 samples, 0.14%)</title><rect x="366.7" y="1573" width="1.6" height="15.0" fill="rgb(223,197,13)" rx="2" ry="2" />
<text  x="369.71" y="1583.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, unsigned long&amp;, unsigned long&amp;&gt; (19,060,347 samples, 0.04%)</title><rect x="605.7" y="1749" width="0.5" height="15.0" fill="rgb(230,189,4)" rx="2" ry="2" />
<text  x="608.73" y="1759.5" ></text>
</g>
<g >
<title>__handle_mm_fault (4,811,192 samples, 0.01%)</title><rect x="1175.6" y="1925" width="0.1" height="15.0" fill="rgb(235,111,5)" rx="2" ry="2" />
<text  x="1178.60" y="1935.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::AttachedDatabase*, duckdb::Transaction*, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt; &gt;::~unordered_map (15,865,501 samples, 0.03%)</title><rect x="332.2" y="1797" width="0.3" height="15.0" fill="rgb(217,110,31)" rx="2" ry="2" />
<text  x="335.18" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ProducerToken, std::default_delete&lt;duckdb::ProducerToken&gt;, true&gt;::~unique_ptr (7,862,970 samples, 0.02%)</title><rect x="336.5" y="1749" width="0.2" height="15.0" fill="rgb(226,93,4)" rx="2" ry="2" />
<text  x="339.51" y="1759.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorCacheBuffer,  (143,163,595 samples, 0.28%)</title><rect x="889.6" y="1669" width="3.3" height="15.0" fill="rgb(207,47,23)" rx="2" ry="2" />
<text  x="892.63" y="1679.5" ></text>
</g>
<g >
<title>duckdb::InsertSourceState::InsertSourceState (5,155,156 samples, 0.01%)</title><rect x="399.5" y="1813" width="0.1" height="15.0" fill="rgb(227,93,26)" rx="2" ry="2" />
<text  x="402.50" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::Initialize (99,680,480 samples, 0.19%)</title><rect x="1109.6" y="1925" width="2.3" height="15.0" fill="rgb(241,148,2)" rx="2" ry="2" />
<text  x="1112.63" y="1935.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, duckdb::QueueProducerToken*, std::default_delete&lt;duckdb::QueueProducerToken&gt; &gt; (6,569,803 samples, 0.01%)</title><rect x="504.0" y="1797" width="0.2" height="15.0" fill="rgb(210,79,31)" rx="2" ry="2" />
<text  x="507.00" y="1807.5" ></text>
</g>
<g >
<title>duckdb::MetaTransaction::GetTransaction (164,946,139 samples, 0.32%)</title><rect x="988.9" y="1653" width="3.7" height="15.0" fill="rgb(225,143,3)" rx="2" ry="2" />
<text  x="991.85" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (5,194,368 samples, 0.01%)</title><rect x="735.5" y="1765" width="0.2" height="15.0" fill="rgb(222,23,28)" rx="2" ry="2" />
<text  x="738.54" y="1775.5" ></text>
</g>
<g >
<title>duckdb::InsertSourceState::~InsertSourceState (7,971,991 samples, 0.02%)</title><rect x="357.7" y="1573" width="0.2" height="15.0" fill="rgb(234,71,42)" rx="2" ry="2" />
<text  x="360.67" y="1583.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::ActiveQueryContext*, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt; (22,713,297 samples, 0.04%)</title><rect x="510.4" y="1861" width="0.5" height="15.0" fill="rgb(227,226,38)" rx="2" ry="2" />
<text  x="513.37" y="1871.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (32,914,696 samples, 0.06%)</title><rect x="167.1" y="1877" width="0.7" height="15.0" fill="rgb(247,159,0)" rx="2" ry="2" />
<text  x="170.09" y="1887.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::LocalTableStorage&gt;::shared_ptr&lt;std::allocator&lt;duckdb::LocalTableStorage&gt;, duckdb::DataTable&amp;&gt; (25,727,938 samples, 0.05%)</title><rect x="102.1" y="1669" width="0.6" height="15.0" fill="rgb(215,75,26)" rx="2" ry="2" />
<text  x="105.07" y="1679.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::ColumnBinding, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt;, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt; &gt; &gt;::~unordered_map (11,448,665 samples, 0.02%)</title><rect x="765.4" y="1765" width="0.3" height="15.0" fill="rgb(235,171,45)" rx="2" ry="2" />
<text  x="768.43" y="1775.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned long const*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, unsigned long*&gt; (6,075,922 samples, 0.01%)</title><rect x="302.1" y="1653" width="0.1" height="15.0" fill="rgb(222,48,5)" rx="2" ry="2" />
<text  x="305.05" y="1663.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;unsigned long const*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, unsigned long*, unsigned long&gt; (5,904,893 samples, 0.01%)</title><rect x="228.1" y="1701" width="0.1" height="15.0" fill="rgb(230,226,11)" rx="2" ry="2" />
<text  x="231.07" y="1711.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Pipeline&gt;::shared_ptr&lt;std::allocator&lt;duckdb::Pipeline&gt;, duckdb::Executor&amp;&gt; (10,224,811 samples, 0.02%)</title><rect x="1081.1" y="1621" width="0.2" height="15.0" fill="rgb(235,197,10)" rx="2" ry="2" />
<text  x="1084.05" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (9,162,895 samples, 0.02%)</title><rect x="793.8" y="1813" width="0.2" height="15.0" fill="rgb(235,110,24)" rx="2" ry="2" />
<text  x="796.79" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (9,040,680 samples, 0.02%)</title><rect x="789.5" y="1781" width="0.2" height="15.0" fill="rgb(253,21,19)" rx="2" ry="2" />
<text  x="792.48" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (5,098,444 samples, 0.01%)</title><rect x="335.8" y="1605" width="0.1" height="15.0" fill="rgb(254,199,34)" rx="2" ry="2" />
<text  x="338.80" y="1615.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Free (233,444,866 samples, 0.46%)</title><rect x="344.2" y="885" width="5.4" height="15.0" fill="rgb(236,100,49)" rx="2" ry="2" />
<text  x="347.24" y="895.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::vector (4,453,219 samples, 0.01%)</title><rect x="839.5" y="1797" width="0.1" height="15.0" fill="rgb(223,71,50)" rx="2" ry="2" />
<text  x="842.46" y="1807.5" ></text>
</g>
<g >
<title>duckdb::StandardEntry::StandardEntry (4,792,219 samples, 0.01%)</title><rect x="1114.6" y="1813" width="0.1" height="15.0" fill="rgb(245,213,16)" rx="2" ry="2" />
<text  x="1117.61" y="1823.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::LocalTableStorage,  (365,872,471 samples, 0.71%)</title><rect x="422.7" y="1701" width="8.4" height="15.0" fill="rgb(240,170,47)" rx="2" ry="2" />
<text  x="425.73" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (6,646,546 samples, 0.01%)</title><rect x="331.2" y="1781" width="0.2" height="15.0" fill="rgb(215,4,5)" rx="2" ry="2" />
<text  x="334.24" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ScalarFunctionSet::ScalarFunctionSet (7,974,797 samples, 0.02%)</title><rect x="1114.8" y="1829" width="0.2" height="15.0" fill="rgb(243,76,23)" rx="2" ry="2" />
<text  x="1117.77" y="1839.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::PreparedStatementData&gt;::operator= (6,291,393 samples, 0.01%)</title><rect x="1103.4" y="1893" width="0.1" height="15.0" fill="rgb(252,22,10)" rx="2" ry="2" />
<text  x="1106.37" y="1903.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::UnifiedVectorFormat, true&gt;::~vector (18,995,094 samples, 0.04%)</title><rect x="374.6" y="1909" width="0.5" height="15.0" fill="rgb(239,220,2)" rx="2" ry="2" />
<text  x="377.64" y="1919.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::_M_ptr (6,235,687 samples, 0.01%)</title><rect x="786.8" y="1781" width="0.2" height="15.0" fill="rgb(244,169,41)" rx="2" ry="2" />
<text  x="789.81" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::PreparedStatementData,  (33,875,177 samples, 0.07%)</title><rect x="1040.5" y="1845" width="0.8" height="15.0" fill="rgb(248,221,49)" rx="2" ry="2" />
<text  x="1043.53" y="1855.5" ></text>
</g>
<g >
<title>duckdb::FillExtraInfo&lt;duckdb::CreateAggregateFunctionInfo&gt; (4,801,770 samples, 0.01%)</title><rect x="1115.8" y="1909" width="0.1" height="15.0" fill="rgb(247,203,26)" rx="2" ry="2" />
<text  x="1118.82" y="1919.5" ></text>
</g>
<g >
<title>__asan_memset (4,576,268 samples, 0.01%)</title><rect x="278.6" y="1509" width="0.1" height="15.0" fill="rgb(214,42,2)" rx="2" ry="2" />
<text  x="281.61" y="1519.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::MetaTransaction, std::default_delete&lt;duckdb::MetaTransaction&gt; &gt;::~unique_ptr (26,404,828 samples, 0.05%)</title><rect x="332.0" y="1845" width="0.6" height="15.0" fill="rgb(235,126,24)" rx="2" ry="2" />
<text  x="335.01" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (7,495,699 samples, 0.01%)</title><rect x="327.3" y="1525" width="0.1" height="15.0" fill="rgb(208,88,31)" rx="2" ry="2" />
<text  x="330.27" y="1535.5" ></text>
</g>
<g >
<title>vsnprintf (6,610,323 samples, 0.01%)</title><rect x="440.2" y="1605" width="0.2" height="15.0" fill="rgb(220,214,9)" rx="2" ry="2" />
<text  x="443.21" y="1615.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt;::_M_ptr (6,375,328 samples, 0.01%)</title><rect x="512.1" y="1877" width="0.1" height="15.0" fill="rgb(221,187,0)" rx="2" ry="2" />
<text  x="515.09" y="1887.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::FileBuffer, duckdb::Allocator&amp;, duckdb::FileBufferType&amp;, unsigned long&amp;&gt; (25,060,435 samples, 0.05%)</title><rect x="103.0" y="1589" width="0.6" height="15.0" fill="rgb(253,139,7)" rx="2" ry="2" />
<text  x="106.02" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (8,419,978 samples, 0.02%)</title><rect x="735.7" y="1749" width="0.2" height="15.0" fill="rgb(249,10,16)" rx="2" ry="2" />
<text  x="738.68" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Vector::ToUnifiedFormat (5,924,716 samples, 0.01%)</title><rect x="375.9" y="1909" width="0.1" height="15.0" fill="rgb(254,17,20)" rx="2" ry="2" />
<text  x="378.88" y="1919.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt;, true&gt;::~unique_ptr (8,197,896 samples, 0.02%)</title><rect x="340.7" y="1141" width="0.2" height="15.0" fill="rgb(220,126,52)" rx="2" ry="2" />
<text  x="343.71" y="1151.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Transformer::CreatePivotEntry, std::default_delete&lt;duckdb::Transformer::CreatePivotEntry&gt;, true&gt;, true&gt;::~vector (5,292,882 samples, 0.01%)</title><rect x="540.7" y="1909" width="0.2" height="15.0" fill="rgb(246,217,39)" rx="2" ry="2" />
<text  x="543.73" y="1919.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::AllocatedData&gt; &gt;::construct&lt;duckdb::AllocatedData, duckdb::AllocatedData&gt; (7,779,948 samples, 0.02%)</title><rect x="382.3" y="1781" width="0.2" height="15.0" fill="rgb(218,71,54)" rx="2" ry="2" />
<text  x="385.34" y="1791.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*&gt; (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1525" width="0.3" height="15.0" fill="rgb(211,72,9)" rx="2" ry="2" />
<text  x="835.82" y="1535.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::ToString[abi:cxx11] (563,828,010 samples, 1.10%)</title><rect x="1065.2" y="1813" width="13.0" height="15.0" fill="rgb(222,74,4)" rx="2" ry="2" />
<text  x="1068.24" y="1823.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::~vector (18,854,258 samples, 0.04%)</title><rect x="615.4" y="1781" width="0.4" height="15.0" fill="rgb(213,89,40)" rx="2" ry="2" />
<text  x="618.40" y="1791.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;*, duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt; &gt; (14,305,043 samples, 0.03%)</title><rect x="971.8" y="1653" width="0.3" height="15.0" fill="rgb(231,181,52)" rx="2" ry="2" />
<text  x="974.80" y="1663.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::~shared_ptr (63,917,622 samples, 0.12%)</title><rect x="498.0" y="1669" width="1.4" height="15.0" fill="rgb(205,227,31)" rx="2" ry="2" />
<text  x="500.97" y="1679.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorCacheBuffer,  (62,918,897 samples, 0.12%)</title><rect x="289.2" y="1605" width="1.4" height="15.0" fill="rgb(230,126,48)" rx="2" ry="2" />
<text  x="292.20" y="1615.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::RenderTree&gt;::operator (15,920,479 samples, 0.03%)</title><rect x="633.6" y="1765" width="0.4" height="15.0" fill="rgb(223,60,3)" rx="2" ry="2" />
<text  x="636.58" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::Append (48,255,884 samples, 0.09%)</title><rect x="229.7" y="1637" width="1.1" height="15.0" fill="rgb(206,86,38)" rx="2" ry="2" />
<text  x="232.71" y="1647.5" ></text>
</g>
<g >
<title>duckdb::DuckDBAssertInternal (28,363,081 samples, 0.06%)</title><rect x="280.9" y="1525" width="0.7" height="15.0" fill="rgb(221,57,17)" rx="2" ry="2" />
<text  x="283.93" y="1535.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Free (62,824,952 samples, 0.12%)</title><rect x="1123.2" y="1589" width="1.4" height="15.0" fill="rgb(209,184,36)" rx="2" ry="2" />
<text  x="1126.17" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~vector (17,526,829 samples, 0.03%)</title><rect x="685.8" y="1797" width="0.4" height="15.0" fill="rgb(209,11,43)" rx="2" ry="2" />
<text  x="688.76" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::FetchResultInternal (5,568,396 samples, 0.01%)</title><rect x="1108.6" y="1877" width="0.2" height="15.0" fill="rgb(225,227,8)" rx="2" ry="2" />
<text  x="1111.62" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="965" width="0.1" height="15.0" fill="rgb(206,27,51)" rx="2" ry="2" />
<text  x="14.25" y="975.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1013" width="0.1" height="15.0" fill="rgb(250,79,49)" rx="2" ry="2" />
<text  x="14.25" y="1023.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ScalarFunction, std::allocator&lt;duckdb::ScalarFunction&gt; &gt;::vector (5,596,943 samples, 0.01%)</title><rect x="1116.8" y="1861" width="0.1" height="15.0" fill="rgb(209,190,16)" rx="2" ry="2" />
<text  x="1119.78" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ClientData::Get (29,738,675 samples, 0.06%)</title><rect x="712.7" y="1845" width="0.7" height="15.0" fill="rgb(247,224,42)" rx="2" ry="2" />
<text  x="715.73" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::Binding&gt;, void&gt; (9,246,578 samples, 0.02%)</title><rect x="930.4" y="1701" width="0.3" height="15.0" fill="rgb(238,201,53)" rx="2" ry="2" />
<text  x="933.44" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CompressionAppendState, std::default_delete&lt;duckdb::CompressionAppendState&gt;, true&gt;::~unique_ptr (17,238,534 samples, 0.03%)</title><rect x="233.6" y="1685" width="0.4" height="15.0" fill="rgb(220,181,31)" rx="2" ry="2" />
<text  x="236.63" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::MetaPipeline,  (22,251,549 samples, 0.04%)</title><rect x="1096.2" y="1621" width="0.5" height="15.0" fill="rgb(232,27,53)" rx="2" ry="2" />
<text  x="1099.18" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (16,445,185 samples, 0.03%)</title><rect x="729.4" y="1621" width="0.4" height="15.0" fill="rgb(230,112,47)" rx="2" ry="2" />
<text  x="732.43" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (46,384,930 samples, 0.09%)</title><rect x="844.6" y="1749" width="1.1" height="15.0" fill="rgb(206,124,0)" rx="2" ry="2" />
<text  x="847.63" y="1759.5" ></text>
</g>
<g >
<title>duckdb::StatementProperties::~StatementProperties (8,523,641 samples, 0.02%)</title><rect x="1106.9" y="1877" width="0.2" height="15.0" fill="rgb(207,72,6)" rx="2" ry="2" />
<text  x="1109.92" y="1887.5" ></text>
</g>
<g >
<title>duckdb::Binder::ExpandStarExpression (287,564,532 samples, 0.56%)</title><rect x="942.3" y="1733" width="6.7" height="15.0" fill="rgb(216,54,9)" rx="2" ry="2" />
<text  x="945.34" y="1743.5" ></text>
</g>
<g >
<title>do_wp_page (7,971,376 samples, 0.02%)</title><rect x="67.6" y="1909" width="0.2" height="15.0" fill="rgb(210,9,24)" rx="2" ry="2" />
<text  x="70.61" y="1919.5" ></text>
</g>
<g >
<title>duckdb::PipelineFinishEvent::~PipelineFinishEvent (31,775,142 samples, 0.06%)</title><rect x="355.9" y="1653" width="0.7" height="15.0" fill="rgb(220,208,41)" rx="2" ry="2" />
<text  x="358.90" y="1663.5" ></text>
</g>
<g >
<title>duckdb::BaseSelectBinder::~BaseSelectBinder (12,515,494 samples, 0.02%)</title><rect x="962.9" y="1733" width="0.3" height="15.0" fill="rgb(230,126,24)" rx="2" ry="2" />
<text  x="965.93" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (36,657,603 samples, 0.07%)</title><rect x="677.8" y="1733" width="0.8" height="15.0" fill="rgb(239,10,18)" rx="2" ry="2" />
<text  x="680.75" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (6,680,074 samples, 0.01%)</title><rect x="832.4" y="1669" width="0.1" height="15.0" fill="rgb(210,147,6)" rx="2" ry="2" />
<text  x="835.35" y="1679.5" ></text>
</g>
<g >
<title>std::operator==&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; (6,753,716 samples, 0.01%)</title><rect x="984.5" y="1813" width="0.1" height="15.0" fill="rgb(217,53,50)" rx="2" ry="2" />
<text  x="987.47" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (4,722,686 samples, 0.01%)</title><rect x="105.8" y="1717" width="0.1" height="15.0" fill="rgb(240,18,48)" rx="2" ry="2" />
<text  x="108.81" y="1727.5" ></text>
</g>
<g >
<title>ext4_reserve_inode_write (6,536,423 samples, 0.01%)</title><rect x="248.2" y="1477" width="0.2" height="15.0" fill="rgb(243,17,35)" rx="2" ry="2" />
<text  x="251.21" y="1487.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (5,731,130 samples, 0.01%)</title><rect x="1101.5" y="1813" width="0.1" height="15.0" fill="rgb(232,153,52)" rx="2" ry="2" />
<text  x="1104.50" y="1823.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::operator=&lt;duckdb::VectorCacheBuffer&gt; (5,297,525 samples, 0.01%)</title><rect x="290.7" y="1669" width="0.2" height="15.0" fill="rgb(241,184,37)" rx="2" ry="2" />
<text  x="293.73" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt;, true&gt;::unique_ptr (15,054,082 samples, 0.03%)</title><rect x="448.7" y="1685" width="0.3" height="15.0" fill="rgb(245,37,16)" rx="2" ry="2" />
<text  x="451.68" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Binder::PushExpressionBinder (7,388,921 samples, 0.01%)</title><rect x="961.3" y="1701" width="0.1" height="15.0" fill="rgb(213,54,9)" rx="2" ry="2" />
<text  x="964.25" y="1711.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unordered_set (8,523,641 samples, 0.02%)</title><rect x="1106.9" y="1861" width="0.2" height="15.0" fill="rgb(206,62,12)" rx="2" ry="2" />
<text  x="1109.92" y="1871.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (21,757,309 samples, 0.04%)</title><rect x="634.7" y="1733" width="0.5" height="15.0" fill="rgb(249,12,19)" rx="2" ry="2" />
<text  x="637.68" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::InClauseExpressionMatcher, std::default_delete&lt;duckdb::InClauseExpressionMatcher&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::InClauseExpressionMatcher&gt;, void&gt; (10,086,393 samples, 0.02%)</title><rect x="810.2" y="1813" width="0.3" height="15.0" fill="rgb(212,96,51)" rx="2" ry="2" />
<text  x="813.24" y="1823.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (26,596,599 samples, 0.05%)</title><rect x="750.6" y="1701" width="0.6" height="15.0" fill="rgb(240,163,14)" rx="2" ry="2" />
<text  x="753.62" y="1711.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (77,664,163 samples, 0.15%)</title><rect x="333.6" y="1477" width="1.8" height="15.0" fill="rgb(242,17,15)" rx="2" ry="2" />
<text  x="336.60" y="1487.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::PipelineEvent&gt; &gt;::construct&lt;duckdb::PipelineEvent, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (8,079,211 samples, 0.02%)</title><rect x="1050.1" y="1717" width="0.2" height="15.0" fill="rgb(232,137,1)" rx="2" ry="2" />
<text  x="1053.13" y="1727.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (65,629,264 samples, 0.13%)</title><rect x="709.0" y="1797" width="1.5" height="15.0" fill="rgb(241,19,38)" rx="2" ry="2" />
<text  x="712.02" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;::operator= (10,464,539 samples, 0.02%)</title><rect x="1105.2" y="1909" width="0.2" height="15.0" fill="rgb(240,201,26)" rx="2" ry="2" />
<text  x="1108.17" y="1919.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt;, true&gt;::unique_ptr (9,181,469 samples, 0.02%)</title><rect x="377.1" y="1813" width="0.2" height="15.0" fill="rgb(216,43,15)" rx="2" ry="2" />
<text  x="380.12" y="1823.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::BufferedSerializer&gt;::operator (4,552,497 samples, 0.01%)</title><rect x="593.1" y="1797" width="0.1" height="15.0" fill="rgb(237,43,38)" rx="2" ry="2" />
<text  x="596.05" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::ParseStatements (1,116,570,306 samples, 2.18%)</title><rect x="516.4" y="1973" width="25.7" height="15.0" fill="rgb(243,210,0)" rx="2" ry="2" />
<text  x="519.41" y="1983.5" >d..</text>
</g>
<g >
<title>duckdb::PhysicalColumnDataScanState::PhysicalColumnDataScanState (6,657,813 samples, 0.01%)</title><rect x="91.9" y="1685" width="0.2" height="15.0" fill="rgb(220,50,7)" rx="2" ry="2" />
<text  x="94.92" y="1695.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (9,900,783 samples, 0.02%)</title><rect x="78.5" y="1989" width="0.2" height="15.0" fill="rgb(215,55,15)" rx="2" ry="2" />
<text  x="81.48" y="1999.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::Value, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::Value&gt; &gt; &gt;::find (16,885,562 samples, 0.03%)</title><rect x="373.6" y="1893" width="0.4" height="15.0" fill="rgb(250,98,14)" rx="2" ry="2" />
<text  x="376.57" y="1903.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; (8,030,915 samples, 0.02%)</title><rect x="869.1" y="1701" width="0.2" height="15.0" fill="rgb(207,175,15)" rx="2" ry="2" />
<text  x="872.09" y="1711.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::OrderByNode, true&gt;::vector (6,162,276 samples, 0.01%)</title><rect x="527.1" y="1749" width="0.1" height="15.0" fill="rgb(213,169,1)" rx="2" ry="2" />
<text  x="530.06" y="1759.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (6,110,228 samples, 0.01%)</title><rect x="580.8" y="1813" width="0.1" height="15.0" fill="rgb(254,123,46)" rx="2" ry="2" />
<text  x="583.79" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionListRef, std::default_delete&lt;duckdb::ExpressionListRef&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ExpressionListRef&gt;, void&gt; (7,110,268 samples, 0.01%)</title><rect x="530.9" y="1733" width="0.2" height="15.0" fill="rgb(236,101,52)" rx="2" ry="2" />
<text  x="533.93" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt; &gt; &gt;::vector (6,014,163 samples, 0.01%)</title><rect x="758.4" y="1765" width="0.1" height="15.0" fill="rgb(220,134,12)" rx="2" ry="2" />
<text  x="761.41" y="1775.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::~MetaPipeline (17,041,770 samples, 0.03%)</title><rect x="1096.3" y="1525" width="0.4" height="15.0" fill="rgb(207,134,24)" rx="2" ry="2" />
<text  x="1099.28" y="1535.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::try_dequeue&lt;duckdb::BufferEvictionNode&gt; (46,659,705 samples, 0.09%)</title><rect x="342.9" y="965" width="1.0" height="15.0" fill="rgb(238,16,39)" rx="2" ry="2" />
<text  x="345.87" y="975.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc_large (7,654,087 samples, 0.01%)</title><rect x="221.9" y="1333" width="0.2" height="15.0" fill="rgb(252,36,12)" rx="2" ry="2" />
<text  x="224.88" y="1343.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::GetNode (24,382,292 samples, 0.05%)</title><rect x="571.5" y="1797" width="0.5" height="15.0" fill="rgb(213,61,36)" rx="2" ry="2" />
<text  x="574.47" y="1807.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (134,859,151 samples, 0.26%)</title><rect x="548.0" y="1749" width="3.1" height="15.0" fill="rgb(251,225,28)" rx="2" ry="2" />
<text  x="550.99" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::operator= (6,772,806 samples, 0.01%)</title><rect x="635.5" y="1717" width="0.2" height="15.0" fill="rgb(230,43,49)" rx="2" ry="2" />
<text  x="638.54" y="1727.5" ></text>
</g>
<g >
<title>do_group_exit (93,290,928 samples, 0.18%)</title><rect x="1177.6" y="1989" width="2.1" height="15.0" fill="rgb(217,16,21)" rx="2" ry="2" />
<text  x="1180.60" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (4,886,770 samples, 0.01%)</title><rect x="337.8" y="1621" width="0.1" height="15.0" fill="rgb(210,25,4)" rx="2" ry="2" />
<text  x="340.78" y="1631.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (26,450,252 samples, 0.05%)</title><rect x="352.4" y="1765" width="0.6" height="15.0" fill="rgb(210,167,14)" rx="2" ry="2" />
<text  x="355.42" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PipelineRenderNode, std::default_delete&lt;duckdb::PipelineRenderNode&gt;, true&gt;::operator (5,058,682 samples, 0.01%)</title><rect x="1069.3" y="1765" width="0.1" height="15.0" fill="rgb(244,199,18)" rx="2" ry="2" />
<text  x="1072.25" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt; &gt; &gt;::~vector (20,328,857 samples, 0.04%)</title><rect x="971.8" y="1669" width="0.5" height="15.0" fill="rgb(205,17,29)" rx="2" ry="2" />
<text  x="974.80" y="1679.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::overflow (15,227,589 samples, 0.03%)</title><rect x="1184.9" y="2037" width="0.4" height="15.0" fill="rgb(230,125,37)" rx="2" ry="2" />
<text  x="1187.95" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::empty (5,024,400 samples, 0.01%)</title><rect x="1021.1" y="1829" width="0.1" height="15.0" fill="rgb(211,212,7)" rx="2" ry="2" />
<text  x="1024.13" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics&gt;, false&gt;::operator= (4,451,755 samples, 0.01%)</title><rect x="453.9" y="1429" width="0.1" height="15.0" fill="rgb(229,131,42)" rx="2" ry="2" />
<text  x="456.86" y="1439.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_base (4,509,041 samples, 0.01%)</title><rect x="650.4" y="1733" width="0.1" height="15.0" fill="rgb(229,213,17)" rx="2" ry="2" />
<text  x="653.43" y="1743.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderNode (5,436,220 samples, 0.01%)</title><rect x="549.3" y="1605" width="0.1" height="15.0" fill="rgb(208,224,50)" rx="2" ry="2" />
<text  x="552.32" y="1615.5" ></text>
</g>
<g >
<title>duckdb::ManyFunctionMatcher::~ManyFunctionMatcher (4,512,659 samples, 0.01%)</title><rect x="831.5" y="1525" width="0.1" height="15.0" fill="rgb(229,4,21)" rx="2" ry="2" />
<text  x="834.46" y="1535.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;::construct&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, unsigned long&amp;&gt; (34,012,216 samples, 0.07%)</title><rect x="899.9" y="1493" width="0.8" height="15.0" fill="rgb(251,8,50)" rx="2" ry="2" />
<text  x="902.90" y="1503.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::VectorDataIndex, true&gt;::~vector (5,273,446 samples, 0.01%)</title><rect x="341.3" y="1189" width="0.2" height="15.0" fill="rgb(250,82,15)" rx="2" ry="2" />
<text  x="344.34" y="1199.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ChunkMetaData, std::allocator&lt;duckdb::ChunkMetaData&gt; &gt;::_M_realloc_insert&lt;duckdb::ChunkMetaData&gt; (26,561,829 samples, 0.05%)</title><rect x="885.2" y="1717" width="0.7" height="15.0" fill="rgb(254,141,52)" rx="2" ry="2" />
<text  x="888.24" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5,199,193 samples, 0.01%)</title><rect x="955.1" y="1509" width="0.1" height="15.0" fill="rgb(206,119,41)" rx="2" ry="2" />
<text  x="958.07" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (6,982,455 samples, 0.01%)</title><rect x="1043.9" y="1765" width="0.1" height="15.0" fill="rgb(247,193,23)" rx="2" ry="2" />
<text  x="1046.85" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundTableRef, std::default_delete&lt;duckdb::BoundTableRef&gt;, true&gt;::operator= (13,019,707 samples, 0.03%)</title><rect x="940.7" y="1749" width="0.3" height="15.0" fill="rgb(214,87,42)" rx="2" ry="2" />
<text  x="943.68" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::QualifyColumnNames (170,022,423 samples, 0.33%)</title><rect x="957.9" y="1749" width="3.9" height="15.0" fill="rgb(222,58,32)" rx="2" ry="2" />
<text  x="960.87" y="1759.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::StandardColumnData,  (7,569,833 samples, 0.01%)</title><rect x="104.7" y="1573" width="0.2" height="15.0" fill="rgb(252,90,5)" rx="2" ry="2" />
<text  x="107.74" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::large_palloc (10,601,018 samples, 0.02%)</title><rect x="103.2" y="1333" width="0.2" height="15.0" fill="rgb(227,127,45)" rx="2" ry="2" />
<text  x="106.17" y="1343.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;unsigned long&gt;::_M_ptr (15,216,022 samples, 0.03%)</title><rect x="88.7" y="2005" width="0.3" height="15.0" fill="rgb(240,226,1)" rx="2" ry="2" />
<text  x="91.69" y="2015.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::RegisterPragmaFunctions (16,768,189 samples, 0.03%)</title><rect x="1110.4" y="1909" width="0.4" height="15.0" fill="rgb(209,211,16)" rx="2" ry="2" />
<text  x="1113.44" y="1919.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::InitializeAppend (175,922,625 samples, 0.34%)</title><rect x="195.0" y="1749" width="4.0" height="15.0" fill="rgb(224,52,17)" rx="2" ry="2" />
<text  x="197.96" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (7,688,930 samples, 0.01%)</title><rect x="980.7" y="1685" width="0.2" height="15.0" fill="rgb(247,10,8)" rx="2" ry="2" />
<text  x="983.70" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; (6,146,923 samples, 0.01%)</title><rect x="991.0" y="1605" width="0.1" height="15.0" fill="rgb(216,228,37)" rx="2" ry="2" />
<text  x="993.99" y="1615.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt; &gt; (10,598,146 samples, 0.02%)</title><rect x="971.8" y="1605" width="0.3" height="15.0" fill="rgb(216,157,22)" rx="2" ry="2" />
<text  x="974.85" y="1615.5" ></text>
</g>
<g >
<title>duckdb::SelectionData::SelectionData (441,157,791 samples, 0.86%)</title><rect x="200.8" y="1525" width="10.2" height="15.0" fill="rgb(205,226,40)" rx="2" ry="2" />
<text  x="203.80" y="1535.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::LogicalOperator&gt;, void&gt; (5,554,472 samples, 0.01%)</title><rect x="986.4" y="1797" width="0.2" height="15.0" fill="rgb(248,152,11)" rx="2" ry="2" />
<text  x="989.42" y="1807.5" ></text>
</g>
<g >
<title>duckdb::grapheme_break_extended (39,897,256 samples, 0.08%)</title><rect x="558.5" y="1749" width="0.9" height="15.0" fill="rgb(247,17,32)" rx="2" ry="2" />
<text  x="561.47" y="1759.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::Append (13,024,039 samples, 0.03%)</title><rect x="105.3" y="1733" width="0.3" height="15.0" fill="rgb(248,167,47)" rx="2" ry="2" />
<text  x="108.28" y="1743.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt; &gt;::_M_ptr (4,373,379 samples, 0.01%)</title><rect x="194.6" y="1701" width="0.1" height="15.0" fill="rgb(209,150,30)" rx="2" ry="2" />
<text  x="197.64" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, unsigned long&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (4,490,695 samples, 0.01%)</title><rect x="757.6" y="1717" width="0.1" height="15.0" fill="rgb(228,91,33)" rx="2" ry="2" />
<text  x="760.58" y="1727.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::BlockHandle&gt;::construct&lt;duckdb::BlockHandle, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool&amp;, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (18,839,253 samples, 0.04%)</title><rect x="881.1" y="1525" width="0.4" height="15.0" fill="rgb(242,31,47)" rx="2" ry="2" />
<text  x="884.09" y="1535.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnDataCopyFunction*, duckdb::ColumnDataCopyFunction&gt; (4,696,348 samples, 0.01%)</title><rect x="1122.0" y="1829" width="0.1" height="15.0" fill="rgb(239,91,9)" rx="2" ry="2" />
<text  x="1124.97" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;::operator= (10,043,461 samples, 0.02%)</title><rect x="983.1" y="1813" width="0.2" height="15.0" fill="rgb(235,202,39)" rx="2" ry="2" />
<text  x="986.09" y="1823.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (11,285,954 samples, 0.02%)</title><rect x="857.3" y="1813" width="0.2" height="15.0" fill="rgb(234,97,29)" rx="2" ry="2" />
<text  x="860.28" y="1823.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::ColumnDataCollection*, std::default_delete&lt;duckdb::ColumnDataCollection&gt; &gt;::tuple&lt;duckdb::ColumnDataCollection*&amp;, std::default_delete&lt;duckdb::ColumnDataCollection&gt;, true&gt; (4,445,707 samples, 0.01%)</title><rect x="912.7" y="1701" width="0.1" height="15.0" fill="rgb(205,218,43)" rx="2" ry="2" />
<text  x="915.69" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (58,802,373 samples, 0.11%)</title><rect x="492.8" y="1493" width="1.3" height="15.0" fill="rgb(214,174,30)" rx="2" ry="2" />
<text  x="495.76" y="1503.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::StartPhase (35,104,417 samples, 0.07%)</title><rect x="1033.4" y="1893" width="0.8" height="15.0" fill="rgb(235,29,43)" rx="2" ry="2" />
<text  x="1036.44" y="1903.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; (17,571,097 samples, 0.03%)</title><rect x="1036.4" y="1525" width="0.4" height="15.0" fill="rgb(212,225,28)" rx="2" ry="2" />
<text  x="1039.39" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_allocate_node&lt;unsigned long const&amp;&gt; (32,328,054 samples, 0.06%)</title><rect x="667.5" y="1717" width="0.7" height="15.0" fill="rgb(247,132,27)" rx="2" ry="2" />
<text  x="670.50" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::ColumnData&gt;*&gt; (275,160,640 samples, 0.54%)</title><rect x="237.9" y="1173" width="6.3" height="15.0" fill="rgb(235,141,23)" rx="2" ry="2" />
<text  x="240.90" y="1183.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_ostringstream (5,102,000 samples, 0.01%)</title><rect x="90.2" y="1989" width="0.1" height="15.0" fill="rgb(243,14,27)" rx="2" ry="2" />
<text  x="93.17" y="1999.5" ></text>
</g>
<g >
<title>duckdb::SelectionVector::~SelectionVector (11,324,232 samples, 0.02%)</title><rect x="266.8" y="1669" width="0.3" height="15.0" fill="rgb(224,107,11)" rx="2" ry="2" />
<text  x="269.80" y="1679.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::RegisterDistributiveAggregates (4,767,828 samples, 0.01%)</title><rect x="1109.7" y="1909" width="0.1" height="15.0" fill="rgb(207,199,31)" rx="2" ry="2" />
<text  x="1112.72" y="1919.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (5,291,986 samples, 0.01%)</title><rect x="1032.7" y="1781" width="0.1" height="15.0" fill="rgb(245,6,31)" rx="2" ry="2" />
<text  x="1035.73" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Vector&gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (15,221,219 samples, 0.03%)</title><rect x="219.8" y="1653" width="0.3" height="15.0" fill="rgb(216,38,5)" rx="2" ry="2" />
<text  x="222.78" y="1663.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::Expression&gt;::operator (15,477,921 samples, 0.03%)</title><rect x="642.7" y="1829" width="0.3" height="15.0" fill="rgb(208,97,48)" rx="2" ry="2" />
<text  x="645.68" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (4,567,963 samples, 0.01%)</title><rect x="33.5" y="1973" width="0.1" height="15.0" fill="rgb(239,184,47)" rx="2" ry="2" />
<text  x="36.50" y="1983.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ConstantFoldingExpressionMatcher, std::default_delete&lt;duckdb::ConstantFoldingExpressionMatcher&gt; &gt;::_M_ptr (4,499,110 samples, 0.01%)</title><rect x="795.9" y="1781" width="0.1" height="15.0" fill="rgb(216,146,37)" rx="2" ry="2" />
<text  x="798.91" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (8,046,896 samples, 0.02%)</title><rect x="1023.5" y="1813" width="0.2" height="15.0" fill="rgb(254,97,39)" rx="2" ry="2" />
<text  x="1026.50" y="1823.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringAppend (19,003,348 samples, 0.04%)</title><rect x="230.0" y="1557" width="0.4" height="15.0" fill="rgb(233,25,34)" rx="2" ry="2" />
<text  x="232.98" y="1567.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;, std::allocator&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt; &gt; &gt;::push_back (30,700,214 samples, 0.06%)</title><rect x="447.6" y="1653" width="0.7" height="15.0" fill="rgb(245,89,5)" rx="2" ry="2" />
<text  x="450.61" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (10,153,069 samples, 0.02%)</title><rect x="1026.8" y="1845" width="0.3" height="15.0" fill="rgb(244,64,45)" rx="2" ry="2" />
<text  x="1029.82" y="1855.5" ></text>
</g>
<g >
<title>duckdb::InsertStatement::~InsertStatement (63,639,057 samples, 0.12%)</title><rect x="1037.9" y="1845" width="1.5" height="15.0" fill="rgb(252,93,34)" rx="2" ry="2" />
<text  x="1040.93" y="1855.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::VectorCacheBuffer (53,163,705 samples, 0.10%)</title><rect x="289.2" y="1525" width="1.3" height="15.0" fill="rgb(221,17,40)" rx="2" ry="2" />
<text  x="292.25" y="1535.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (5,843,030 samples, 0.01%)</title><rect x="498.7" y="1381" width="0.1" height="15.0" fill="rgb(228,9,54)" rx="2" ry="2" />
<text  x="501.68" y="1391.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocatorData::~ArenaAllocatorData (4,542,362 samples, 0.01%)</title><rect x="1122.2" y="1605" width="0.1" height="15.0" fill="rgb(214,122,32)" rx="2" ry="2" />
<text  x="1125.24" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LocalSinkState, std::default_delete&lt;duckdb::LocalSinkState&gt; &gt;::reset (182,272,742 samples, 0.36%)</title><rect x="481.0" y="1813" width="4.2" height="15.0" fill="rgb(234,11,35)" rx="2" ry="2" />
<text  x="483.98" y="1823.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (62,521,008 samples, 0.12%)</title><rect x="1027.9" y="1797" width="1.4" height="15.0" fill="rgb(210,77,30)" rx="2" ry="2" />
<text  x="1030.91" y="1807.5" ></text>
</g>
<g >
<title>duckdb::LocalTableStorage::Rollback (11,974,148 samples, 0.02%)</title><rect x="233.2" y="1781" width="0.3" height="15.0" fill="rgb(237,46,41)" rx="2" ry="2" />
<text  x="236.19" y="1791.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::FinalizeAppend (41,400,184 samples, 0.08%)</title><rect x="100.7" y="1701" width="1.0" height="15.0" fill="rgb(226,127,22)" rx="2" ry="2" />
<text  x="103.72" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="565" width="0.1" height="15.0" fill="rgb(245,55,21)" rx="2" ry="2" />
<text  x="14.25" y="575.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt;*, duckdb::SegmentNode&lt;duckdb::RowGroup&gt; &gt; (339,350,470 samples, 0.66%)</title><rect x="237.5" y="1365" width="7.8" height="15.0" fill="rgb(242,218,6)" rx="2" ry="2" />
<text  x="240.47" y="1375.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;, true&gt;::~vector (4,720,482 samples, 0.01%)</title><rect x="1089.5" y="1589" width="0.1" height="15.0" fill="rgb(231,52,51)" rx="2" ry="2" />
<text  x="1092.46" y="1599.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::RelationAttributes, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::RelationAttributes&gt; &gt; &gt;::~unordered_map (6,129,309 samples, 0.01%)</title><rect x="756.0" y="1749" width="0.2" height="15.0" fill="rgb(220,33,26)" rx="2" ry="2" />
<text  x="759.02" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::shared_ptr&lt;duckdb::Event&gt;, true&gt;::~vector (4,702,777 samples, 0.01%)</title><rect x="336.8" y="1749" width="0.1" height="15.0" fill="rgb(206,171,46)" rx="2" ry="2" />
<text  x="339.79" y="1759.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (29,358,290 samples, 0.06%)</title><rect x="848.8" y="1829" width="0.7" height="15.0" fill="rgb(244,192,26)" rx="2" ry="2" />
<text  x="851.82" y="1839.5" ></text>
</g>
<g >
<title>std::function&lt;void  (7,690,385 samples, 0.01%)</title><rect x="849.5" y="1797" width="0.2" height="15.0" fill="rgb(205,162,17)" rx="2" ry="2" />
<text  x="852.54" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_move_assign (8,021,954 samples, 0.02%)</title><rect x="1015.3" y="1797" width="0.2" height="15.0" fill="rgb(254,184,7)" rx="2" ry="2" />
<text  x="1018.28" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (11,004,713 samples, 0.02%)</title><rect x="991.4" y="1605" width="0.3" height="15.0" fill="rgb(243,49,2)" rx="2" ry="2" />
<text  x="994.43" y="1615.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::FieldWriter (22,933,258 samples, 0.04%)</title><rect x="592.3" y="1845" width="0.6" height="15.0" fill="rgb(215,117,54)" rx="2" ry="2" />
<text  x="595.34" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (63,673,524 samples, 0.12%)</title><rect x="896.2" y="1493" width="1.5" height="15.0" fill="rgb(249,154,4)" rx="2" ry="2" />
<text  x="899.22" y="1503.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::ScanCommitted (1,380,404,193 samples, 2.69%)</title><rect x="255.6" y="1701" width="31.8" height="15.0" fill="rgb(236,80,28)" rx="2" ry="2" />
<text  x="258.62" y="1711.5" >du..</text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;, true&gt;::~vector (450,813,482 samples, 0.88%)</title><rect x="339.8" y="1589" width="10.4" height="15.0" fill="rgb(254,12,42)" rx="2" ry="2" />
<text  x="342.84" y="1599.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::~SegmentTree (345,068,200 samples, 0.67%)</title><rect x="237.4" y="1413" width="8.0" height="15.0" fill="rgb(225,18,18)" rx="2" ry="2" />
<text  x="240.42" y="1423.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;::~vector (9,066,496 samples, 0.02%)</title><rect x="980.7" y="1717" width="0.2" height="15.0" fill="rgb(210,11,4)" rx="2" ry="2" />
<text  x="983.68" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (33,369,162 samples, 0.07%)</title><rect x="750.5" y="1781" width="0.8" height="15.0" fill="rgb(224,228,42)" rx="2" ry="2" />
<text  x="753.52" y="1791.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::SetThreadsInternal (5,407,272 samples, 0.01%)</title><rect x="1117.2" y="1957" width="0.1" height="15.0" fill="rgb(225,111,17)" rx="2" ry="2" />
<text  x="1120.20" y="1967.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int*, std::pair&lt;unsigned int* const, std::shared_ptr&lt;duckdb::VectorBuffer&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned int* const, std::shared_ptr&lt;duckdb::VectorBuffer&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int*&gt;, std::hash&lt;unsigned int*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (9,367,206 samples, 0.02%)</title><rect x="293.2" y="1669" width="0.2" height="15.0" fill="rgb(228,178,25)" rx="2" ry="2" />
<text  x="296.22" y="1679.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::SelectionData, unsigned long&amp;&gt; (431,421,979 samples, 0.84%)</title><rect x="302.4" y="1685" width="9.9" height="15.0" fill="rgb(206,218,50)" rx="2" ry="2" />
<text  x="305.41" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::AllocatedData, std::allocator&lt;duckdb::AllocatedData&gt; &gt;::~vector (4,505,692 samples, 0.01%)</title><rect x="338.8" y="1349" width="0.1" height="15.0" fill="rgb(218,181,47)" rx="2" ry="2" />
<text  x="341.80" y="1359.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;, unsigned long, duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;, duckdb::ExpressionEquality&lt;duckdb::ParsedExpression&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt; &gt; &gt;::~unordered_map (6,554,946 samples, 0.01%)</title><rect x="968.8" y="1749" width="0.2" height="15.0" fill="rgb(226,147,15)" rx="2" ry="2" />
<text  x="971.81" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RenderTreeNode&gt;, void&gt; (4,711,037 samples, 0.01%)</title><rect x="595.9" y="1637" width="0.1" height="15.0" fill="rgb(205,224,26)" rx="2" ry="2" />
<text  x="598.91" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::operator[] (355,846,841 samples, 0.69%)</title><rect x="202.5" y="1509" width="8.2" height="15.0" fill="rgb(218,47,17)" rx="2" ry="2" />
<text  x="205.49" y="1519.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::ActiveQueryContext*, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt; (6,861,746 samples, 0.01%)</title><rect x="514.7" y="1845" width="0.1" height="15.0" fill="rgb(248,143,48)" rx="2" ry="2" />
<text  x="517.66" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (21,733,705 samples, 0.04%)</title><rect x="334.3" y="1301" width="0.5" height="15.0" fill="rgb(246,154,30)" rx="2" ry="2" />
<text  x="337.30" y="1311.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::~vector (79,905,719 samples, 0.16%)</title><rect x="221.2" y="1701" width="1.8" height="15.0" fill="rgb(209,143,32)" rx="2" ry="2" />
<text  x="224.16" y="1711.5" ></text>
</g>
<g >
<title>duckdb::AttachedDatabase::~AttachedDatabase (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1317" width="1.9" height="15.0" fill="rgb(228,147,14)" rx="2" ry="2" />
<text  x="1120.81" y="1327.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ConstantExpression, duckdb::Value&gt; (19,194,330 samples, 0.04%)</title><rect x="528.8" y="1685" width="0.4" height="15.0" fill="rgb(231,215,19)" rx="2" ry="2" />
<text  x="531.78" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_dalloc_large (6,479,729 samples, 0.01%)</title><rect x="297.8" y="1301" width="0.1" height="15.0" fill="rgb(247,56,44)" rx="2" ry="2" />
<text  x="300.76" y="1311.5" ></text>
</g>
<g >
<title>duckdb::Vector::Vector (19,979,802 samples, 0.04%)</title><rect x="291.0" y="1621" width="0.5" height="15.0" fill="rgb(234,7,47)" rx="2" ry="2" />
<text  x="294.01" y="1631.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ConstantExpressionMatcher&gt; (6,198,440 samples, 0.01%)</title><rect x="814.4" y="1845" width="0.1" height="15.0" fill="rgb(220,102,48)" rx="2" ry="2" />
<text  x="817.38" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::ColumnAppendState&gt;::construct&lt;duckdb::ColumnAppendState, duckdb::ColumnAppendState&gt; (14,731,884 samples, 0.03%)</title><rect x="197.9" y="1637" width="0.3" height="15.0" fill="rgb(236,60,13)" rx="2" ry="2" />
<text  x="200.90" y="1647.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt; &gt; (11,540,608 samples, 0.02%)</title><rect x="1088.7" y="1765" width="0.2" height="15.0" fill="rgb(222,126,51)" rx="2" ry="2" />
<text  x="1091.68" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::ArithmeticSimplificationRule, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (13,128,425 samples, 0.03%)</title><rect x="821.0" y="1877" width="0.3" height="15.0" fill="rgb(243,99,42)" rx="2" ry="2" />
<text  x="824.00" y="1887.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::SegmentScanState&gt;::operator (4,401,856 samples, 0.01%)</title><rect x="287.7" y="1573" width="0.1" height="15.0" fill="rgb(247,94,3)" rx="2" ry="2" />
<text  x="290.69" y="1583.5" ></text>
</g>
<g >
<title>operator new (7,341,274 samples, 0.01%)</title><rect x="88.2" y="2005" width="0.2" height="15.0" fill="rgb(231,172,18)" rx="2" ry="2" />
<text  x="91.24" y="2015.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::~RenderTree (10,740,617 samples, 0.02%)</title><rect x="1077.8" y="1733" width="0.3" height="15.0" fill="rgb(252,207,39)" rx="2" ry="2" />
<text  x="1080.83" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_no_sample (6,500,048 samples, 0.01%)</title><rect x="493.1" y="1477" width="0.1" height="15.0" fill="rgb(243,49,8)" rx="2" ry="2" />
<text  x="496.05" y="1487.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;duckdb::QueryProfiler,  (5,147,383 samples, 0.01%)</title><rect x="713.7" y="1829" width="0.1" height="15.0" fill="rgb(243,210,21)" rx="2" ry="2" />
<text  x="716.65" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_free (48,698,544 samples, 0.09%)</title><rect x="221.5" y="1413" width="1.2" height="15.0" fill="rgb(221,109,26)" rx="2" ry="2" />
<text  x="224.54" y="1423.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (5,481,400 samples, 0.01%)</title><rect x="946.3" y="1637" width="0.1" height="15.0" fill="rgb(227,204,3)" rx="2" ry="2" />
<text  x="949.30" y="1647.5" ></text>
</g>
<g >
<title>duckdb::Event::FinishTask (597,230,133 samples, 1.16%)</title><rect x="405.4" y="1861" width="13.8" height="15.0" fill="rgb(233,22,9)" rx="2" ry="2" />
<text  x="408.42" y="1871.5" ></text>
</g>
<g >
<title>perf_event_mmap (12,086,775 samples, 0.02%)</title><rect x="1173.2" y="1909" width="0.3" height="15.0" fill="rgb(251,177,12)" rx="2" ry="2" />
<text  x="1176.19" y="1919.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::RenderTree&gt;::operator (17,924,568 samples, 0.03%)</title><rect x="581.6" y="1797" width="0.4" height="15.0" fill="rgb(241,222,43)" rx="2" ry="2" />
<text  x="584.55" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (6,219,920 samples, 0.01%)</title><rect x="816.6" y="1797" width="0.1" height="15.0" fill="rgb(235,91,48)" rx="2" ry="2" />
<text  x="819.60" y="1807.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ChunkMetaData*, duckdb::ChunkMetaData&gt; (4,523,359 samples, 0.01%)</title><rect x="1122.4" y="1669" width="0.1" height="15.0" fill="rgb(216,193,22)" rx="2" ry="2" />
<text  x="1125.41" y="1679.5" ></text>
</g>
<g >
<title>duckdb::grapheme_break_simple (14,255,439 samples, 0.03%)</title><rect x="559.1" y="1733" width="0.3" height="15.0" fill="rgb(212,61,30)" rx="2" ry="2" />
<text  x="562.06" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Vector&gt; &gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (20,230,357 samples, 0.04%)</title><rect x="402.8" y="1765" width="0.4" height="15.0" fill="rgb(237,63,13)" rx="2" ry="2" />
<text  x="405.78" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Vector::ResetFromCache (14,675,009 samples, 0.03%)</title><rect x="894.8" y="1765" width="0.4" height="15.0" fill="rgb(247,216,52)" rx="2" ry="2" />
<text  x="897.81" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::allocate (11,925,459 samples, 0.02%)</title><rect x="657.8" y="1685" width="0.3" height="15.0" fill="rgb(223,131,53)" rx="2" ry="2" />
<text  x="660.82" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_check_len (5,087,555 samples, 0.01%)</title><rect x="970.7" y="1701" width="0.1" height="15.0" fill="rgb(250,19,18)" rx="2" ry="2" />
<text  x="973.69" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (7,358,468 samples, 0.01%)</title><rect x="11.3" y="1781" width="0.1" height="15.0" fill="rgb(220,185,35)" rx="2" ry="2" />
<text  x="14.25" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt;::~unique_ptr (4,512,659 samples, 0.01%)</title><rect x="831.5" y="1573" width="0.1" height="15.0" fill="rgb(242,90,41)" rx="2" ry="2" />
<text  x="834.46" y="1583.5" ></text>
</g>
<g >
<title>duckdb::BoundColumnRefExpression::BoundColumnRefExpression (11,114,595 samples, 0.02%)</title><rect x="582.9" y="1829" width="0.3" height="15.0" fill="rgb(232,138,39)" rx="2" ry="2" />
<text  x="585.91" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt; &gt; &gt;::_M_move_assign (7,783,984 samples, 0.02%)</title><rect x="361.6" y="1765" width="0.2" height="15.0" fill="rgb(214,18,31)" rx="2" ry="2" />
<text  x="364.64" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt; &gt; (10,608,302 samples, 0.02%)</title><rect x="539.8" y="1845" width="0.2" height="15.0" fill="rgb(221,70,11)" rx="2" ry="2" />
<text  x="542.75" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::RenderWidth (7,356,609 samples, 0.01%)</title><rect x="574.7" y="1797" width="0.1" height="15.0" fill="rgb(208,176,19)" rx="2" ry="2" />
<text  x="577.67" y="1807.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::DatePartSimplificationRule, std::default_delete&lt;duckdb::DatePartSimplificationRule&gt; &gt;::__uniq_ptr_impl (6,060,953 samples, 0.01%)</title><rect x="798.5" y="1829" width="0.2" height="15.0" fill="rgb(212,125,51)" rx="2" ry="2" />
<text  x="801.53" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;duckdb::ColumnBinding const&amp;&gt;, std::tuple&lt;&gt; &gt; (16,128,938 samples, 0.03%)</title><rect x="763.4" y="1637" width="0.4" height="15.0" fill="rgb(226,119,19)" rx="2" ry="2" />
<text  x="766.40" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (9,095,350 samples, 0.02%)</title><rect x="759.1" y="1765" width="0.3" height="15.0" fill="rgb(239,146,13)" rx="2" ry="2" />
<text  x="762.15" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::AllocateVector (52,732,510 samples, 0.10%)</title><rect x="863.3" y="1749" width="1.2" height="15.0" fill="rgb(236,190,2)" rx="2" ry="2" />
<text  x="866.34" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; (190,314,789 samples, 0.37%)</title><rect x="829.1" y="1829" width="4.4" height="15.0" fill="rgb(210,212,46)" rx="2" ry="2" />
<text  x="832.08" y="1839.5" ></text>
</g>
<g >
<title>do_syscall_64 (151,883,260 samples, 0.30%)</title><rect x="249.1" y="1717" width="3.5" height="15.0" fill="rgb(224,95,51)" rx="2" ry="2" />
<text  x="252.07" y="1727.5" ></text>
</g>
<g >
<title>lru_add_drain_cpu (6,495,296 samples, 0.01%)</title><rect x="251.4" y="1541" width="0.2" height="15.0" fill="rgb(251,170,7)" rx="2" ry="2" />
<text  x="254.44" y="1551.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::LogicalType&gt; &gt;::construct&lt;duckdb::LogicalType, duckdb::LogicalType const&amp;&gt; (5,939,952 samples, 0.01%)</title><rect x="969.1" y="1717" width="0.2" height="15.0" fill="rgb(236,195,22)" rx="2" ry="2" />
<text  x="972.14" y="1727.5" ></text>
</g>
<g >
<title>duckdb::MoveConstantsRule::~MoveConstantsRule (14,971,845 samples, 0.03%)</title><rect x="832.8" y="1717" width="0.4" height="15.0" fill="rgb(232,177,22)" rx="2" ry="2" />
<text  x="835.82" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (4,777,117 samples, 0.01%)</title><rect x="356.2" y="1349" width="0.1" height="15.0" fill="rgb(211,125,47)" rx="2" ry="2" />
<text  x="359.15" y="1359.5" ></text>
</g>
<g >
<title>duckdb::BufferedSerializer::BufferedSerializer (10,276,759 samples, 0.02%)</title><rect x="591.0" y="1765" width="0.3" height="15.0" fill="rgb(213,57,27)" rx="2" ry="2" />
<text  x="594.03" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::begin (5,136,702 samples, 0.01%)</title><rect x="570.9" y="1765" width="0.1" height="15.0" fill="rgb(250,130,3)" rx="2" ry="2" />
<text  x="573.88" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ExpressionState::ExpressionState (8,098,886 samples, 0.02%)</title><rect x="903.7" y="1669" width="0.1" height="15.0" fill="rgb(232,15,48)" rx="2" ry="2" />
<text  x="906.66" y="1679.5" ></text>
</g>
<g >
<title>duckdb::StringUtil::Split (22,120,377 samples, 0.04%)</title><rect x="572.4" y="1781" width="0.5" height="15.0" fill="rgb(228,44,38)" rx="2" ry="2" />
<text  x="575.41" y="1791.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::PipelineExecutor, duckdb::ClientContext&amp;, duckdb::Pipeline&amp;&gt; (54,707,680 samples, 0.11%)</title><rect x="107.2" y="1829" width="1.3" height="15.0" fill="rgb(254,82,10)" rx="2" ry="2" />
<text  x="110.20" y="1839.5" ></text>
</g>
<g >
<title>vfs_fsync_range (146,458,566 samples, 0.29%)</title><rect x="249.2" y="1669" width="3.3" height="15.0" fill="rgb(250,207,35)" rx="2" ry="2" />
<text  x="252.16" y="1679.5" ></text>
</g>
<g >
<title>duckdb::MappingValue::~MappingValue (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1557" width="1.9" height="15.0" fill="rgb(225,142,38)" rx="2" ry="2" />
<text  x="1120.81" y="1567.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_alloc_event (15,516,887 samples, 0.03%)</title><rect x="401.8" y="1493" width="0.4" height="15.0" fill="rgb(207,220,20)" rx="2" ry="2" />
<text  x="404.85" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; &gt;::push_back (11,741,478 samples, 0.02%)</title><rect x="999.7" y="1669" width="0.3" height="15.0" fill="rgb(234,62,37)" rx="2" ry="2" />
<text  x="1002.70" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; (48,261,202 samples, 0.09%)</title><rect x="340.6" y="1317" width="1.1" height="15.0" fill="rgb(251,122,20)" rx="2" ry="2" />
<text  x="343.63" y="1327.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_allocate_buckets (19,267,926 samples, 0.04%)</title><rect x="691.5" y="1717" width="0.4" height="15.0" fill="rgb(237,64,22)" rx="2" ry="2" />
<text  x="694.50" y="1727.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::SelectNode&gt; (30,259,249 samples, 0.06%)</title><rect x="532.5" y="1765" width="0.7" height="15.0" fill="rgb(208,1,54)" rx="2" ry="2" />
<text  x="535.46" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt; &gt;::unique_ptr (8,708,727 samples, 0.02%)</title><rect x="379.1" y="1813" width="0.2" height="15.0" fill="rgb(227,13,19)" rx="2" ry="2" />
<text  x="382.10" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (9,847,623 samples, 0.02%)</title><rect x="809.4" y="1781" width="0.2" height="15.0" fill="rgb(246,22,51)" rx="2" ry="2" />
<text  x="812.35" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;::~unique_ptr (159,132,561 samples, 0.31%)</title><rect x="324.2" y="1701" width="3.7" height="15.0" fill="rgb(207,13,41)" rx="2" ry="2" />
<text  x="327.24" y="1711.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::IsEmpty (5,010,641 samples, 0.01%)</title><rect x="198.8" y="1717" width="0.1" height="15.0" fill="rgb(239,197,39)" rx="2" ry="2" />
<text  x="201.77" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="821" width="0.1" height="15.0" fill="rgb(210,116,7)" rx="2" ry="2" />
<text  x="14.25" y="831.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::push_back (19,951,295 samples, 0.04%)</title><rect x="969.1" y="1749" width="0.4" height="15.0" fill="rgb(224,158,7)" rx="2" ry="2" />
<text  x="972.06" y="1759.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (5,549,312 samples, 0.01%)</title><rect x="734.4" y="1685" width="0.1" height="15.0" fill="rgb(205,57,25)" rx="2" ry="2" />
<text  x="737.37" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::operator= (6,635,427 samples, 0.01%)</title><rect x="957.3" y="1717" width="0.1" height="15.0" fill="rgb(250,185,25)" rx="2" ry="2" />
<text  x="960.29" y="1727.5" ></text>
</g>
<g >
<title>duckdb::BlockHandle::~BlockHandle (84,335,018 samples, 0.16%)</title><rect x="239.2" y="661" width="2.0" height="15.0" fill="rgb(210,177,41)" rx="2" ry="2" />
<text  x="242.22" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (5,363,971 samples, 0.01%)</title><rect x="778.5" y="1781" width="0.1" height="15.0" fill="rgb(213,84,11)" rx="2" ry="2" />
<text  x="781.47" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Pipeline::GetOperators (41,821,610 samples, 0.08%)</title><rect x="1065.6" y="1765" width="0.9" height="15.0" fill="rgb(241,13,13)" rx="2" ry="2" />
<text  x="1068.55" y="1775.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt; (8,357,101 samples, 0.02%)</title><rect x="308.0" y="1493" width="0.2" height="15.0" fill="rgb(228,173,38)" rx="2" ry="2" />
<text  x="310.97" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt; &gt; &gt;::_M_check_len (9,957,637 samples, 0.02%)</title><rect x="1064.6" y="1765" width="0.2" height="15.0" fill="rgb(252,27,2)" rx="2" ry="2" />
<text  x="1067.59" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Event::~Event (18,452,531 samples, 0.04%)</title><rect x="356.8" y="1621" width="0.4" height="15.0" fill="rgb(240,109,25)" rx="2" ry="2" />
<text  x="359.77" y="1631.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt; &gt; (19,140,823 samples, 0.04%)</title><rect x="610.5" y="1637" width="0.4" height="15.0" fill="rgb(206,134,8)" rx="2" ry="2" />
<text  x="613.46" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_allocate_buckets (4,691,698 samples, 0.01%)</title><rect x="657.0" y="1669" width="0.1" height="15.0" fill="rgb(237,85,2)" rx="2" ry="2" />
<text  x="659.96" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_event (10,513,444 samples, 0.02%)</title><rect x="878.5" y="1381" width="0.3" height="15.0" fill="rgb(230,176,29)" rx="2" ry="2" />
<text  x="881.51" y="1391.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::get (9,569,125 samples, 0.02%)</title><rect x="642.2" y="1845" width="0.3" height="15.0" fill="rgb(234,117,45)" rx="2" ry="2" />
<text  x="645.25" y="1855.5" ></text>
</g>
<g >
<title>duckdb::LogicalExpressionGet::~LogicalExpressionGet (15,464,812 samples, 0.03%)</title><rect x="1036.4" y="1445" width="0.4" height="15.0" fill="rgb(241,143,19)" rx="2" ry="2" />
<text  x="1039.44" y="1455.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt; &gt;::unique_ptr (10,751,589 samples, 0.02%)</title><rect x="755.0" y="1653" width="0.3" height="15.0" fill="rgb(242,216,46)" rx="2" ry="2" />
<text  x="758.03" y="1663.5" ></text>
</g>
<g >
<title>duckdb::LocalTableStorage::AppendToIndexes (1,665,003,481 samples, 3.25%)</title><rect x="194.9" y="1781" width="38.3" height="15.0" fill="rgb(209,226,40)" rx="2" ry="2" />
<text  x="197.88" y="1791.5" >duc..</text>
</g>
<g >
<title>duckdb::Deserializer::Read&lt;duckdb::ExtraTypeInfoType&gt; (6,079,205 samples, 0.01%)</title><rect x="586.4" y="1765" width="0.2" height="15.0" fill="rgb(251,117,52)" rx="2" ry="2" />
<text  x="589.44" y="1775.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::GetName[abi:cxx11] (5,198,780 samples, 0.01%)</title><rect x="834.9" y="1781" width="0.1" height="15.0" fill="rgb(220,163,18)" rx="2" ry="2" />
<text  x="837.93" y="1791.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::CreateEntry (4,792,459 samples, 0.01%)</title><rect x="1110.4" y="1765" width="0.1" height="15.0" fill="rgb(209,112,43)" rx="2" ry="2" />
<text  x="1113.44" y="1775.5" ></text>
</g>
<g >
<title>duckdb::make_unsafe_uniq_array&lt;unsigned char&gt; (4,586,057 samples, 0.01%)</title><rect x="592.5" y="1797" width="0.1" height="15.0" fill="rgb(208,46,21)" rx="2" ry="2" />
<text  x="595.47" y="1807.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, duckdb::Executor*, false&gt;::_M_head (5,700,393 samples, 0.01%)</title><rect x="511.3" y="1829" width="0.2" height="15.0" fill="rgb(233,86,54)" rx="2" ry="2" />
<text  x="514.34" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1077" width="0.1" height="15.0" fill="rgb(225,62,48)" rx="2" ry="2" />
<text  x="14.25" y="1087.5" ></text>
</g>
<g >
<title>duckdb::RegexRangeFilter::Rewrite (29,727,457 samples, 0.06%)</title><rect x="761.3" y="1813" width="0.6" height="15.0" fill="rgb(229,87,25)" rx="2" ry="2" />
<text  x="764.25" y="1823.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::pair&lt;unsigned long, unsigned long&gt;*, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (12,927,419 samples, 0.03%)</title><rect x="638.3" y="1653" width="0.3" height="15.0" fill="rgb(235,202,34)" rx="2" ry="2" />
<text  x="641.35" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt; &gt;::~unique_ptr (9,692,654 samples, 0.02%)</title><rect x="841.2" y="1829" width="0.2" height="15.0" fill="rgb(219,77,42)" rx="2" ry="2" />
<text  x="844.20" y="1839.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (8,827,862 samples, 0.02%)</title><rect x="68.1" y="2021" width="0.2" height="15.0" fill="rgb(230,191,37)" rx="2" ry="2" />
<text  x="71.08" y="2031.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Pin (12,037,534 samples, 0.02%)</title><rect x="886.4" y="1717" width="0.2" height="15.0" fill="rgb(244,215,4)" rx="2" ry="2" />
<text  x="889.37" y="1727.5" ></text>
</g>
<g >
<title>duckdb::EmptyNeedleRemovalRule::~EmptyNeedleRemovalRule (13,367,150 samples, 0.03%)</title><rect x="831.4" y="1701" width="0.3" height="15.0" fill="rgb(245,1,14)" rx="2" ry="2" />
<text  x="834.41" y="1711.5" ></text>
</g>
<g >
<title>futex_wait (41,202,341 samples, 0.08%)</title><rect x="74.6" y="1941" width="1.0" height="15.0" fill="rgb(223,85,12)" rx="2" ry="2" />
<text  x="77.62" y="1951.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt; &gt; &gt;::push_back (29,165,469 samples, 0.06%)</title><rect x="531.8" y="1749" width="0.7" height="15.0" fill="rgb(249,117,53)" rx="2" ry="2" />
<text  x="534.79" y="1759.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (5,777,352 samples, 0.01%)</title><rect x="166.7" y="1861" width="0.1" height="15.0" fill="rgb(218,175,4)" rx="2" ry="2" />
<text  x="169.70" y="1871.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::HasNode (5,537,790 samples, 0.01%)</title><rect x="598.8" y="1797" width="0.2" height="15.0" fill="rgb(211,169,4)" rx="2" ry="2" />
<text  x="601.83" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::~vector (6,157,186 samples, 0.01%)</title><rect x="769.8" y="1781" width="0.1" height="15.0" fill="rgb(231,60,38)" rx="2" ry="2" />
<text  x="772.77" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Value::BIGINT (6,405,177 samples, 0.01%)</title><rect x="363.9" y="1829" width="0.2" height="15.0" fill="rgb(246,187,24)" rx="2" ry="2" />
<text  x="366.93" y="1839.5" ></text>
</g>
<g >
<title>duckdb::DatabaseManager::Get (10,245,693 samples, 0.02%)</title><rect x="988.3" y="1749" width="0.2" height="15.0" fill="rgb(215,155,41)" rx="2" ry="2" />
<text  x="991.29" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt; &gt;::get (4,429,155 samples, 0.01%)</title><rect x="553.7" y="1781" width="0.1" height="15.0" fill="rgb(232,39,3)" rx="2" ry="2" />
<text  x="556.67" y="1791.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::StringValueInfo, std::allocator&lt;duckdb::StringValueInfo&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (12,408,796 samples, 0.02%)</title><rect x="528.3" y="1653" width="0.2" height="15.0" fill="rgb(218,219,53)" rx="2" ry="2" />
<text  x="531.25" y="1663.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VerifyInternal (1,011,687,554 samples, 1.97%)</title><rect x="648.2" y="1797" width="23.3" height="15.0" fill="rgb(209,84,14)" rx="2" ry="2" />
<text  x="651.21" y="1807.5" >d..</text>
</g>
<g >
<title>duckdb::BaseStatistics::BaseStatistics (4,570,870 samples, 0.01%)</title><rect x="426.0" y="1429" width="0.1" height="15.0" fill="rgb(234,13,0)" rx="2" ry="2" />
<text  x="428.99" y="1439.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::SelectionData, unsigned long&amp;&gt; (11,634,700 samples, 0.02%)</title><rect x="315.5" y="1589" width="0.2" height="15.0" fill="rgb(230,174,30)" rx="2" ry="2" />
<text  x="318.46" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::~vector (66,177,046 samples, 0.13%)</title><rect x="297.3" y="1685" width="1.5" height="15.0" fill="rgb(211,63,48)" rx="2" ry="2" />
<text  x="300.30" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::~ColumnDataAllocator (358,243,586 samples, 0.70%)</title><rect x="341.9" y="1237" width="8.2" height="15.0" fill="rgb(227,202,10)" rx="2" ry="2" />
<text  x="344.91" y="1247.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::BufferedSerializer, std::default_delete&lt;duckdb::BufferedSerializer&gt; &gt;::__uniq_ptr_impl (5,743,716 samples, 0.01%)</title><rect x="592.6" y="1781" width="0.2" height="15.0" fill="rgb(231,61,19)" rx="2" ry="2" />
<text  x="595.63" y="1791.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (7,651,673 samples, 0.01%)</title><rect x="765.2" y="1685" width="0.1" height="15.0" fill="rgb(212,2,4)" rx="2" ry="2" />
<text  x="768.17" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DatabaseManager, std::default_delete&lt;duckdb::DatabaseManager&gt; &gt;::~unique_ptr (99,164,839 samples, 0.19%)</title><rect x="1117.5" y="1845" width="2.2" height="15.0" fill="rgb(218,169,51)" rx="2" ry="2" />
<text  x="1120.47" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (8,367,769 samples, 0.02%)</title><rect x="994.0" y="1653" width="0.2" height="15.0" fill="rgb(214,61,3)" rx="2" ry="2" />
<text  x="996.99" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CaseSimplificationRule, std::default_delete&lt;duckdb::CaseSimplificationRule&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::CaseSimplificationRule&gt;, void&gt; (9,788,485 samples, 0.02%)</title><rect x="791.2" y="1861" width="0.2" height="15.0" fill="rgb(241,110,20)" rx="2" ry="2" />
<text  x="794.18" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Expression::Deserialize (191,749,442 samples, 0.37%)</title><rect x="585.4" y="1861" width="4.5" height="15.0" fill="rgb(225,210,33)" rx="2" ry="2" />
<text  x="588.45" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalColumnDataScan, std::default_delete&lt;duckdb::PhysicalColumnDataScan&gt;, true&gt;::operator (5,425,451 samples, 0.01%)</title><rect x="914.6" y="1781" width="0.2" height="15.0" fill="rgb(234,25,10)" rx="2" ry="2" />
<text  x="917.64" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;::operator= (5,707,953 samples, 0.01%)</title><rect x="858.6" y="1829" width="0.1" height="15.0" fill="rgb(231,207,7)" rx="2" ry="2" />
<text  x="861.56" y="1839.5" ></text>
</g>
<g >
<title>duckdb::Deliminator::FindCandidates (7,078,007 samples, 0.01%)</title><rect x="730.3" y="1781" width="0.2" height="15.0" fill="rgb(220,74,8)" rx="2" ry="2" />
<text  x="733.35" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (453,780,260 samples, 0.88%)</title><rect x="235.3" y="1765" width="10.4" height="15.0" fill="rgb(208,35,33)" rx="2" ry="2" />
<text  x="238.31" y="1775.5" ></text>
</g>
<g >
<title>duckdb::make_unsafe_uniq_array&lt;unsigned long&gt; (4,927,433 samples, 0.01%)</title><rect x="900.0" y="1461" width="0.1" height="15.0" fill="rgb(232,39,29)" rx="2" ry="2" />
<text  x="903.00" y="1471.5" ></text>
</g>
<g >
<title>duckdb::BufferPool::AddToEvictionQueue (23,114,810 samples, 0.05%)</title><rect x="470.0" y="1605" width="0.5" height="15.0" fill="rgb(253,181,13)" rx="2" ry="2" />
<text  x="472.99" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionTypeMatcher, std::default_delete&lt;duckdb::ExpressionTypeMatcher&gt; &gt;::operator= (5,431,172 samples, 0.01%)</title><rect x="804.9" y="1829" width="0.2" height="15.0" fill="rgb(249,45,28)" rx="2" ry="2" />
<text  x="807.93" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (5,339,556 samples, 0.01%)</title><rect x="622.0" y="1669" width="0.1" height="15.0" fill="rgb(236,20,19)" rx="2" ry="2" />
<text  x="625.00" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::AllocatorDebugInfo, std::default_delete&lt;duckdb::AllocatorDebugInfo&gt; &gt;::~unique_ptr (6,971,959 samples, 0.01%)</title><rect x="324.8" y="1461" width="0.1" height="15.0" fill="rgb(229,109,45)" rx="2" ry="2" />
<text  x="327.76" y="1471.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (6,310,776 samples, 0.01%)</title><rect x="994.0" y="1637" width="0.1" height="15.0" fill="rgb(214,162,0)" rx="2" ry="2" />
<text  x="996.99" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (53,663,426 samples, 0.10%)</title><rect x="787.9" y="1829" width="1.2" height="15.0" fill="rgb(205,195,42)" rx="2" ry="2" />
<text  x="790.87" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::BaseStatistics (6,338,490 samples, 0.01%)</title><rect x="434.1" y="1621" width="0.1" height="15.0" fill="rgb(208,135,50)" rx="2" ry="2" />
<text  x="437.09" y="1631.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::~vector (9,745,067 samples, 0.02%)</title><rect x="575.7" y="1701" width="0.2" height="15.0" fill="rgb(229,165,31)" rx="2" ry="2" />
<text  x="578.71" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ExpressionMatcher::Match (4,649,948 samples, 0.01%)</title><rect x="741.9" y="1637" width="0.1" height="15.0" fill="rgb(206,203,20)" rx="2" ry="2" />
<text  x="744.86" y="1647.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::pair&lt;unsigned long, unsigned long&gt;*, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (27,352,561 samples, 0.05%)</title><rect x="629.4" y="1669" width="0.6" height="15.0" fill="rgb(224,206,44)" rx="2" ry="2" />
<text  x="632.42" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (10,811,528 samples, 0.02%)</title><rect x="939.4" y="1717" width="0.2" height="15.0" fill="rgb(245,28,19)" rx="2" ry="2" />
<text  x="942.37" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionState, std::default_delete&lt;duckdb::ExpressionState&gt;, true&gt;::~unique_ptr (18,880,592 samples, 0.04%)</title><rect x="906.7" y="1589" width="0.4" height="15.0" fill="rgb(252,118,52)" rx="2" ry="2" />
<text  x="909.67" y="1599.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt; &gt;::operator[] (4,800,990 samples, 0.01%)</title><rect x="1113.7" y="1797" width="0.1" height="15.0" fill="rgb(221,130,5)" rx="2" ry="2" />
<text  x="1116.65" y="1807.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~_Vector_base (4,600,774 samples, 0.01%)</title><rect x="615.6" y="1653" width="0.1" height="15.0" fill="rgb(205,119,24)" rx="2" ry="2" />
<text  x="618.59" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::unique_ptr (7,859,382 samples, 0.02%)</title><rect x="596.2" y="1669" width="0.1" height="15.0" fill="rgb(237,136,21)" rx="2" ry="2" />
<text  x="599.16" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::operator= (5,964,875 samples, 0.01%)</title><rect x="910.4" y="1701" width="0.2" height="15.0" fill="rgb(238,135,18)" rx="2" ry="2" />
<text  x="913.43" y="1711.5" ></text>
</g>
<g >
<title>do_lookup_x (46,321,498 samples, 0.09%)</title><rect x="1176.4" y="2037" width="1.1" height="15.0" fill="rgb(225,200,47)" rx="2" ry="2" />
<text  x="1179.43" y="2047.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BufferedSerializer, std::default_delete&lt;duckdb::BufferedSerializer&gt; &gt;::reset (12,907,367 samples, 0.03%)</title><rect x="591.6" y="1765" width="0.3" height="15.0" fill="rgb(254,65,5)" rx="2" ry="2" />
<text  x="594.61" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (9,770,153 samples, 0.02%)</title><rect x="387.3" y="1893" width="0.3" height="15.0" fill="rgb(211,184,17)" rx="2" ry="2" />
<text  x="390.33" y="1903.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::BoundQueryNode&gt;::operator (75,396,900 samples, 0.15%)</title><rect x="979.8" y="1765" width="1.7" height="15.0" fill="rgb(226,98,9)" rx="2" ry="2" />
<text  x="982.80" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ExpressionMatcher::ExpressionMatcher (9,852,191 samples, 0.02%)</title><rect x="794.5" y="1797" width="0.2" height="15.0" fill="rgb(231,44,6)" rx="2" ry="2" />
<text  x="797.49" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt;, true&gt;::~unique_ptr (23,810,459 samples, 0.05%)</title><rect x="324.5" y="1573" width="0.6" height="15.0" fill="rgb(213,99,33)" rx="2" ry="2" />
<text  x="327.53" y="1583.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;*&gt; (8,895,623 samples, 0.02%)</title><rect x="1089.4" y="1701" width="0.2" height="15.0" fill="rgb(242,12,46)" rx="2" ry="2" />
<text  x="1092.44" y="1711.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (25,019,355 samples, 0.05%)</title><rect x="107.3" y="1749" width="0.5" height="15.0" fill="rgb(209,23,18)" rx="2" ry="2" />
<text  x="110.26" y="1759.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~deque (5,056,263 samples, 0.01%)</title><rect x="336.3" y="1669" width="0.1" height="15.0" fill="rgb(248,97,29)" rx="2" ry="2" />
<text  x="339.33" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (62,447,519 samples, 0.12%)</title><rect x="698.7" y="1813" width="1.4" height="15.0" fill="rgb(241,197,0)" rx="2" ry="2" />
<text  x="701.67" y="1823.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;*&gt; (22,538,946 samples, 0.04%)</title><rect x="906.6" y="1685" width="0.5" height="15.0" fill="rgb(208,35,4)" rx="2" ry="2" />
<text  x="909.61" y="1695.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, unsigned long const*, unsigned long*&gt; (4,702,949 samples, 0.01%)</title><rect x="672.8" y="1653" width="0.1" height="15.0" fill="rgb(225,18,52)" rx="2" ry="2" />
<text  x="675.81" y="1663.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, unsigned long&amp;, unsigned long&amp;&gt; (10,064,992 samples, 0.02%)</title><rect x="605.8" y="1733" width="0.3" height="15.0" fill="rgb(235,16,18)" rx="2" ry="2" />
<text  x="608.84" y="1743.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTree&lt;duckdb::LogicalOperator&gt; (137,563,893 samples, 0.27%)</title><rect x="620.8" y="1781" width="3.2" height="15.0" fill="rgb(251,126,29)" rx="2" ry="2" />
<text  x="623.79" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Value::Value (5,064,095 samples, 0.01%)</title><rect x="934.3" y="1637" width="0.1" height="15.0" fill="rgb(249,88,44)" rx="2" ry="2" />
<text  x="937.28" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, true&gt;::back (5,125,552 samples, 0.01%)</title><rect x="384.8" y="1909" width="0.1" height="15.0" fill="rgb(208,204,4)" rx="2" ry="2" />
<text  x="387.80" y="1919.5" ></text>
</g>
<g >
<title>blk_mq_sched_insert_requests (44,243,635 samples, 0.09%)</title><rect x="249.7" y="1525" width="1.0" height="15.0" fill="rgb(244,9,49)" rx="2" ry="2" />
<text  x="252.67" y="1535.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::~unique_ptr (8,939,247 samples, 0.02%)</title><rect x="1036.5" y="1317" width="0.2" height="15.0" fill="rgb(238,118,9)" rx="2" ry="2" />
<text  x="1039.47" y="1327.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector&gt; (89,272,199 samples, 0.17%)</title><rect x="333.4" y="1589" width="2.0" height="15.0" fill="rgb(212,72,49)" rx="2" ry="2" />
<text  x="336.39" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::_M_check_len (4,429,233 samples, 0.01%)</title><rect x="1066.2" y="1701" width="0.1" height="15.0" fill="rgb(236,83,14)" rx="2" ry="2" />
<text  x="1069.16" y="1711.5" ></text>
</g>
<g >
<title>duckdb::TemplatedComputeHashes&lt;duckdb::string_t&gt; (6,385,286 samples, 0.01%)</title><rect x="460.6" y="1669" width="0.1" height="15.0" fill="rgb(249,183,19)" rx="2" ry="2" />
<text  x="463.57" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ifree (47,246,331 samples, 0.09%)</title><rect x="333.7" y="1333" width="1.1" height="15.0" fill="rgb(211,216,19)" rx="2" ry="2" />
<text  x="336.73" y="1343.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::AllocatorDebugInfo, std::default_delete&lt;duckdb::AllocatorDebugInfo&gt;, true&gt;::operator= (7,675,180 samples, 0.01%)</title><rect x="996.9" y="1589" width="0.2" height="15.0" fill="rgb(246,37,11)" rx="2" ry="2" />
<text  x="999.90" y="1599.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (4,347,716 samples, 0.01%)</title><rect x="278.7" y="1509" width="0.1" height="15.0" fill="rgb(226,189,15)" rx="2" ry="2" />
<text  x="281.71" y="1519.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ClientContext,  (6,177,346 samples, 0.01%)</title><rect x="996.5" y="1589" width="0.1" height="15.0" fill="rgb(237,51,30)" rx="2" ry="2" />
<text  x="999.48" y="1599.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::StringValueInfo, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (13,106,773 samples, 0.03%)</title><rect x="528.2" y="1669" width="0.3" height="15.0" fill="rgb(214,112,47)" rx="2" ry="2" />
<text  x="531.24" y="1679.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::PhysicalOperator&gt; (16,271,843 samples, 0.03%)</title><rect x="834.5" y="1749" width="0.4" height="15.0" fill="rgb(228,168,37)" rx="2" ry="2" />
<text  x="837.52" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt;::_S_do_relocate (23,694,915 samples, 0.05%)</title><rect x="828.1" y="1813" width="0.6" height="15.0" fill="rgb(213,199,22)" rx="2" ry="2" />
<text  x="831.14" y="1823.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, duckdb::Expression*, std::default_delete&lt;duckdb::Expression&gt; &gt; (4,360,988 samples, 0.01%)</title><rect x="642.3" y="1813" width="0.1" height="15.0" fill="rgb(206,70,22)" rx="2" ry="2" />
<text  x="645.33" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnAppendState, std::allocator&lt;duckdb::ColumnAppendState&gt; &gt;::emplace_back&lt;duckdb::ColumnAppendState&gt; (48,951,867 samples, 0.10%)</title><rect x="451.1" y="1701" width="1.2" height="15.0" fill="rgb(212,5,43)" rx="2" ry="2" />
<text  x="454.13" y="1711.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::GetNode (7,313,407 samples, 0.01%)</title><rect x="638.9" y="1749" width="0.2" height="15.0" fill="rgb(214,105,39)" rx="2" ry="2" />
<text  x="641.94" y="1759.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~_Vector_base (11,457,618 samples, 0.02%)</title><rect x="662.5" y="1749" width="0.3" height="15.0" fill="rgb(218,222,23)" rx="2" ry="2" />
<text  x="665.52" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;*&gt; (6,544,689 samples, 0.01%)</title><rect x="948.4" y="1669" width="0.1" height="15.0" fill="rgb(239,108,40)" rx="2" ry="2" />
<text  x="951.37" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_S_relocate (5,191,248 samples, 0.01%)</title><rect x="617.6" y="1749" width="0.1" height="15.0" fill="rgb(226,142,25)" rx="2" ry="2" />
<text  x="620.58" y="1759.5" ></text>
</g>
<g >
<title>ttwu_do_activate (8,519,027 samples, 0.02%)</title><rect x="93.6" y="1541" width="0.2" height="15.0" fill="rgb(216,142,44)" rx="2" ry="2" />
<text  x="96.63" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (7,429,748 samples, 0.01%)</title><rect x="35.9" y="2005" width="0.1" height="15.0" fill="rgb(206,51,53)" rx="2" ry="2" />
<text  x="38.88" y="2015.5" ></text>
</g>
<g >
<title>std::initializer_list&lt;unsigned long&gt;::end (6,043,226 samples, 0.01%)</title><rect x="650.7" y="1733" width="0.1" height="15.0" fill="rgb(206,90,17)" rx="2" ry="2" />
<text  x="653.65" y="1743.5" ></text>
</g>
<g >
<title>duckdb::DatabaseInstance::CreateMainDatabase (47,075,816 samples, 0.09%)</title><rect x="1108.5" y="1973" width="1.1" height="15.0" fill="rgb(207,80,7)" rx="2" ry="2" />
<text  x="1111.55" y="1983.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::idalloctm (12,119,497 samples, 0.02%)</title><rect x="1123.5" y="1525" width="0.3" height="15.0" fill="rgb(231,208,12)" rx="2" ry="2" />
<text  x="1126.53" y="1535.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ClientContext&gt;::shared_ptr&lt;duckdb::ClientContext, void&gt; (4,851,533 samples, 0.01%)</title><rect x="989.2" y="1557" width="0.1" height="15.0" fill="rgb(252,55,7)" rx="2" ry="2" />
<text  x="992.15" y="1567.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::reset (4,517,341 samples, 0.01%)</title><rect x="770.5" y="1781" width="0.1" height="15.0" fill="rgb(216,133,33)" rx="2" ry="2" />
<text  x="773.45" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int []&gt; &gt;::operator= (6,117,806 samples, 0.01%)</title><rect x="303.5" y="1525" width="0.1" height="15.0" fill="rgb(254,74,52)" rx="2" ry="2" />
<text  x="306.46" y="1535.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::RowGroupSegmentTree,  (4,465,108 samples, 0.01%)</title><rect x="429.9" y="1445" width="0.1" height="15.0" fill="rgb(237,42,31)" rx="2" ry="2" />
<text  x="432.86" y="1455.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::operator= (11,787,579 samples, 0.02%)</title><rect x="552.8" y="1749" width="0.3" height="15.0" fill="rgb(238,65,11)" rx="2" ry="2" />
<text  x="555.81" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Rule::~Rule (6,864,701 samples, 0.01%)</title><rect x="831.0" y="1685" width="0.2" height="15.0" fill="rgb(216,175,23)" rx="2" ry="2" />
<text  x="834.04" y="1695.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (24,718,871 samples, 0.05%)</title><rect x="46.1" y="1989" width="0.6" height="15.0" fill="rgb(249,18,1)" rx="2" ry="2" />
<text  x="49.11" y="1999.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::~ColumnDataCollection (130,965,552 samples, 0.26%)</title><rect x="1121.9" y="1877" width="3.0" height="15.0" fill="rgb(213,136,21)" rx="2" ry="2" />
<text  x="1124.90" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;::destroy&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt; (5,787,518 samples, 0.01%)</title><rect x="481.2" y="1493" width="0.1" height="15.0" fill="rgb(241,201,54)" rx="2" ry="2" />
<text  x="484.19" y="1503.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;, true&gt;::~vector (5,883,313 samples, 0.01%)</title><rect x="356.4" y="1493" width="0.2" height="15.0" fill="rgb(239,95,15)" rx="2" ry="2" />
<text  x="359.45" y="1503.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (128,759,638 samples, 0.25%)</title><rect x="366.3" y="1717" width="3.0" height="15.0" fill="rgb(215,156,30)" rx="2" ry="2" />
<text  x="369.30" y="1727.5" ></text>
</g>
<g >
<title>ksys_write (65,532,911 samples, 0.13%)</title><rect x="247.4" y="1653" width="1.5" height="15.0" fill="rgb(222,133,52)" rx="2" ry="2" />
<text  x="250.41" y="1663.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1397" width="0.1" height="15.0" fill="rgb(210,13,44)" rx="2" ry="2" />
<text  x="14.25" y="1407.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (4,487,414 samples, 0.01%)</title><rect x="801.5" y="1797" width="0.1" height="15.0" fill="rgb(207,29,1)" rx="2" ry="2" />
<text  x="804.47" y="1807.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::GetScheduler (67,457,755 samples, 0.13%)</title><rect x="501.9" y="1893" width="1.6" height="15.0" fill="rgb(244,222,34)" rx="2" ry="2" />
<text  x="504.90" y="1903.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_available (4,408,174 samples, 0.01%)</title><rect x="482.9" y="1285" width="0.1" height="15.0" fill="rgb(250,69,38)" rx="2" ry="2" />
<text  x="485.94" y="1295.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::InitializeChunkState (97,560,516 samples, 0.19%)</title><rect x="886.2" y="1765" width="2.2" height="15.0" fill="rgb(226,44,5)" rx="2" ry="2" />
<text  x="889.19" y="1775.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionMatcher&gt;::operator (12,111,852 samples, 0.02%)</title><rect x="831.4" y="1637" width="0.3" height="15.0" fill="rgb(245,61,38)" rx="2" ry="2" />
<text  x="834.44" y="1647.5" ></text>
</g>
<g >
<title>duckdb::AttachedDatabase::GetTransactionManager (10,873,225 samples, 0.02%)</title><rect x="188.6" y="1845" width="0.2" height="15.0" fill="rgb(219,176,43)" rx="2" ry="2" />
<text  x="191.57" y="1855.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::BlockMetaData*&gt; (348,066,787 samples, 0.68%)</title><rect x="342.0" y="1157" width="8.0" height="15.0" fill="rgb(244,51,42)" rx="2" ry="2" />
<text  x="345.02" y="1167.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int []&gt; &gt;::get (254,122,843 samples, 0.50%)</title><rect x="305.9" y="1525" width="5.8" height="15.0" fill="rgb(235,222,51)" rx="2" ry="2" />
<text  x="308.86" y="1535.5" ></text>
</g>
<g >
<title>duckdb::make_unsafe_uniq_array&lt;duckdb::ColumnAppendState&gt; (9,800,065 samples, 0.02%)</title><rect x="198.4" y="1717" width="0.2" height="15.0" fill="rgb(225,100,49)" rx="2" ry="2" />
<text  x="201.37" y="1727.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, duckdb::Rule*, std::default_delete&lt;duckdb::Rule&gt; &gt;::_Tuple_impl&lt;duckdb::Rule*&amp;, std::default_delete&lt;duckdb::Rule&gt;, void&gt; (7,766,384 samples, 0.02%)</title><rect x="826.2" y="1749" width="0.1" height="15.0" fill="rgb(240,175,38)" rx="2" ry="2" />
<text  x="829.17" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (10,887,336 samples, 0.02%)</title><rect x="476.0" y="1765" width="0.3" height="15.0" fill="rgb(228,117,21)" rx="2" ry="2" />
<text  x="479.04" y="1775.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::HasNode (4,354,869 samples, 0.01%)</title><rect x="1070.6" y="1749" width="0.1" height="15.0" fill="rgb(218,80,49)" rx="2" ry="2" />
<text  x="1073.60" y="1759.5" ></text>
</g>
<g >
<title>duckdb::TableDataWriter::WriteTableData (72,383,639 samples, 0.14%)</title><rect x="1117.8" y="1237" width="1.7" height="15.0" fill="rgb(233,109,11)" rx="2" ry="2" />
<text  x="1120.83" y="1247.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBottomLayer (42,802,938 samples, 0.08%)</title><rect x="624.3" y="1781" width="1.0" height="15.0" fill="rgb(253,205,52)" rx="2" ry="2" />
<text  x="627.28" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (12,111,852 samples, 0.02%)</title><rect x="831.4" y="1669" width="0.3" height="15.0" fill="rgb(230,186,43)" rx="2" ry="2" />
<text  x="834.44" y="1679.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ColumnScanState []&gt;::operator (40,505,443 samples, 0.08%)</title><rect x="287.7" y="1637" width="0.9" height="15.0" fill="rgb(238,184,15)" rx="2" ry="2" />
<text  x="290.68" y="1647.5" ></text>
</g>
<g >
<title>duckdb::Binding::~Binding (22,370,165 samples, 0.04%)</title><rect x="1016.8" y="1493" width="0.5" height="15.0" fill="rgb(206,28,2)" rx="2" ry="2" />
<text  x="1019.75" y="1503.5" ></text>
</g>
<g >
<title>do_futex (14,636,933 samples, 0.03%)</title><rect x="93.6" y="1605" width="0.3" height="15.0" fill="rgb(223,13,35)" rx="2" ry="2" />
<text  x="96.55" y="1615.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::GetNode (16,599,177 samples, 0.03%)</title><rect x="612.0" y="1781" width="0.4" height="15.0" fill="rgb(241,117,25)" rx="2" ry="2" />
<text  x="615.04" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::emplace_back&lt;duckdb::VectorCache&amp;&gt; (52,333,505 samples, 0.10%)</title><rect x="369.8" y="1845" width="1.2" height="15.0" fill="rgb(228,59,36)" rx="2" ry="2" />
<text  x="372.83" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; &gt;::_M_erase (187,441,185 samples, 0.37%)</title><rect x="323.7" y="1797" width="4.3" height="15.0" fill="rgb(238,69,48)" rx="2" ry="2" />
<text  x="326.65" y="1807.5" ></text>
</g>
<g >
<title>duckdb::PhysicalPlanGenerator::CreatePlan (2,992,891,419 samples, 5.84%)</title><rect x="851.0" y="1877" width="68.8" height="15.0" fill="rgb(225,114,1)" rx="2" ry="2" />
<text  x="853.97" y="1887.5" >duckdb:..</text>
</g>
<g >
<title>std::default_delete&lt;duckdb::MappingValue&gt;::operator (13,077,913 samples, 0.03%)</title><rect x="1117.5" y="965" width="0.3" height="15.0" fill="rgb(237,59,49)" rx="2" ry="2" />
<text  x="1120.49" y="975.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, true&gt;::operator[] (4,456,033 samples, 0.01%)</title><rect x="758.3" y="1781" width="0.1" height="15.0" fill="rgb(247,62,22)" rx="2" ry="2" />
<text  x="761.31" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (58,839,120 samples, 0.11%)</title><rect x="984.9" y="1749" width="1.3" height="15.0" fill="rgb(211,158,11)" rx="2" ry="2" />
<text  x="987.85" y="1759.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::SingleFileStorageCommitState, duckdb::SingleFileStorageManager&amp;, bool&amp;&gt; (28,405,055 samples, 0.06%)</title><rect x="252.8" y="1797" width="0.7" height="15.0" fill="rgb(237,24,12)" rx="2" ry="2" />
<text  x="255.84" y="1807.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::GetRootSegment (7,529,927 samples, 0.01%)</title><rect x="225.5" y="1653" width="0.2" height="15.0" fill="rgb(215,206,19)" rx="2" ry="2" />
<text  x="228.50" y="1663.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformExpression (84,004,078 samples, 0.16%)</title><rect x="527.9" y="1733" width="2.0" height="15.0" fill="rgb(240,209,40)" rx="2" ry="2" />
<text  x="530.93" y="1743.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::LocalTableStorage, std::allocator&lt;duckdb::LocalTableStorage&gt;, duckdb::DataTable&amp;&gt; (370,072,777 samples, 0.72%)</title><rect x="422.6" y="1733" width="8.5" height="15.0" fill="rgb(237,140,46)" rx="2" ry="2" />
<text  x="425.63" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;, std::allocator&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt; &gt; &gt;::~vector (100,634,774 samples, 0.20%)</title><rect x="241.6" y="917" width="2.3" height="15.0" fill="rgb(254,122,10)" rx="2" ry="2" />
<text  x="244.62" y="927.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::insert (28,580,924 samples, 0.06%)</title><rect x="725.3" y="1637" width="0.6" height="15.0" fill="rgb(248,134,44)" rx="2" ry="2" />
<text  x="728.26" y="1647.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::CaseSimplificationRule, std::default_delete&lt;duckdb::CaseSimplificationRule&gt; &gt;::__uniq_ptr_impl (7,434,450 samples, 0.01%)</title><rect x="791.2" y="1829" width="0.2" height="15.0" fill="rgb(209,170,41)" rx="2" ry="2" />
<text  x="794.22" y="1839.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::InitializeEmpty (12,903,719 samples, 0.03%)</title><rect x="104.7" y="1685" width="0.3" height="15.0" fill="rgb(231,74,30)" rx="2" ry="2" />
<text  x="107.72" y="1695.5" ></text>
</g>
<g >
<title>duckdb::StarExpression::~StarExpression (5,045,465 samples, 0.01%)</title><rect x="949.1" y="1685" width="0.1" height="15.0" fill="rgb(236,173,40)" rx="2" ry="2" />
<text  x="952.10" y="1695.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;::~vector (15,704,692 samples, 0.03%)</title><rect x="350.5" y="1605" width="0.4" height="15.0" fill="rgb(218,201,34)" rx="2" ry="2" />
<text  x="353.51" y="1615.5" ></text>
</g>
<g >
<title>duckdb::LocalFileSystem::Write (71,402,093 samples, 0.14%)</title><rect x="247.3" y="1733" width="1.6" height="15.0" fill="rgb(223,173,5)" rx="2" ry="2" />
<text  x="250.29" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt; (39,567,126 samples, 0.08%)</title><rect x="469.8" y="1701" width="0.9" height="15.0" fill="rgb(215,185,0)" rx="2" ry="2" />
<text  x="472.82" y="1711.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::MetaPipeline, duckdb::Executor&amp;, duckdb::PipelineBuildState&amp;, decltype (143,219,459 samples, 0.28%)</title><rect x="1092.7" y="1861" width="3.3" height="15.0" fill="rgb(253,139,1)" rx="2" ry="2" />
<text  x="1095.72" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::emplace_back&lt;duckdb::LogicalTypeId const&amp;&gt; (18,529,396 samples, 0.04%)</title><rect x="847.6" y="1797" width="0.4" height="15.0" fill="rgb(252,204,54)" rx="2" ry="2" />
<text  x="850.58" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;, std::allocator&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt; &gt; &gt;::~vector (132,899,551 samples, 0.26%)</title><rect x="238.2" y="933" width="3.1" height="15.0" fill="rgb(211,80,12)" rx="2" ry="2" />
<text  x="241.24" y="943.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (149,042,927 samples, 0.29%)</title><rect x="889.5" y="1733" width="3.5" height="15.0" fill="rgb(251,93,17)" rx="2" ry="2" />
<text  x="892.55" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long, std::pair&lt;long const, duckdb::StringBlock*&gt;, std::allocator&lt;std::pair&lt;long const, duckdb::StringBlock*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (6,814,519 samples, 0.01%)</title><rect x="238.9" y="677" width="0.1" height="15.0" fill="rgb(217,111,12)" rx="2" ry="2" />
<text  x="241.86" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::operator= (6,855,501 samples, 0.01%)</title><rect x="847.1" y="1797" width="0.2" height="15.0" fill="rgb(252,219,46)" rx="2" ry="2" />
<text  x="850.14" y="1807.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;,  (5,207,817 samples, 0.01%)</title><rect x="296.9" y="1589" width="0.1" height="15.0" fill="rgb(252,175,20)" rx="2" ry="2" />
<text  x="299.87" y="1599.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::SwizzleMetaData, std::allocator&lt;duckdb::SwizzleMetaData&gt; &gt;::_Vector_base (4,441,549 samples, 0.01%)</title><rect x="882.9" y="1669" width="0.1" height="15.0" fill="rgb(218,138,30)" rx="2" ry="2" />
<text  x="885.93" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnScanState, std::allocator&lt;duckdb::ColumnScanState&gt; &gt;::~vector (22,931,499 samples, 0.04%)</title><rect x="226.8" y="1621" width="0.5" height="15.0" fill="rgb(241,145,9)" rx="2" ry="2" />
<text  x="229.76" y="1631.5" ></text>
</g>
<g >
<title>duckdb::DataTable::LocalAppend (14,511,762 samples, 0.03%)</title><rect x="105.3" y="1749" width="0.3" height="15.0" fill="rgb(247,144,48)" rx="2" ry="2" />
<text  x="108.25" y="1759.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (6,301,466 samples, 0.01%)</title><rect x="734.3" y="1717" width="0.2" height="15.0" fill="rgb(245,44,20)" rx="2" ry="2" />
<text  x="737.35" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::FunctionExpressionMatcher, std::default_delete&lt;duckdb::FunctionExpressionMatcher&gt;, void&gt; (8,976,878 samples, 0.02%)</title><rect x="785.8" y="1829" width="0.2" height="15.0" fill="rgb(250,196,30)" rx="2" ry="2" />
<text  x="788.79" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (5,296,510 samples, 0.01%)</title><rect x="362.1" y="1717" width="0.1" height="15.0" fill="rgb(205,149,24)" rx="2" ry="2" />
<text  x="365.08" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::~vector (10,004,485 samples, 0.02%)</title><rect x="971.8" y="1573" width="0.3" height="15.0" fill="rgb(217,182,50)" rx="2" ry="2" />
<text  x="974.85" y="1583.5" ></text>
</g>
<g >
<title>duckdb::Executor::Executor (25,851,169 samples, 0.05%)</title><rect x="1099.2" y="1877" width="0.6" height="15.0" fill="rgb(207,79,38)" rx="2" ry="2" />
<text  x="1102.19" y="1887.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (5,155,935 samples, 0.01%)</title><rect x="21.8" y="2005" width="0.2" height="15.0" fill="rgb(248,219,27)" rx="2" ry="2" />
<text  x="24.84" y="2015.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (8,936,287 samples, 0.02%)</title><rect x="829.9" y="1557" width="0.2" height="15.0" fill="rgb(234,171,35)" rx="2" ry="2" />
<text  x="832.94" y="1567.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::Initialize (30,008,024 samples, 0.06%)</title><rect x="385.7" y="1893" width="0.7" height="15.0" fill="rgb(208,117,24)" rx="2" ry="2" />
<text  x="388.75" y="1903.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::__normal_iterator (6,157,175 samples, 0.01%)</title><rect x="720.4" y="1829" width="0.2" height="15.0" fill="rgb(210,203,49)" rx="2" ry="2" />
<text  x="723.42" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::MetaPipeline&gt;::destroy&lt;duckdb::MetaPipeline&gt; (41,964,030 samples, 0.08%)</title><rect x="1096.2" y="1765" width="0.9" height="15.0" fill="rgb(229,0,9)" rx="2" ry="2" />
<text  x="1099.17" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::GlobalSourceState, std::default_delete&lt;duckdb::GlobalSourceState&gt;, true&gt;::~unique_ptr (11,598,039 samples, 0.02%)</title><rect x="357.6" y="1637" width="0.3" height="15.0" fill="rgb(218,71,17)" rx="2" ry="2" />
<text  x="360.60" y="1647.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::VectorCache*&gt; (90,321,469 samples, 0.18%)</title><rect x="895.9" y="1717" width="2.1" height="15.0" fill="rgb(219,131,19)" rx="2" ry="2" />
<text  x="898.89" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (29,237,780 samples, 0.06%)</title><rect x="726.7" y="1685" width="0.7" height="15.0" fill="rgb(238,203,25)" rx="2" ry="2" />
<text  x="729.75" y="1695.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::Unwind (17,284,276 samples, 0.03%)</title><rect x="13.5" y="1989" width="0.4" height="15.0" fill="rgb(209,57,6)" rx="2" ry="2" />
<text  x="16.47" y="1999.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt;, duckdb::LogicalType*, duckdb::LogicalType&gt; (5,890,725 samples, 0.01%)</title><rect x="387.4" y="1877" width="0.2" height="15.0" fill="rgb(247,21,9)" rx="2" ry="2" />
<text  x="390.42" y="1887.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::~_Vector_base (7,192,087 samples, 0.01%)</title><rect x="576.0" y="1765" width="0.2" height="15.0" fill="rgb(218,192,42)" rx="2" ry="2" />
<text  x="579.00" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocator::~ArenaAllocator (9,768,845 samples, 0.02%)</title><rect x="340.7" y="1173" width="0.2" height="15.0" fill="rgb(207,40,36)" rx="2" ry="2" />
<text  x="343.71" y="1183.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CatalogSet, std::default_delete&lt;duckdb::CatalogSet&gt;, true&gt;::~unique_ptr (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1797" width="1.9" height="15.0" fill="rgb(251,147,5)" rx="2" ry="2" />
<text  x="1120.81" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::ExecuteTaskInternal (7,265,940 samples, 0.01%)</title><rect x="187.3" y="1941" width="0.2" height="15.0" fill="rgb(235,133,6)" rx="2" ry="2" />
<text  x="190.32" y="1951.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PipelineTask, std::default_delete&lt;duckdb::PipelineTask&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PipelineTask&gt;, void&gt; (4,570,435 samples, 0.01%)</title><rect x="94.8" y="1717" width="0.1" height="15.0" fill="rgb(234,94,27)" rx="2" ry="2" />
<text  x="97.76" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt; &gt; &gt;::~vector (6,998,424 samples, 0.01%)</title><rect x="1107.7" y="1957" width="0.2" height="15.0" fill="rgb(208,82,44)" rx="2" ry="2" />
<text  x="1110.74" y="1967.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;,  (422,995,641 samples, 0.82%)</title><rect x="302.6" y="1605" width="9.7" height="15.0" fill="rgb(209,50,21)" rx="2" ry="2" />
<text  x="305.57" y="1615.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (7,242,694 samples, 0.01%)</title><rect x="108.5" y="1589" width="0.2" height="15.0" fill="rgb(248,109,54)" rx="2" ry="2" />
<text  x="111.52" y="1599.5" ></text>
</g>
<g >
<title>mmap_region (135,552,029 samples, 0.26%)</title><rect x="1170.8" y="1925" width="3.1" height="15.0" fill="rgb(216,43,53)" rx="2" ry="2" />
<text  x="1173.79" y="1935.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::SelectionData&gt;::construct&lt;duckdb::SelectionData, unsigned long&amp;&gt; (7,006,343 samples, 0.01%)</title><rect x="315.5" y="1461" width="0.2" height="15.0" fill="rgb(232,216,26)" rx="2" ry="2" />
<text  x="318.53" y="1471.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (69,610,605 samples, 0.14%)</title><rect x="400.9" y="1685" width="1.6" height="15.0" fill="rgb(226,30,32)" rx="2" ry="2" />
<text  x="403.89" y="1695.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ComparisonSimplificationRule, duckdb::ExpressionRewriter&amp;&gt; (45,312,513 samples, 0.09%)</title><rect x="791.5" y="1877" width="1.0" height="15.0" fill="rgb(234,27,25)" rx="2" ry="2" />
<text  x="794.45" y="1887.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBottomLayer (14,771,971 samples, 0.03%)</title><rect x="78.1" y="2021" width="0.4" height="15.0" fill="rgb(240,50,40)" rx="2" ry="2" />
<text  x="81.14" y="2031.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_no_sample (9,702,536 samples, 0.02%)</title><rect x="380.3" y="1701" width="0.2" height="15.0" fill="rgb(229,23,22)" rx="2" ry="2" />
<text  x="383.29" y="1711.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (18,241,010 samples, 0.04%)</title><rect x="727.4" y="1717" width="0.4" height="15.0" fill="rgb(224,134,39)" rx="2" ry="2" />
<text  x="730.42" y="1727.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringInitScan (50,546,042 samples, 0.10%)</title><rect x="212.6" y="1605" width="1.2" height="15.0" fill="rgb(254,57,48)" rx="2" ry="2" />
<text  x="215.64" y="1615.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (6,696,837 samples, 0.01%)</title><rect x="726.2" y="1781" width="0.2" height="15.0" fill="rgb(253,40,19)" rx="2" ry="2" />
<text  x="729.21" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (29,348,105 samples, 0.06%)</title><rect x="240.0" y="469" width="0.7" height="15.0" fill="rgb(215,21,41)" rx="2" ry="2" />
<text  x="242.99" y="479.5" ></text>
</g>
<g >
<title>duckdb::Executor::FetchChunk (545,026,985 samples, 1.06%)</title><rect x="360.4" y="1909" width="12.6" height="15.0" fill="rgb(224,52,25)" rx="2" ry="2" />
<text  x="363.42" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt; &gt; &gt;::push_back (57,175,448 samples, 0.11%)</title><rect x="1063.9" y="1813" width="1.3" height="15.0" fill="rgb(208,94,22)" rx="2" ry="2" />
<text  x="1066.85" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc_large (6,657,622 samples, 0.01%)</title><rect x="239.8" y="453" width="0.2" height="15.0" fill="rgb(237,155,0)" rx="2" ry="2" />
<text  x="242.80" y="463.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::PipelineEvent&gt;::shared_ptr&lt;std::allocator&lt;duckdb::PipelineEvent&gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (28,957,104 samples, 0.06%)</title><rect x="1049.9" y="1781" width="0.6" height="15.0" fill="rgb(207,24,46)" rx="2" ry="2" />
<text  x="1052.85" y="1791.5" ></text>
</g>
<g >
<title>duckdb::BindContext::GetBinding (19,026,143 samples, 0.04%)</title><rect x="959.8" y="1653" width="0.4" height="15.0" fill="rgb(205,110,38)" rx="2" ry="2" />
<text  x="962.81" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::emplace_back&lt;duckdb::VectorCache&gt; (10,931,249 samples, 0.02%)</title><rect x="403.4" y="1781" width="0.3" height="15.0" fill="rgb(217,136,22)" rx="2" ry="2" />
<text  x="406.44" y="1791.5" ></text>
</g>
<g >
<title>duckdb::SelectionData::SelectionData (7,549,234 samples, 0.01%)</title><rect x="296.6" y="1509" width="0.2" height="15.0" fill="rgb(220,55,22)" rx="2" ry="2" />
<text  x="299.58" y="1519.5" ></text>
</g>
<g >
<title>duckdb::StarExpression::~StarExpression (5,045,465 samples, 0.01%)</title><rect x="949.1" y="1669" width="0.1" height="15.0" fill="rgb(236,129,31)" rx="2" ry="2" />
<text  x="952.10" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ColumnRefExpression::~ColumnRefExpression (4,406,029 samples, 0.01%)</title><rect x="948.4" y="1573" width="0.1" height="15.0" fill="rgb(249,37,49)" rx="2" ry="2" />
<text  x="951.40" y="1583.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::InterruptDoneSignalState&gt;::shared_ptr&lt;std::allocator&lt;duckdb::InterruptDoneSignalState&gt;&gt; (21,468,812 samples, 0.04%)</title><rect x="364.7" y="1845" width="0.5" height="15.0" fill="rgb(242,132,13)" rx="2" ry="2" />
<text  x="367.70" y="1855.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::unordered_set (4,646,883 samples, 0.01%)</title><rect x="814.9" y="1829" width="0.1" height="15.0" fill="rgb(249,46,54)" rx="2" ry="2" />
<text  x="817.91" y="1839.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_next_grapheme (18,148,577 samples, 0.04%)</title><rect x="636.7" y="1717" width="0.4" height="15.0" fill="rgb(243,23,52)" rx="2" ry="2" />
<text  x="639.72" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ManyFunctionMatcher, std::default_delete&lt;duckdb::ManyFunctionMatcher&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ManyFunctionMatcher&gt;, void&gt; (4,757,745 samples, 0.01%)</title><rect x="785.0" y="1829" width="0.1" height="15.0" fill="rgb(234,190,35)" rx="2" ry="2" />
<text  x="788.04" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~vector (4,568,762 samples, 0.01%)</title><rect x="659.9" y="1765" width="0.1" height="15.0" fill="rgb(252,31,21)" rx="2" ry="2" />
<text  x="662.91" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Binder::HasMatchingBinding (32,017,831 samples, 0.06%)</title><rect x="954.6" y="1637" width="0.7" height="15.0" fill="rgb(211,81,2)" rx="2" ry="2" />
<text  x="957.55" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (5,257,475 samples, 0.01%)</title><rect x="1043.0" y="1749" width="0.1" height="15.0" fill="rgb(247,163,41)" rx="2" ry="2" />
<text  x="1046.02" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned long [], std::default_delete&lt;unsigned long []&gt; &gt;::operator= (5,307,979 samples, 0.01%)</title><rect x="474.0" y="1509" width="0.1" height="15.0" fill="rgb(234,227,27)" rx="2" ry="2" />
<text  x="476.99" y="1519.5" ></text>
</g>
<g >
<title>error_entry (14,808,004 samples, 0.03%)</title><rect x="160.5" y="2021" width="0.3" height="15.0" fill="rgb(232,211,49)" rx="2" ry="2" />
<text  x="163.50" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::vector (4,416,438 samples, 0.01%)</title><rect x="842.1" y="1829" width="0.1" height="15.0" fill="rgb(212,36,53)" rx="2" ry="2" />
<text  x="845.07" y="1839.5" ></text>
</g>
<g >
<title>do_user_addr_fault (79,881,839 samples, 0.16%)</title><rect x="72.3" y="1925" width="1.8" height="15.0" fill="rgb(225,188,5)" rx="2" ry="2" />
<text  x="75.29" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (11,735,792 samples, 0.02%)</title><rect x="1025.7" y="1845" width="0.3" height="15.0" fill="rgb(217,176,50)" rx="2" ry="2" />
<text  x="1028.68" y="1855.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (2,354,839,056 samples, 4.59%)</title><rect x="91.1" y="1909" width="54.2" height="15.0" fill="rgb(246,44,21)" rx="2" ry="2" />
<text  x="94.10" y="1919.5" >std::..</text>
</g>
<g >
<title>fsync (155,754,324 samples, 0.30%)</title><rect x="249.0" y="1749" width="3.6" height="15.0" fill="rgb(224,39,7)" rx="2" ry="2" />
<text  x="252.03" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::CaseSimplificationRule, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (10,306,210 samples, 0.02%)</title><rect x="821.3" y="1877" width="0.2" height="15.0" fill="rgb(231,229,22)" rx="2" ry="2" />
<text  x="824.30" y="1887.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_alloc_event (23,001,892 samples, 0.04%)</title><rect x="218.5" y="1397" width="0.5" height="15.0" fill="rgb(243,171,25)" rx="2" ry="2" />
<text  x="221.48" y="1407.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_bucket_begin (35,072,418 samples, 0.07%)</title><rect x="665.8" y="1717" width="0.8" height="15.0" fill="rgb(242,9,23)" rx="2" ry="2" />
<text  x="668.84" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SelectStatement, std::default_delete&lt;duckdb::SelectStatement&gt; &gt;::operator= (4,726,761 samples, 0.01%)</title><rect x="538.4" y="1813" width="0.1" height="15.0" fill="rgb(229,195,21)" rx="2" ry="2" />
<text  x="541.37" y="1823.5" ></text>
</g>
<g >
<title>blk_mq_sched_try_merge (4,584,538 samples, 0.01%)</title><rect x="250.9" y="1477" width="0.1" height="15.0" fill="rgb(205,118,48)" rx="2" ry="2" />
<text  x="253.86" y="1487.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Get (4,808,068 samples, 0.01%)</title><rect x="436.6" y="1637" width="0.1" height="15.0" fill="rgb(250,201,22)" rx="2" ry="2" />
<text  x="439.57" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ConjunctionExpressionMatcher, std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConjunctionExpressionMatcher&gt;, void&gt; (7,608,951 samples, 0.01%)</title><rect x="792.7" y="1829" width="0.2" height="15.0" fill="rgb(228,210,16)" rx="2" ry="2" />
<text  x="795.75" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (11,978,130 samples, 0.02%)</title><rect x="420.6" y="1765" width="0.3" height="15.0" fill="rgb(219,228,18)" rx="2" ry="2" />
<text  x="423.59" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; (36,199,877 samples, 0.07%)</title><rect x="825.9" y="1845" width="0.9" height="15.0" fill="rgb(227,216,15)" rx="2" ry="2" />
<text  x="828.92" y="1855.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::Scan (35,452,840 samples, 0.07%)</title><rect x="215.2" y="1621" width="0.8" height="15.0" fill="rgb(249,42,29)" rx="2" ry="2" />
<text  x="218.17" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BlockMetaData, std::allocator&lt;duckdb::BlockMetaData&gt; &gt;::push_back (18,860,204 samples, 0.04%)</title><rect x="882.0" y="1669" width="0.5" height="15.0" fill="rgb(217,9,18)" rx="2" ry="2" />
<text  x="885.05" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryNode, std::default_delete&lt;duckdb::QueryNode&gt;, true&gt;::operator* (4,662,927 samples, 0.01%)</title><rect x="534.0" y="1765" width="0.1" height="15.0" fill="rgb(209,143,41)" rx="2" ry="2" />
<text  x="536.97" y="1775.5" ></text>
</g>
<g >
<title>duckdb::QueueProducerToken::QueueProducerToken (7,825,284 samples, 0.02%)</title><rect x="1091.0" y="1829" width="0.2" height="15.0" fill="rgb(251,20,24)" rx="2" ry="2" />
<text  x="1094.00" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (4,845,307 samples, 0.01%)</title><rect x="1006.1" y="1669" width="0.1" height="15.0" fill="rgb(237,133,3)" rx="2" ry="2" />
<text  x="1009.07" y="1679.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::GetColumn (6,014,716 samples, 0.01%)</title><rect x="199.9" y="1685" width="0.1" height="15.0" fill="rgb(219,154,32)" rx="2" ry="2" />
<text  x="202.91" y="1695.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;duckdb::BlockHandle&gt;::lock (5,105,426 samples, 0.01%)</title><rect x="342.6" y="949" width="0.1" height="15.0" fill="rgb(226,206,7)" rx="2" ry="2" />
<text  x="345.60" y="959.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (5,699,892 samples, 0.01%)</title><rect x="341.0" y="1061" width="0.2" height="15.0" fill="rgb(254,174,17)" rx="2" ry="2" />
<text  x="344.04" y="1071.5" ></text>
</g>
<g >
<title>[unknown] (4,567,963 samples, 0.01%)</title><rect x="33.5" y="2005" width="0.1" height="15.0" fill="rgb(250,5,46)" rx="2" ry="2" />
<text  x="36.50" y="2015.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::WriteField&lt;duckdb::LogicalTypeId&gt; (5,511,617 samples, 0.01%)</title><rect x="314.3" y="1621" width="0.2" height="15.0" fill="rgb(222,148,36)" rx="2" ry="2" />
<text  x="317.35" y="1631.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (5,945,129 samples, 0.01%)</title><rect x="74.0" y="1861" width="0.1" height="15.0" fill="rgb(252,164,49)" rx="2" ry="2" />
<text  x="76.97" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ValidityScanState::~ValidityScanState (13,606,408 samples, 0.03%)</title><rect x="288.1" y="1429" width="0.3" height="15.0" fill="rgb(216,156,28)" rx="2" ry="2" />
<text  x="291.06" y="1439.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::~QueryProfiler (20,386,427 samples, 0.04%)</title><rect x="352.6" y="1701" width="0.4" height="15.0" fill="rgb(231,125,18)" rx="2" ry="2" />
<text  x="355.56" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt; &gt;::_M_deallocate_node (32,312,949 samples, 0.06%)</title><rect x="499.8" y="1701" width="0.7" height="15.0" fill="rgb(252,57,3)" rx="2" ry="2" />
<text  x="502.80" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (4,458,924 samples, 0.01%)</title><rect x="863.2" y="1669" width="0.1" height="15.0" fill="rgb(208,99,0)" rx="2" ry="2" />
<text  x="866.18" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::unique_ptr (4,541,584 samples, 0.01%)</title><rect x="536.1" y="1669" width="0.1" height="15.0" fill="rgb(252,61,19)" rx="2" ry="2" />
<text  x="539.08" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ClientConfig::ClientConfig (12,356,065 samples, 0.02%)</title><rect x="373.2" y="1909" width="0.2" height="15.0" fill="rgb(243,126,40)" rx="2" ry="2" />
<text  x="376.16" y="1919.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::CatalogEntry, std::default_delete&lt;duckdb::CatalogEntry&gt; &gt;::_M_ptr (4,857,594 samples, 0.01%)</title><rect x="1003.8" y="1685" width="0.1" height="15.0" fill="rgb(212,12,31)" rx="2" ry="2" />
<text  x="1006.77" y="1695.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::vector (5,108,269 samples, 0.01%)</title><rect x="839.4" y="1813" width="0.2" height="15.0" fill="rgb(213,102,16)" rx="2" ry="2" />
<text  x="842.44" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnScanState [], std::default_delete&lt;duckdb::ColumnScanState []&gt; &gt;::~unique_ptr (39,041,748 samples, 0.08%)</title><rect x="226.6" y="1685" width="0.9" height="15.0" fill="rgb(208,185,22)" rx="2" ry="2" />
<text  x="229.56" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BoundColumnRefExpression*, std::allocator&lt;duckdb::BoundColumnRefExpression*&gt; &gt;::push_back (22,277,304 samples, 0.04%)</title><rect x="763.9" y="1669" width="0.5" height="15.0" fill="rgb(225,26,35)" rx="2" ry="2" />
<text  x="766.91" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BindCastFunction, std::allocator&lt;duckdb::BindCastFunction&gt; &gt;::_M_realloc_insert&lt;duckdb::BoundCastInfo  (8,772,895 samples, 0.02%)</title><rect x="1120.5" y="1925" width="0.2" height="15.0" fill="rgb(221,224,27)" rx="2" ry="2" />
<text  x="1123.45" y="1935.5" ></text>
</g>
<g >
<title>duckdb::PipelineInitializeEvent::~PipelineInitializeEvent (19,724,890 samples, 0.04%)</title><rect x="356.8" y="1653" width="0.4" height="15.0" fill="rgb(230,90,2)" rx="2" ry="2" />
<text  x="359.77" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::RelationAttributes&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::RelationAttributes&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (5,340,895 samples, 0.01%)</title><rect x="756.0" y="1733" width="0.2" height="15.0" fill="rgb(223,203,31)" rx="2" ry="2" />
<text  x="759.04" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;duckdb::DataTable&amp;, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt; (6,675,903 samples, 0.01%)</title><rect x="432.1" y="1701" width="0.1" height="15.0" fill="rgb(248,78,17)" rx="2" ry="2" />
<text  x="435.07" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::UnifiedVectorFormat, std::allocator&lt;duckdb::UnifiedVectorFormat&gt; &gt;::resize (15,681,552 samples, 0.03%)</title><rect x="385.0" y="1909" width="0.3" height="15.0" fill="rgb(213,12,21)" rx="2" ry="2" />
<text  x="387.99" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_relocate (95,285,210 samples, 0.19%)</title><rect x="568.3" y="1749" width="2.2" height="15.0" fill="rgb(249,3,25)" rx="2" ry="2" />
<text  x="571.29" y="1759.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (34,823,657 samples, 0.07%)</title><rect x="880.9" y="1573" width="0.8" height="15.0" fill="rgb(237,147,44)" rx="2" ry="2" />
<text  x="883.93" y="1583.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (5,993,291 samples, 0.01%)</title><rect x="951.0" y="1605" width="0.1" height="15.0" fill="rgb(252,212,27)" rx="2" ry="2" />
<text  x="953.95" y="1615.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::ConstantFoldingExpressionMatcher&gt; &gt; (6,202,918 samples, 0.01%)</title><rect x="795.6" y="1813" width="0.2" height="15.0" fill="rgb(245,141,19)" rx="2" ry="2" />
<text  x="798.63" y="1823.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_get_property (7,249,602 samples, 0.01%)</title><rect x="1072.1" y="1717" width="0.2" height="15.0" fill="rgb(231,86,47)" rx="2" ry="2" />
<text  x="1075.09" y="1727.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionMatcher&gt;::operator (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1637" width="0.3" height="15.0" fill="rgb(231,170,16)" rx="2" ry="2" />
<text  x="835.82" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (4,974,897 samples, 0.01%)</title><rect x="878.1" y="1413" width="0.2" height="15.0" fill="rgb(253,89,34)" rx="2" ry="2" />
<text  x="881.14" y="1423.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (9,083,488 samples, 0.02%)</title><rect x="750.0" y="1701" width="0.2" height="15.0" fill="rgb(237,119,9)" rx="2" ry="2" />
<text  x="753.04" y="1711.5" ></text>
</g>
<g >
<title>duckdb::SelectionData::SelectionData (433,650,943 samples, 0.85%)</title><rect x="256.3" y="1509" width="10.0" height="15.0" fill="rgb(237,35,1)" rx="2" ry="2" />
<text  x="259.30" y="1519.5" ></text>
</g>
<g >
<title>duckdb::ColumnRefExpression::ColumnRefExpression (19,407,222 samples, 0.04%)</title><rect x="943.8" y="1685" width="0.4" height="15.0" fill="rgb(222,7,31)" rx="2" ry="2" />
<text  x="946.78" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;::unique_ptr (5,783,925 samples, 0.01%)</title><rect x="869.1" y="1685" width="0.2" height="15.0" fill="rgb(249,205,34)" rx="2" ry="2" />
<text  x="872.14" y="1695.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;::~vector (6,829,682 samples, 0.01%)</title><rect x="531.5" y="1749" width="0.2" height="15.0" fill="rgb(225,174,19)" rx="2" ry="2" />
<text  x="534.51" y="1759.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;::pair&lt;char const  (9,236,584 samples, 0.02%)</title><rect x="731.1" y="1797" width="0.2" height="15.0" fill="rgb(246,57,33)" rx="2" ry="2" />
<text  x="734.11" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryNode, std::default_delete&lt;duckdb::QueryNode&gt;, true&gt;::~unique_ptr (24,632,347 samples, 0.05%)</title><rect x="1038.4" y="1733" width="0.6" height="15.0" fill="rgb(221,6,39)" rx="2" ry="2" />
<text  x="1041.43" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt; &gt; &gt;::~vector (30,851,871 samples, 0.06%)</title><rect x="499.8" y="1605" width="0.7" height="15.0" fill="rgb(207,121,54)" rx="2" ry="2" />
<text  x="502.81" y="1615.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::ifree (34,702,211 samples, 0.07%)</title><rect x="325.5" y="1397" width="0.8" height="15.0" fill="rgb(246,76,2)" rx="2" ry="2" />
<text  x="328.47" y="1407.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (10,626,551 samples, 0.02%)</title><rect x="1000.3" y="1621" width="0.3" height="15.0" fill="rgb(213,170,13)" rx="2" ry="2" />
<text  x="1003.31" y="1631.5" ></text>
</g>
<g >
<title>page_fault (314,340,105 samples, 0.61%)</title><rect x="160.9" y="2021" width="7.2" height="15.0" fill="rgb(206,114,19)" rx="2" ry="2" />
<text  x="163.89" y="2031.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (19,297,316 samples, 0.04%)</title><rect x="577.6" y="1765" width="0.4" height="15.0" fill="rgb(219,101,39)" rx="2" ry="2" />
<text  x="580.60" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (17,277,800 samples, 0.03%)</title><rect x="473.8" y="1605" width="0.4" height="15.0" fill="rgb(205,173,9)" rx="2" ry="2" />
<text  x="476.82" y="1615.5" ></text>
</g>
<g >
<title>duckdb::RegexOptimizationRule::~RegexOptimizationRule (7,677,357 samples, 0.01%)</title><rect x="833.2" y="1717" width="0.1" height="15.0" fill="rgb(219,222,12)" rx="2" ry="2" />
<text  x="836.16" y="1727.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;duckdb::ScalarFunction const*, std::vector&lt;duckdb::ScalarFunction, std::allocator&lt;duckdb::ScalarFunction&gt; &gt; &gt;, duckdb::ScalarFunction*, duckdb::ScalarFunction&gt; (6,378,611 samples, 0.01%)</title><rect x="1114.8" y="1765" width="0.2" height="15.0" fill="rgb(209,208,0)" rx="2" ry="2" />
<text  x="1117.81" y="1775.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ComparisonExpressionMatcher&gt; (10,777,129 samples, 0.02%)</title><rect x="791.6" y="1845" width="0.2" height="15.0" fill="rgb(238,83,13)" rx="2" ry="2" />
<text  x="794.56" y="1855.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (8,970,731 samples, 0.02%)</title><rect x="599.9" y="1781" width="0.2" height="15.0" fill="rgb(229,5,10)" rx="2" ry="2" />
<text  x="602.93" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt; &gt; &gt;::_M_realloc_insert&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt; &gt; (15,332,420 samples, 0.03%)</title><rect x="1081.9" y="1781" width="0.3" height="15.0" fill="rgb(230,183,0)" rx="2" ry="2" />
<text  x="1084.89" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ExtraTypeInfo::Deserialize (13,505,104 samples, 0.03%)</title><rect x="586.3" y="1797" width="0.3" height="15.0" fill="rgb(211,68,52)" rx="2" ry="2" />
<text  x="589.29" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt; &gt;::operator= (4,446,958 samples, 0.01%)</title><rect x="447.4" y="1637" width="0.1" height="15.0" fill="rgb(219,122,0)" rx="2" ry="2" />
<text  x="450.42" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;, true&gt;::~vector (104,173,057 samples, 0.20%)</title><rect x="241.5" y="933" width="2.4" height="15.0" fill="rgb(250,70,24)" rx="2" ry="2" />
<text  x="244.54" y="943.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (15,135,050 samples, 0.03%)</title><rect x="729.4" y="1605" width="0.4" height="15.0" fill="rgb(227,166,33)" rx="2" ry="2" />
<text  x="732.44" y="1615.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::construct&lt;unsigned long, unsigned long const&amp;&gt; (8,029,947 samples, 0.02%)</title><rect x="679.9" y="1717" width="0.2" height="15.0" fill="rgb(221,75,39)" rx="2" ry="2" />
<text  x="682.95" y="1727.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (10,545,316 samples, 0.02%)</title><rect x="266.8" y="1621" width="0.3" height="15.0" fill="rgb(254,11,36)" rx="2" ry="2" />
<text  x="269.81" y="1631.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_base (7,483,698 samples, 0.01%)</title><rect x="651.0" y="1717" width="0.2" height="15.0" fill="rgb(215,147,14)" rx="2" ry="2" />
<text  x="654.02" y="1727.5" ></text>
</g>
<g >
<title>std::_Sp_counted_deleter&lt;duckdb::PipelineInitializeTask*, std::default_delete&lt;duckdb::PipelineInitializeTask&gt;, std::allocator&lt;void&gt;,  (18,072,112 samples, 0.04%)</title><rect x="144.5" y="1797" width="0.5" height="15.0" fill="rgb(248,43,49)" rx="2" ry="2" />
<text  x="147.55" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (51,177,270 samples, 0.10%)</title><rect x="681.9" y="1781" width="1.2" height="15.0" fill="rgb(244,41,29)" rx="2" ry="2" />
<text  x="684.88" y="1791.5" ></text>
</g>
<g >
<title>duckdb::DistinctStatistics::Update (24,795,090 samples, 0.05%)</title><rect x="460.4" y="1717" width="0.5" height="15.0" fill="rgb(243,136,1)" rx="2" ry="2" />
<text  x="463.35" y="1727.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;, unsigned long, duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;, duckdb::ExpressionEquality&lt;duckdb::ParsedExpression&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt; &gt; &gt;::unordered_map (5,961,217 samples, 0.01%)</title><rect x="968.7" y="1749" width="0.1" height="15.0" fill="rgb(214,197,38)" rx="2" ry="2" />
<text  x="971.67" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundQueryNode, std::default_delete&lt;duckdb::BoundQueryNode&gt; &gt;::get (4,462,555 samples, 0.01%)</title><rect x="973.1" y="1733" width="0.1" height="15.0" fill="rgb(227,17,38)" rx="2" ry="2" />
<text  x="976.06" y="1743.5" ></text>
</g>
<g >
<title>__x64_sys_futex (24,477,358 samples, 0.05%)</title><rect x="1058.6" y="1701" width="0.6" height="15.0" fill="rgb(234,40,8)" rx="2" ry="2" />
<text  x="1061.59" y="1711.5" ></text>
</g>
<g >
<title>duckdb::EntryValue::~EntryValue (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1237" width="0.3" height="15.0" fill="rgb(209,94,11)" rx="2" ry="2" />
<text  x="1120.47" y="1247.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::BoundColumnRefExpression, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, duckdb::LogicalType&amp;, duckdb::ColumnBinding&amp;, unsigned long&amp;&gt; (23,091,619 samples, 0.05%)</title><rect x="582.9" y="1845" width="0.5" height="15.0" fill="rgb(224,11,33)" rx="2" ry="2" />
<text  x="585.89" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundConstantExpression, std::default_delete&lt;duckdb::BoundConstantExpression&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BoundConstantExpression&gt;, void&gt; (4,950,739 samples, 0.01%)</title><rect x="982.9" y="1781" width="0.2" height="15.0" fill="rgb(235,209,32)" rx="2" ry="2" />
<text  x="985.94" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; (13,626,830 samples, 0.03%)</title><rect x="828.3" y="1749" width="0.3" height="15.0" fill="rgb(219,68,29)" rx="2" ry="2" />
<text  x="831.26" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::PreparedStatementData&gt; &gt;::construct&lt;duckdb::PreparedStatementData, duckdb::StatementType&amp;&gt; (17,658,464 samples, 0.03%)</title><rect x="1040.8" y="1797" width="0.4" height="15.0" fill="rgb(208,155,36)" rx="2" ry="2" />
<text  x="1043.83" y="1807.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::LightweightSemaphore::waitWithPartialSpinning (1,436,734,181 samples, 2.80%)</title><rect x="110.2" y="1845" width="33.0" height="15.0" fill="rgb(224,77,41)" rx="2" ry="2" />
<text  x="113.15" y="1855.5" >du..</text>
</g>
<g >
<title>get_page_from_freelist (56,153,141 samples, 0.11%)</title><rect x="1137.4" y="1877" width="1.3" height="15.0" fill="rgb(212,59,3)" rx="2" ry="2" />
<text  x="1140.44" y="1887.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr (12,854,843 samples, 0.03%)</title><rect x="828.3" y="1717" width="0.3" height="15.0" fill="rgb(233,50,25)" rx="2" ry="2" />
<text  x="831.28" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataScanState::~ColumnDataScanState (12,167,414 samples, 0.02%)</title><rect x="356.1" y="1413" width="0.3" height="15.0" fill="rgb(234,142,9)" rx="2" ry="2" />
<text  x="359.14" y="1423.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1285" width="0.1" height="15.0" fill="rgb(242,150,34)" rx="2" ry="2" />
<text  x="14.25" y="1295.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;*, std::shared_ptr&lt;duckdb::MetaPipeline&gt; &gt; (22,986,002 samples, 0.04%)</title><rect x="1096.2" y="1701" width="0.5" height="15.0" fill="rgb(222,213,51)" rx="2" ry="2" />
<text  x="1099.17" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (12,688,238 samples, 0.02%)</title><rect x="883.5" y="1669" width="0.3" height="15.0" fill="rgb(222,55,44)" rx="2" ry="2" />
<text  x="886.47" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1333" width="0.1" height="15.0" fill="rgb(231,95,33)" rx="2" ry="2" />
<text  x="14.25" y="1343.5" ></text>
</g>
<g >
<title>duckdb::ComparisonExpressionMatcher::~ComparisonExpressionMatcher (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1605" width="0.3" height="15.0" fill="rgb(235,22,23)" rx="2" ry="2" />
<text  x="835.82" y="1615.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::ResetFromCache (16,287,760 samples, 0.03%)</title><rect x="893.4" y="1653" width="0.4" height="15.0" fill="rgb(205,194,38)" rx="2" ry="2" />
<text  x="896.42" y="1663.5" ></text>
</g>
<g >
<title>duckdb::HyperLogLog::AddToLog (10,454,287 samples, 0.02%)</title><rect x="228.8" y="1605" width="0.2" height="15.0" fill="rgb(253,81,40)" rx="2" ry="2" />
<text  x="231.78" y="1615.5" ></text>
</g>
<g >
<title>duckdb::DatabaseInstance::GetDatabaseManager (5,953,267 samples, 0.01%)</title><rect x="1042.5" y="1861" width="0.1" height="15.0" fill="rgb(226,116,29)" rx="2" ry="2" />
<text  x="1045.48" y="1871.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (48,741,506 samples, 0.10%)</title><rect x="401.2" y="1541" width="1.1" height="15.0" fill="rgb(242,111,32)" rx="2" ry="2" />
<text  x="404.17" y="1551.5" ></text>
</g>
<g >
<title>__lru_cache_add (7,413,524 samples, 0.01%)</title><rect x="166.0" y="1877" width="0.1" height="15.0" fill="rgb(249,61,12)" rx="2" ry="2" />
<text  x="168.96" y="1887.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionRootInfo, duckdb::ExpressionExecutorState&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (4,643,958 samples, 0.01%)</title><rect x="106.6" y="1717" width="0.1" height="15.0" fill="rgb(219,208,53)" rx="2" ry="2" />
<text  x="109.55" y="1727.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt; (29,623,108 samples, 0.06%)</title><rect x="1016.7" y="1605" width="0.7" height="15.0" fill="rgb(216,85,39)" rx="2" ry="2" />
<text  x="1019.67" y="1615.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::FunctionExpressionMatcher (7,011,215 samples, 0.01%)</title><rect x="811.3" y="1829" width="0.2" height="15.0" fill="rgb(220,16,30)" rx="2" ry="2" />
<text  x="814.32" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (4,483,706 samples, 0.01%)</title><rect x="891.8" y="1381" width="0.2" height="15.0" fill="rgb(254,146,10)" rx="2" ry="2" />
<text  x="894.85" y="1391.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::BlockHandle,  (348,066,787 samples, 0.68%)</title><rect x="342.0" y="1093" width="8.0" height="15.0" fill="rgb(245,112,36)" rx="2" ry="2" />
<text  x="345.02" y="1103.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_free (70,222,877 samples, 0.14%)</title><rect x="344.4" y="821" width="1.6" height="15.0" fill="rgb(222,21,54)" rx="2" ry="2" />
<text  x="347.37" y="831.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;duckdb::OptimizerType, duckdb::OptimizerType, std::_Identity&lt;duckdb::OptimizerType&gt;, std::less&lt;duckdb::OptimizerType&gt;, std::allocator&lt;duckdb::OptimizerType&gt; &gt;::find (25,409,165 samples, 0.05%)</title><rect x="773.5" y="1845" width="0.6" height="15.0" fill="rgb(252,208,18)" rx="2" ry="2" />
<text  x="776.49" y="1855.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::allocate (10,890,449 samples, 0.02%)</title><rect x="607.4" y="1701" width="0.2" height="15.0" fill="rgb(230,89,21)" rx="2" ry="2" />
<text  x="610.39" y="1711.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (66,149,170 samples, 0.13%)</title><rect x="333.6" y="1397" width="1.6" height="15.0" fill="rgb(222,64,31)" rx="2" ry="2" />
<text  x="336.63" y="1407.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LocalSourceState, std::default_delete&lt;duckdb::LocalSourceState&gt; &gt;::release (4,409,601 samples, 0.01%)</title><rect x="496.6" y="1797" width="0.1" height="15.0" fill="rgb(235,31,19)" rx="2" ry="2" />
<text  x="499.60" y="1807.5" ></text>
</g>
<g >
<title>duckdb::LogicalExpressionGet::ResolveTypes (13,435,421 samples, 0.03%)</title><rect x="847.0" y="1829" width="0.3" height="15.0" fill="rgb(221,140,48)" rx="2" ry="2" />
<text  x="849.99" y="1839.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::Append (180,640,300 samples, 0.35%)</title><rect x="459.8" y="1781" width="4.2" height="15.0" fill="rgb(227,181,50)" rx="2" ry="2" />
<text  x="462.80" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnDataCopyFunction, std::allocator&lt;duckdb::ColumnDataCopyFunction&gt; &gt;::push_back (5,213,340 samples, 0.01%)</title><rect x="97.2" y="1717" width="0.2" height="15.0" fill="rgb(230,109,27)" rx="2" ry="2" />
<text  x="100.24" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, true&gt;::~vector (4,491,024 samples, 0.01%)</title><rect x="830.6" y="1589" width="0.1" height="15.0" fill="rgb(225,52,0)" rx="2" ry="2" />
<text  x="833.64" y="1599.5" ></text>
</g>
<g >
<title>duckdb::TransactionContext::BeginTransaction (47,477,891 samples, 0.09%)</title><rect x="542.7" y="1893" width="1.1" height="15.0" fill="rgb(241,150,20)" rx="2" ry="2" />
<text  x="545.68" y="1903.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DataChunk, std::default_delete&lt;duckdb::DataChunk&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::DataChunk&gt;, void&gt; (6,301,832 samples, 0.01%)</title><rect x="372.2" y="1877" width="0.1" height="15.0" fill="rgb(208,157,35)" rx="2" ry="2" />
<text  x="375.17" y="1887.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::~TemplatedValidityMask (10,282,095 samples, 0.02%)</title><rect x="481.1" y="1605" width="0.3" height="15.0" fill="rgb(209,6,25)" rx="2" ry="2" />
<text  x="484.12" y="1615.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (13,979,027 samples, 0.03%)</title><rect x="34.3" y="1989" width="0.3" height="15.0" fill="rgb(227,90,21)" rx="2" ry="2" />
<text  x="37.25" y="1999.5" ></text>
</g>
<g >
<title>get_page_from_freelist (21,885,815 samples, 0.04%)</title><rect x="73.2" y="1829" width="0.5" height="15.0" fill="rgb(245,44,32)" rx="2" ry="2" />
<text  x="76.16" y="1839.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, duckdb::OperatorInformation, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt; &gt;::~unordered_map (4,900,080 samples, 0.01%)</title><rect x="108.7" y="1733" width="0.1" height="15.0" fill="rgb(236,31,32)" rx="2" ry="2" />
<text  x="111.70" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (66,616,457 samples, 0.13%)</title><rect x="401.0" y="1653" width="1.5" height="15.0" fill="rgb(228,84,1)" rx="2" ry="2" />
<text  x="403.96" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::AllocatorDebugInfo, std::default_delete&lt;duckdb::AllocatorDebugInfo&gt; &gt;::operator= (7,484,032 samples, 0.01%)</title><rect x="376.9" y="1797" width="0.2" height="15.0" fill="rgb(237,171,11)" rx="2" ry="2" />
<text  x="379.91" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::~unique_ptr (5,742,586 samples, 0.01%)</title><rect x="949.1" y="1717" width="0.1" height="15.0" fill="rgb(248,114,26)" rx="2" ry="2" />
<text  x="952.09" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::aligned_usize_get (5,683,385 samples, 0.01%)</title><rect x="366.9" y="1541" width="0.1" height="15.0" fill="rgb(240,130,3)" rx="2" ry="2" />
<text  x="369.86" y="1551.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (11,461,903 samples, 0.02%)</title><rect x="735.1" y="1733" width="0.3" height="15.0" fill="rgb(252,7,11)" rx="2" ry="2" />
<text  x="738.09" y="1743.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::RowGroupSegmentTree,  (361,441,674 samples, 0.70%)</title><rect x="237.2" y="1525" width="8.3" height="15.0" fill="rgb(245,133,29)" rx="2" ry="2" />
<text  x="240.18" y="1535.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;, std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::_M_ptr (5,876,138 samples, 0.01%)</title><rect x="552.9" y="1701" width="0.1" height="15.0" fill="rgb(243,34,0)" rx="2" ry="2" />
<text  x="555.90" y="1711.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpressionChildren (9,553,302 samples, 0.02%)</title><rect x="750.8" y="1685" width="0.2" height="15.0" fill="rgb(227,216,39)" rx="2" ry="2" />
<text  x="753.78" y="1695.5" ></text>
</g>
<g >
<title>duckdb::grapheme_break_extended (8,250,697 samples, 0.02%)</title><rect x="636.8" y="1701" width="0.2" height="15.0" fill="rgb(237,17,45)" rx="2" ry="2" />
<text  x="639.84" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; (9,907,290 samples, 0.02%)</title><rect x="1012.1" y="1797" width="0.2" height="15.0" fill="rgb(249,64,33)" rx="2" ry="2" />
<text  x="1015.11" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Transaction::Get (19,686,830 samples, 0.04%)</title><rect x="1042.8" y="1813" width="0.4" height="15.0" fill="rgb(226,201,20)" rx="2" ry="2" />
<text  x="1045.78" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt; &gt;::~unique_ptr (6,654,675 samples, 0.01%)</title><rect x="340.8" y="1125" width="0.1" height="15.0" fill="rgb(219,129,14)" rx="2" ry="2" />
<text  x="343.75" y="1135.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::push_back (11,898,825 samples, 0.02%)</title><rect x="1020.5" y="1829" width="0.2" height="15.0" fill="rgb(254,165,54)" rx="2" ry="2" />
<text  x="1023.47" y="1839.5" ></text>
</g>
<g >
<title>duckdb::UnnestRewriter::Optimize (32,485,962 samples, 0.06%)</title><rect x="768.9" y="1813" width="0.7" height="15.0" fill="rgb(238,52,13)" rx="2" ry="2" />
<text  x="771.89" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BoundCastInfo::BoundCastInfo (15,778,392 samples, 0.03%)</title><rect x="932.5" y="1669" width="0.4" height="15.0" fill="rgb(235,121,45)" rx="2" ry="2" />
<text  x="935.53" y="1679.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (9,034,392 samples, 0.02%)</title><rect x="1041.4" y="1829" width="0.2" height="15.0" fill="rgb(227,98,26)" rx="2" ry="2" />
<text  x="1044.41" y="1839.5" ></text>
</g>
<g >
<title>duckdb::DuckTransaction::DuckTransaction (72,246,629 samples, 0.14%)</title><rect x="989.0" y="1605" width="1.7" height="15.0" fill="rgb(250,104,12)" rx="2" ry="2" />
<text  x="992.05" y="1615.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (5,010,823 samples, 0.01%)</title><rect x="381.0" y="1653" width="0.1" height="15.0" fill="rgb(209,43,10)" rx="2" ry="2" />
<text  x="384.00" y="1663.5" ></text>
</g>
<g >
<title>duckdb::AdjustTextForRendering (166,955,461 samples, 0.33%)</title><rect x="1071.2" y="1749" width="3.8" height="15.0" fill="rgb(211,187,5)" rx="2" ry="2" />
<text  x="1074.15" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt; &gt;::~unique_ptr (12,477,063 samples, 0.02%)</title><rect x="500.0" y="1349" width="0.3" height="15.0" fill="rgb(212,139,46)" rx="2" ry="2" />
<text  x="503.03" y="1359.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (17,186,216 samples, 0.03%)</title><rect x="798.1" y="1829" width="0.4" height="15.0" fill="rgb(217,65,31)" rx="2" ry="2" />
<text  x="801.08" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (4,705,657 samples, 0.01%)</title><rect x="785.1" y="1813" width="0.2" height="15.0" fill="rgb(236,67,52)" rx="2" ry="2" />
<text  x="788.14" y="1823.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt; &gt;::destroy&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt; (6,093,653 samples, 0.01%)</title><rect x="374.8" y="1685" width="0.1" height="15.0" fill="rgb(227,194,6)" rx="2" ry="2" />
<text  x="377.78" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (11,882,545 samples, 0.02%)</title><rect x="34.9" y="2005" width="0.3" height="15.0" fill="rgb(216,221,1)" rx="2" ry="2" />
<text  x="37.92" y="2015.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, true&gt;::~vector (5,371,698 samples, 0.01%)</title><rect x="1038.8" y="1653" width="0.1" height="15.0" fill="rgb(246,129,5)" rx="2" ry="2" />
<text  x="1041.82" y="1663.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, duckdb::CatalogEntryHashFunction, duckdb::CatalogEntryEquality, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt; &gt;::insert (56,985,629 samples, 0.11%)</title><rect x="851.4" y="1829" width="1.3" height="15.0" fill="rgb(252,111,5)" rx="2" ry="2" />
<text  x="854.42" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_salloc (14,823,906 samples, 0.03%)</title><rect x="391.5" y="1445" width="0.4" height="15.0" fill="rgb(205,196,6)" rx="2" ry="2" />
<text  x="394.52" y="1455.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::Binder, bool, duckdb::ClientContext&amp;, std::shared_ptr&lt;duckdb::Binder&gt;, bool&amp;&gt; (64,433,366 samples, 0.13%)</title><rect x="984.8" y="1813" width="1.5" height="15.0" fill="rgb(233,223,6)" rx="2" ry="2" />
<text  x="987.79" y="1823.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::BufferAllocatorFree (66,868,724 samples, 0.13%)</title><rect x="325.3" y="1477" width="1.5" height="15.0" fill="rgb(233,119,32)" rx="2" ry="2" />
<text  x="328.26" y="1487.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ActiveQueryContext&gt; (17,983,103 samples, 0.04%)</title><rect x="543.8" y="1893" width="0.5" height="15.0" fill="rgb(247,193,10)" rx="2" ry="2" />
<text  x="546.85" y="1903.5" ></text>
</g>
<g >
<title>duckdb::BoundColumnRefExpression::Hash (33,688,113 samples, 0.07%)</title><rect x="583.6" y="1861" width="0.8" height="15.0" fill="rgb(227,144,52)" rx="2" ry="2" />
<text  x="586.61" y="1871.5" ></text>
</g>
<g >
<title>try_charge (5,164,210 samples, 0.01%)</title><rect x="74.0" y="1829" width="0.1" height="15.0" fill="rgb(244,17,4)" rx="2" ry="2" />
<text  x="76.99" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BufferedFileWriter::Sync (239,378,654 samples, 0.47%)</title><rect x="247.1" y="1781" width="5.5" height="15.0" fill="rgb(236,155,9)" rx="2" ry="2" />
<text  x="250.13" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::operator= (7,125,597 samples, 0.01%)</title><rect x="811.7" y="1845" width="0.2" height="15.0" fill="rgb(211,134,29)" rx="2" ry="2" />
<text  x="814.69" y="1855.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (6,768,730 samples, 0.01%)</title><rect x="22.1" y="2005" width="0.1" height="15.0" fill="rgb(228,58,15)" rx="2" ry="2" />
<text  x="25.07" y="2015.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;*, duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt; &gt; (99,861,463 samples, 0.19%)</title><rect x="241.6" y="901" width="2.3" height="15.0" fill="rgb(225,34,16)" rx="2" ry="2" />
<text  x="244.62" y="911.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::idalloctm (6,657,622 samples, 0.01%)</title><rect x="239.8" y="485" width="0.2" height="15.0" fill="rgb(214,31,24)" rx="2" ry="2" />
<text  x="242.80" y="495.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;std::lock_guard&lt;std::mutex&gt;, std::default_delete&lt;std::lock_guard&lt;std::mutex&gt; &gt; &gt;::~unique_ptr (18,056,559 samples, 0.04%)</title><rect x="329.4" y="1813" width="0.4" height="15.0" fill="rgb(226,103,44)" rx="2" ry="2" />
<text  x="332.40" y="1823.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::begin (6,614,937 samples, 0.01%)</title><rect x="674.8" y="1797" width="0.1" height="15.0" fill="rgb(235,214,43)" rx="2" ry="2" />
<text  x="677.78" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::InitializeAppend (5,670,629 samples, 0.01%)</title><rect x="104.4" y="1653" width="0.2" height="15.0" fill="rgb(239,23,11)" rx="2" ry="2" />
<text  x="107.42" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt; &gt;::~unique_ptr (445,582,368 samples, 0.87%)</title><rect x="339.9" y="1477" width="10.3" height="15.0" fill="rgb(246,85,51)" rx="2" ry="2" />
<text  x="342.95" y="1487.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::pac_alloc_impl (89,018,754 samples, 0.17%)</title><rect x="875.7" y="1301" width="2.0" height="15.0" fill="rgb(240,209,43)" rx="2" ry="2" />
<text  x="878.70" y="1311.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::operator= (5,269,811 samples, 0.01%)</title><rect x="751.3" y="1765" width="0.1" height="15.0" fill="rgb(254,115,46)" rx="2" ry="2" />
<text  x="754.32" y="1775.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt;, duckdb::LogicalType*, duckdb::LogicalType&gt; (5,845,407 samples, 0.01%)</title><rect x="930.8" y="1669" width="0.2" height="15.0" fill="rgb(211,91,38)" rx="2" ry="2" />
<text  x="933.82" y="1679.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::StartPhase (58,630,939 samples, 0.11%)</title><rect x="922.6" y="1877" width="1.4" height="15.0" fill="rgb(209,14,19)" rx="2" ry="2" />
<text  x="925.63" y="1887.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (28,750,347 samples, 0.06%)</title><rect x="1023.1" y="1845" width="0.7" height="15.0" fill="rgb(251,79,36)" rx="2" ry="2" />
<text  x="1026.13" y="1855.5" ></text>
</g>
<g >
<title>duckdb::AddToSingleLogInternal (5,218,733 samples, 0.01%)</title><rect x="460.4" y="1685" width="0.1" height="15.0" fill="rgb(252,129,7)" rx="2" ry="2" />
<text  x="463.40" y="1695.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::Sink (163,626,299 samples, 0.32%)</title><rect x="101.9" y="1781" width="3.8" height="15.0" fill="rgb(254,195,23)" rx="2" ry="2" />
<text  x="104.90" y="1791.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (84,724,476 samples, 0.17%)</title><rect x="486.6" y="1701" width="2.0" height="15.0" fill="rgb(254,152,29)" rx="2" ry="2" />
<text  x="489.64" y="1711.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; (35,120,325 samples, 0.07%)</title><rect x="827.0" y="1829" width="0.8" height="15.0" fill="rgb(234,210,9)" rx="2" ry="2" />
<text  x="830.03" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (27,054,556 samples, 0.05%)</title><rect x="878.3" y="1429" width="0.6" height="15.0" fill="rgb(232,23,26)" rx="2" ry="2" />
<text  x="881.27" y="1439.5" ></text>
</g>
<g >
<title>duckdb::TableScanState::TableScanState (6,291,643 samples, 0.01%)</title><rect x="287.4" y="1701" width="0.2" height="15.0" fill="rgb(239,191,19)" rx="2" ry="2" />
<text  x="290.42" y="1711.5" ></text>
</g>
<g >
<title>duckdb::Rule::~Rule (15,936,810 samples, 0.03%)</title><rect x="831.7" y="1685" width="0.4" height="15.0" fill="rgb(207,63,5)" rx="2" ry="2" />
<text  x="834.74" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LocalSinkState, std::default_delete&lt;duckdb::LocalSinkState&gt; &gt;::release (7,321,552 samples, 0.01%)</title><rect x="496.3" y="1797" width="0.1" height="15.0" fill="rgb(243,225,15)" rx="2" ry="2" />
<text  x="499.27" y="1807.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1141" width="0.1" height="15.0" fill="rgb(240,70,18)" rx="2" ry="2" />
<text  x="14.25" y="1151.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorDataIndex, std::allocator&lt;duckdb::VectorDataIndex&gt; &gt;::reserve (5,281,153 samples, 0.01%)</title><rect x="886.0" y="1749" width="0.2" height="15.0" fill="rgb(224,98,8)" rx="2" ry="2" />
<text  x="889.04" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (5,228,335 samples, 0.01%)</title><rect x="1023.6" y="1797" width="0.1" height="15.0" fill="rgb(227,222,22)" rx="2" ry="2" />
<text  x="1026.57" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::push_back (5,051,672 samples, 0.01%)</title><rect x="1055.1" y="1781" width="0.2" height="15.0" fill="rgb(242,12,13)" rx="2" ry="2" />
<text  x="1058.15" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::RowGroupCollection,  (5,370,940 samples, 0.01%)</title><rect x="102.5" y="1509" width="0.1" height="15.0" fill="rgb(254,222,51)" rx="2" ry="2" />
<text  x="105.50" y="1519.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;, true&gt;::operator= (8,236,694 samples, 0.02%)</title><rect x="541.9" y="1957" width="0.1" height="15.0" fill="rgb(205,120,34)" rx="2" ry="2" />
<text  x="544.86" y="1967.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_dalloc_event (7,152,695 samples, 0.01%)</title><rect x="222.2" y="1365" width="0.1" height="15.0" fill="rgb(212,60,19)" rx="2" ry="2" />
<text  x="225.16" y="1375.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundQueryNode, std::default_delete&lt;duckdb::BoundQueryNode&gt;, true&gt;::unique_ptr&lt;duckdb::BoundSelectNode, std::default_delete&lt;std::unique_ptr&lt;duckdb::BoundQueryNode, std::default_delete&lt;duckdb::BoundQueryNode&gt; &gt; &gt;, void&gt; (4,381,683 samples, 0.01%)</title><rect x="964.2" y="1749" width="0.1" height="15.0" fill="rgb(208,49,50)" rx="2" ry="2" />
<text  x="967.21" y="1759.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;::operator (8,895,623 samples, 0.02%)</title><rect x="1089.4" y="1637" width="0.2" height="15.0" fill="rgb(220,144,31)" rx="2" ry="2" />
<text  x="1092.44" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::AllocatedData, true&gt;::~vector (73,263,554 samples, 0.14%)</title><rect x="1123.1" y="1733" width="1.7" height="15.0" fill="rgb(221,48,2)" rx="2" ry="2" />
<text  x="1126.11" y="1743.5" ></text>
</g>
<g >
<title>duckdb::FileHandle::Sync (157,053,657 samples, 0.31%)</title><rect x="249.0" y="1765" width="3.6" height="15.0" fill="rgb(228,44,31)" rx="2" ry="2" />
<text  x="252.00" y="1775.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;duckdb::VectorMetaData*, duckdb::VectorMetaData*, std::allocator&lt;duckdb::VectorMetaData&gt; &gt; (8,760,194 samples, 0.02%)</title><rect x="864.3" y="1637" width="0.2" height="15.0" fill="rgb(248,93,38)" rx="2" ry="2" />
<text  x="867.26" y="1647.5" ></text>
</g>
<g >
<title>duckdb::PhysicalColumnDataScanState::~PhysicalColumnDataScanState (12,933,975 samples, 0.03%)</title><rect x="356.1" y="1429" width="0.3" height="15.0" fill="rgb(242,221,24)" rx="2" ry="2" />
<text  x="359.14" y="1439.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt;, true&gt;::~vector (345,068,200 samples, 0.67%)</title><rect x="237.4" y="1397" width="8.0" height="15.0" fill="rgb(248,58,28)" rx="2" ry="2" />
<text  x="240.42" y="1407.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (5,195,144 samples, 0.01%)</title><rect x="536.1" y="1701" width="0.1" height="15.0" fill="rgb(218,57,4)" rx="2" ry="2" />
<text  x="539.06" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt;, std::allocator&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt; &gt; &gt;::~vector (343,795,339 samples, 0.67%)</title><rect x="237.4" y="1381" width="8.0" height="15.0" fill="rgb(229,117,12)" rx="2" ry="2" />
<text  x="240.45" y="1391.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (6,618,831 samples, 0.01%)</title><rect x="482.2" y="1285" width="0.1" height="15.0" fill="rgb(228,63,26)" rx="2" ry="2" />
<text  x="485.17" y="1295.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::FileBuffer&gt;, void&gt; (6,049,095 samples, 0.01%)</title><rect x="879.3" y="1605" width="0.2" height="15.0" fill="rgb(213,180,29)" rx="2" ry="2" />
<text  x="882.35" y="1615.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;::~shared_ptr (7,382,290 samples, 0.01%)</title><rect x="895.3" y="1621" width="0.2" height="15.0" fill="rgb(245,225,33)" rx="2" ry="2" />
<text  x="898.33" y="1631.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;*&gt; (7,902,265 samples, 0.02%)</title><rect x="1084.4" y="1765" width="0.1" height="15.0" fill="rgb(248,78,16)" rx="2" ry="2" />
<text  x="1087.36" y="1775.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::find (12,488,382 samples, 0.02%)</title><rect x="943.2" y="1685" width="0.3" height="15.0" fill="rgb(243,217,32)" rx="2" ry="2" />
<text  x="946.17" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::HTTPState,  (17,505,169 samples, 0.03%)</title><rect x="359.8" y="1861" width="0.4" height="15.0" fill="rgb(224,140,48)" rx="2" ry="2" />
<text  x="362.80" y="1871.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::operator[] (10,763,845 samples, 0.02%)</title><rect x="615.0" y="1781" width="0.3" height="15.0" fill="rgb(226,170,29)" rx="2" ry="2" />
<text  x="618.00" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Vector&gt; &gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (32,386,924 samples, 0.06%)</title><rect x="370.0" y="1813" width="0.7" height="15.0" fill="rgb(250,166,13)" rx="2" ry="2" />
<text  x="372.99" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::operator* (4,506,396 samples, 0.01%)</title><rect x="685.5" y="1813" width="0.1" height="15.0" fill="rgb(221,168,53)" rx="2" ry="2" />
<text  x="688.54" y="1823.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::CommitAppend (24,624,260 samples, 0.05%)</title><rect x="254.6" y="1733" width="0.6" height="15.0" fill="rgb(231,168,39)" rx="2" ry="2" />
<text  x="257.61" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; (86,433,752 samples, 0.17%)</title><rect x="826.8" y="1845" width="2.0" height="15.0" fill="rgb(239,149,27)" rx="2" ry="2" />
<text  x="829.82" y="1855.5" ></text>
</g>
<g >
<title>duckdb::StatementProperties::StatementProperties (7,756,453 samples, 0.02%)</title><rect x="1100.3" y="1845" width="0.2" height="15.0" fill="rgb(248,104,14)" rx="2" ry="2" />
<text  x="1103.28" y="1855.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Reset (9,939,089 samples, 0.02%)</title><rect x="360.7" y="1877" width="0.2" height="15.0" fill="rgb(235,115,1)" rx="2" ry="2" />
<text  x="363.71" y="1887.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (75,599,174 samples, 0.15%)</title><rect x="425.7" y="1493" width="1.7" height="15.0" fill="rgb(220,55,22)" rx="2" ry="2" />
<text  x="428.68" y="1503.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::VectorCache (104,204,110 samples, 0.20%)</title><rect x="217.2" y="1701" width="2.4" height="15.0" fill="rgb(227,224,25)" rx="2" ry="2" />
<text  x="220.23" y="1711.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RenderTreeNode&gt; (9,931,776 samples, 0.02%)</title><rect x="80.6" y="2021" width="0.2" height="15.0" fill="rgb(241,14,28)" rx="2" ry="2" />
<text  x="83.58" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Event&gt; &gt; &gt;::push_back (30,636,710 samples, 0.06%)</title><rect x="1047.2" y="1797" width="0.7" height="15.0" fill="rgb(235,215,39)" rx="2" ry="2" />
<text  x="1050.22" y="1807.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;unsigned long, true, false&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;unsigned long, true, false&gt;, bool, true&gt; (5,328,219 samples, 0.01%)</title><rect x="681.0" y="1749" width="0.1" height="15.0" fill="rgb(254,76,35)" rx="2" ry="2" />
<text  x="684.02" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::~vector (20,767,000 samples, 0.04%)</title><rect x="685.7" y="1813" width="0.5" height="15.0" fill="rgb(231,227,32)" rx="2" ry="2" />
<text  x="688.68" y="1823.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (11,461,903 samples, 0.02%)</title><rect x="735.1" y="1749" width="0.3" height="15.0" fill="rgb(226,83,38)" rx="2" ry="2" />
<text  x="738.09" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformInsert (557,676,516 samples, 1.09%)</title><rect x="525.8" y="1845" width="12.8" height="15.0" fill="rgb(212,125,16)" rx="2" ry="2" />
<text  x="528.76" y="1855.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::FunctionExpressionMatcher (6,903,771 samples, 0.01%)</title><rect x="814.6" y="1829" width="0.1" height="15.0" fill="rgb(234,92,12)" rx="2" ry="2" />
<text  x="817.57" y="1839.5" ></text>
</g>
<g >
<title>duckdb::DataTable::Checkpoint (72,383,639 samples, 0.14%)</title><rect x="1117.8" y="1221" width="1.7" height="15.0" fill="rgb(242,55,18)" rx="2" ry="2" />
<text  x="1120.83" y="1231.5" ></text>
</g>
<g >
<title>do_fault (54,959,399 samples, 0.11%)</title><rect x="72.9" y="1877" width="1.2" height="15.0" fill="rgb(215,147,36)" rx="2" ry="2" />
<text  x="75.86" y="1887.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::pac_decay_all (4,939,677 samples, 0.01%)</title><rect x="19.4" y="1861" width="0.1" height="15.0" fill="rgb(211,155,4)" rx="2" ry="2" />
<text  x="22.41" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Event::AddDependency (74,002,110 samples, 0.14%)</title><rect x="1046.3" y="1813" width="1.7" height="15.0" fill="rgb(240,55,40)" rx="2" ry="2" />
<text  x="1049.32" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::~BufferHandle (10,560,826 samples, 0.02%)</title><rect x="226.9" y="1445" width="0.2" height="15.0" fill="rgb(205,131,17)" rx="2" ry="2" />
<text  x="229.89" y="1455.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BlockMetaData, std::allocator&lt;duckdb::BlockMetaData&gt; &gt;::_M_realloc_insert&lt;duckdb::BlockMetaData&gt; (7,392,419 samples, 0.01%)</title><rect x="381.5" y="1781" width="0.2" height="15.0" fill="rgb(245,132,29)" rx="2" ry="2" />
<text  x="384.51" y="1791.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, true&gt;::~vector (10,707,199 samples, 0.02%)</title><rect x="627.0" y="1749" width="0.2" height="15.0" fill="rgb(213,90,46)" rx="2" ry="2" />
<text  x="629.97" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_salloc (8,707,069 samples, 0.02%)</title><rect x="242.9" y="421" width="0.2" height="15.0" fill="rgb(220,84,10)" rx="2" ry="2" />
<text  x="245.88" y="431.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CatalogEntry, std::default_delete&lt;duckdb::CatalogEntry&gt; &gt;::get (5,590,384 samples, 0.01%)</title><rect x="1003.8" y="1701" width="0.1" height="15.0" fill="rgb(205,202,27)" rx="2" ry="2" />
<text  x="1006.77" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalExpressionScan, std::default_delete&lt;duckdb::PhysicalExpressionScan&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PhysicalExpressionScan&gt;, void&gt; (10,449,631 samples, 0.02%)</title><rect x="913.9" y="1765" width="0.2" height="15.0" fill="rgb(218,136,19)" rx="2" ry="2" />
<text  x="916.89" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (5,780,606 samples, 0.01%)</title><rect x="11.3" y="149" width="0.1" height="15.0" fill="rgb(230,208,4)" rx="2" ry="2" />
<text  x="14.25" y="159.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataScanState::~ColumnDataScanState (7,971,991 samples, 0.02%)</title><rect x="357.7" y="1557" width="0.2" height="15.0" fill="rgb(253,157,41)" rx="2" ry="2" />
<text  x="360.67" y="1567.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::~unique_ptr (10,316,895 samples, 0.02%)</title><rect x="641.0" y="1717" width="0.3" height="15.0" fill="rgb(224,164,4)" rx="2" ry="2" />
<text  x="644.02" y="1727.5" ></text>
</g>
<g >
<title>duckdb::InsertBinder::InsertBinder (49,587,782 samples, 0.10%)</title><rect x="936.0" y="1733" width="1.1" height="15.0" fill="rgb(237,118,13)" rx="2" ry="2" />
<text  x="939.01" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;, true&gt;::operator= (10,072,514 samples, 0.02%)</title><rect x="361.6" y="1797" width="0.2" height="15.0" fill="rgb(227,80,9)" rx="2" ry="2" />
<text  x="364.59" y="1807.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::InitializeChunk (143,064,120 samples, 0.28%)</title><rect x="400.6" y="1845" width="3.3" height="15.0" fill="rgb(237,126,48)" rx="2" ry="2" />
<text  x="403.59" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_nodes (30,979,053 samples, 0.06%)</title><rect x="699.2" y="1781" width="0.7" height="15.0" fill="rgb(252,52,43)" rx="2" ry="2" />
<text  x="702.20" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (33,030,307 samples, 0.06%)</title><rect x="720.9" y="1845" width="0.8" height="15.0" fill="rgb(217,108,17)" rx="2" ry="2" />
<text  x="723.93" y="1855.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::allocate (11,727,788 samples, 0.02%)</title><rect x="708.8" y="1797" width="0.2" height="15.0" fill="rgb(207,148,37)" rx="2" ry="2" />
<text  x="711.75" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SingleFileStorageCommitState, std::default_delete&lt;duckdb::SingleFileStorageCommitState&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::SingleFileStorageCommitState&gt;, void&gt; (10,020,287 samples, 0.02%)</title><rect x="253.2" y="1765" width="0.3" height="15.0" fill="rgb(209,2,31)" rx="2" ry="2" />
<text  x="256.22" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::SelectionData,  (428,360,005 samples, 0.84%)</title><rect x="302.5" y="1637" width="9.8" height="15.0" fill="rgb(241,174,33)" rx="2" ry="2" />
<text  x="305.48" y="1647.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (5,879,497 samples, 0.01%)</title><rect x="832.4" y="1653" width="0.1" height="15.0" fill="rgb(240,58,44)" rx="2" ry="2" />
<text  x="835.37" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ConcurrentQueue, std::default_delete&lt;duckdb::ConcurrentQueue&gt; &gt;::get (23,081,376 samples, 0.05%)</title><rect x="506.8" y="1861" width="0.5" height="15.0" fill="rgb(213,144,36)" rx="2" ry="2" />
<text  x="509.77" y="1871.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::shared_ptr&lt;duckdb::ColumnData&gt;, true&gt;::~vector (282,739,476 samples, 0.55%)</title><rect x="237.8" y="1221" width="6.5" height="15.0" fill="rgb(219,219,22)" rx="2" ry="2" />
<text  x="240.83" y="1231.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::PendingStatementInternal (24,334,384,473 samples, 47.44%)</title><rect x="545.1" y="1925" width="559.8" height="15.0" fill="rgb(214,111,19)" rx="2" ry="2" />
<text  x="548.05" y="1935.5" >duckdb::ClientContext::PendingStatementInternal</text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SampleOptions, std::default_delete&lt;duckdb::SampleOptions&gt; &gt;::operator= (16,896,792 samples, 0.03%)</title><rect x="534.8" y="1749" width="0.4" height="15.0" fill="rgb(244,174,5)" rx="2" ry="2" />
<text  x="537.76" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt; &gt;::_M_deallocate_node (6,202,718 samples, 0.01%)</title><rect x="735.7" y="1733" width="0.1" height="15.0" fill="rgb(243,112,30)" rx="2" ry="2" />
<text  x="738.69" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (70,303,851 samples, 0.14%)</title><rect x="660.6" y="1749" width="1.6" height="15.0" fill="rgb(207,209,34)" rx="2" ry="2" />
<text  x="663.59" y="1759.5" ></text>
</g>
<g >
<title>std::copy&lt;unsigned long const*, unsigned long*&gt; (22,920,445 samples, 0.04%)</title><rect x="652.1" y="1653" width="0.5" height="15.0" fill="rgb(225,156,19)" rx="2" ry="2" />
<text  x="655.05" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; (24,019,546 samples, 0.05%)</title><rect x="906.6" y="1717" width="0.6" height="15.0" fill="rgb(240,10,10)" rx="2" ry="2" />
<text  x="909.61" y="1727.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::Destroy (4,401,856 samples, 0.01%)</title><rect x="287.7" y="1509" width="0.1" height="15.0" fill="rgb(218,85,51)" rx="2" ry="2" />
<text  x="290.69" y="1519.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_default (56,123,943 samples, 0.11%)</title><rect x="1123.2" y="1557" width="1.3" height="15.0" fill="rgb(209,10,31)" rx="2" ry="2" />
<text  x="1126.19" y="1567.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (11,650,116 samples, 0.02%)</title><rect x="721.3" y="1813" width="0.3" height="15.0" fill="rgb(206,206,1)" rx="2" ry="2" />
<text  x="724.32" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Task&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; &gt;::_M_realloc_insert&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; (15,966,619 samples, 0.03%)</title><rect x="1060.9" y="1781" width="0.3" height="15.0" fill="rgb(249,161,33)" rx="2" ry="2" />
<text  x="1063.86" y="1791.5" ></text>
</g>
<g >
<title>__sanitizer::RunMallocHooks (52,225,005 samples, 0.10%)</title><rect x="1146.0" y="2037" width="1.2" height="15.0" fill="rgb(226,126,45)" rx="2" ry="2" />
<text  x="1149.01" y="2047.5" ></text>
</g>
<g >
<title>duckdb::ExpressionMatcher::Match (6,759,023 samples, 0.01%)</title><rect x="739.4" y="1605" width="0.1" height="15.0" fill="rgb(233,57,9)" rx="2" ry="2" />
<text  x="742.36" y="1615.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt; &gt; (9,693,705 samples, 0.02%)</title><rect x="1089.4" y="1733" width="0.2" height="15.0" fill="rgb(242,126,34)" rx="2" ry="2" />
<text  x="1092.42" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (63,237,212 samples, 0.12%)</title><rect x="221.5" y="1509" width="1.4" height="15.0" fill="rgb(216,171,3)" rx="2" ry="2" />
<text  x="224.49" y="1519.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (8,739,417 samples, 0.02%)</title><rect x="398.1" y="1877" width="0.2" height="15.0" fill="rgb(253,157,46)" rx="2" ry="2" />
<text  x="401.07" y="1887.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityData&lt;unsigned long&gt;::TemplatedValidityData (19,199,810 samples, 0.04%)</title><rect x="363.1" y="1621" width="0.4" height="15.0" fill="rgb(219,6,6)" rx="2" ry="2" />
<text  x="366.07" y="1631.5" ></text>
</g>
<g >
<title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (18,738,835 samples, 0.04%)</title><rect x="25.6" y="2005" width="0.5" height="15.0" fill="rgb(241,68,17)" rx="2" ry="2" />
<text  x="28.62" y="2015.5" ></text>
</g>
<g >
<title>jbd2_complete_transaction (16,495,411 samples, 0.03%)</title><rect x="252.1" y="1637" width="0.4" height="15.0" fill="rgb(246,144,33)" rx="2" ry="2" />
<text  x="255.11" y="1647.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_trigger (21,827,799 samples, 0.04%)</title><rect x="493.6" y="1445" width="0.5" height="15.0" fill="rgb(237,98,21)" rx="2" ry="2" />
<text  x="496.62" y="1455.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;, std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::__uniq_ptr_impl (4,411,507 samples, 0.01%)</title><rect x="623.5" y="1701" width="0.1" height="15.0" fill="rgb(239,0,29)" rx="2" ry="2" />
<text  x="626.45" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CompressionAppendState, std::default_delete&lt;duckdb::CompressionAppendState&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::CompressionAppendState&gt;, void&gt; (4,830,195 samples, 0.01%)</title><rect x="449.4" y="1637" width="0.2" height="15.0" fill="rgb(226,139,38)" rx="2" ry="2" />
<text  x="452.45" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned long [], std::default_delete&lt;unsigned long&gt;, false&gt;::operator[] (9,495,012 samples, 0.02%)</title><rect x="363.2" y="1605" width="0.3" height="15.0" fill="rgb(213,158,20)" rx="2" ry="2" />
<text  x="366.24" y="1615.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (13,294,834 samples, 0.03%)</title><rect x="331.1" y="1797" width="0.3" height="15.0" fill="rgb(243,16,24)" rx="2" ry="2" />
<text  x="334.09" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_default (82,624,241 samples, 0.16%)</title><rect x="391.0" y="1541" width="1.9" height="15.0" fill="rgb(207,38,39)" rx="2" ry="2" />
<text  x="394.02" y="1551.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::StandardColumnData,  (101,168,420 samples, 0.20%)</title><rect x="453.1" y="1621" width="2.3" height="15.0" fill="rgb(246,70,36)" rx="2" ry="2" />
<text  x="456.11" y="1631.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (9,514,777 samples, 0.02%)</title><rect x="481.1" y="1557" width="0.3" height="15.0" fill="rgb(212,200,49)" rx="2" ry="2" />
<text  x="484.14" y="1567.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::SelectionData&gt;::construct&lt;duckdb::SelectionData, unsigned long&amp;&gt; (459,376,360 samples, 0.90%)</title><rect x="200.8" y="1541" width="10.6" height="15.0" fill="rgb(213,22,9)" rx="2" ry="2" />
<text  x="203.80" y="1551.5" ></text>
</g>
<g >
<title>blk_finish_plug (45,626,856 samples, 0.09%)</title><rect x="249.7" y="1573" width="1.0" height="15.0" fill="rgb(206,162,46)" rx="2" ry="2" />
<text  x="252.67" y="1583.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="517" width="0.1" height="15.0" fill="rgb(217,46,51)" rx="2" ry="2" />
<text  x="14.25" y="527.5" ></text>
</g>
<g >
<title>[unknown] (9,931,776 samples, 0.02%)</title><rect x="80.6" y="2005" width="0.2" height="15.0" fill="rgb(240,26,26)" rx="2" ry="2" />
<text  x="83.58" y="2015.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt;*, std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt; &gt; (9,163,862 samples, 0.02%)</title><rect x="758.6" y="1749" width="0.2" height="15.0" fill="rgb(234,39,17)" rx="2" ry="2" />
<text  x="761.57" y="1759.5" ></text>
</g>
<g >
<title>duckdb::CaseInsensitiveStringHashFunction::operator (5,005,706 samples, 0.01%)</title><rect x="960.1" y="1589" width="0.1" height="15.0" fill="rgb(224,225,23)" rx="2" ry="2" />
<text  x="963.11" y="1599.5" ></text>
</g>
<g >
<title>__split_vma (28,991,893 samples, 0.06%)</title><rect x="1171.2" y="1893" width="0.7" height="15.0" fill="rgb(250,72,34)" rx="2" ry="2" />
<text  x="1174.22" y="1903.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::AddExpression (112,003,214 samples, 0.22%)</title><rect x="903.4" y="1749" width="2.6" height="15.0" fill="rgb(244,22,12)" rx="2" ry="2" />
<text  x="906.43" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::EqualOrNullSimplification, std::default_delete&lt;duckdb::EqualOrNullSimplification&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::EqualOrNullSimplification&gt;, void&gt; (4,750,871 samples, 0.01%)</title><rect x="809.9" y="1845" width="0.1" height="15.0" fill="rgb(245,183,40)" rx="2" ry="2" />
<text  x="812.90" y="1855.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;duckdb::MetaPipeline,  (7,342,347 samples, 0.01%)</title><rect x="1092.4" y="1861" width="0.2" height="15.0" fill="rgb(214,126,11)" rx="2" ry="2" />
<text  x="1095.43" y="1871.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::~SegmentTree (105,758,939 samples, 0.21%)</title><rect x="241.5" y="949" width="2.5" height="15.0" fill="rgb(234,9,13)" rx="2" ry="2" />
<text  x="244.52" y="959.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::GetScheduler (4,777,476 samples, 0.01%)</title><rect x="1058.2" y="1797" width="0.1" height="15.0" fill="rgb(224,73,17)" rx="2" ry="2" />
<text  x="1061.16" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (6,951,254 samples, 0.01%)</title><rect x="1044.2" y="1813" width="0.2" height="15.0" fill="rgb(206,146,48)" rx="2" ry="2" />
<text  x="1047.22" y="1823.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::SplitUpExtraInfo (102,450,894 samples, 0.20%)</title><rect x="572.2" y="1797" width="2.4" height="15.0" fill="rgb(208,190,4)" rx="2" ry="2" />
<text  x="575.20" y="1807.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetEntryForTransaction (7,038,511 samples, 0.01%)</title><rect x="993.0" y="1701" width="0.2" height="15.0" fill="rgb(215,76,19)" rx="2" ry="2" />
<text  x="996.05" y="1711.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (85,524,217 samples, 0.17%)</title><rect x="486.6" y="1733" width="2.0" height="15.0" fill="rgb(224,99,14)" rx="2" ry="2" />
<text  x="489.62" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;::unique_ptr (19,474,700 samples, 0.04%)</title><rect x="322.4" y="1813" width="0.5" height="15.0" fill="rgb(224,159,38)" rx="2" ry="2" />
<text  x="325.40" y="1823.5" ></text>
</g>
<g >
<title>duckdb::CreateIndexScanState::CreateIndexScanState (9,377,943 samples, 0.02%)</title><rect x="287.4" y="1717" width="0.2" height="15.0" fill="rgb(208,49,33)" rx="2" ry="2" />
<text  x="290.42" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::ExecuteExpression (209,434,599 samples, 0.41%)</title><rect x="898.4" y="1733" width="4.8" height="15.0" fill="rgb(222,116,14)" rx="2" ry="2" />
<text  x="901.36" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (8,940,316 samples, 0.02%)</title><rect x="1123.5" y="1445" width="0.3" height="15.0" fill="rgb(208,44,54)" rx="2" ry="2" />
<text  x="1126.55" y="1455.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (10,738,437 samples, 0.02%)</title><rect x="927.7" y="1669" width="0.2" height="15.0" fill="rgb(227,214,50)" rx="2" ry="2" />
<text  x="930.70" y="1679.5" ></text>
</g>
<g >
<title>duckdb::Binder::HasMatchingBinding (42,206,576 samples, 0.08%)</title><rect x="959.8" y="1701" width="0.9" height="15.0" fill="rgb(213,205,52)" rx="2" ry="2" />
<text  x="962.76" y="1711.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::SetTaskForInterrupts (6,292,044 samples, 0.01%)</title><rect x="485.7" y="1861" width="0.1" height="15.0" fill="rgb(242,127,48)" rx="2" ry="2" />
<text  x="488.69" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Task::~Task (5,575,058 samples, 0.01%)</title><rect x="144.8" y="1717" width="0.1" height="15.0" fill="rgb(247,57,42)" rx="2" ry="2" />
<text  x="147.76" y="1727.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::Expression&gt;::operator (20,753,206 samples, 0.04%)</title><rect x="915.8" y="1477" width="0.5" height="15.0" fill="rgb(210,177,45)" rx="2" ry="2" />
<text  x="918.85" y="1487.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::PreparedStatementData,  (4,949,984 samples, 0.01%)</title><rect x="1103.4" y="1877" width="0.1" height="15.0" fill="rgb(215,161,15)" rx="2" ry="2" />
<text  x="1106.40" y="1887.5" ></text>
</g>
<g >
<title>free_unref_page_list (20,269,102 samples, 0.04%)</title><rect x="1179.1" y="1813" width="0.5" height="15.0" fill="rgb(221,15,18)" rx="2" ry="2" />
<text  x="1182.12" y="1823.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::EnsureWritable (64,951,230 samples, 0.13%)</title><rect x="899.5" y="1653" width="1.5" height="15.0" fill="rgb(206,76,10)" rx="2" ry="2" />
<text  x="902.48" y="1663.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::BaseStatistics (13,417,548 samples, 0.03%)</title><rect x="453.8" y="1461" width="0.3" height="15.0" fill="rgb(244,45,48)" rx="2" ry="2" />
<text  x="456.79" y="1471.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::LogicalOperator (12,601,534 samples, 0.02%)</title><rect x="1012.7" y="1797" width="0.3" height="15.0" fill="rgb(209,100,18)" rx="2" ry="2" />
<text  x="1015.74" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (361,441,674 samples, 0.70%)</title><rect x="237.2" y="1509" width="8.3" height="15.0" fill="rgb(210,155,39)" rx="2" ry="2" />
<text  x="240.18" y="1519.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::insert (199,443,354 samples, 0.39%)</title><rect x="655.0" y="1765" width="4.6" height="15.0" fill="rgb(250,154,31)" rx="2" ry="2" />
<text  x="658.04" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LocalSourceState, std::default_delete&lt;duckdb::LocalSourceState&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::LocalSourceState&gt;, void&gt; (6,674,149 samples, 0.01%)</title><rect x="491.9" y="1797" width="0.1" height="15.0" fill="rgb(234,127,15)" rx="2" ry="2" />
<text  x="494.88" y="1807.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::BlockMetaData, true&gt;::~vector (5,130,105 samples, 0.01%)</title><rect x="338.9" y="1365" width="0.1" height="15.0" fill="rgb(232,82,31)" rx="2" ry="2" />
<text  x="341.91" y="1375.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (8,143,798 samples, 0.02%)</title><rect x="472.9" y="1701" width="0.2" height="15.0" fill="rgb(210,8,23)" rx="2" ry="2" />
<text  x="475.92" y="1711.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::Iterate&lt;duckdb::LogicalOperator&gt; (72,692,642 samples, 0.14%)</title><rect x="548.2" y="1701" width="1.7" height="15.0" fill="rgb(247,34,36)" rx="2" ry="2" />
<text  x="551.19" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VerifyInternal (4,684,625 samples, 0.01%)</title><rect x="700.3" y="1845" width="0.1" height="15.0" fill="rgb(217,177,0)" rx="2" ry="2" />
<text  x="703.25" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt; &gt;::release (4,983,270 samples, 0.01%)</title><rect x="867.2" y="1637" width="0.1" height="15.0" fill="rgb(211,177,24)" rx="2" ry="2" />
<text  x="870.23" y="1647.5" ></text>
</g>
<g >
<title>duckdb::BindContext::BindColumn (92,631,091 samples, 0.18%)</title><rect x="950.8" y="1653" width="2.1" height="15.0" fill="rgb(215,70,40)" rx="2" ry="2" />
<text  x="953.76" y="1663.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::StringValueInfo&gt;::shared_ptr&lt;std::allocator&lt;duckdb::StringValueInfo&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (7,214,141 samples, 0.01%)</title><rect x="1119.9" y="1877" width="0.2" height="15.0" fill="rgb(207,1,17)" rx="2" ry="2" />
<text  x="1122.91" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (12,328,873 samples, 0.02%)</title><rect x="1045.1" y="1861" width="0.3" height="15.0" fill="rgb(233,56,13)" rx="2" ry="2" />
<text  x="1048.10" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ManyFunctionMatcher::~ManyFunctionMatcher (4,579,134 samples, 0.01%)</title><rect x="829.8" y="1525" width="0.1" height="15.0" fill="rgb(251,156,24)" rx="2" ry="2" />
<text  x="832.76" y="1535.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::PipelineCompleteEvent&gt;::shared_ptr&lt;std::allocator&lt;duckdb::PipelineCompleteEvent&gt;, duckdb::Executor&amp;, bool&amp;&gt; (20,063,976 samples, 0.04%)</title><rect x="1049.4" y="1781" width="0.4" height="15.0" fill="rgb(239,4,45)" rx="2" ry="2" />
<text  x="1052.37" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ManyFunctionMatcher::~ManyFunctionMatcher (7,661,959 samples, 0.01%)</title><rect x="832.6" y="1541" width="0.2" height="15.0" fill="rgb(217,164,15)" rx="2" ry="2" />
<text  x="835.57" y="1551.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_default (49,460,952 samples, 0.10%)</title><rect x="333.7" y="1349" width="1.1" height="15.0" fill="rgb(249,154,27)" rx="2" ry="2" />
<text  x="336.70" y="1359.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt;, std::allocator&lt;duckdb::SegmentNode&lt;duckdb::RowGroup&gt; &gt; &gt;::push_back (18,514,837 samples, 0.04%)</title><rect x="456.9" y="1701" width="0.4" height="15.0" fill="rgb(231,144,23)" rx="2" ry="2" />
<text  x="459.86" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (5,635,708 samples, 0.01%)</title><rect x="896.6" y="1317" width="0.2" height="15.0" fill="rgb(222,41,7)" rx="2" ry="2" />
<text  x="899.63" y="1327.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;unsigned long const*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, unsigned long*, unsigned long&gt; (7,367,469 samples, 0.01%)</title><rect x="302.0" y="1669" width="0.2" height="15.0" fill="rgb(231,59,49)" rx="2" ry="2" />
<text  x="305.02" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::unique_ptr&lt;duckdb::StarExpression, std::default_delete&lt;duckdb::StarExpression&gt;, void&gt; (6,638,607 samples, 0.01%)</title><rect x="533.7" y="1749" width="0.2" height="15.0" fill="rgb(254,150,32)" rx="2" ry="2" />
<text  x="536.74" y="1759.5" ></text>
</g>
<g >
<title>duckdb::JoinOrderOptimizer::~JoinOrderOptimizer (23,765,053 samples, 0.05%)</title><rect x="760.6" y="1813" width="0.5" height="15.0" fill="rgb(206,167,37)" rx="2" ry="2" />
<text  x="763.59" y="1823.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::ColumnBinding, duckdb::unique_ptr&lt;duckdb::BaseStatistics, std::default_delete&lt;duckdb::BaseStatistics&gt;, true&gt;, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::unique_ptr&lt;duckdb::BaseStatistics, std::default_delete&lt;duckdb::BaseStatistics&gt;, true&gt; &gt; &gt; &gt;::find (9,861,001 samples, 0.02%)</title><rect x="766.5" y="1669" width="0.2" height="15.0" fill="rgb(217,162,15)" rx="2" ry="2" />
<text  x="769.49" y="1679.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::ChunkMetaData&gt;::construct&lt;duckdb::ChunkMetaData, duckdb::ChunkMetaData&gt; (18,289,562 samples, 0.04%)</title><rect x="885.3" y="1685" width="0.5" height="15.0" fill="rgb(218,192,2)" rx="2" ry="2" />
<text  x="888.33" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::~vector (8,003,155 samples, 0.02%)</title><rect x="832.1" y="1573" width="0.2" height="15.0" fill="rgb(235,55,37)" rx="2" ry="2" />
<text  x="835.14" y="1583.5" ></text>
</g>
<g >
<title>duckdb::FSSTStorage::StringFinalAnalyze (39,544,297 samples, 0.08%)</title><rect x="1118.2" y="1077" width="0.9" height="15.0" fill="rgb(242,37,2)" rx="2" ry="2" />
<text  x="1121.19" y="1087.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (12,844,250 samples, 0.03%)</title><rect x="1087.5" y="1781" width="0.3" height="15.0" fill="rgb(207,32,6)" rx="2" ry="2" />
<text  x="1090.51" y="1791.5" ></text>
</g>
<g >
<title>duckdb::EnumComparisonRule::EnumComparisonRule (159,485,965 samples, 0.31%)</title><rect x="803.0" y="1861" width="3.7" height="15.0" fill="rgb(244,162,21)" rx="2" ry="2" />
<text  x="806.02" y="1871.5" ></text>
</g>
<g >
<title>duckdb::DictionaryBuffer::~DictionaryBuffer (12,255,699 samples, 0.02%)</title><rect x="292.3" y="1525" width="0.2" height="15.0" fill="rgb(213,129,9)" rx="2" ry="2" />
<text  x="295.26" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Event*, std::allocator&lt;duckdb::Event*&gt; &gt;::push_back (30,649,362 samples, 0.06%)</title><rect x="1046.5" y="1797" width="0.7" height="15.0" fill="rgb(210,92,1)" rx="2" ry="2" />
<text  x="1049.50" y="1807.5" ></text>
</g>
<g >
<title>duckdb::LogicalExpressionGet::GetColumnBindings (14,635,455 samples, 0.03%)</title><rect x="842.3" y="1797" width="0.3" height="15.0" fill="rgb(215,135,30)" rx="2" ry="2" />
<text  x="845.27" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ScalarFunctionCatalogEntry::~ScalarFunctionCatalogEntry (4,658,297 samples, 0.01%)</title><rect x="1117.6" y="725" width="0.1" height="15.0" fill="rgb(249,0,48)" rx="2" ry="2" />
<text  x="1120.63" y="735.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (4,591,865 samples, 0.01%)</title><rect x="549.5" y="1621" width="0.1" height="15.0" fill="rgb(218,92,30)" rx="2" ry="2" />
<text  x="552.51" y="1631.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::__uniq_ptr_impl (5,970,984 samples, 0.01%)</title><rect x="623.2" y="1701" width="0.1" height="15.0" fill="rgb(229,103,31)" rx="2" ry="2" />
<text  x="626.21" y="1711.5" ></text>
</g>
<g >
<title>duckdb::DatabaseInstance::GetScheduler (35,342,946 samples, 0.07%)</title><rect x="502.4" y="1861" width="0.8" height="15.0" fill="rgb(211,5,10)" rx="2" ry="2" />
<text  x="505.37" y="1871.5" ></text>
</g>
<g >
<title>duckdb::DuckDBAssertInternal (23,950,044 samples, 0.05%)</title><rect x="275.3" y="1541" width="0.6" height="15.0" fill="rgb(252,18,10)" rx="2" ry="2" />
<text  x="278.31" y="1551.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::~FunctionExpressionMatcher (5,264,200 samples, 0.01%)</title><rect x="831.1" y="1621" width="0.1" height="15.0" fill="rgb(212,89,33)" rx="2" ry="2" />
<text  x="834.06" y="1631.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::StringValueInfo,  (9,058,086 samples, 0.02%)</title><rect x="528.3" y="1621" width="0.2" height="15.0" fill="rgb(208,85,45)" rx="2" ry="2" />
<text  x="531.33" y="1631.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::SpecificExpressionTypeMatcher, duckdb::ExpressionType&gt; (6,190,714 samples, 0.01%)</title><rect x="803.7" y="1845" width="0.1" height="15.0" fill="rgb(228,118,20)" rx="2" ry="2" />
<text  x="806.65" y="1855.5" ></text>
</g>
<g >
<title>duckdb::ValidityScanState::~ValidityScanState (11,327,183 samples, 0.02%)</title><rect x="226.9" y="1477" width="0.2" height="15.0" fill="rgb(221,47,41)" rx="2" ry="2" />
<text  x="229.87" y="1487.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; (6,590,586 samples, 0.01%)</title><rect x="917.7" y="1717" width="0.2" height="15.0" fill="rgb(207,38,4)" rx="2" ry="2" />
<text  x="920.75" y="1727.5" ></text>
</g>
<g >
<title>__set_page_dirty (4,428,383 samples, 0.01%)</title><rect x="248.6" y="1461" width="0.1" height="15.0" fill="rgb(246,205,33)" rx="2" ry="2" />
<text  x="251.56" y="1471.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr&lt;duckdb::ConstantExpressionMatcher, std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt;, void&gt; (6,362,379 samples, 0.01%)</title><rect x="797.1" y="1829" width="0.2" height="15.0" fill="rgb(236,190,24)" rx="2" ry="2" />
<text  x="800.11" y="1839.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::deallocate (5,045,590 samples, 0.01%)</title><rect x="1073.5" y="1685" width="0.1" height="15.0" fill="rgb(219,113,10)" rx="2" ry="2" />
<text  x="1076.53" y="1695.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Pipeline&gt;::shared_ptr&lt;std::allocator&lt;duckdb::Pipeline&gt;, duckdb::Executor&amp;&gt; (40,850,760 samples, 0.08%)</title><rect x="1093.8" y="1669" width="0.9" height="15.0" fill="rgb(220,202,30)" rx="2" ry="2" />
<text  x="1096.75" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (67,319,529 samples, 0.13%)</title><rect x="683.9" y="1781" width="1.5" height="15.0" fill="rgb(221,0,54)" rx="2" ry="2" />
<text  x="686.89" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::ExpressionExecutor (8,452,813 samples, 0.02%)</title><rect x="906.0" y="1749" width="0.2" height="15.0" fill="rgb(235,177,4)" rx="2" ry="2" />
<text  x="909.01" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Vector::~Vector (7,242,694 samples, 0.01%)</title><rect x="108.5" y="1653" width="0.2" height="15.0" fill="rgb(223,122,53)" rx="2" ry="2" />
<text  x="111.52" y="1663.5" ></text>
</g>
<g >
<title>duckdb::InClauseSimplificationRule::~InClauseSimplificationRule (7,280,099 samples, 0.01%)</title><rect x="832.4" y="1701" width="0.1" height="15.0" fill="rgb(254,188,46)" rx="2" ry="2" />
<text  x="835.35" y="1711.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::GetSegment (12,605,788 samples, 0.02%)</title><rect x="301.2" y="1669" width="0.3" height="15.0" fill="rgb(223,205,5)" rx="2" ry="2" />
<text  x="304.19" y="1679.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionExecutorState&gt;::operator (23,446,940 samples, 0.05%)</title><rect x="484.0" y="1605" width="0.5" height="15.0" fill="rgb(208,169,7)" rx="2" ry="2" />
<text  x="486.98" y="1615.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; (33,044,592 samples, 0.06%)</title><rect x="357.5" y="1781" width="0.7" height="15.0" fill="rgb(232,107,22)" rx="2" ry="2" />
<text  x="360.45" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_metadata_read (9,373,208 samples, 0.02%)</title><rect x="391.5" y="1397" width="0.2" height="15.0" fill="rgb(253,9,39)" rx="2" ry="2" />
<text  x="394.52" y="1407.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::operator= (4,940,924 samples, 0.01%)</title><rect x="960.8" y="1701" width="0.1" height="15.0" fill="rgb(250,88,6)" rx="2" ry="2" />
<text  x="963.83" y="1711.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperatorToString[abi:cxx11] (4,400,501 samples, 0.01%)</title><rect x="834.9" y="1765" width="0.1" height="15.0" fill="rgb(218,152,26)" rx="2" ry="2" />
<text  x="837.93" y="1775.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::operator[] (32,000,081 samples, 0.06%)</title><rect x="929.7" y="1685" width="0.7" height="15.0" fill="rgb(217,85,52)" rx="2" ry="2" />
<text  x="932.67" y="1695.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::ResetFromCache (8,592,432 samples, 0.02%)</title><rect x="219.9" y="1589" width="0.2" height="15.0" fill="rgb(229,192,29)" rx="2" ry="2" />
<text  x="222.87" y="1599.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_fastpath (4,782,291 samples, 0.01%)</title><rect x="499.0" y="1461" width="0.1" height="15.0" fill="rgb(252,203,4)" rx="2" ry="2" />
<text  x="501.98" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (33,452,500 samples, 0.07%)</title><rect x="1016.6" y="1637" width="0.8" height="15.0" fill="rgb(230,149,21)" rx="2" ry="2" />
<text  x="1019.64" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (9,493,780 samples, 0.02%)</title><rect x="352.7" y="1669" width="0.2" height="15.0" fill="rgb(211,155,32)" rx="2" ry="2" />
<text  x="355.67" y="1679.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityData&lt;unsigned long&gt;::~TemplatedValidityData (5,787,518 samples, 0.01%)</title><rect x="481.2" y="1477" width="0.1" height="15.0" fill="rgb(244,200,41)" rx="2" ry="2" />
<text  x="484.19" y="1487.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, unsigned long&amp;&gt; (56,969,440 samples, 0.11%)</title><rect x="899.5" y="1605" width="1.4" height="15.0" fill="rgb(241,67,30)" rx="2" ry="2" />
<text  x="902.55" y="1615.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;unsigned int, std::default_delete&lt;unsigned int []&gt; &gt;::__uniq_ptr_impl (7,668,222 samples, 0.01%)</title><rect x="202.0" y="1461" width="0.2" height="15.0" fill="rgb(206,102,51)" rx="2" ry="2" />
<text  x="204.98" y="1471.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt;::destroy&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; (4,793,286 samples, 0.01%)</title><rect x="828.6" y="1749" width="0.1" height="15.0" fill="rgb(206,179,36)" rx="2" ry="2" />
<text  x="831.57" y="1759.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (12,421,922 samples, 0.02%)</title><rect x="895.5" y="1605" width="0.3" height="15.0" fill="rgb(251,163,14)" rx="2" ry="2" />
<text  x="898.50" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::insert (102,767,010 samples, 0.20%)</title><rect x="731.6" y="1749" width="2.4" height="15.0" fill="rgb(239,189,53)" rx="2" ry="2" />
<text  x="734.61" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt;::~unique_ptr (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1605" width="1.9" height="15.0" fill="rgb(241,3,49)" rx="2" ry="2" />
<text  x="1120.81" y="1615.5" ></text>
</g>
<g >
<title>duckdb::ScheduleEventData::~ScheduleEventData (18,954,083 samples, 0.04%)</title><rect x="1062.4" y="1845" width="0.4" height="15.0" fill="rgb(233,3,45)" rx="2" ry="2" />
<text  x="1065.37" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_allocate_buckets (20,973,794 samples, 0.04%)</title><rect x="656.2" y="1653" width="0.4" height="15.0" fill="rgb(226,106,49)" rx="2" ry="2" />
<text  x="659.16" y="1663.5" ></text>
</g>
<g >
<title>__asan::Allocator::Allocate (930,282,276 samples, 1.81%)</title><rect x="147.9" y="2037" width="21.4" height="15.0" fill="rgb(206,190,52)" rx="2" ry="2" />
<text  x="150.90" y="2047.5" >_..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (6,032,612 samples, 0.01%)</title><rect x="362.1" y="1733" width="0.1" height="15.0" fill="rgb(227,85,17)" rx="2" ry="2" />
<text  x="365.08" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt; (4,900,080 samples, 0.01%)</title><rect x="108.7" y="1653" width="0.1" height="15.0" fill="rgb(244,33,30)" rx="2" ry="2" />
<text  x="111.70" y="1663.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegmentTree::~ColumnSegmentTree (134,326,199 samples, 0.26%)</title><rect x="238.2" y="981" width="3.1" height="15.0" fill="rgb(228,17,36)" rx="2" ry="2" />
<text  x="241.22" y="991.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::GlobalSourceState, std::default_delete&lt;duckdb::GlobalSourceState&gt;, true&gt;::unique_ptr&lt;duckdb::PhysicalColumnDataScanState, std::default_delete&lt;std::unique_ptr&lt;duckdb::GlobalSourceState, std::default_delete&lt;duckdb::GlobalSourceState&gt; &gt; &gt;, void&gt; (15,651,343 samples, 0.03%)</title><rect x="92.1" y="1701" width="0.4" height="15.0" fill="rgb(227,75,5)" rx="2" ry="2" />
<text  x="95.15" y="1711.5" ></text>
</g>
<g >
<title>update_load_avg (5,172,753 samples, 0.01%)</title><rect x="75.0" y="1829" width="0.1" height="15.0" fill="rgb(209,193,9)" rx="2" ry="2" />
<text  x="78.02" y="1839.5" ></text>
</g>
<g >
<title>duckdb::CommonSubExpressionOptimizer::ExtractCommonSubExpresions (5,323,827 samples, 0.01%)</title><rect x="728.7" y="1685" width="0.2" height="15.0" fill="rgb(230,94,19)" rx="2" ry="2" />
<text  x="731.75" y="1695.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::Render (329,717,759 samples, 0.64%)</title><rect x="833.8" y="1861" width="7.6" height="15.0" fill="rgb(225,172,54)" rx="2" ry="2" />
<text  x="836.84" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (6,385,683 samples, 0.01%)</title><rect x="229.5" y="1621" width="0.2" height="15.0" fill="rgb(218,109,36)" rx="2" ry="2" />
<text  x="232.53" y="1631.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (267,727,077 samples, 0.52%)</title><rect x="872.9" y="1493" width="6.1" height="15.0" fill="rgb(233,156,49)" rx="2" ry="2" />
<text  x="875.89" y="1503.5" ></text>
</g>
<g >
<title>duckdb::DistributivityRule::DistributivityRule (47,515,937 samples, 0.09%)</title><rect x="798.8" y="1861" width="1.1" height="15.0" fill="rgb(226,140,11)" rx="2" ry="2" />
<text  x="801.83" y="1871.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (20,420,635 samples, 0.04%)</title><rect x="1067.1" y="1701" width="0.5" height="15.0" fill="rgb(218,215,45)" rx="2" ry="2" />
<text  x="1070.10" y="1711.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::~vector (7,856,188 samples, 0.02%)</title><rect x="613.9" y="1765" width="0.2" height="15.0" fill="rgb(226,167,12)" rx="2" ry="2" />
<text  x="616.92" y="1775.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (8,872,575 samples, 0.02%)</title><rect x="147.7" y="1989" width="0.2" height="15.0" fill="rgb(245,172,14)" rx="2" ry="2" />
<text  x="150.67" y="1999.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::LocalTableStorage&gt; &gt;::destroy&lt;duckdb::LocalTableStorage&gt; (441,228,890 samples, 0.86%)</title><rect x="235.5" y="1717" width="10.2" height="15.0" fill="rgb(252,131,6)" rx="2" ry="2" />
<text  x="238.55" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::NodeStatistics, std::default_delete&lt;duckdb::NodeStatistics&gt; &gt;::operator= (12,217,367 samples, 0.02%)</title><rect x="767.1" y="1701" width="0.3" height="15.0" fill="rgb(216,129,38)" rx="2" ry="2" />
<text  x="770.14" y="1711.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::Append (10,795,752 samples, 0.02%)</title><rect x="105.3" y="1717" width="0.3" height="15.0" fill="rgb(241,82,8)" rx="2" ry="2" />
<text  x="108.34" y="1727.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;,  (16,033,325 samples, 0.03%)</title><rect x="473.8" y="1589" width="0.4" height="15.0" fill="rgb(207,39,7)" rx="2" ry="2" />
<text  x="476.83" y="1599.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ColumnScanState []&gt;::operator (35,169,050 samples, 0.07%)</title><rect x="226.6" y="1669" width="0.8" height="15.0" fill="rgb(223,24,9)" rx="2" ry="2" />
<text  x="229.60" y="1679.5" ></text>
</g>
<g >
<title>duckdb::DBConfig::GetCompressionFunction (69,667,319 samples, 0.14%)</title><rect x="434.7" y="1669" width="1.6" height="15.0" fill="rgb(239,135,27)" rx="2" ry="2" />
<text  x="437.66" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt; &gt; &gt;::_M_realloc_insert&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt; &gt; (7,148,268 samples, 0.01%)</title><rect x="427.7" y="1541" width="0.2" height="15.0" fill="rgb(218,146,53)" rx="2" ry="2" />
<text  x="430.71" y="1551.5" ></text>
</g>
<g >
<title>std::max&lt;unsigned long&gt; (4,509,185 samples, 0.01%)</title><rect x="608.6" y="1717" width="0.1" height="15.0" fill="rgb(217,18,38)" rx="2" ry="2" />
<text  x="611.60" y="1727.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::RowGroupCollection, std::allocator&lt;duckdb::RowGroupCollection&gt;,  (67,055,002 samples, 0.13%)</title><rect x="428.8" y="1525" width="1.5" height="15.0" fill="rgb(214,87,37)" rx="2" ry="2" />
<text  x="431.79" y="1535.5" ></text>
</g>
<g >
<title>duckdb::LocalTableStorage::EstimatedSize (5,042,002 samples, 0.01%)</title><rect x="189.6" y="1781" width="0.1" height="15.0" fill="rgb(218,218,30)" rx="2" ry="2" />
<text  x="192.62" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::push_back (12,913,356 samples, 0.03%)</title><rect x="945.4" y="1701" width="0.3" height="15.0" fill="rgb(210,143,18)" rx="2" ry="2" />
<text  x="948.42" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::CatalogSearchEntry, std::allocator&lt;duckdb::CatalogSearchEntry&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::CatalogSearchEntry const*, std::vector&lt;duckdb::CatalogSearchEntry, std::allocator&lt;duckdb::CatalogSearchEntry&gt; &gt; &gt; &gt; (10,965,500 samples, 0.02%)</title><rect x="1008.9" y="1733" width="0.3" height="15.0" fill="rgb(222,210,50)" rx="2" ry="2" />
<text  x="1011.90" y="1743.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderTopLayer (13,256,167 samples, 0.03%)</title><rect x="840.7" y="1829" width="0.3" height="15.0" fill="rgb(236,173,43)" rx="2" ry="2" />
<text  x="843.69" y="1839.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::ResetFromCache (7,165,501 samples, 0.01%)</title><rect x="220.7" y="1685" width="0.2" height="15.0" fill="rgb(230,134,8)" rx="2" ry="2" />
<text  x="223.74" y="1695.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::PushFinalize (359,836,203 samples, 0.70%)</title><rect x="477.0" y="1845" width="8.3" height="15.0" fill="rgb(238,192,41)" rx="2" ry="2" />
<text  x="480.00" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;unsigned long&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;unsigned long&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::operator= (7,790,914 samples, 0.02%)</title><rect x="985.7" y="1653" width="0.2" height="15.0" fill="rgb(219,185,50)" rx="2" ry="2" />
<text  x="988.75" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (12,549,736 samples, 0.02%)</title><rect x="575.7" y="1765" width="0.3" height="15.0" fill="rgb(221,11,22)" rx="2" ry="2" />
<text  x="578.66" y="1775.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::PipelineEvent, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (31,042,098 samples, 0.06%)</title><rect x="1049.8" y="1813" width="0.7" height="15.0" fill="rgb(230,109,52)" rx="2" ry="2" />
<text  x="1052.84" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionInfo, std::default_delete&lt;duckdb::ExpressionInfo&gt;, true&gt;::~unique_ptr (9,356,970 samples, 0.02%)</title><rect x="500.0" y="1301" width="0.2" height="15.0" fill="rgb(226,55,10)" rx="2" ry="2" />
<text  x="503.03" y="1311.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector&gt; (65,319,458 samples, 0.13%)</title><rect x="497.9" y="1701" width="1.5" height="15.0" fill="rgb(209,102,51)" rx="2" ry="2" />
<text  x="500.94" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::NodeStatistics, std::default_delete&lt;duckdb::NodeStatistics&gt;, true&gt;::operator= (14,386,967 samples, 0.03%)</title><rect x="767.1" y="1717" width="0.3" height="15.0" fill="rgb(239,130,18)" rx="2" ry="2" />
<text  x="770.11" y="1727.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::Pipeline, std::allocator&lt;duckdb::Pipeline&gt;, duckdb::Executor&amp;&gt; (40,850,760 samples, 0.08%)</title><rect x="1093.8" y="1685" width="0.9" height="15.0" fill="rgb(235,68,17)" rx="2" ry="2" />
<text  x="1096.75" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; (24,761,216 samples, 0.05%)</title><rect x="869.0" y="1749" width="0.5" height="15.0" fill="rgb(213,215,54)" rx="2" ry="2" />
<text  x="871.96" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (66,571,378 samples, 0.13%)</title><rect x="492.7" y="1541" width="1.5" height="15.0" fill="rgb(206,66,29)" rx="2" ry="2" />
<text  x="495.68" y="1551.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned char [], std::default_delete&lt;unsigned char&gt;, false&gt;::operator= (6,642,906 samples, 0.01%)</title><rect x="901.8" y="1477" width="0.1" height="15.0" fill="rgb(207,75,52)" rx="2" ry="2" />
<text  x="904.77" y="1487.5" ></text>
</g>
<g >
<title>duckdb::RegexRangeFilter::Rewrite (11,341,072 samples, 0.02%)</title><rect x="761.4" y="1781" width="0.2" height="15.0" fill="rgb(252,195,47)" rx="2" ry="2" />
<text  x="764.36" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt; &gt; &gt;::emplace_back&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt; &gt; (23,450,282 samples, 0.05%)</title><rect x="1081.8" y="1797" width="0.5" height="15.0" fill="rgb(205,162,24)" rx="2" ry="2" />
<text  x="1084.77" y="1807.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::ToStream (211,888,300 samples, 0.41%)</title><rect x="636.1" y="1781" width="4.9" height="15.0" fill="rgb(223,155,44)" rx="2" ry="2" />
<text  x="639.11" y="1791.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::ResetFromCache (9,816,327 samples, 0.02%)</title><rect x="464.8" y="1749" width="0.2" height="15.0" fill="rgb(227,204,36)" rx="2" ry="2" />
<text  x="467.82" y="1759.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (8,454,888 samples, 0.02%)</title><rect x="507.5" y="1877" width="0.2" height="15.0" fill="rgb(240,221,41)" rx="2" ry="2" />
<text  x="510.47" y="1887.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (63,917,622 samples, 0.12%)</title><rect x="498.0" y="1653" width="1.4" height="15.0" fill="rgb(216,110,23)" rx="2" ry="2" />
<text  x="500.97" y="1663.5" ></text>
</g>
<g >
<title>duckdb::grapheme_break_extended (7,872,756 samples, 0.02%)</title><rect x="1071.5" y="1701" width="0.2" height="15.0" fill="rgb(234,102,15)" rx="2" ry="2" />
<text  x="1074.53" y="1711.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt; &gt;::find (8,042,041 samples, 0.02%)</title><rect x="958.4" y="1637" width="0.2" height="15.0" fill="rgb(247,51,16)" rx="2" ry="2" />
<text  x="961.37" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LocalSinkState, std::default_delete&lt;duckdb::LocalSinkState&gt;, true&gt;::reset (183,590,010 samples, 0.36%)</title><rect x="481.0" y="1829" width="4.2" height="15.0" fill="rgb(251,133,24)" rx="2" ry="2" />
<text  x="483.95" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_allocate_buckets (22,617,366 samples, 0.04%)</title><rect x="677.9" y="1701" width="0.5" height="15.0" fill="rgb(237,161,22)" rx="2" ry="2" />
<text  x="680.87" y="1711.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::FoldableConstantMatcher&gt; (11,607,605 samples, 0.02%)</title><rect x="792.9" y="1845" width="0.3" height="15.0" fill="rgb(231,105,27)" rx="2" ry="2" />
<text  x="795.92" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::isalloc (5,535,666 samples, 0.01%)</title><rect x="493.2" y="1477" width="0.1" height="15.0" fill="rgb(232,217,12)" rx="2" ry="2" />
<text  x="496.20" y="1487.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;duckdb::BoundColumnRefExpression&gt; &gt;::release (5,881,618 samples, 0.01%)</title><rect x="587.7" y="1797" width="0.2" height="15.0" fill="rgb(252,133,48)" rx="2" ry="2" />
<text  x="590.74" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BlockMetaData, std::allocator&lt;duckdb::BlockMetaData&gt; &gt;::~vector (4,411,663 samples, 0.01%)</title><rect x="338.9" y="1349" width="0.1" height="15.0" fill="rgb(240,23,32)" rx="2" ry="2" />
<text  x="341.93" y="1359.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb_libpgquery::PGWindowDef*, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb_libpgquery::PGWindowDef*&gt; &gt; &gt;::~unordered_map (4,669,836 samples, 0.01%)</title><rect x="540.9" y="1909" width="0.1" height="15.0" fill="rgb(234,43,54)" rx="2" ry="2" />
<text  x="543.85" y="1919.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (35,743,869 samples, 0.07%)</title><rect x="1183.6" y="2037" width="0.9" height="15.0" fill="rgb(244,134,20)" rx="2" ry="2" />
<text  x="1186.64" y="2047.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5,257,475 samples, 0.01%)</title><rect x="1043.0" y="1733" width="0.1" height="15.0" fill="rgb(235,82,33)" rx="2" ry="2" />
<text  x="1046.02" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; (18,204,572 samples, 0.04%)</title><rect x="974.8" y="1685" width="0.4" height="15.0" fill="rgb(230,64,28)" rx="2" ry="2" />
<text  x="977.80" y="1695.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::ParamsToString[abi:cxx11] (16,655,596 samples, 0.03%)</title><rect x="549.9" y="1685" width="0.4" height="15.0" fill="rgb(252,120,45)" rx="2" ry="2" />
<text  x="552.94" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_default_append (55,028,025 samples, 0.11%)</title><rect x="616.6" y="1765" width="1.3" height="15.0" fill="rgb(221,7,5)" rx="2" ry="2" />
<text  x="619.60" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::size (4,597,640 samples, 0.01%)</title><rect x="1076.4" y="1701" width="0.1" height="15.0" fill="rgb(240,203,25)" rx="2" ry="2" />
<text  x="1079.38" y="1711.5" ></text>
</g>
<g >
<title>duckdb::DatabaseManager::Get (7,580,607 samples, 0.01%)</title><rect x="988.3" y="1733" width="0.2" height="15.0" fill="rgb(216,188,14)" rx="2" ry="2" />
<text  x="991.32" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VerifyInternal (2,251,456,550 samples, 4.39%)</title><rect x="646.2" y="1829" width="51.8" height="15.0" fill="rgb(213,102,40)" rx="2" ry="2" />
<text  x="649.21" y="1839.5" >duckd..</text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt; &gt;::~unique_ptr (23,695,619 samples, 0.05%)</title><rect x="619.9" y="1797" width="0.6" height="15.0" fill="rgb(251,138,43)" rx="2" ry="2" />
<text  x="622.92" y="1807.5" ></text>
</g>
<g >
<title>duckdb::DuckTransactionManager::RemoveTransaction (371,601,670 samples, 0.72%)</title><rect x="319.9" y="1829" width="8.6" height="15.0" fill="rgb(223,146,2)" rx="2" ry="2" />
<text  x="322.90" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_impl (6,401,629 samples, 0.01%)</title><rect x="367.9" y="1477" width="0.1" height="15.0" fill="rgb(242,167,32)" rx="2" ry="2" />
<text  x="370.85" y="1487.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::AppendData (5,584,676 samples, 0.01%)</title><rect x="105.4" y="1653" width="0.1" height="15.0" fill="rgb(221,55,26)" rx="2" ry="2" />
<text  x="108.39" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (4,477,419 samples, 0.01%)</title><rect x="1034.4" y="1765" width="0.2" height="15.0" fill="rgb(212,101,11)" rx="2" ry="2" />
<text  x="1037.45" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::NextGraphemeCluster (17,427,451 samples, 0.03%)</title><rect x="836.8" y="1797" width="0.4" height="15.0" fill="rgb(246,134,0)" rx="2" ry="2" />
<text  x="839.81" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Binder*, std::allocator&lt;duckdb::Binder*&gt; &gt;::_M_range_initialize&lt;duckdb::Binder* const*&gt; (6,554,145 samples, 0.01%)</title><rect x="965.2" y="1717" width="0.2" height="15.0" fill="rgb(243,115,40)" rx="2" ry="2" />
<text  x="968.25" y="1727.5" ></text>
</g>
<g >
<title>duckdb::BufferedFileWriter::Flush (79,144,763 samples, 0.15%)</title><rect x="247.2" y="1765" width="1.8" height="15.0" fill="rgb(207,70,32)" rx="2" ry="2" />
<text  x="250.18" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (20,513,967 samples, 0.04%)</title><rect x="820.0" y="1829" width="0.5" height="15.0" fill="rgb(221,0,49)" rx="2" ry="2" />
<text  x="823.04" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BufferedSerializer, std::default_delete&lt;duckdb::BufferedSerializer&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BufferedSerializer&gt;, void&gt; (7,289,657 samples, 0.01%)</title><rect x="592.6" y="1813" width="0.2" height="15.0" fill="rgb(247,74,37)" rx="2" ry="2" />
<text  x="595.60" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (6,151,803 samples, 0.01%)</title><rect x="1068.4" y="1717" width="0.2" height="15.0" fill="rgb(225,12,29)" rx="2" ry="2" />
<text  x="1071.41" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (89,142,856 samples, 0.17%)</title><rect x="676.8" y="1749" width="2.1" height="15.0" fill="rgb(226,65,35)" rx="2" ry="2" />
<text  x="679.82" y="1759.5" ></text>
</g>
<g >
<title>duckdb::BlockHandle::Load (7,827,540 samples, 0.02%)</title><rect x="471.0" y="1701" width="0.2" height="15.0" fill="rgb(225,54,36)" rx="2" ry="2" />
<text  x="473.97" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::~vector (4,379,511 samples, 0.01%)</title><rect x="237.0" y="1525" width="0.1" height="15.0" fill="rgb(243,35,36)" rx="2" ry="2" />
<text  x="239.99" y="1535.5" ></text>
</g>
<g >
<title>sd_init_command (6,132,607 samples, 0.01%)</title><rect x="250.4" y="1381" width="0.1" height="15.0" fill="rgb(219,66,4)" rx="2" ry="2" />
<text  x="253.37" y="1391.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (34,500,442 samples, 0.07%)</title><rect x="84.6" y="1989" width="0.8" height="15.0" fill="rgb(214,56,26)" rx="2" ry="2" />
<text  x="87.64" y="1999.5" ></text>
</g>
<g >
<title>duckdb::ConjunctionExpressionMatcher::~ConjunctionExpressionMatcher (5,142,168 samples, 0.01%)</title><rect x="830.6" y="1605" width="0.1" height="15.0" fill="rgb(243,12,28)" rx="2" ry="2" />
<text  x="833.62" y="1615.5" ></text>
</g>
<g >
<title>duckdb::Transaction::Get (254,729,497 samples, 0.50%)</title><rect x="995.9" y="1733" width="5.8" height="15.0" fill="rgb(209,176,41)" rx="2" ry="2" />
<text  x="998.87" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (14,185,038 samples, 0.03%)</title><rect x="832.8" y="1653" width="0.3" height="15.0" fill="rgb(238,184,31)" rx="2" ry="2" />
<text  x="835.82" y="1663.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::pair&lt;unsigned long, unsigned long&gt;*, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (7,646,322 samples, 0.01%)</title><rect x="838.9" y="1717" width="0.1" height="15.0" fill="rgb(218,228,24)" rx="2" ry="2" />
<text  x="841.86" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::operator[] (5,699,569 samples, 0.01%)</title><rect x="211.0" y="1525" width="0.1" height="15.0" fill="rgb(247,7,48)" rx="2" ry="2" />
<text  x="213.95" y="1535.5" ></text>
</g>
<g >
<title>duckdb::FilterPushdown::~FilterPushdown (25,703,199 samples, 0.05%)</title><rect x="747.7" y="1717" width="0.6" height="15.0" fill="rgb(234,27,0)" rx="2" ry="2" />
<text  x="750.71" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, unsigned long, std::__detail::_Identity, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (5,056,031 samples, 0.01%)</title><rect x="689.6" y="1749" width="0.1" height="15.0" fill="rgb(220,0,44)" rx="2" ry="2" />
<text  x="692.61" y="1759.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (7,569,833 samples, 0.01%)</title><rect x="104.7" y="1557" width="0.2" height="15.0" fill="rgb(210,103,38)" rx="2" ry="2" />
<text  x="107.74" y="1567.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::idalloctm (13,203,526 samples, 0.03%)</title><rect x="896.6" y="1413" width="0.3" height="15.0" fill="rgb(233,208,35)" rx="2" ry="2" />
<text  x="899.58" y="1423.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (25,873,679 samples, 0.05%)</title><rect x="734.5" y="1717" width="0.6" height="15.0" fill="rgb(214,5,28)" rx="2" ry="2" />
<text  x="737.49" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_node_ptr (13,575,531 samples, 0.03%)</title><rect x="699.5" y="1749" width="0.3" height="15.0" fill="rgb(242,207,48)" rx="2" ry="2" />
<text  x="702.48" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;*&gt; (14,626,886 samples, 0.03%)</title><rect x="500.0" y="1413" width="0.3" height="15.0" fill="rgb(220,191,29)" rx="2" ry="2" />
<text  x="502.99" y="1423.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::BlockHandle&gt; &gt;::construct&lt;duckdb::BlockHandle, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (26,077,673 samples, 0.05%)</title><rect x="441.2" y="1557" width="0.6" height="15.0" fill="rgb(228,172,10)" rx="2" ry="2" />
<text  x="444.23" y="1567.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (23,823,686 samples, 0.05%)</title><rect x="292.0" y="1589" width="0.6" height="15.0" fill="rgb(218,49,0)" rx="2" ry="2" />
<text  x="295.04" y="1599.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;std::lock_guard&lt;std::mutex&gt;, std::default_delete&lt;std::lock_guard&lt;std::mutex&gt; &gt; &gt;::__uniq_ptr_impl (6,432,276 samples, 0.01%)</title><rect x="328.8" y="1781" width="0.2" height="15.0" fill="rgb(231,70,51)" rx="2" ry="2" />
<text  x="331.85" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RenderTreeNode&gt;, void&gt; (5,866,923 samples, 0.01%)</title><rect x="550.6" y="1653" width="0.1" height="15.0" fill="rgb(222,177,1)" rx="2" ry="2" />
<text  x="553.59" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_buckets (11,431,543 samples, 0.02%)</title><rect x="696.3" y="1749" width="0.3" height="15.0" fill="rgb(253,189,25)" rx="2" ry="2" />
<text  x="699.29" y="1759.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (5,183,865 samples, 0.01%)</title><rect x="56.1" y="1877" width="0.1" height="15.0" fill="rgb(223,26,52)" rx="2" ry="2" />
<text  x="59.13" y="1887.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::unique_ptr&lt;duckdb::ConstantExpression, std::default_delete&lt;std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt; &gt;, void&gt; (13,718,882 samples, 0.03%)</title><rect x="529.5" y="1701" width="0.3" height="15.0" fill="rgb(241,36,22)" rx="2" ry="2" />
<text  x="532.46" y="1711.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTree&lt;duckdb::PhysicalOperator&gt; (90,047,237 samples, 0.18%)</title><rect x="833.9" y="1829" width="2.1" height="15.0" fill="rgb(223,203,10)" rx="2" ry="2" />
<text  x="836.94" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_range_initialize&lt;unsigned long const*&gt; (4,648,071 samples, 0.01%)</title><rect x="757.9" y="1733" width="0.1" height="15.0" fill="rgb(209,31,7)" rx="2" ry="2" />
<text  x="760.89" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::GlobalSourceState, std::default_delete&lt;duckdb::GlobalSourceState&gt; &gt;::~unique_ptr (10,853,975 samples, 0.02%)</title><rect x="357.6" y="1621" width="0.3" height="15.0" fill="rgb(220,162,5)" rx="2" ry="2" />
<text  x="360.62" y="1631.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::insert (12,941,097 samples, 0.03%)</title><rect x="779.1" y="1813" width="0.3" height="15.0" fill="rgb(247,213,33)" rx="2" ry="2" />
<text  x="782.13" y="1823.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::shared_ptr&lt;duckdb::ColumnData&gt;*&gt; (275,160,640 samples, 0.54%)</title><rect x="237.9" y="1157" width="6.3" height="15.0" fill="rgb(220,179,13)" rx="2" ry="2" />
<text  x="240.90" y="1167.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (5,376,569 samples, 0.01%)</title><rect x="675.7" y="1765" width="0.2" height="15.0" fill="rgb(205,218,29)" rx="2" ry="2" />
<text  x="678.74" y="1775.5" ></text>
</g>
<g >
<title>std::allocator&lt;char&gt;::allocator (5,513,438 samples, 0.01%)</title><rect x="722.6" y="1861" width="0.2" height="15.0" fill="rgb(250,60,8)" rx="2" ry="2" />
<text  x="725.63" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::resize (26,525,412 samples, 0.05%)</title><rect x="631.7" y="1765" width="0.6" height="15.0" fill="rgb(225,34,50)" rx="2" ry="2" />
<text  x="634.72" y="1775.5" ></text>
</g>
<g >
<title>std::copy&lt;unsigned long const*, unsigned long*&gt; (16,603,583 samples, 0.03%)</title><rect x="684.6" y="1701" width="0.4" height="15.0" fill="rgb(221,223,31)" rx="2" ry="2" />
<text  x="687.61" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VerifyInternal (175,464,104 samples, 0.34%)</title><rect x="775.5" y="1829" width="4.0" height="15.0" fill="rgb(226,18,46)" rx="2" ry="2" />
<text  x="778.47" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CatalogEntry, std::default_delete&lt;duckdb::CatalogEntry&gt; &gt;::~unique_ptr (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1365" width="1.9" height="15.0" fill="rgb(242,87,8)" rx="2" ry="2" />
<text  x="1120.81" y="1375.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (16,065,182 samples, 0.03%)</title><rect x="182.9" y="2037" width="0.4" height="15.0" fill="rgb(223,49,25)" rx="2" ry="2" />
<text  x="185.90" y="2047.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollection::NextScanIndex (64,198,743 samples, 0.13%)</title><rect x="469.3" y="1781" width="1.5" height="15.0" fill="rgb(251,159,8)" rx="2" ry="2" />
<text  x="472.28" y="1791.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::IsEmpty (6,382,593 samples, 0.01%)</title><rect x="458.7" y="1749" width="0.1" height="15.0" fill="rgb(242,0,31)" rx="2" ry="2" />
<text  x="461.69" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::unique_ptr&lt;duckdb::ColumnRefExpression, std::default_delete&lt;std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt; &gt;, void&gt; (8,094,107 samples, 0.02%)</title><rect x="959.0" y="1653" width="0.2" height="15.0" fill="rgb(241,58,46)" rx="2" ry="2" />
<text  x="962.04" y="1663.5" ></text>
</g>
<g >
<title>duckdb::SingleFileStorageManager::GenStorageCommitState (44,149,499 samples, 0.09%)</title><rect x="252.8" y="1813" width="1.0" height="15.0" fill="rgb(245,127,28)" rx="2" ry="2" />
<text  x="255.81" y="1823.5" ></text>
</g>
<g >
<title>alloc_pages_vma (64,809,723 samples, 0.13%)</title><rect x="164.4" y="1893" width="1.5" height="15.0" fill="rgb(240,102,4)" rx="2" ry="2" />
<text  x="167.40" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (12,115,192 samples, 0.02%)</title><rect x="832.5" y="1653" width="0.3" height="15.0" fill="rgb(216,123,48)" rx="2" ry="2" />
<text  x="835.54" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::_M_realloc_insert&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; (11,438,817 samples, 0.02%)</title><rect x="853.7" y="1749" width="0.3" height="15.0" fill="rgb(209,182,49)" rx="2" ry="2" />
<text  x="856.69" y="1759.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (145,996,165 samples, 0.28%)</title><rect x="366.0" y="1749" width="3.3" height="15.0" fill="rgb(206,214,20)" rx="2" ry="2" />
<text  x="368.99" y="1759.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::AddFunction (7,987,525 samples, 0.02%)</title><rect x="1110.4" y="1861" width="0.2" height="15.0" fill="rgb(227,16,23)" rx="2" ry="2" />
<text  x="1113.44" y="1871.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::Vector*&gt; (7,242,694 samples, 0.01%)</title><rect x="108.5" y="1685" width="0.2" height="15.0" fill="rgb(214,4,7)" rx="2" ry="2" />
<text  x="111.52" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Catalog::GetCatalog (335,000,637 samples, 0.65%)</title><rect x="987.9" y="1781" width="7.7" height="15.0" fill="rgb(211,167,8)" rx="2" ry="2" />
<text  x="990.88" y="1791.5" ></text>
</g>
<g >
<title>[unknown] (6,166,714 samples, 0.01%)</title><rect x="35.7" y="2005" width="0.2" height="15.0" fill="rgb(214,20,47)" rx="2" ry="2" />
<text  x="38.74" y="2015.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (30,825,049 samples, 0.06%)</title><rect x="192.8" y="1589" width="0.7" height="15.0" fill="rgb(249,43,13)" rx="2" ry="2" />
<text  x="195.81" y="1599.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnScanState [], std::default_delete&lt;duckdb::ColumnScanState&gt;, false&gt;::~unique_ptr (40,512,596 samples, 0.08%)</title><rect x="226.5" y="1701" width="1.0" height="15.0" fill="rgb(222,158,5)" rx="2" ry="2" />
<text  x="229.53" y="1711.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::LocalTableStorage, duckdb::DataTable&amp;&gt; (26,405,021 samples, 0.05%)</title><rect x="102.1" y="1701" width="0.6" height="15.0" fill="rgb(233,21,27)" rx="2" ry="2" />
<text  x="105.05" y="1711.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;unsigned long const*&gt; (5,320,321 samples, 0.01%)</title><rect x="652.3" y="1637" width="0.2" height="15.0" fill="rgb(220,100,32)" rx="2" ry="2" />
<text  x="655.34" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::insert (40,480,457 samples, 0.08%)</title><rect x="788.1" y="1797" width="1.0" height="15.0" fill="rgb(226,62,50)" rx="2" ry="2" />
<text  x="791.14" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_destroy (14,514,945 samples, 0.03%)</title><rect x="19.4" y="1925" width="0.3" height="15.0" fill="rgb(208,168,27)" rx="2" ry="2" />
<text  x="22.41" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::emplace_back&lt;unsigned long&amp;, unsigned long&amp;&gt; (4,503,306 samples, 0.01%)</title><rect x="842.4" y="1765" width="0.1" height="15.0" fill="rgb(219,187,27)" rx="2" ry="2" />
<text  x="845.37" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TableAppendState::~TableAppendState (30,257,052 samples, 0.06%)</title><rect x="339.1" y="1493" width="0.7" height="15.0" fill="rgb(231,160,40)" rx="2" ry="2" />
<text  x="342.08" y="1503.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;*&gt; (161,449,520 samples, 0.31%)</title><rect x="324.2" y="1749" width="3.7" height="15.0" fill="rgb(254,213,10)" rx="2" ry="2" />
<text  x="327.18" y="1759.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderTopLayer (56,886,624 samples, 0.11%)</title><rect x="579.0" y="1813" width="1.3" height="15.0" fill="rgb(234,80,8)" rx="2" ry="2" />
<text  x="582.02" y="1823.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::MetaPipeline, std::allocator&lt;duckdb::MetaPipeline&gt;,  (47,794,922 samples, 0.09%)</title><rect x="1096.0" y="1797" width="1.1" height="15.0" fill="rgb(214,70,48)" rx="2" ry="2" />
<text  x="1099.03" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnDataRowCollection, std::default_delete&lt;duckdb::ColumnDataRowCollection&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ColumnDataRowCollection&gt;, void&gt; (4,452,230 samples, 0.01%)</title><rect x="388.3" y="1877" width="0.1" height="15.0" fill="rgb(245,19,45)" rx="2" ry="2" />
<text  x="391.30" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert_unique_node (14,908,155 samples, 0.03%)</title><rect x="1019.1" y="1781" width="0.3" height="15.0" fill="rgb(226,165,22)" rx="2" ry="2" />
<text  x="1022.09" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (19,904,377 samples, 0.04%)</title><rect x="813.3" y="1829" width="0.4" height="15.0" fill="rgb(243,136,32)" rx="2" ry="2" />
<text  x="816.26" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt; &gt;::~vector (29,630,427 samples, 0.06%)</title><rect x="915.8" y="1685" width="0.7" height="15.0" fill="rgb(215,169,6)" rx="2" ry="2" />
<text  x="918.79" y="1695.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;, unsigned long&amp;&gt; (431,421,979 samples, 0.84%)</title><rect x="302.4" y="1669" width="9.9" height="15.0" fill="rgb(219,35,46)" rx="2" ry="2" />
<text  x="305.41" y="1679.5" ></text>
</g>
<g >
<title>duckdb::FilterCombiner::~FilterCombiner (17,927,675 samples, 0.03%)</title><rect x="747.7" y="1701" width="0.4" height="15.0" fill="rgb(249,59,53)" rx="2" ry="2" />
<text  x="750.71" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (8,323,921 samples, 0.02%)</title><rect x="482.5" y="1349" width="0.2" height="15.0" fill="rgb(244,66,30)" rx="2" ry="2" />
<text  x="485.47" y="1359.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::VectorCacheBuffer (6,165,053 samples, 0.01%)</title><rect x="108.1" y="1589" width="0.1" height="15.0" fill="rgb(240,20,46)" rx="2" ry="2" />
<text  x="111.09" y="1599.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::PipelineExecutor&gt;::operator (155,285,527 samples, 0.30%)</title><rect x="497.9" y="1829" width="3.6" height="15.0" fill="rgb(248,70,21)" rx="2" ry="2" />
<text  x="500.92" y="1839.5" ></text>
</g>
<g >
<title>duckdb::OptimizerTypeToString[abi:cxx11] (48,530,417 samples, 0.09%)</title><rect x="700.4" y="1861" width="1.1" height="15.0" fill="rgb(242,24,48)" rx="2" ry="2" />
<text  x="703.43" y="1871.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::ColumnStatistics, duckdb::BaseStatistics&gt; (85,056,603 samples, 0.17%)</title><rect x="425.5" y="1557" width="2.0" height="15.0" fill="rgb(240,138,28)" rx="2" ry="2" />
<text  x="428.52" y="1567.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_allocate (7,511,914 samples, 0.01%)</title><rect x="616.7" y="1749" width="0.2" height="15.0" fill="rgb(243,198,25)" rx="2" ry="2" />
<text  x="619.74" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ChunkMetaData, true&gt;::back (4,454,955 samples, 0.01%)</title><rect x="865.8" y="1765" width="0.1" height="15.0" fill="rgb(232,162,10)" rx="2" ry="2" />
<text  x="868.75" y="1775.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::HTTPState, std::allocator&lt;duckdb::HTTPState&gt;,  (8,309,342 samples, 0.02%)</title><rect x="1041.4" y="1813" width="0.2" height="15.0" fill="rgb(223,62,19)" rx="2" ry="2" />
<text  x="1044.41" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt; &gt; &gt;::empty (5,478,397 samples, 0.01%)</title><rect x="541.3" y="1925" width="0.1" height="15.0" fill="rgb(221,31,35)" rx="2" ry="2" />
<text  x="544.32" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (28,614,200 samples, 0.06%)</title><rect x="817.8" y="1813" width="0.6" height="15.0" fill="rgb(242,218,53)" rx="2" ry="2" />
<text  x="820.77" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (26,303,569 samples, 0.05%)</title><rect x="809.2" y="1813" width="0.6" height="15.0" fill="rgb(227,127,51)" rx="2" ry="2" />
<text  x="812.19" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt; &gt; (13,108,568 samples, 0.03%)</title><rect x="479.0" y="1701" width="0.3" height="15.0" fill="rgb(251,141,50)" rx="2" ry="2" />
<text  x="481.98" y="1711.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::raw_parser (290,727,996 samples, 0.57%)</title><rect x="518.1" y="1893" width="6.7" height="15.0" fill="rgb(210,34,25)" rx="2" ry="2" />
<text  x="521.12" y="1903.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderNode (4,666,650 samples, 0.01%)</title><rect x="548.9" y="1525" width="0.1" height="15.0" fill="rgb(242,116,24)" rx="2" ry="2" />
<text  x="551.87" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_check_len (5,996,925 samples, 0.01%)</title><rect x="847.9" y="1765" width="0.1" height="15.0" fill="rgb(230,32,21)" rx="2" ry="2" />
<text  x="850.87" y="1775.5" ></text>
</g>
<g >
<title>duckdb::ColumnScanState::~ColumnScanState (26,985,895 samples, 0.05%)</title><rect x="287.9" y="1509" width="0.6" height="15.0" fill="rgb(205,13,50)" rx="2" ry="2" />
<text  x="290.89" y="1519.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::~BufferHandle (64,675,816 samples, 0.13%)</title><rect x="870.3" y="1685" width="1.5" height="15.0" fill="rgb(229,197,38)" rx="2" ry="2" />
<text  x="873.28" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt; &gt;::~unique_ptr (28,130,425 samples, 0.05%)</title><rect x="1016.7" y="1541" width="0.6" height="15.0" fill="rgb(225,120,38)" rx="2" ry="2" />
<text  x="1019.67" y="1551.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::Checkpoint (67,608,484 samples, 0.13%)</title><rect x="1117.8" y="1141" width="1.6" height="15.0" fill="rgb(215,23,8)" rx="2" ry="2" />
<text  x="1120.84" y="1151.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (7,362,137 samples, 0.01%)</title><rect x="863.1" y="1685" width="0.2" height="15.0" fill="rgb(233,84,48)" rx="2" ry="2" />
<text  x="866.11" y="1695.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::CreateDefaultEntry (54,492,398 samples, 0.11%)</title><rect x="1004.6" y="1717" width="1.2" height="15.0" fill="rgb(245,11,26)" rx="2" ry="2" />
<text  x="1007.56" y="1727.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt;::deallocate (6,967,293 samples, 0.01%)</title><rect x="670.3" y="1669" width="0.2" height="15.0" fill="rgb(230,217,27)" rx="2" ry="2" />
<text  x="673.31" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::push_back (13,367,823 samples, 0.03%)</title><rect x="495.3" y="1781" width="0.3" height="15.0" fill="rgb(239,80,31)" rx="2" ry="2" />
<text  x="498.34" y="1791.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (11,341,804 samples, 0.02%)</title><rect x="350.5" y="1525" width="0.3" height="15.0" fill="rgb(215,141,24)" rx="2" ry="2" />
<text  x="353.52" y="1535.5" ></text>
</g>
<g >
<title>duckdb::grapheme_break_extended (9,673,519 samples, 0.02%)</title><rect x="626.0" y="1717" width="0.2" height="15.0" fill="rgb(236,112,17)" rx="2" ry="2" />
<text  x="629.02" y="1727.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::CompressionFunctionSet, std::default_delete&lt;duckdb::CompressionFunctionSet&gt; &gt;::_M_ptr (6,464,355 samples, 0.01%)</title><rect x="435.9" y="1621" width="0.1" height="15.0" fill="rgb(241,219,54)" rx="2" ry="2" />
<text  x="438.90" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt;::_M_check_len (11,754,255 samples, 0.02%)</title><rect x="827.8" y="1829" width="0.3" height="15.0" fill="rgb(228,168,30)" rx="2" ry="2" />
<text  x="830.85" y="1839.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (11,256,708 samples, 0.02%)</title><rect x="34.9" y="1989" width="0.3" height="15.0" fill="rgb(207,225,18)" rx="2" ry="2" />
<text  x="37.93" y="1999.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (4,363,717 samples, 0.01%)</title><rect x="483.0" y="1317" width="0.1" height="15.0" fill="rgb(222,124,36)" rx="2" ry="2" />
<text  x="486.04" y="1327.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThreadStats (32,441,119 samples, 0.06%)</title><rect x="178.5" y="2037" width="0.7" height="15.0" fill="rgb(242,111,25)" rx="2" ry="2" />
<text  x="181.46" y="2047.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (6,982,455 samples, 0.01%)</title><rect x="1043.9" y="1797" width="0.1" height="15.0" fill="rgb(253,89,44)" rx="2" ry="2" />
<text  x="1046.85" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, void&gt; (5,314,280 samples, 0.01%)</title><rect x="478.5" y="1749" width="0.1" height="15.0" fill="rgb(240,17,41)" rx="2" ry="2" />
<text  x="481.49" y="1759.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long, std::shared_ptr&lt;duckdb::QueryProfiler&gt; &gt;::~pair (27,099,394 samples, 0.05%)</title><rect x="352.4" y="1829" width="0.6" height="15.0" fill="rgb(225,207,9)" rx="2" ry="2" />
<text  x="355.40" y="1839.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (18,914,316 samples, 0.04%)</title><rect x="23.7" y="2005" width="0.4" height="15.0" fill="rgb(210,76,22)" rx="2" ry="2" />
<text  x="26.68" y="2015.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::operator= (4,443,670 samples, 0.01%)</title><rect x="634.5" y="1717" width="0.1" height="15.0" fill="rgb(229,45,41)" rx="2" ry="2" />
<text  x="637.51" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt;::~vector (12,598,492 samples, 0.02%)</title><rect x="1036.5" y="1397" width="0.3" height="15.0" fill="rgb(210,91,33)" rx="2" ry="2" />
<text  x="1039.47" y="1407.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::InsertGlobalState, std::default_delete&lt;duckdb::InsertGlobalState&gt; &gt;::__uniq_ptr_impl (5,432,476 samples, 0.01%)</title><rect x="99.4" y="1749" width="0.1" height="15.0" fill="rgb(233,174,8)" rx="2" ry="2" />
<text  x="102.40" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ClientData, std::default_delete&lt;duckdb::ClientData&gt;, true&gt;::operator* (23,456,459 samples, 0.05%)</title><rect x="712.8" y="1829" width="0.5" height="15.0" fill="rgb(219,209,1)" rx="2" ry="2" />
<text  x="715.78" y="1839.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::FunctionMatcher&gt;::operator (4,509,912 samples, 0.01%)</title><rect x="832.9" y="1381" width="0.1" height="15.0" fill="rgb(244,209,49)" rx="2" ry="2" />
<text  x="835.94" y="1391.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::RowGroupCollection,  (5,105,775 samples, 0.01%)</title><rect x="430.6" y="1573" width="0.1" height="15.0" fill="rgb(252,107,35)" rx="2" ry="2" />
<text  x="433.58" y="1583.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VersionNode, std::allocator&lt;duckdb::VersionNode&gt;,  (21,504,509 samples, 0.04%)</title><rect x="415.5" y="1605" width="0.5" height="15.0" fill="rgb(213,145,14)" rx="2" ry="2" />
<text  x="418.47" y="1615.5" ></text>
</g>
<g >
<title>native_flush_tlb_others (8,409,674 samples, 0.02%)</title><rect x="167.7" y="1861" width="0.1" height="15.0" fill="rgb(212,47,27)" rx="2" ry="2" />
<text  x="170.65" y="1871.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_gc_event_handler (4,965,339 samples, 0.01%)</title><rect x="380.8" y="1653" width="0.2" height="15.0" fill="rgb(240,154,6)" rx="2" ry="2" />
<text  x="383.85" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (33,248,799 samples, 0.06%)</title><rect x="705.8" y="1765" width="0.8" height="15.0" fill="rgb(214,159,1)" rx="2" ry="2" />
<text  x="708.79" y="1775.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (17,460,022 samples, 0.03%)</title><rect x="93.5" y="1653" width="0.4" height="15.0" fill="rgb(223,108,46)" rx="2" ry="2" />
<text  x="96.49" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5,245,060 samples, 0.01%)</title><rect x="765.6" y="1717" width="0.1" height="15.0" fill="rgb(249,117,25)" rx="2" ry="2" />
<text  x="768.55" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::Binder*, true&gt;::vector (13,695,986 samples, 0.03%)</title><rect x="965.1" y="1749" width="0.3" height="15.0" fill="rgb(215,208,52)" rx="2" ry="2" />
<text  x="968.09" y="1759.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderNode (4,739,442 samples, 0.01%)</title><rect x="621.9" y="1653" width="0.1" height="15.0" fill="rgb(248,79,41)" rx="2" ry="2" />
<text  x="624.87" y="1663.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*&gt; (9,916,935 samples, 0.02%)</title><rect x="831.9" y="1541" width="0.2" height="15.0" fill="rgb(241,149,24)" rx="2" ry="2" />
<text  x="834.87" y="1551.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Task&gt;::shared_ptr&lt;duckdb::PipelineInitializeTask, std::default_delete&lt;duckdb::PipelineInitializeTask&gt;, void&gt; (23,522,211 samples, 0.05%)</title><rect x="1060.2" y="1813" width="0.5" height="15.0" fill="rgb(234,94,29)" rx="2" ry="2" />
<text  x="1063.21" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::MetaTransaction, std::default_delete&lt;duckdb::MetaTransaction&gt;, true&gt;::~unique_ptr (30,139,363 samples, 0.06%)</title><rect x="331.9" y="1861" width="0.7" height="15.0" fill="rgb(245,86,52)" rx="2" ry="2" />
<text  x="334.92" y="1871.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::BoundExpression, duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; (4,456,776 samples, 0.01%)</title><rect x="957.1" y="1717" width="0.1" height="15.0" fill="rgb(207,158,10)" rx="2" ry="2" />
<text  x="960.10" y="1727.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;::operator (5,096,954 samples, 0.01%)</title><rect x="89.6" y="2021" width="0.2" height="15.0" fill="rgb(214,66,25)" rx="2" ry="2" />
<text  x="92.64" y="2031.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::_M_ptr (4,660,848 samples, 0.01%)</title><rect x="739.6" y="1589" width="0.1" height="15.0" fill="rgb(239,201,25)" rx="2" ry="2" />
<text  x="742.62" y="1599.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (5,262,655 samples, 0.01%)</title><rect x="38.6" y="1989" width="0.1" height="15.0" fill="rgb(226,203,12)" rx="2" ry="2" />
<text  x="41.60" y="1999.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_check_len (4,749,939 samples, 0.01%)</title><rect x="806.5" y="1797" width="0.1" height="15.0" fill="rgb(253,226,12)" rx="2" ry="2" />
<text  x="809.52" y="1807.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Deque_base (10,292,892 samples, 0.02%)</title><rect x="496.9" y="1797" width="0.2" height="15.0" fill="rgb(219,211,49)" rx="2" ry="2" />
<text  x="499.87" y="1807.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::EmptyNeedleRemovalRule&gt; &gt; (5,428,442 samples, 0.01%)</title><rect x="822.6" y="1845" width="0.1" height="15.0" fill="rgb(251,217,15)" rx="2" ry="2" />
<text  x="825.59" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_trigger (16,866,943 samples, 0.03%)</title><rect x="218.6" y="1365" width="0.4" height="15.0" fill="rgb(245,30,31)" rx="2" ry="2" />
<text  x="221.62" y="1375.5" ></text>
</g>
<g >
<title>std::weak_ptr&lt;duckdb::BlockHandle&gt;::weak_ptr (4,514,222 samples, 0.01%)</title><rect x="861.9" y="1541" width="0.1" height="15.0" fill="rgb(253,186,30)" rx="2" ry="2" />
<text  x="864.87" y="1551.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorCacheBuffer&gt;::shared_ptr&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (65,008,994 samples, 0.13%)</title><rect x="289.1" y="1621" width="1.5" height="15.0" fill="rgb(225,102,50)" rx="2" ry="2" />
<text  x="292.15" y="1631.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::~DataChunk (86,723,308 samples, 0.17%)</title><rect x="221.2" y="1733" width="2.0" height="15.0" fill="rgb(211,175,45)" rx="2" ry="2" />
<text  x="224.16" y="1743.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorBuffer&gt;::destroy&lt;duckdb::VectorBuffer&gt; (4,379,137 samples, 0.01%)</title><rect x="895.6" y="1557" width="0.1" height="15.0" fill="rgb(217,170,32)" rx="2" ry="2" />
<text  x="898.64" y="1567.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::Initialize (220,679,175 samples, 0.43%)</title><rect x="1085.4" y="1861" width="5.0" height="15.0" fill="rgb(228,217,29)" rx="2" ry="2" />
<text  x="1088.36" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::_M_realloc_insert&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; (6,634,006 samples, 0.01%)</title><rect x="1085.7" y="1781" width="0.1" height="15.0" fill="rgb(217,17,15)" rx="2" ry="2" />
<text  x="1088.66" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::UnifiedVectorFormat, std::allocator&lt;duckdb::UnifiedVectorFormat&gt; &gt;::_M_default_append (20,469,348 samples, 0.04%)</title><rect x="888.8" y="1749" width="0.5" height="15.0" fill="rgb(248,99,12)" rx="2" ry="2" />
<text  x="891.83" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (10,628,228 samples, 0.02%)</title><rect x="809.4" y="1797" width="0.2" height="15.0" fill="rgb(209,165,22)" rx="2" ry="2" />
<text  x="812.35" y="1807.5" ></text>
</g>
<g >
<title>virtual thunk to std::__cxx11::basic_stringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_stringstream (20,100,300 samples, 0.04%)</title><rect x="147.4" y="2021" width="0.5" height="15.0" fill="rgb(248,150,30)" rx="2" ry="2" />
<text  x="150.41" y="2031.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundSelectNode, std::default_delete&lt;duckdb::BoundSelectNode&gt; &gt;::get (10,689,933 samples, 0.02%)</title><rect x="964.5" y="1733" width="0.2" height="15.0" fill="rgb(216,115,24)" rx="2" ry="2" />
<text  x="967.46" y="1743.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::~_Vector_base (10,715,112 samples, 0.02%)</title><rect x="604.1" y="1733" width="0.3" height="15.0" fill="rgb(230,228,15)" rx="2" ry="2" />
<text  x="607.13" y="1743.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, std::shared_ptr&lt;duckdb::LocalTableStorage&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, std::shared_ptr&lt;duckdb::LocalTableStorage&gt; &gt; &gt; &gt;::~unordered_map (23,106,159 samples, 0.05%)</title><rect x="245.9" y="1797" width="0.5" height="15.0" fill="rgb(247,217,30)" rx="2" ry="2" />
<text  x="248.91" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Expression::Hash (27,004,352 samples, 0.05%)</title><rect x="583.6" y="1845" width="0.7" height="15.0" fill="rgb(225,218,25)" rx="2" ry="2" />
<text  x="586.64" y="1855.5" ></text>
</g>
<g >
<title>duckdb::FileBuffer::~FileBuffer (240,589,784 samples, 0.47%)</title><rect x="344.2" y="917" width="5.5" height="15.0" fill="rgb(218,52,35)" rx="2" ry="2" />
<text  x="347.16" y="927.5" ></text>
</g>
<g >
<title>dequeue_entity (4,512,678 samples, 0.01%)</title><rect x="249.3" y="1493" width="0.1" height="15.0" fill="rgb(246,102,22)" rx="2" ry="2" />
<text  x="252.34" y="1503.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (5,044,584 samples, 0.01%)</title><rect x="378.4" y="1877" width="0.1" height="15.0" fill="rgb(216,161,33)" rx="2" ry="2" />
<text  x="381.43" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt;::allocate (5,300,247 samples, 0.01%)</title><rect x="667.9" y="1685" width="0.1" height="15.0" fill="rgb(232,51,10)" rx="2" ry="2" />
<text  x="670.91" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::HTTPState,  (11,032,328 samples, 0.02%)</title><rect x="1041.4" y="1861" width="0.2" height="15.0" fill="rgb(247,189,34)" rx="2" ry="2" />
<text  x="1044.38" y="1871.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (99,017,970 samples, 0.19%)</title><rect x="217.2" y="1653" width="2.3" height="15.0" fill="rgb(222,173,26)" rx="2" ry="2" />
<text  x="220.24" y="1663.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append (4,920,534 samples, 0.01%)</title><rect x="715.9" y="1845" width="0.1" height="15.0" fill="rgb(240,36,19)" rx="2" ry="2" />
<text  x="718.91" y="1855.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::PipelineRenderNode&gt; (65,966,202 samples, 0.13%)</title><rect x="1066.8" y="1749" width="1.6" height="15.0" fill="rgb(205,50,24)" rx="2" ry="2" />
<text  x="1069.85" y="1759.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::RowGroupCollection, std::shared_ptr&lt;duckdb::DataTableInfo&gt;&amp;, duckdb::BlockManager&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, long const&amp;, int&gt; (83,273,431 samples, 0.16%)</title><rect x="428.5" y="1605" width="2.0" height="15.0" fill="rgb(220,7,3)" rx="2" ry="2" />
<text  x="431.55" y="1615.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CompressionAppendState, std::default_delete&lt;duckdb::CompressionAppendState&gt; &gt;::~unique_ptr (5,148,375 samples, 0.01%)</title><rect x="234.1" y="1557" width="0.1" height="15.0" fill="rgb(223,76,51)" rx="2" ry="2" />
<text  x="237.07" y="1567.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_salloc (7,522,673 samples, 0.01%)</title><rect x="325.8" y="1333" width="0.1" height="15.0" fill="rgb(242,150,8)" rx="2" ry="2" />
<text  x="328.76" y="1343.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::MetaPipeline,  (51,367,091 samples, 0.10%)</title><rect x="1096.0" y="1845" width="1.2" height="15.0" fill="rgb(243,177,50)" rx="2" ry="2" />
<text  x="1099.03" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Binder::CreatePlan (262,119,419 samples, 0.51%)</title><rect x="973.5" y="1797" width="6.0" height="15.0" fill="rgb(244,119,44)" rx="2" ry="2" />
<text  x="976.48" y="1807.5" ></text>
</g>
<g >
<title>duckdb::BoundQueryNode::BoundQueryNode (5,092,784 samples, 0.01%)</title><rect x="963.3" y="1717" width="0.2" height="15.0" fill="rgb(233,184,36)" rx="2" ry="2" />
<text  x="966.34" y="1727.5" ></text>
</g>
<g >
<title>handle_mm_fault (4,811,192 samples, 0.01%)</title><rect x="1175.6" y="1941" width="0.1" height="15.0" fill="rgb(247,172,9)" rx="2" ry="2" />
<text  x="1178.60" y="1951.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::LogicalOperator*, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::tuple&lt;duckdb::LogicalOperator*&amp;, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; (6,642,791 samples, 0.01%)</title><rect x="770.9" y="1765" width="0.2" height="15.0" fill="rgb(216,92,25)" rx="2" ry="2" />
<text  x="773.92" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Binder::Bind (641,922,534 samples, 1.25%)</title><rect x="926.6" y="1765" width="14.7" height="15.0" fill="rgb(249,147,8)" rx="2" ry="2" />
<text  x="929.56" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::default_junk_free (6,689,658 samples, 0.01%)</title><rect x="1123.3" y="1525" width="0.1" height="15.0" fill="rgb(217,85,43)" rx="2" ry="2" />
<text  x="1126.29" y="1535.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (7,415,548 samples, 0.01%)</title><rect x="896.9" y="1365" width="0.2" height="15.0" fill="rgb(207,168,2)" rx="2" ry="2" />
<text  x="899.92" y="1375.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::MetaPipeline&gt;::~shared_ptr (22,251,549 samples, 0.04%)</title><rect x="1096.2" y="1637" width="0.5" height="15.0" fill="rgb(253,164,6)" rx="2" ry="2" />
<text  x="1099.18" y="1647.5" ></text>
</g>
<g >
<title>duckdb::StringScanState::~StringScanState (6,116,119 samples, 0.01%)</title><rect x="226.6" y="1589" width="0.2" height="15.0" fill="rgb(236,215,19)" rx="2" ry="2" />
<text  x="229.62" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionListRef, std::default_delete&lt;duckdb::ExpressionListRef&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ExpressionListRef&gt;, void&gt; (7,110,268 samples, 0.01%)</title><rect x="530.9" y="1717" width="0.2" height="15.0" fill="rgb(237,205,18)" rx="2" ry="2" />
<text  x="533.93" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LocalSinkState, std::default_delete&lt;duckdb::LocalSinkState&gt;, true&gt;::unique_ptr&lt;duckdb::InsertLocalState, std::default_delete&lt;std::unique_ptr&lt;duckdb::LocalSinkState, std::default_delete&lt;duckdb::LocalSinkState&gt; &gt; &gt;, void&gt; (7,609,818 samples, 0.01%)</title><rect x="491.7" y="1813" width="0.1" height="15.0" fill="rgb(213,93,40)" rx="2" ry="2" />
<text  x="494.67" y="1823.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, duckdb::ActiveQueryContext*, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt; (16,135,572 samples, 0.03%)</title><rect x="510.5" y="1845" width="0.4" height="15.0" fill="rgb(229,82,9)" rx="2" ry="2" />
<text  x="513.53" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Vector::ToUnifiedFormat (4,961,339 samples, 0.01%)</title><rect x="461.1" y="1717" width="0.1" height="15.0" fill="rgb(218,197,27)" rx="2" ry="2" />
<text  x="464.07" y="1727.5" ></text>
</g>
<g >
<title>duckdb::SelectionVector::~SelectionVector (4,378,740 samples, 0.01%)</title><rect x="315.8" y="1605" width="0.1" height="15.0" fill="rgb(224,178,33)" rx="2" ry="2" />
<text  x="318.76" y="1615.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;::unique_ptr (8,684,528 samples, 0.02%)</title><rect x="328.2" y="1749" width="0.2" height="15.0" fill="rgb(227,227,7)" rx="2" ry="2" />
<text  x="331.18" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::vector (6,483,136 samples, 0.01%)</title><rect x="388.5" y="1877" width="0.1" height="15.0" fill="rgb(218,201,53)" rx="2" ry="2" />
<text  x="391.49" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (7,775,062 samples, 0.02%)</title><rect x="707.5" y="1797" width="0.1" height="15.0" fill="rgb(225,43,32)" rx="2" ry="2" />
<text  x="710.46" y="1807.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::Checkpoint (68,998,908 samples, 0.13%)</title><rect x="1117.8" y="1189" width="1.6" height="15.0" fill="rgb(225,93,1)" rx="2" ry="2" />
<text  x="1120.83" y="1199.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::InitializeState (27,332,586 samples, 0.05%)</title><rect x="903.5" y="1717" width="0.6" height="15.0" fill="rgb(215,153,3)" rx="2" ry="2" />
<text  x="906.46" y="1727.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::_M_ptr (4,729,431 samples, 0.01%)</title><rect x="795.4" y="1781" width="0.1" height="15.0" fill="rgb(253,17,52)" rx="2" ry="2" />
<text  x="798.41" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ConjunctionSimplificationRule::~ConjunctionSimplificationRule (9,757,305 samples, 0.02%)</title><rect x="830.6" y="1701" width="0.2" height="15.0" fill="rgb(226,222,0)" rx="2" ry="2" />
<text  x="833.59" y="1711.5" ></text>
</g>
<g >
<title>[unknown] (5,398,013 samples, 0.01%)</title><rect x="547.2" y="1733" width="0.1" height="15.0" fill="rgb(250,179,36)" rx="2" ry="2" />
<text  x="550.20" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::BindExpression (43,174,732 samples, 0.08%)</title><rect x="933.7" y="1685" width="1.0" height="15.0" fill="rgb(242,3,15)" rx="2" ry="2" />
<text  x="936.72" y="1695.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="453" width="0.1" height="15.0" fill="rgb(216,185,40)" rx="2" ry="2" />
<text  x="14.25" y="463.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (49,964,328 samples, 0.10%)</title><rect x="568.9" y="1685" width="1.1" height="15.0" fill="rgb(229,60,17)" rx="2" ry="2" />
<text  x="571.88" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PrivateAllocatorData, std::default_delete&lt;duckdb::PrivateAllocatorData&gt;, true&gt;::~unique_ptr (6,538,466 samples, 0.01%)</title><rect x="1122.2" y="1653" width="0.2" height="15.0" fill="rgb(205,71,25)" rx="2" ry="2" />
<text  x="1125.21" y="1663.5" ></text>
</g>
<g >
<title>duckdb::DBConfig::GetCastFunctions (5,567,209 samples, 0.01%)</title><rect x="933.2" y="1701" width="0.1" height="15.0" fill="rgb(223,17,45)" rx="2" ry="2" />
<text  x="936.20" y="1711.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (13,879,790 samples, 0.03%)</title><rect x="844.0" y="1717" width="0.3" height="15.0" fill="rgb(252,229,21)" rx="2" ry="2" />
<text  x="847.03" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (7,247,855 samples, 0.01%)</title><rect x="878.1" y="1429" width="0.2" height="15.0" fill="rgb(206,56,20)" rx="2" ry="2" />
<text  x="881.09" y="1439.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderNode (10,134,425 samples, 0.02%)</title><rect x="634.9" y="1717" width="0.2" height="15.0" fill="rgb(245,45,30)" rx="2" ry="2" />
<text  x="637.90" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, true&gt;::~vector (5,847,116 samples, 0.01%)</title><rect x="1048.8" y="1813" width="0.1" height="15.0" fill="rgb(235,21,52)" rx="2" ry="2" />
<text  x="1051.77" y="1823.5" ></text>
</g>
<g >
<title>duckdb::BaseSelectBinder::BindExpression (298,514,731 samples, 0.58%)</title><rect x="950.2" y="1717" width="6.8" height="15.0" fill="rgb(210,175,28)" rx="2" ry="2" />
<text  x="953.15" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DatePartSimplificationRule, std::default_delete&lt;duckdb::DatePartSimplificationRule&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::DatePartSimplificationRule&gt;, void&gt; (6,729,877 samples, 0.01%)</title><rect x="798.5" y="1845" width="0.2" height="15.0" fill="rgb(227,92,15)" rx="2" ry="2" />
<text  x="801.52" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalExpressionGet, std::default_delete&lt;duckdb::LogicalExpressionGet&gt;, true&gt;::operator (4,501,211 samples, 0.01%)</title><rect x="976.4" y="1733" width="0.1" height="15.0" fill="rgb(224,166,46)" rx="2" ry="2" />
<text  x="979.42" y="1743.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::Destroy (6,784,474 samples, 0.01%)</title><rect x="233.8" y="1589" width="0.2" height="15.0" fill="rgb(225,91,2)" rx="2" ry="2" />
<text  x="236.80" y="1599.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::Tick (7,694,379 samples, 0.02%)</title><rect x="704.0" y="1845" width="0.2" height="15.0" fill="rgb(251,223,39)" rx="2" ry="2" />
<text  x="707.00" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; const*&gt; (117,890,700 samples, 0.23%)</title><rect x="731.4" y="1765" width="2.7" height="15.0" fill="rgb(250,202,25)" rx="2" ry="2" />
<text  x="734.41" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueueProducerToken, std::default_delete&lt;duckdb::QueueProducerToken&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::QueueProducerToken&gt;, void&gt; (6,625,593 samples, 0.01%)</title><rect x="1091.2" y="1829" width="0.1" height="15.0" fill="rgb(245,201,5)" rx="2" ry="2" />
<text  x="1094.18" y="1839.5" ></text>
</g>
<g >
<title>duckdb::ColumnAppendState::ColumnAppendState (14,107,513 samples, 0.03%)</title><rect x="197.9" y="1621" width="0.3" height="15.0" fill="rgb(254,121,37)" rx="2" ry="2" />
<text  x="200.90" y="1631.5" ></text>
</g>
<g >
<title>duckdb::Binder::BindNode (4,441,561 samples, 0.01%)</title><rect x="982.1" y="1813" width="0.1" height="15.0" fill="rgb(213,43,26)" rx="2" ry="2" />
<text  x="985.11" y="1823.5" ></text>
</g>
<g >
<title>duckdb::StatementProperties::StatementProperties (17,255,423 samples, 0.03%)</title><rect x="388.9" y="1909" width="0.3" height="15.0" fill="rgb(231,48,18)" rx="2" ry="2" />
<text  x="391.85" y="1919.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorMetaData&gt;::construct&lt;duckdb::VectorMetaData, duckdb::VectorMetaData const&amp;&gt; (14,623,711 samples, 0.03%)</title><rect x="884.4" y="1669" width="0.4" height="15.0" fill="rgb(228,225,10)" rx="2" ry="2" />
<text  x="887.42" y="1679.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, unsigned long const*, unsigned long*&gt; (9,442,483 samples, 0.02%)</title><rect x="652.1" y="1637" width="0.2" height="15.0" fill="rgb(205,103,51)" rx="2" ry="2" />
<text  x="655.05" y="1647.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TransactionManager, std::default_delete&lt;duckdb::TransactionManager&gt; &gt;::get (6,840,394 samples, 0.01%)</title><rect x="188.6" y="1813" width="0.2" height="15.0" fill="rgb(216,227,8)" rx="2" ry="2" />
<text  x="191.65" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (9,916,935 samples, 0.02%)</title><rect x="831.9" y="1493" width="0.2" height="15.0" fill="rgb(215,52,22)" rx="2" ry="2" />
<text  x="834.87" y="1503.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringInitScan (32,508,661 samples, 0.06%)</title><rect x="267.3" y="1589" width="0.8" height="15.0" fill="rgb(250,40,39)" rx="2" ry="2" />
<text  x="270.32" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::GlobalSinkState, std::default_delete&lt;duckdb::GlobalSinkState&gt; &gt;::operator= (9,706,355 samples, 0.02%)</title><rect x="100.1" y="1797" width="0.3" height="15.0" fill="rgb(230,120,48)" rx="2" ry="2" />
<text  x="103.13" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::SingleJoinRelation&gt;, void&gt; (6,670,312 samples, 0.01%)</title><rect x="758.0" y="1765" width="0.2" height="15.0" fill="rgb(245,100,38)" rx="2" ry="2" />
<text  x="761.03" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (61,768,671 samples, 0.12%)</title><rect x="297.3" y="1573" width="1.5" height="15.0" fill="rgb(230,160,7)" rx="2" ry="2" />
<text  x="300.34" y="1583.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::vector (12,419,405 samples, 0.02%)</title><rect x="1015.5" y="1829" width="0.3" height="15.0" fill="rgb(238,127,18)" rx="2" ry="2" />
<text  x="1018.48" y="1839.5" ></text>
</g>
<g >
<title>alloc_set_pte (8,054,970 samples, 0.02%)</title><rect x="73.8" y="1845" width="0.2" height="15.0" fill="rgb(214,24,46)" rx="2" ry="2" />
<text  x="76.76" y="1855.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable (10,517,487 samples, 0.02%)</title><rect x="695.8" y="1797" width="0.2" height="15.0" fill="rgb(249,191,37)" rx="2" ry="2" />
<text  x="698.79" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::Pipeline&gt;, duckdb::ReferenceHashFunction&lt;duckdb::Pipeline&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (8,337,053 samples, 0.02%)</title><rect x="1052.5" y="1733" width="0.2" height="15.0" fill="rgb(250,195,22)" rx="2" ry="2" />
<text  x="1055.48" y="1743.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ComparisonExpressionMatcher&gt; (6,915,208 samples, 0.01%)</title><rect x="814.2" y="1845" width="0.2" height="15.0" fill="rgb(243,5,52)" rx="2" ry="2" />
<text  x="817.22" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::MaterializedQueryResult, std::default_delete&lt;duckdb::MaterializedQueryResult&gt;, true&gt;::~unique_ptr (166,380,850 samples, 0.32%)</title><rect x="1121.3" y="2005" width="3.8" height="15.0" fill="rgb(211,145,28)" rx="2" ry="2" />
<text  x="1124.26" y="2015.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::AssertNotNull (4,998,620 samples, 0.01%)</title><rect x="202.2" y="1509" width="0.1" height="15.0" fill="rgb(234,150,37)" rx="2" ry="2" />
<text  x="205.21" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt; &gt; (9,057,907 samples, 0.02%)</title><rect x="1007.6" y="1701" width="0.2" height="15.0" fill="rgb(214,0,19)" rx="2" ry="2" />
<text  x="1010.56" y="1711.5" ></text>
</g>
<g >
<title>duckdb::DataTable::InitializeLocalAppend (143,341,778 samples, 0.28%)</title><rect x="102.0" y="1749" width="3.3" height="15.0" fill="rgb(215,94,17)" rx="2" ry="2" />
<text  x="104.95" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1477" width="1.9" height="15.0" fill="rgb(206,56,41)" rx="2" ry="2" />
<text  x="1120.81" y="1487.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;unsigned long [], std::default_delete&lt;unsigned long []&gt; &gt;::operator= (6,057,333 samples, 0.01%)</title><rect x="363.1" y="1589" width="0.1" height="15.0" fill="rgb(216,118,37)" rx="2" ry="2" />
<text  x="366.10" y="1599.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::~DataChunk (119,903,122 samples, 0.23%)</title><rect x="895.3" y="1781" width="2.7" height="15.0" fill="rgb(205,131,10)" rx="2" ry="2" />
<text  x="898.28" y="1791.5" ></text>
</g>
<g >
<title>duckdb::StandardColumnData::Checkpoint (68,205,408 samples, 0.13%)</title><rect x="1117.8" y="1157" width="1.6" height="15.0" fill="rgb(212,54,18)" rx="2" ry="2" />
<text  x="1120.83" y="1167.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_check_len (17,358,095 samples, 0.03%)</title><rect x="628.8" y="1717" width="0.4" height="15.0" fill="rgb(248,175,49)" rx="2" ry="2" />
<text  x="631.81" y="1727.5" ></text>
</g>
<g >
<title>std::function&lt;void  (16,445,185 samples, 0.03%)</title><rect x="729.4" y="1653" width="0.4" height="15.0" fill="rgb(207,120,53)" rx="2" ry="2" />
<text  x="732.43" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt;::~unique_ptr (5,198,571 samples, 0.01%)</title><rect x="287.7" y="1605" width="0.1" height="15.0" fill="rgb(245,213,52)" rx="2" ry="2" />
<text  x="290.69" y="1615.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, unsigned long&amp;, unsigned long&amp;&gt; (18,567,159 samples, 0.04%)</title><rect x="564.1" y="1765" width="0.5" height="15.0" fill="rgb(220,47,17)" rx="2" ry="2" />
<text  x="567.13" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::PreservedError, std::allocator&lt;duckdb::PreservedError&gt; &gt;::end (7,635,742 samples, 0.01%)</title><rect x="399.1" y="1861" width="0.2" height="15.0" fill="rgb(223,129,18)" rx="2" ry="2" />
<text  x="402.14" y="1871.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (9,092,089 samples, 0.02%)</title><rect x="765.2" y="1717" width="0.2" height="15.0" fill="rgb(225,76,10)" rx="2" ry="2" />
<text  x="768.17" y="1727.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::SelectNode, std::default_delete&lt;duckdb::SelectNode&gt; &gt;::__uniq_ptr_impl (5,145,772 samples, 0.01%)</title><rect x="533.0" y="1717" width="0.1" height="15.0" fill="rgb(243,17,2)" rx="2" ry="2" />
<text  x="535.99" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Executor::Initialize (2,304,757,596 samples, 4.49%)</title><rect x="1045.4" y="1893" width="53.0" height="15.0" fill="rgb(234,156,31)" rx="2" ry="2" />
<text  x="1048.39" y="1903.5" >duckd..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::allocate (10,881,695 samples, 0.02%)</title><rect x="667.9" y="1701" width="0.2" height="15.0" fill="rgb(240,119,2)" rx="2" ry="2" />
<text  x="670.89" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (7,466,306 samples, 0.01%)</title><rect x="1068.0" y="1733" width="0.2" height="15.0" fill="rgb(206,171,31)" rx="2" ry="2" />
<text  x="1071.05" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (45,086,142 samples, 0.09%)</title><rect x="816.6" y="1829" width="1.0" height="15.0" fill="rgb(231,151,35)" rx="2" ry="2" />
<text  x="819.57" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorMetaData, std::allocator&lt;duckdb::VectorMetaData&gt; &gt;::push_back (28,462,348 samples, 0.06%)</title><rect x="884.2" y="1717" width="0.7" height="15.0" fill="rgb(253,67,5)" rx="2" ry="2" />
<text  x="887.21" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (30,403,787 samples, 0.06%)</title><rect x="392.0" y="1493" width="0.7" height="15.0" fill="rgb(243,156,6)" rx="2" ry="2" />
<text  x="394.97" y="1503.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_realloc_insert&lt;duckdb::LogicalType const&amp;&gt; (10,437,232 samples, 0.02%)</title><rect x="848.3" y="1813" width="0.3" height="15.0" fill="rgb(248,31,26)" rx="2" ry="2" />
<text  x="851.34" y="1823.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (68,512,153 samples, 0.13%)</title><rect x="655.7" y="1717" width="1.6" height="15.0" fill="rgb(245,217,2)" rx="2" ry="2" />
<text  x="658.71" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperator (61,166,241 samples, 0.12%)</title><rect x="726.5" y="1749" width="1.4" height="15.0" fill="rgb(246,89,49)" rx="2" ry="2" />
<text  x="729.47" y="1759.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::RowGroupCollection, std::allocator&lt;duckdb::RowGroupCollection&gt;, std::shared_ptr&lt;duckdb::DataTableInfo&gt;&amp;, duckdb::BlockManager&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, long const&amp;, int&gt; (5,370,940 samples, 0.01%)</title><rect x="102.5" y="1541" width="0.1" height="15.0" fill="rgb(232,195,3)" rx="2" ry="2" />
<text  x="105.50" y="1551.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;*&gt; (99,861,463 samples, 0.19%)</title><rect x="241.6" y="885" width="2.3" height="15.0" fill="rgb(209,179,25)" rx="2" ry="2" />
<text  x="244.62" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (4,800,990 samples, 0.01%)</title><rect x="1113.7" y="1781" width="0.1" height="15.0" fill="rgb(210,18,21)" rx="2" ry="2" />
<text  x="1116.65" y="1791.5" ></text>
</g>
<g >
<title>duckdb::SelectNode::~SelectNode (20,823,649 samples, 0.04%)</title><rect x="1038.5" y="1669" width="0.5" height="15.0" fill="rgb(231,214,46)" rx="2" ry="2" />
<text  x="1041.50" y="1679.5" ></text>
</g>
<g >
<title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;duckdb::Pipeline, std::allocator&lt;duckdb::Pipeline&gt;,  (6,876,065 samples, 0.01%)</title><rect x="1094.4" y="1621" width="0.1" height="15.0" fill="rgb(220,69,28)" rx="2" ry="2" />
<text  x="1097.37" y="1631.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (133,505,909 samples, 0.26%)</title><rect x="548.0" y="1717" width="3.1" height="15.0" fill="rgb(227,36,2)" rx="2" ry="2" />
<text  x="551.01" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt;::unique_ptr&lt;duckdb::SpecificFunctionMatcher, std::default_delete&lt;duckdb::SpecificFunctionMatcher&gt;, void&gt; (6,239,979 samples, 0.01%)</title><rect x="819.8" y="1829" width="0.1" height="15.0" fill="rgb(225,20,31)" rx="2" ry="2" />
<text  x="822.79" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr (7,781,183 samples, 0.02%)</title><rect x="789.5" y="1749" width="0.2" height="15.0" fill="rgb(237,33,3)" rx="2" ry="2" />
<text  x="792.51" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; &gt;::push_back (12,368,423 samples, 0.02%)</title><rect x="490.6" y="1749" width="0.3" height="15.0" fill="rgb(228,195,18)" rx="2" ry="2" />
<text  x="493.61" y="1759.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Pin (21,183,794 samples, 0.04%)</title><rect x="196.1" y="1653" width="0.5" height="15.0" fill="rgb(207,141,26)" rx="2" ry="2" />
<text  x="199.12" y="1663.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::EvictBlocksOrThrow&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (14,284,230 samples, 0.03%)</title><rect x="879.7" y="1637" width="0.4" height="15.0" fill="rgb(226,34,19)" rx="2" ry="2" />
<text  x="882.74" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;, true&gt;::~vector (14,459,309 samples, 0.03%)</title><rect x="1078.5" y="1829" width="0.3" height="15.0" fill="rgb(249,1,42)" rx="2" ry="2" />
<text  x="1081.49" y="1839.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringScanPartial (571,266,308 samples, 1.11%)</title><rect x="269.1" y="1573" width="13.1" height="15.0" fill="rgb(228,178,35)" rx="2" ry="2" />
<text  x="272.06" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Event*, std::allocator&lt;duckdb::Event*&gt; &gt;::reserve (8,835,024 samples, 0.02%)</title><rect x="1057.6" y="1813" width="0.2" height="15.0" fill="rgb(233,123,6)" rx="2" ry="2" />
<text  x="1060.57" y="1823.5" ></text>
</g>
<g >
<title>std::function&lt;void  (8,055,262 samples, 0.02%)</title><rect x="729.9" y="1701" width="0.1" height="15.0" fill="rgb(247,142,12)" rx="2" ry="2" />
<text  x="732.86" y="1711.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::~BufferHandle (12,930,727 samples, 0.03%)</title><rect x="339.3" y="1317" width="0.2" height="15.0" fill="rgb(244,207,1)" rx="2" ry="2" />
<text  x="342.25" y="1327.5" ></text>
</g>
<g >
<title>duckdb::Transaction::Get (19,567,963 samples, 0.04%)</title><rect x="421.8" y="1733" width="0.4" height="15.0" fill="rgb(234,20,49)" rx="2" ry="2" />
<text  x="424.77" y="1743.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*&gt; (22,056,053 samples, 0.04%)</title><rect x="895.3" y="1717" width="0.5" height="15.0" fill="rgb(229,168,24)" rx="2" ry="2" />
<text  x="898.30" y="1727.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt;::_M_head (58,783,581 samples, 0.11%)</title><rect x="209.2" y="1429" width="1.4" height="15.0" fill="rgb(212,82,16)" rx="2" ry="2" />
<text  x="212.21" y="1439.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;duckdb::Optimizer::Optimize (6,212,411 samples, 0.01%)</title><rect x="782.3" y="1845" width="0.2" height="15.0" fill="rgb(231,101,45)" rx="2" ry="2" />
<text  x="785.34" y="1855.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (9,949,064 samples, 0.02%)</title><rect x="615.5" y="1701" width="0.2" height="15.0" fill="rgb(225,225,2)" rx="2" ry="2" />
<text  x="618.49" y="1711.5" ></text>
</g>
<g >
<title>duckdb::BindContext::GenerateAllColumnExpressions (142,432,760 samples, 0.28%)</title><rect x="942.6" y="1717" width="3.3" height="15.0" fill="rgb(245,91,2)" rx="2" ry="2" />
<text  x="945.58" y="1727.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::Catalog&gt;::operator (15,089,061 samples, 0.03%)</title><rect x="1117.5" y="1685" width="0.3" height="15.0" fill="rgb(225,183,53)" rx="2" ry="2" />
<text  x="1120.47" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::PendingStatementInternal (7,192,561 samples, 0.01%)</title><rect x="1109.3" y="1861" width="0.2" height="15.0" fill="rgb(217,82,15)" rx="2" ry="2" />
<text  x="1112.34" y="1871.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::Scan (762,603,851 samples, 1.49%)</title><rect x="268.7" y="1605" width="17.5" height="15.0" fill="rgb(223,189,24)" rx="2" ry="2" />
<text  x="271.68" y="1615.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (22,280,028 samples, 0.04%)</title><rect x="144.5" y="1829" width="0.5" height="15.0" fill="rgb(205,180,33)" rx="2" ry="2" />
<text  x="147.51" y="1839.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::~vector (5,116,244 samples, 0.01%)</title><rect x="484.3" y="1493" width="0.1" height="15.0" fill="rgb(247,27,40)" rx="2" ry="2" />
<text  x="487.28" y="1503.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::PendingStatementOrPreparedStatementInternal (18,349,454 samples, 0.04%)</title><rect x="1108.8" y="1893" width="0.5" height="15.0" fill="rgb(229,192,43)" rx="2" ry="2" />
<text  x="1111.84" y="1903.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::DatabaseInstance,  (100,574,591 samples, 0.20%)</title><rect x="1117.4" y="1973" width="2.3" height="15.0" fill="rgb(254,74,15)" rx="2" ry="2" />
<text  x="1120.43" y="1983.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::ConjunctionExpressionMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; &gt;, void&gt; (9,224,321 samples, 0.02%)</title><rect x="793.3" y="1845" width="0.2" height="15.0" fill="rgb(250,220,12)" rx="2" ry="2" />
<text  x="796.31" y="1855.5" ></text>
</g>
<g >
<title>duckdb::DataTable::AppendLock (16,936,341 samples, 0.03%)</title><rect x="192.0" y="1781" width="0.4" height="15.0" fill="rgb(207,148,27)" rx="2" ry="2" />
<text  x="195.02" y="1791.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::CreateEmptyType (9,240,642 samples, 0.02%)</title><rect x="434.1" y="1653" width="0.2" height="15.0" fill="rgb(221,53,43)" rx="2" ry="2" />
<text  x="437.06" y="1663.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;, unsigned long&amp;&gt; (10,847,872 samples, 0.02%)</title><rect x="315.5" y="1557" width="0.2" height="15.0" fill="rgb(240,27,8)" rx="2" ry="2" />
<text  x="318.46" y="1567.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::EndPhase (485,884,671 samples, 0.95%)</title><rect x="701.5" y="1861" width="11.2" height="15.0" fill="rgb(247,179,5)" rx="2" ry="2" />
<text  x="704.55" y="1871.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ManyFunctionMatcher, std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (4,989,296 samples, 0.01%)</title><rect x="811.6" y="1845" width="0.1" height="15.0" fill="rgb(239,49,7)" rx="2" ry="2" />
<text  x="814.56" y="1855.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Pin (7,161,432 samples, 0.01%)</title><rect x="449.2" y="1669" width="0.2" height="15.0" fill="rgb(252,38,29)" rx="2" ry="2" />
<text  x="452.25" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ConjunctionExpressionMatcher::~ConjunctionExpressionMatcher (8,716,164 samples, 0.02%)</title><rect x="832.1" y="1621" width="0.2" height="15.0" fill="rgb(245,63,26)" rx="2" ry="2" />
<text  x="835.14" y="1631.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (50,447,159 samples, 0.10%)</title><rect x="487.0" y="1493" width="1.1" height="15.0" fill="rgb(233,203,9)" rx="2" ry="2" />
<text  x="489.95" y="1503.5" ></text>
</g>
<g >
<title>duckdb::Expression::Equals (4,521,509 samples, 0.01%)</title><rect x="589.9" y="1829" width="0.1" height="15.0" fill="rgb(220,9,48)" rx="2" ry="2" />
<text  x="592.94" y="1839.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorCacheBuffer,  (97,859,304 samples, 0.19%)</title><rect x="492.3" y="1701" width="2.3" height="15.0" fill="rgb(226,44,28)" rx="2" ry="2" />
<text  x="495.32" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (29,831,275 samples, 0.06%)</title><rect x="929.7" y="1669" width="0.7" height="15.0" fill="rgb(252,43,44)" rx="2" ry="2" />
<text  x="932.71" y="1679.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (12,632,677 samples, 0.02%)</title><rect x="296.5" y="1573" width="0.3" height="15.0" fill="rgb(254,178,12)" rx="2" ry="2" />
<text  x="299.51" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::GlobalSinkState, std::default_delete&lt;duckdb::GlobalSinkState&gt; &gt;::~unique_ptr (72,590,715 samples, 0.14%)</title><rect x="338.1" y="1573" width="1.7" height="15.0" fill="rgb(238,193,16)" rx="2" ry="2" />
<text  x="341.12" y="1583.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (11,475,672 samples, 0.02%)</title><rect x="698.7" y="1797" width="0.3" height="15.0" fill="rgb(242,53,53)" rx="2" ry="2" />
<text  x="701.69" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalExpressionScan, std::default_delete&lt;duckdb::PhysicalExpressionScan&gt;, true&gt;::~unique_ptr (61,687,632 samples, 0.12%)</title><rect x="915.1" y="1781" width="1.4" height="15.0" fill="rgb(225,216,0)" rx="2" ry="2" />
<text  x="918.07" y="1791.5" ></text>
</g>
<g >
<title>duckdb::LogicalProjection::GetName[abi:cxx11] (6,001,411 samples, 0.01%)</title><rect x="550.3" y="1685" width="0.2" height="15.0" fill="rgb(239,154,53)" rx="2" ry="2" />
<text  x="553.33" y="1695.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Vector&gt; &gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (11,387,787 samples, 0.02%)</title><rect x="494.9" y="1749" width="0.2" height="15.0" fill="rgb(218,147,13)" rx="2" ry="2" />
<text  x="497.87" y="1759.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::SelectionData,  (11,324,232 samples, 0.02%)</title><rect x="266.8" y="1637" width="0.3" height="15.0" fill="rgb(229,15,17)" rx="2" ry="2" />
<text  x="269.80" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::ReferenceEquality&lt;duckdb::SchemaCatalogEntry&gt;, duckdb::ReferenceHashFunction&lt;duckdb::SchemaCatalogEntry&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_rehash_aux (8,395,074 samples, 0.02%)</title><rect x="1007.3" y="1685" width="0.2" height="15.0" fill="rgb(212,4,22)" rx="2" ry="2" />
<text  x="1010.28" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr&lt;duckdb::LikeOptimizationRule, std::default_delete&lt;std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt; &gt;, void&gt; (10,774,483 samples, 0.02%)</title><rect x="823.7" y="1877" width="0.2" height="15.0" fill="rgb(241,97,35)" rx="2" ry="2" />
<text  x="826.66" y="1887.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt; (5,074,733 samples, 0.01%)</title><rect x="809.4" y="1733" width="0.2" height="15.0" fill="rgb(211,213,5)" rx="2" ry="2" />
<text  x="812.44" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PipelineRenderNode, std::default_delete&lt;duckdb::PipelineRenderNode&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PipelineRenderNode&gt;, void&gt; (4,556,054 samples, 0.01%)</title><rect x="1069.1" y="1749" width="0.1" height="15.0" fill="rgb(221,32,37)" rx="2" ry="2" />
<text  x="1072.12" y="1759.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Vector&gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (23,079,477 samples, 0.04%)</title><rect x="488.8" y="1701" width="0.5" height="15.0" fill="rgb(216,14,8)" rx="2" ry="2" />
<text  x="491.78" y="1711.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (7,507,795 samples, 0.01%)</title><rect x="247.7" y="1493" width="0.2" height="15.0" fill="rgb(242,93,53)" rx="2" ry="2" />
<text  x="250.73" y="1503.5" ></text>
</g>
<g >
<title>duckdb::PendingQueryResult::ExecuteTaskInternal (5,188,125,134 samples, 10.11%)</title><rect x="396.4" y="1941" width="119.4" height="15.0" fill="rgb(239,10,47)" rx="2" ry="2" />
<text  x="399.40" y="1951.5" >duckdb::Pendin..</text>
</g>
<g >
<title>unmap_page_range (5,714,935 samples, 0.01%)</title><rect x="1172.9" y="1845" width="0.2" height="15.0" fill="rgb(242,188,40)" rx="2" ry="2" />
<text  x="1175.92" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (35,290,124 samples, 0.07%)</title><rect x="887.3" y="1717" width="0.8" height="15.0" fill="rgb(235,201,45)" rx="2" ry="2" />
<text  x="890.33" y="1727.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::Construct (5,073,480 samples, 0.01%)</title><rect x="424.9" y="1493" width="0.1" height="15.0" fill="rgb(243,188,53)" rx="2" ry="2" />
<text  x="427.86" y="1503.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::PipelineInitializeEvent, std::allocator&lt;duckdb::PipelineInitializeEvent&gt;,  (26,098,398 samples, 0.05%)</title><rect x="356.6" y="1701" width="0.6" height="15.0" fill="rgb(231,55,36)" rx="2" ry="2" />
<text  x="359.63" y="1711.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::deque (8,981,929 samples, 0.02%)</title><rect x="404.4" y="1829" width="0.2" height="15.0" fill="rgb(253,135,13)" rx="2" ry="2" />
<text  x="407.41" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ClientContextLock, std::default_delete&lt;duckdb::ClientContextLock&gt;, true&gt;::operator* (9,323,079 samples, 0.02%)</title><rect x="1106.4" y="1973" width="0.3" height="15.0" fill="rgb(215,13,0)" rx="2" ry="2" />
<text  x="1109.45" y="1983.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::Rule&gt; &gt; (9,037,533 samples, 0.02%)</title><rect x="827.2" y="1765" width="0.2" height="15.0" fill="rgb(250,217,41)" rx="2" ry="2" />
<text  x="830.17" y="1775.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (141,466,675 samples, 0.28%)</title><rect x="486.5" y="1765" width="3.3" height="15.0" fill="rgb(244,174,53)" rx="2" ry="2" />
<text  x="489.52" y="1775.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_cleanup (14,514,945 samples, 0.03%)</title><rect x="19.4" y="1973" width="0.3" height="15.0" fill="rgb(252,186,50)" rx="2" ry="2" />
<text  x="22.41" y="1983.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (13,229,236 samples, 0.03%)</title><rect x="854.9" y="1781" width="0.3" height="15.0" fill="rgb(224,52,16)" rx="2" ry="2" />
<text  x="857.89" y="1791.5" ></text>
</g>
<g >
<title>duckdb::BoundColumnRefExpression::Copy (37,360,543 samples, 0.07%)</title><rect x="582.7" y="1861" width="0.9" height="15.0" fill="rgb(234,76,30)" rx="2" ry="2" />
<text  x="585.75" y="1871.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::PipelineExecutor (495,264,251 samples, 0.97%)</title><rect x="486.0" y="1845" width="11.4" height="15.0" fill="rgb(241,204,37)" rx="2" ry="2" />
<text  x="489.02" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (8,457,084 samples, 0.02%)</title><rect x="552.6" y="1765" width="0.2" height="15.0" fill="rgb(232,136,34)" rx="2" ry="2" />
<text  x="555.60" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (8,256,638 samples, 0.02%)</title><rect x="1024.7" y="1781" width="0.1" height="15.0" fill="rgb(233,172,52)" rx="2" ry="2" />
<text  x="1027.65" y="1791.5" ></text>
</g>
<g >
<title>duckdb::OperatorInformation::operator= (7,240,888 samples, 0.01%)</title><rect x="466.4" y="1781" width="0.2" height="15.0" fill="rgb(232,201,18)" rx="2" ry="2" />
<text  x="469.45" y="1791.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::EndOperator (10,332,094 samples, 0.02%)</title><rect x="105.7" y="1781" width="0.2" height="15.0" fill="rgb(249,60,39)" rx="2" ry="2" />
<text  x="108.70" y="1791.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;duckdb::BoundColumnRefExpression&gt; &gt;::__uniq_ptr_impl (4,994,824 samples, 0.01%)</title><rect x="951.9" y="1573" width="0.1" height="15.0" fill="rgb(216,55,46)" rx="2" ry="2" />
<text  x="954.91" y="1583.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;::unique_ptr (8,708,727 samples, 0.02%)</title><rect x="379.1" y="1829" width="0.2" height="15.0" fill="rgb(206,61,17)" rx="2" ry="2" />
<text  x="382.10" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BindContext::GetBinding (8,169,902 samples, 0.02%)</title><rect x="950.9" y="1637" width="0.2" height="15.0" fill="rgb(226,32,38)" rx="2" ry="2" />
<text  x="953.92" y="1647.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::emplace&lt;std::pair&lt;duckdb::PhysicalOperator const&amp;, duckdb::QueryProfiler::TreeNode&amp;&gt; &gt; (47,055,677 samples, 0.09%)</title><rect x="1087.3" y="1813" width="1.1" height="15.0" fill="rgb(234,44,54)" rx="2" ry="2" />
<text  x="1090.32" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_fastpath (11,710,047 samples, 0.02%)</title><rect x="392.9" y="1541" width="0.3" height="15.0" fill="rgb(222,63,36)" rx="2" ry="2" />
<text  x="395.92" y="1551.5" ></text>
</g>
<g >
<title>__memset_sse2_unaligned_erms (4,372,606 samples, 0.01%)</title><rect x="256.9" y="1477" width="0.1" height="15.0" fill="rgb(221,210,11)" rx="2" ry="2" />
<text  x="259.92" y="1487.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::AllocatorDebugInfo, std::default_delete&lt;duckdb::AllocatorDebugInfo&gt;, true&gt;::~unique_ptr (9,673,386 samples, 0.02%)</title><rect x="324.7" y="1477" width="0.2" height="15.0" fill="rgb(251,73,35)" rx="2" ry="2" />
<text  x="327.70" y="1487.5" ></text>
</g>
<g >
<title>duckdb::ChunkMetaData::~ChunkMetaData (6,535,190 samples, 0.01%)</title><rect x="379.6" y="1893" width="0.1" height="15.0" fill="rgb(206,89,7)" rx="2" ry="2" />
<text  x="382.57" y="1903.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Pipeline,  (10,224,811 samples, 0.02%)</title><rect x="1081.1" y="1605" width="0.2" height="15.0" fill="rgb(218,33,4)" rx="2" ry="2" />
<text  x="1084.05" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TopN::Optimize (8,980,433 samples, 0.02%)</title><rect x="768.5" y="1781" width="0.2" height="15.0" fill="rgb(246,106,14)" rx="2" ry="2" />
<text  x="771.47" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, unsigned long&amp;, unsigned long&amp;&gt; (10,573,276 samples, 0.02%)</title><rect x="566.5" y="1733" width="0.2" height="15.0" fill="rgb(225,113,32)" rx="2" ry="2" />
<text  x="569.50" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (4,588,425 samples, 0.01%)</title><rect x="471.7" y="1685" width="0.1" height="15.0" fill="rgb(206,168,36)" rx="2" ry="2" />
<text  x="474.73" y="1695.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (2,355,465,807 samples, 4.59%)</title><rect x="91.1" y="2021" width="54.2" height="15.0" fill="rgb(247,156,38)" rx="2" ry="2" />
<text  x="94.09" y="2031.5" >std::..</text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalInsert, std::default_delete&lt;duckdb::LogicalInsert&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::LogicalInsert&gt;, void&gt; (7,662,926 samples, 0.01%)</title><rect x="1013.4" y="1797" width="0.2" height="15.0" fill="rgb(229,223,54)" rx="2" ry="2" />
<text  x="1016.38" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TableStatisticsLock, std::default_delete&lt;duckdb::TableStatisticsLock&gt;, true&gt;::~unique_ptr (6,013,433 samples, 0.01%)</title><rect x="231.5" y="1653" width="0.1" height="15.0" fill="rgb(212,220,4)" rx="2" ry="2" />
<text  x="234.48" y="1663.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (21,201,657 samples, 0.04%)</title><rect x="621.7" y="1685" width="0.5" height="15.0" fill="rgb(231,113,39)" rx="2" ry="2" />
<text  x="624.70" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::unique_ptr&lt;duckdb::LogicalProjection, std::default_delete&lt;duckdb::LogicalProjection&gt;, void&gt; (5,195,952 samples, 0.01%)</title><rect x="978.9" y="1749" width="0.1" height="15.0" fill="rgb(242,8,8)" rx="2" ry="2" />
<text  x="981.88" y="1759.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (85,288,269 samples, 0.17%)</title><rect x="896.0" y="1589" width="2.0" height="15.0" fill="rgb(243,72,8)" rx="2" ry="2" />
<text  x="898.99" y="1599.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (5,504,722 samples, 0.01%)</title><rect x="108.1" y="1557" width="0.1" height="15.0" fill="rgb(253,113,51)" rx="2" ry="2" />
<text  x="111.09" y="1567.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringInitSegment (48,182,654 samples, 0.09%)</title><rect x="443.6" y="1637" width="1.1" height="15.0" fill="rgb(223,94,4)" rx="2" ry="2" />
<text  x="446.59" y="1647.5" ></text>
</g>
<g >
<title>duckdb::LogicalInsert::GetColumnBindings (7,647,600 samples, 0.01%)</title><rect x="846.5" y="1861" width="0.1" height="15.0" fill="rgb(215,213,1)" rx="2" ry="2" />
<text  x="849.47" y="1871.5" ></text>
</g>
<g >
<title>duckdb::QueryGraph::~QueryGraph (15,711,173 samples, 0.03%)</title><rect x="756.3" y="1765" width="0.4" height="15.0" fill="rgb(244,182,44)" rx="2" ry="2" />
<text  x="759.34" y="1775.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (85,545,655 samples, 0.17%)</title><rect x="1122.9" y="1813" width="2.0" height="15.0" fill="rgb(210,48,28)" rx="2" ry="2" />
<text  x="1125.95" y="1823.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (5,089,175 samples, 0.01%)</title><rect x="1026.9" y="1813" width="0.1" height="15.0" fill="rgb(221,158,9)" rx="2" ry="2" />
<text  x="1029.93" y="1823.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::~unordered_map (18,023,981 samples, 0.04%)</title><rect x="1016.9" y="1477" width="0.4" height="15.0" fill="rgb(231,80,52)" rx="2" ry="2" />
<text  x="1019.85" y="1487.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::Destroy (9,909,583 samples, 0.02%)</title><rect x="226.9" y="1429" width="0.2" height="15.0" fill="rgb(213,214,17)" rx="2" ry="2" />
<text  x="229.89" y="1439.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::~shared_ptr (61,768,671 samples, 0.12%)</title><rect x="297.3" y="1589" width="1.5" height="15.0" fill="rgb(238,147,39)" rx="2" ry="2" />
<text  x="300.34" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; (10,980,403 samples, 0.02%)</title><rect x="859.3" y="1797" width="0.2" height="15.0" fill="rgb(219,206,53)" rx="2" ry="2" />
<text  x="862.27" y="1807.5" ></text>
</g>
<g >
<title>duckdb::SelectStatement::~SelectStatement (27,502,774 samples, 0.05%)</title><rect x="1038.4" y="1749" width="0.6" height="15.0" fill="rgb(254,204,51)" rx="2" ry="2" />
<text  x="1041.37" y="1759.5" ></text>
</g>
<g >
<title>duckdb::DuckCatalog::GetSchema (101,061,128 samples, 0.20%)</title><rect x="1002.1" y="1749" width="2.3" height="15.0" fill="rgb(225,3,45)" rx="2" ry="2" />
<text  x="1005.08" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_get_from_ind (4,647,104 samples, 0.01%)</title><rect x="380.4" y="1685" width="0.1" height="15.0" fill="rgb(239,172,42)" rx="2" ry="2" />
<text  x="383.41" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt;, std::allocator&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; &gt;::_S_relocate (6,190,178 samples, 0.01%)</title><rect x="1001.5" y="1637" width="0.1" height="15.0" fill="rgb(238,68,39)" rx="2" ry="2" />
<text  x="1004.49" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; (17,566,664 samples, 0.03%)</title><rect x="869.1" y="1733" width="0.4" height="15.0" fill="rgb(218,187,11)" rx="2" ry="2" />
<text  x="872.05" y="1743.5" ></text>
</g>
<g >
<title>std::unique_lock&lt;std::mutex&gt;::operator= (9,547,558 samples, 0.02%)</title><rect x="192.1" y="1765" width="0.3" height="15.0" fill="rgb(223,4,6)" rx="2" ry="2" />
<text  x="195.14" y="1775.5" ></text>
</g>
<g >
<title>std::__shared_ptr_access&lt;duckdb::DatabaseInstance,  (5,126,324 samples, 0.01%)</title><rect x="722.4" y="1861" width="0.2" height="15.0" fill="rgb(241,211,1)" rx="2" ry="2" />
<text  x="725.45" y="1871.5" ></text>
</g>
<g >
<title>duckdb::PipelineEvent::PipelineEvent (7,304,074 samples, 0.01%)</title><rect x="1050.1" y="1685" width="0.2" height="15.0" fill="rgb(249,138,30)" rx="2" ry="2" />
<text  x="1053.13" y="1695.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateChildren (92,008,370 samples, 0.18%)</title><rect x="765.9" y="1781" width="2.1" height="15.0" fill="rgb(219,53,4)" rx="2" ry="2" />
<text  x="768.91" y="1791.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (90,926,607 samples, 0.18%)</title><rect x="762.5" y="1701" width="2.1" height="15.0" fill="rgb(207,14,15)" rx="2" ry="2" />
<text  x="765.51" y="1711.5" ></text>
</g>
<g >
<title>duckdb::SingleFileStorageManager::CreateCheckpoint (82,717,155 samples, 0.16%)</title><rect x="1117.8" y="1301" width="1.9" height="15.0" fill="rgb(238,28,14)" rx="2" ry="2" />
<text  x="1120.81" y="1311.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::_M_ptr (6,760,310 samples, 0.01%)</title><rect x="774.2" y="1829" width="0.2" height="15.0" fill="rgb(237,3,6)" rx="2" ry="2" />
<text  x="777.21" y="1839.5" ></text>
</g>
<g >
<title>__jbd2_log_start_commit (6,623,851 samples, 0.01%)</title><rect x="252.1" y="1605" width="0.2" height="15.0" fill="rgb(216,127,13)" rx="2" ry="2" />
<text  x="255.11" y="1615.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionMatcher&gt; (5,465,968 samples, 0.01%)</title><rect x="807.6" y="1845" width="0.2" height="15.0" fill="rgb(222,109,43)" rx="2" ry="2" />
<text  x="810.65" y="1855.5" ></text>
</g>
<g >
<title>futex_wake (20,818,544 samples, 0.04%)</title><rect x="1058.6" y="1669" width="0.5" height="15.0" fill="rgb(226,151,5)" rx="2" ry="2" />
<text  x="1061.63" y="1679.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::reference_wrapper&lt;duckdb::CommonTableExpressionInfo&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::reference_wrapper&lt;duckdb::CommonTableExpressionInfo&gt; &gt; &gt; &gt;::~unordered_map (7,475,206 samples, 0.01%)</title><rect x="1018.0" y="1701" width="0.2" height="15.0" fill="rgb(241,85,38)" rx="2" ry="2" />
<text  x="1021.04" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::_M_range_initialize&lt;duckdb::ColumnBinding const*&gt; (4,621,414 samples, 0.01%)</title><rect x="846.5" y="1813" width="0.1" height="15.0" fill="rgb(246,20,22)" rx="2" ry="2" />
<text  x="849.54" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&amp;&gt; (17,710,001 samples, 0.03%)</title><rect x="494.8" y="1765" width="0.4" height="15.0" fill="rgb(231,158,19)" rx="2" ry="2" />
<text  x="497.83" y="1775.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::DataTable&gt;, duckdb::unique_ptr&lt;duckdb::TableAppendState, std::default_delete&lt;duckdb::TableAppendState&gt;, true&gt;, duckdb::ReferenceHashFunction&lt;duckdb::DataTable&gt;, duckdb::ReferenceEquality&lt;duckdb::DataTable&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::DataTable&gt; const, duckdb::unique_ptr&lt;duckdb::TableAppendState, std::default_delete&lt;duckdb::TableAppendState&gt;, true&gt; &gt; &gt; &gt;::unordered_map (5,204,181 samples, 0.01%)</title><rect x="246.5" y="1797" width="0.1" height="15.0" fill="rgb(217,87,48)" rx="2" ry="2" />
<text  x="249.46" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::unique_ptr&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;duckdb::BoundColumnRefExpression&gt;, void&gt; (6,743,308 samples, 0.01%)</title><rect x="583.5" y="1829" width="0.1" height="15.0" fill="rgb(205,24,31)" rx="2" ry="2" />
<text  x="586.45" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::TypeMatcherId, std::default_delete&lt;std::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt; &gt;, void&gt; (20,114,553 samples, 0.04%)</title><rect x="805.5" y="1845" width="0.5" height="15.0" fill="rgb(249,11,35)" rx="2" ry="2" />
<text  x="808.54" y="1855.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Task&gt;::operator= (9,603,653 samples, 0.02%)</title><rect x="109.7" y="1813" width="0.2" height="15.0" fill="rgb(254,218,1)" rx="2" ry="2" />
<text  x="112.67" y="1823.5" ></text>
</g>
<g >
<title>duckdb::StringUtil::Split (30,224,596 samples, 0.06%)</title><rect x="612.6" y="1765" width="0.7" height="15.0" fill="rgb(247,223,27)" rx="2" ry="2" />
<text  x="615.60" y="1775.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperator (94,425,943 samples, 0.18%)</title><rect x="728.0" y="1797" width="2.2" height="15.0" fill="rgb(253,182,50)" rx="2" ry="2" />
<text  x="731.01" y="1807.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::Vector*&gt; (62,565,454 samples, 0.12%)</title><rect x="297.3" y="1637" width="1.5" height="15.0" fill="rgb(247,165,15)" rx="2" ry="2" />
<text  x="300.32" y="1647.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (4,557,205 samples, 0.01%)</title><rect x="719.9" y="1797" width="0.1" height="15.0" fill="rgb(216,194,4)" rx="2" ry="2" />
<text  x="722.88" y="1807.5" ></text>
</g>
<g >
<title>__asan::asan_memalign (9,209,487 samples, 0.02%)</title><rect x="87.9" y="2005" width="0.2" height="15.0" fill="rgb(224,0,25)" rx="2" ry="2" />
<text  x="90.91" y="2015.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::PreparedStatementData,  (620,798,029 samples, 1.21%)</title><rect x="337.3" y="1797" width="14.3" height="15.0" fill="rgb(228,183,1)" rx="2" ry="2" />
<text  x="340.33" y="1807.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::PhysicalColumnDataScan, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, duckdb::PhysicalOperatorType, unsigned long&gt; (50,219,670 samples, 0.10%)</title><rect x="912.3" y="1781" width="1.2" height="15.0" fill="rgb(209,36,29)" rx="2" ry="2" />
<text  x="915.30" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::Binder&gt; &gt;::construct&lt;duckdb::Binder, bool, duckdb::ClientContext&amp;, std::shared_ptr&lt;duckdb::Binder&gt;, bool&amp;&gt; (52,581,084 samples, 0.10%)</title><rect x="984.9" y="1717" width="1.2" height="15.0" fill="rgb(234,112,35)" rx="2" ry="2" />
<text  x="987.91" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::Query (27,914,223 samples, 0.05%)</title><rect x="1108.6" y="1925" width="0.7" height="15.0" fill="rgb(254,168,51)" rx="2" ry="2" />
<text  x="1111.62" y="1935.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (66,571,378 samples, 0.13%)</title><rect x="492.7" y="1573" width="1.5" height="15.0" fill="rgb(252,134,13)" rx="2" ry="2" />
<text  x="495.68" y="1583.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9,292,559 samples, 0.02%)</title><rect x="954.7" y="1557" width="0.2" height="15.0" fill="rgb(208,59,14)" rx="2" ry="2" />
<text  x="957.71" y="1567.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BlockMetaData, std::allocator&lt;duckdb::BlockMetaData&gt; &gt;::emplace_back&lt;duckdb::BlockMetaData&gt; (17,292,408 samples, 0.03%)</title><rect x="882.1" y="1653" width="0.4" height="15.0" fill="rgb(239,119,42)" rx="2" ry="2" />
<text  x="885.08" y="1663.5" ></text>
</g>
<g >
<title>duckdb::BoundSelectNode::~BoundSelectNode (73,132,334 samples, 0.14%)</title><rect x="979.8" y="1749" width="1.7" height="15.0" fill="rgb(241,183,8)" rx="2" ry="2" />
<text  x="982.83" y="1759.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (6,974,477 samples, 0.01%)</title><rect x="838.9" y="1701" width="0.1" height="15.0" fill="rgb(239,122,30)" rx="2" ry="2" />
<text  x="841.88" y="1711.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::HasNode (7,277,660 samples, 0.01%)</title><rect x="579.4" y="1797" width="0.1" height="15.0" fill="rgb(229,59,33)" rx="2" ry="2" />
<text  x="582.36" y="1807.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::ConstructManagedBuffer (28,470,587 samples, 0.06%)</title><rect x="103.0" y="1605" width="0.6" height="15.0" fill="rgb(210,189,33)" rx="2" ry="2" />
<text  x="105.99" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBoxContent (9,900,783 samples, 0.02%)</title><rect x="78.5" y="2021" width="0.2" height="15.0" fill="rgb(246,193,8)" rx="2" ry="2" />
<text  x="81.48" y="2031.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt;, true&gt; &gt; (25,402,622 samples, 0.05%)</title><rect x="539.6" y="1877" width="0.6" height="15.0" fill="rgb(210,207,8)" rx="2" ry="2" />
<text  x="542.65" y="1887.5" ></text>
</g>
<g >
<title>do_syscall_64 (17,460,022 samples, 0.03%)</title><rect x="93.5" y="1637" width="0.4" height="15.0" fill="rgb(206,71,24)" rx="2" ry="2" />
<text  x="96.49" y="1647.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (18,788,291 samples, 0.04%)</title><rect x="107.3" y="1669" width="0.4" height="15.0" fill="rgb(251,68,47)" rx="2" ry="2" />
<text  x="110.28" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SpecificFunctionMatcher, std::default_delete&lt;duckdb::SpecificFunctionMatcher&gt; &gt;::get (4,678,472 samples, 0.01%)</title><rect x="797.8" y="1797" width="0.1" height="15.0" fill="rgb(239,108,10)" rx="2" ry="2" />
<text  x="800.79" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (26,982,841 samples, 0.05%)</title><rect x="471.7" y="1717" width="0.6" height="15.0" fill="rgb(210,114,7)" rx="2" ry="2" />
<text  x="474.70" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SpecificExpressionTypeMatcher, std::default_delete&lt;duckdb::SpecificExpressionTypeMatcher&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::SpecificExpressionTypeMatcher&gt;, void&gt; (5,404,345 samples, 0.01%)</title><rect x="803.7" y="1829" width="0.1" height="15.0" fill="rgb(220,5,39)" rx="2" ry="2" />
<text  x="806.65" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1701" width="0.1" height="15.0" fill="rgb(213,162,21)" rx="2" ry="2" />
<text  x="14.25" y="1711.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, true&gt;::~vector (28,317,645 samples, 0.06%)</title><rect x="483.9" y="1733" width="0.7" height="15.0" fill="rgb(219,87,34)" rx="2" ry="2" />
<text  x="486.91" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1365" width="0.1" height="15.0" fill="rgb(207,181,31)" rx="2" ry="2" />
<text  x="14.25" y="1375.5" ></text>
</g>
<g >
<title>duckdb::VectorMetaData::VectorMetaData (4,441,549 samples, 0.01%)</title><rect x="882.9" y="1717" width="0.1" height="15.0" fill="rgb(208,72,54)" rx="2" ry="2" />
<text  x="885.93" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (16,412,525 samples, 0.03%)</title><rect x="798.1" y="1813" width="0.4" height="15.0" fill="rgb(226,110,40)" rx="2" ry="2" />
<text  x="801.08" y="1823.5" ></text>
</g>
<g >
<title>duckdb::FilterPushdown::Rewrite (183,454,622 samples, 0.36%)</title><rect x="745.3" y="1813" width="4.2" height="15.0" fill="rgb(242,1,39)" rx="2" ry="2" />
<text  x="748.29" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Executor::VerifyScheduledEventsInternal (14,525,966 samples, 0.03%)</title><rect x="1054.7" y="1781" width="0.3" height="15.0" fill="rgb(212,163,15)" rx="2" ry="2" />
<text  x="1057.68" y="1791.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::LogicalType&gt; &gt;::construct&lt;duckdb::LogicalType, duckdb::LogicalType const&amp;&gt; (7,099,109 samples, 0.01%)</title><rect x="865.1" y="1717" width="0.2" height="15.0" fill="rgb(232,148,53)" rx="2" ry="2" />
<text  x="868.12" y="1727.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*, std::vector&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; &gt; &gt; (4,627,958 samples, 0.01%)</title><rect x="647.2" y="1813" width="0.1" height="15.0" fill="rgb(254,86,33)" rx="2" ry="2" />
<text  x="650.17" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (4,782,022 samples, 0.01%)</title><rect x="717.5" y="1797" width="0.1" height="15.0" fill="rgb(210,27,50)" rx="2" ry="2" />
<text  x="720.50" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt; &gt; (33,638,389 samples, 0.07%)</title><rect x="1088.5" y="1813" width="0.7" height="15.0" fill="rgb(236,229,13)" rx="2" ry="2" />
<text  x="1091.47" y="1823.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RenderTreeNode&gt; (5,462,358 samples, 0.01%)</title><rect x="595.9" y="1653" width="0.1" height="15.0" fill="rgb(207,134,52)" rx="2" ry="2" />
<text  x="598.90" y="1663.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_metadata_read (4,935,688 samples, 0.01%)</title><rect x="896.6" y="1301" width="0.1" height="15.0" fill="rgb(206,200,0)" rx="2" ry="2" />
<text  x="899.63" y="1311.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (14,234,011 samples, 0.03%)</title><rect x="931.1" y="1685" width="0.4" height="15.0" fill="rgb(249,6,9)" rx="2" ry="2" />
<text  x="934.13" y="1695.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::FileBuffer&gt;::operator (60,507,330 samples, 0.12%)</title><rect x="239.6" y="613" width="1.4" height="15.0" fill="rgb(225,147,31)" rx="2" ry="2" />
<text  x="242.58" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6,008,222 samples, 0.01%)</title><rect x="731.9" y="1701" width="0.2" height="15.0" fill="rgb(209,46,39)" rx="2" ry="2" />
<text  x="734.93" y="1711.5" ></text>
</g>
<g >
<title>duckdb::FindCompressionFunction (48,875,355 samples, 0.10%)</title><rect x="434.7" y="1653" width="1.1" height="15.0" fill="rgb(220,62,39)" rx="2" ry="2" />
<text  x="437.68" y="1663.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionMatcher&gt;::operator (8,716,164 samples, 0.02%)</title><rect x="832.1" y="1637" width="0.2" height="15.0" fill="rgb(251,151,34)" rx="2" ry="2" />
<text  x="835.14" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FunctionExpressionMatcher, std::default_delete&lt;duckdb::FunctionExpressionMatcher&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::FunctionExpressionMatcher&gt;, void&gt; (4,597,783 samples, 0.01%)</title><rect x="784.6" y="1829" width="0.1" height="15.0" fill="rgb(253,84,38)" rx="2" ry="2" />
<text  x="787.61" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (11,799,564 samples, 0.02%)</title><rect x="348.7" y="789" width="0.3" height="15.0" fill="rgb(215,152,22)" rx="2" ry="2" />
<text  x="351.72" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5,528,264 samples, 0.01%)</title><rect x="1029.9" y="1813" width="0.1" height="15.0" fill="rgb(216,143,22)" rx="2" ry="2" />
<text  x="1032.90" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_deallocate_nodes (19,895,793 samples, 0.04%)</title><rect x="682.5" y="1749" width="0.4" height="15.0" fill="rgb(224,119,24)" rx="2" ry="2" />
<text  x="685.46" y="1759.5" ></text>
</g>
<g >
<title>duckdb::UnifiedVectorFormat::~UnifiedVectorFormat (10,826,048 samples, 0.02%)</title><rect x="374.7" y="1813" width="0.3" height="15.0" fill="rgb(205,185,38)" rx="2" ry="2" />
<text  x="377.72" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::unique_ptr&lt;duckdb::InClauseSimplificationRule, std::default_delete&lt;duckdb::InClauseSimplificationRule&gt;, void&gt; (10,326,716 samples, 0.02%)</title><rect x="823.4" y="1861" width="0.3" height="15.0" fill="rgb(224,155,24)" rx="2" ry="2" />
<text  x="826.43" y="1871.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt; &gt; (33,788,092 samples, 0.07%)</title><rect x="1036.1" y="1717" width="0.7" height="15.0" fill="rgb(245,223,2)" rx="2" ry="2" />
<text  x="1039.07" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt;, true&gt;::~_Hashtable_ebo_helper (4,658,002 samples, 0.01%)</title><rect x="671.1" y="1749" width="0.1" height="15.0" fill="rgb(247,27,39)" rx="2" ry="2" />
<text  x="674.11" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CatalogSet, std::default_delete&lt;duckdb::CatalogSet&gt; &gt;::~unique_ptr (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1621" width="0.3" height="15.0" fill="rgb(246,199,45)" rx="2" ry="2" />
<text  x="1120.47" y="1631.5" ></text>
</g>
<g >
<title>duckdb::ColumnAppendState::~ColumnAppendState (4,558,187 samples, 0.01%)</title><rect x="339.6" y="1301" width="0.1" height="15.0" fill="rgb(209,8,12)" rx="2" ry="2" />
<text  x="342.64" y="1311.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::~unique_ptr (10,740,617 samples, 0.02%)</title><rect x="1077.8" y="1717" width="0.3" height="15.0" fill="rgb(247,1,49)" rx="2" ry="2" />
<text  x="1080.83" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalIndex, std::allocator&lt;duckdb::LogicalIndex&gt; &gt;::push_back (29,154,657 samples, 0.06%)</title><rect x="1019.7" y="1829" width="0.7" height="15.0" fill="rgb(205,105,11)" rx="2" ry="2" />
<text  x="1022.75" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::unique_ptr (5,987,877 samples, 0.01%)</title><rect x="1068.1" y="1717" width="0.1" height="15.0" fill="rgb(224,22,3)" rx="2" ry="2" />
<text  x="1071.08" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1493" width="1.9" height="15.0" fill="rgb(251,69,51)" rx="2" ry="2" />
<text  x="1120.81" y="1503.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ColumnRefExpression, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (28,894,560 samples, 0.06%)</title><rect x="943.8" y="1701" width="0.6" height="15.0" fill="rgb(253,134,31)" rx="2" ry="2" />
<text  x="946.76" y="1711.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::SelectionData&gt; &gt;::construct&lt;duckdb::SelectionData, unsigned long&amp;&gt; (8,336,186 samples, 0.02%)</title><rect x="296.6" y="1541" width="0.2" height="15.0" fill="rgb(232,49,53)" rx="2" ry="2" />
<text  x="299.58" y="1551.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::deallocate (5,994,381 samples, 0.01%)</title><rect x="653.9" y="1701" width="0.2" height="15.0" fill="rgb(213,197,15)" rx="2" ry="2" />
<text  x="656.95" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RenderTreeNode&gt;, void&gt; (4,621,114 samples, 0.01%)</title><rect x="552.7" y="1749" width="0.1" height="15.0" fill="rgb(244,68,36)" rx="2" ry="2" />
<text  x="555.69" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_extent_alloc_large (9,135,882 samples, 0.02%)</title><rect x="103.2" y="1317" width="0.2" height="15.0" fill="rgb(208,77,5)" rx="2" ry="2" />
<text  x="106.19" y="1327.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, true&gt; &gt;::allocate (8,968,292 samples, 0.02%)</title><rect x="39.1" y="2021" width="0.2" height="15.0" fill="rgb(216,199,17)" rx="2" ry="2" />
<text  x="42.08" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (56,063,754 samples, 0.11%)</title><rect x="44.1" y="2005" width="1.3" height="15.0" fill="rgb(236,213,1)" rx="2" ry="2" />
<text  x="47.13" y="2015.5" ></text>
</g>
<g >
<title>__sanitizer::StackDepotBase&lt;__sanitizer::StackDepotNode, 1, 20&gt;::Put (493,108,036 samples, 0.96%)</title><rect x="56.5" y="2021" width="11.3" height="15.0" fill="rgb(243,73,11)" rx="2" ry="2" />
<text  x="59.50" y="2031.5" ></text>
</g>
<g >
<title>duckdb::GetCatalogEntries (36,090,056 samples, 0.07%)</title><rect x="1008.6" y="1781" width="0.8" height="15.0" fill="rgb(237,166,45)" rx="2" ry="2" />
<text  x="1011.56" y="1791.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTree&lt;duckdb::PipelineRenderNode&gt; (109,223,699 samples, 0.21%)</title><rect x="1066.5" y="1765" width="2.5" height="15.0" fill="rgb(246,13,22)" rx="2" ry="2" />
<text  x="1069.53" y="1775.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::BufferHandle, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt; &gt;::operator[] (27,631,335 samples, 0.05%)</title><rect x="471.7" y="1733" width="0.6" height="15.0" fill="rgb(224,180,40)" rx="2" ry="2" />
<text  x="474.69" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::unique_ptr (7,391,019 samples, 0.01%)</title><rect x="976.6" y="1717" width="0.2" height="15.0" fill="rgb(252,194,33)" rx="2" ry="2" />
<text  x="979.61" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (26,534,467 samples, 0.05%)</title><rect x="1023.2" y="1829" width="0.6" height="15.0" fill="rgb(245,33,51)" rx="2" ry="2" />
<text  x="1026.18" y="1839.5" ></text>
</g>
<g >
<title>duckdb::Catalog::LookupEntryInternal (216,405,524 samples, 0.42%)</title><rect x="1001.9" y="1765" width="5.0" height="15.0" fill="rgb(208,228,29)" rx="2" ry="2" />
<text  x="1004.90" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnDataCopyFunction, std::allocator&lt;duckdb::ColumnDataCopyFunction&gt; &gt;::reserve (8,685,235 samples, 0.02%)</title><rect x="97.4" y="1717" width="0.2" height="15.0" fill="rgb(217,10,31)" rx="2" ry="2" />
<text  x="100.36" y="1727.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (5,600,913 samples, 0.01%)</title><rect x="37.4" y="1989" width="0.1" height="15.0" fill="rgb(232,178,51)" rx="2" ry="2" />
<text  x="40.41" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (77,428,712 samples, 0.15%)</title><rect x="920.5" y="1845" width="1.8" height="15.0" fill="rgb(212,209,11)" rx="2" ry="2" />
<text  x="923.55" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LocalSourceState, std::default_delete&lt;duckdb::LocalSourceState&gt; &gt;::~unique_ptr (8,836,169 samples, 0.02%)</title><rect x="500.7" y="1781" width="0.2" height="15.0" fill="rgb(208,207,20)" rx="2" ry="2" />
<text  x="503.70" y="1791.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, duckdb::ProgressBar*, std::default_delete&lt;duckdb::ProgressBar&gt; &gt; (8,932,369 samples, 0.02%)</title><rect x="512.9" y="1845" width="0.2" height="15.0" fill="rgb(208,169,36)" rx="2" ry="2" />
<text  x="515.92" y="1855.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::AllocateData (13,558,262 samples, 0.03%)</title><rect x="863.4" y="1701" width="0.3" height="15.0" fill="rgb(243,143,4)" rx="2" ry="2" />
<text  x="866.40" y="1711.5" ></text>
</g>
<g >
<title>__sanitizer::internal_sched_yield (4,754,155 samples, 0.01%)</title><rect x="1117.2" y="1909" width="0.1" height="15.0" fill="rgb(242,17,37)" rx="2" ry="2" />
<text  x="1120.21" y="1919.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PipelineExecutor, std::default_delete&lt;duckdb::PipelineExecutor&gt;, true&gt;::reset (15,009,779 samples, 0.03%)</title><rect x="108.5" y="1829" width="0.3" height="15.0" fill="rgb(242,72,18)" rx="2" ry="2" />
<text  x="111.50" y="1839.5" ></text>
</g>
<g >
<title>do_syscall_64 (18,580,050 samples, 0.04%)</title><rect x="94.0" y="1621" width="0.4" height="15.0" fill="rgb(215,22,30)" rx="2" ry="2" />
<text  x="96.97" y="1631.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorBuffer, std::allocator&lt;duckdb::VectorBuffer&gt;,  (9,504,213 samples, 0.02%)</title><rect x="895.5" y="1589" width="0.2" height="15.0" fill="rgb(245,178,38)" rx="2" ry="2" />
<text  x="898.52" y="1599.5" ></text>
</g>
<g >
<title>std::forward_as_tuple&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; (4,693,565 samples, 0.01%)</title><rect x="468.1" y="1749" width="0.1" height="15.0" fill="rgb(247,15,51)" rx="2" ry="2" />
<text  x="471.06" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; &gt;::push_back (16,426,133 samples, 0.03%)</title><rect x="328.0" y="1813" width="0.4" height="15.0" fill="rgb(253,102,1)" rx="2" ry="2" />
<text  x="331.04" y="1823.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*&gt; (12,967,744 samples, 0.03%)</title><rect x="615.4" y="1733" width="0.3" height="15.0" fill="rgb(211,130,25)" rx="2" ry="2" />
<text  x="618.42" y="1743.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::RowIsValid (11,207,326 samples, 0.02%)</title><rect x="285.9" y="1525" width="0.3" height="15.0" fill="rgb(246,189,50)" rx="2" ry="2" />
<text  x="288.94" y="1535.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::FunctionMatcher&gt;::operator (4,512,659 samples, 0.01%)</title><rect x="831.5" y="1557" width="0.1" height="15.0" fill="rgb(252,7,31)" rx="2" ry="2" />
<text  x="834.46" y="1567.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::CatalogSearchEntry, true&gt;::~vector (8,503,481 samples, 0.02%)</title><rect x="1009.7" y="1781" width="0.2" height="15.0" fill="rgb(253,219,48)" rx="2" ry="2" />
<text  x="1012.72" y="1791.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (8,233,720 samples, 0.02%)</title><rect x="367.6" y="1525" width="0.2" height="15.0" fill="rgb(211,84,21)" rx="2" ry="2" />
<text  x="370.59" y="1535.5" ></text>
</g>
<g >
<title>[unknown] (19,559,022 samples, 0.04%)</title><rect x="37.8" y="2005" width="0.5" height="15.0" fill="rgb(231,159,25)" rx="2" ry="2" />
<text  x="40.84" y="2015.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::SelectionData,  (8,011,328 samples, 0.02%)</title><rect x="296.8" y="1637" width="0.2" height="15.0" fill="rgb(243,176,20)" rx="2" ry="2" />
<text  x="299.84" y="1647.5" ></text>
</g>
<g >
<title>duckdb::AdjustTextForRendering (491,508,264 samples, 0.96%)</title><rect x="600.7" y="1781" width="11.3" height="15.0" fill="rgb(239,39,14)" rx="2" ry="2" />
<text  x="603.72" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt; &gt;::_M_realloc_insert&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt; (26,491,279 samples, 0.05%)</title><rect x="1053.6" y="1781" width="0.6" height="15.0" fill="rgb(214,36,40)" rx="2" ry="2" />
<text  x="1056.63" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (9,960,298 samples, 0.02%)</title><rect x="717.5" y="1813" width="0.2" height="15.0" fill="rgb(241,78,36)" rx="2" ry="2" />
<text  x="720.50" y="1823.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::RowGroupCollection&gt;::destroy&lt;duckdb::RowGroupCollection&gt; (406,921,526 samples, 0.79%)</title><rect x="236.2" y="1573" width="9.3" height="15.0" fill="rgb(223,190,45)" rx="2" ry="2" />
<text  x="239.19" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt;::unique_ptr&lt;duckdb::StringScanState, std::default_delete&lt;duckdb::StringScanState&gt;, void&gt; (4,593,581 samples, 0.01%)</title><rect x="213.5" y="1573" width="0.1" height="15.0" fill="rgb(231,56,34)" rx="2" ry="2" />
<text  x="216.49" y="1583.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::PartialBlockManager, std::default_delete&lt;duckdb::PartialBlockManager&gt; &gt;::_M_ptr (4,643,192 samples, 0.01%)</title><rect x="233.3" y="1717" width="0.1" height="15.0" fill="rgb(215,9,1)" rx="2" ry="2" />
<text  x="236.29" y="1727.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::RowGroupCollection, std::shared_ptr&lt;duckdb::DataTableInfo&gt;&amp;, duckdb::BlockManager&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;, long const&amp;, int&gt; (5,370,940 samples, 0.01%)</title><rect x="102.5" y="1557" width="0.1" height="15.0" fill="rgb(232,225,45)" rx="2" ry="2" />
<text  x="105.50" y="1567.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceHashFunction&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceEquality&lt;duckdb::UsingColumnSet&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt; &gt; &gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_set&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceHashFunction&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceEquality&lt;duckdb::UsingColumnSet&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt; &gt; &gt; &gt; &gt; &gt;::~unordered_map (4,489,824 samples, 0.01%)</title><rect x="1017.6" y="1685" width="0.1" height="15.0" fill="rgb(226,7,52)" rx="2" ry="2" />
<text  x="1020.64" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt;::insert&lt;__gnu_cxx::__normal_iterator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*, std::vector&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Pipeline&gt; &gt; &gt; &gt;, void&gt; (13,577,572 samples, 0.03%)</title><rect x="1048.4" y="1797" width="0.3" height="15.0" fill="rgb(232,120,33)" rx="2" ry="2" />
<text  x="1051.40" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorCacheBuffer,  (98,255,256 samples, 0.19%)</title><rect x="217.3" y="1621" width="2.2" height="15.0" fill="rgb(207,97,15)" rx="2" ry="2" />
<text  x="220.26" y="1631.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::RowGroupCollection,  (418,582,452 samples, 0.82%)</title><rect x="235.9" y="1653" width="9.7" height="15.0" fill="rgb(240,148,21)" rx="2" ry="2" />
<text  x="238.93" y="1663.5" ></text>
</g>
<g >
<title>enqueue_task_fair (6,530,058 samples, 0.01%)</title><rect x="93.6" y="1509" width="0.2" height="15.0" fill="rgb(219,148,39)" rx="2" ry="2" />
<text  x="96.63" y="1519.5" ></text>
</g>
<g >
<title>__sanitizer::CombinedAllocator&lt;__sanitizer::SizeClassAllocator64&lt;__asan::AP64&lt;__sanitizer::LocalAddressSpaceView&gt; &gt;, __sanitizer::LargeMmapAllocatorPtrArrayDynamic&gt;::Allocate (128,221,899 samples, 0.25%)</title><rect x="1142.5" y="2037" width="2.9" height="15.0" fill="rgb(229,225,3)" rx="2" ry="2" />
<text  x="1145.48" y="2047.5" ></text>
</g>
<g >
<title>duckdb::ExpressionHeuristics::VisitOperator (32,175,145 samples, 0.06%)</title><rect x="734.3" y="1733" width="0.8" height="15.0" fill="rgb(216,91,49)" rx="2" ry="2" />
<text  x="737.35" y="1743.5" ></text>
</g>
<g >
<title>duckdb::VectorCacheBuffer::~VectorCacheBuffer (84,627,017 samples, 0.16%)</title><rect x="481.7" y="1509" width="2.0" height="15.0" fill="rgb(230,184,38)" rx="2" ry="2" />
<text  x="484.73" y="1519.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::~AllocatedData (73,725,047 samples, 0.14%)</title><rect x="325.2" y="1525" width="1.7" height="15.0" fill="rgb(240,101,41)" rx="2" ry="2" />
<text  x="328.22" y="1535.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::~vector (4,629,750 samples, 0.01%)</title><rect x="1038.8" y="1637" width="0.1" height="15.0" fill="rgb(209,116,10)" rx="2" ry="2" />
<text  x="1041.84" y="1647.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorCacheBuffer&gt;::shared_ptr&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt;, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (76,131,749 samples, 0.15%)</title><rect x="400.8" y="1733" width="1.7" height="15.0" fill="rgb(224,52,41)" rx="2" ry="2" />
<text  x="403.78" y="1743.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::PrivateAllocatorData&gt;::operator (4,542,362 samples, 0.01%)</title><rect x="1122.2" y="1621" width="0.1" height="15.0" fill="rgb(241,7,28)" rx="2" ry="2" />
<text  x="1125.24" y="1631.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::extent_try_coalesce_impl (15,200,109 samples, 0.03%)</title><rect x="347.7" y="645" width="0.4" height="15.0" fill="rgb(221,147,7)" rx="2" ry="2" />
<text  x="350.71" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;duckdb::ColumnBinding, true&gt; &gt; &gt;::_M_deallocate_node (5,808,604 samples, 0.01%)</title><rect x="724.9" y="1669" width="0.1" height="15.0" fill="rgb(226,182,5)" rx="2" ry="2" />
<text  x="727.90" y="1679.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::LocalTableStorage&gt;::shared_ptr&lt;std::allocator&lt;duckdb::LocalTableStorage&gt;, duckdb::DataTable&amp;&gt; (367,281,822 samples, 0.72%)</title><rect x="422.7" y="1717" width="8.4" height="15.0" fill="rgb(251,213,33)" rx="2" ry="2" />
<text  x="425.69" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Value::TryCastAs (8,796,306 samples, 0.02%)</title><rect x="1120.8" y="1941" width="0.2" height="15.0" fill="rgb(241,60,22)" rx="2" ry="2" />
<text  x="1123.80" y="1951.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;, true&gt;::operator[] (5,240,933 samples, 0.01%)</title><rect x="417.3" y="1605" width="0.1" height="15.0" fill="rgb(227,170,42)" rx="2" ry="2" />
<text  x="420.31" y="1615.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::~unordered_map (10,883,760 samples, 0.02%)</title><rect x="352.6" y="1685" width="0.3" height="15.0" fill="rgb(240,136,19)" rx="2" ry="2" />
<text  x="355.64" y="1695.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::Value&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::Value&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (13,287,267 samples, 0.03%)</title><rect x="373.7" y="1877" width="0.3" height="15.0" fill="rgb(217,13,51)" rx="2" ry="2" />
<text  x="376.65" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnAppendState, std::allocator&lt;duckdb::ColumnAppendState&gt; &gt;::~vector (6,098,222 samples, 0.01%)</title><rect x="339.6" y="1381" width="0.2" height="15.0" fill="rgb(228,116,35)" rx="2" ry="2" />
<text  x="342.62" y="1391.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager&lt;duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (9,177,479 samples, 0.02%)</title><rect x="83.6" y="2021" width="0.2" height="15.0" fill="rgb(252,58,2)" rx="2" ry="2" />
<text  x="86.62" y="2031.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::AppendRowGroup (249,848,368 samples, 0.49%)</title><rect x="452.9" y="1749" width="5.8" height="15.0" fill="rgb(238,20,25)" rx="2" ry="2" />
<text  x="455.94" y="1759.5" ></text>
</g>
<g >
<title>std::function&lt;void  (12,820,124 samples, 0.02%)</title><rect x="849.1" y="1765" width="0.3" height="15.0" fill="rgb(209,41,32)" rx="2" ry="2" />
<text  x="852.13" y="1775.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (55,226,204 samples, 0.11%)</title><rect x="486.9" y="1541" width="1.3" height="15.0" fill="rgb(250,223,15)" rx="2" ry="2" />
<text  x="489.92" y="1551.5" ></text>
</g>
<g >
<title>duckdb::LogicalType::operator= (5,073,781 samples, 0.01%)</title><rect x="433.5" y="1621" width="0.1" height="15.0" fill="rgb(214,80,12)" rx="2" ry="2" />
<text  x="436.52" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::ColumnStatistics&gt; &gt; &gt;::~vector (33,710,137 samples, 0.07%)</title><rect x="236.2" y="1509" width="0.8" height="15.0" fill="rgb(252,112,37)" rx="2" ry="2" />
<text  x="239.20" y="1519.5" ></text>
</g>
<g >
<title>duckdb::BufferPool::PurgeQueue (63,299,743 samples, 0.12%)</title><rect x="342.5" y="981" width="1.5" height="15.0" fill="rgb(238,118,37)" rx="2" ry="2" />
<text  x="345.52" y="991.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnDataCollection, std::default_delete&lt;duckdb::ColumnDataCollection&gt; &gt;::operator= (4,389,604 samples, 0.01%)</title><rect x="914.4" y="1765" width="0.1" height="15.0" fill="rgb(217,67,35)" rx="2" ry="2" />
<text  x="917.42" y="1775.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::max_size (4,534,387 samples, 0.01%)</title><rect x="567.7" y="1701" width="0.1" height="15.0" fill="rgb(224,213,12)" rx="2" ry="2" />
<text  x="570.68" y="1711.5" ></text>
</g>
<g >
<title>page_fault (19,311,413 samples, 0.04%)</title><rect x="1131.3" y="2021" width="0.4" height="15.0" fill="rgb(239,152,49)" rx="2" ry="2" />
<text  x="1134.27" y="2031.5" ></text>
</g>
<g >
<title>duckdb::ComputeHashes (7,593,604 samples, 0.01%)</title><rect x="229.0" y="1589" width="0.2" height="15.0" fill="rgb(206,69,0)" rx="2" ry="2" />
<text  x="232.04" y="1599.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (137,214,383 samples, 0.27%)</title><rect x="390.8" y="1653" width="3.2" height="15.0" fill="rgb(219,195,49)" rx="2" ry="2" />
<text  x="393.81" y="1663.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::TryGetSegmentIndex (8,871,500 samples, 0.02%)</title><rect x="254.8" y="1669" width="0.2" height="15.0" fill="rgb(230,170,21)" rx="2" ry="2" />
<text  x="257.78" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;::unique_ptr (13,108,568 samples, 0.03%)</title><rect x="479.0" y="1685" width="0.3" height="15.0" fill="rgb(222,129,7)" rx="2" ry="2" />
<text  x="481.98" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (6,317,931 samples, 0.01%)</title><rect x="1033.0" y="1845" width="0.1" height="15.0" fill="rgb(208,26,11)" rx="2" ry="2" />
<text  x="1035.99" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt;, true&gt;::unique_ptr&lt;duckdb::IntegerTypeMatcher, std::default_delete&lt;std::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt; &gt;, void&gt; (15,479,211 samples, 0.03%)</title><rect x="787.0" y="1845" width="0.4" height="15.0" fill="rgb(225,174,43)" rx="2" ry="2" />
<text  x="790.02" y="1855.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (364,194,645 samples, 0.71%)</title><rect x="341.8" y="1317" width="8.4" height="15.0" fill="rgb(218,105,34)" rx="2" ry="2" />
<text  x="344.79" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, std::__detail::_Select1st, duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (18,192,885 samples, 0.04%)</title><rect x="956.5" y="1653" width="0.4" height="15.0" fill="rgb(252,9,45)" rx="2" ry="2" />
<text  x="959.47" y="1663.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (5,135,565 samples, 0.01%)</title><rect x="108.5" y="1477" width="0.2" height="15.0" fill="rgb(235,182,45)" rx="2" ry="2" />
<text  x="111.53" y="1487.5" ></text>
</g>
<g >
<title>duckdb::StatementProperties::~StatementProperties (10,749,149 samples, 0.02%)</title><rect x="1121.4" y="1893" width="0.2" height="15.0" fill="rgb(236,57,39)" rx="2" ry="2" />
<text  x="1124.40" y="1903.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (43,255,955 samples, 0.08%)</title><rect x="1139.7" y="1909" width="1.0" height="15.0" fill="rgb(239,213,35)" rx="2" ry="2" />
<text  x="1142.74" y="1919.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;*&gt; (10,479,785 samples, 0.02%)</title><rect x="915.4" y="1637" width="0.3" height="15.0" fill="rgb(231,92,8)" rx="2" ry="2" />
<text  x="918.42" y="1647.5" ></text>
</g>
<g >
<title>memcpy (47,561,024 samples, 0.09%)</title><rect x="1188.3" y="2021" width="1.1" height="15.0" fill="rgb(254,197,38)" rx="2" ry="2" />
<text  x="1191.27" y="2031.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::unique_ptr&lt;duckdb::QueryGraph::QueryEdge, std::default_delete&lt;duckdb::QueryGraph::QueryEdge&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::unique_ptr&lt;duckdb::QueryGraph::QueryEdge, std::default_delete&lt;duckdb::QueryGraph::QueryEdge&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (6,562,377 samples, 0.01%)</title><rect x="756.5" y="1717" width="0.1" height="15.0" fill="rgb(210,130,49)" rx="2" ry="2" />
<text  x="759.47" y="1727.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (4,421,908 samples, 0.01%)</title><rect x="656.3" y="1637" width="0.1" height="15.0" fill="rgb(238,108,36)" rx="2" ry="2" />
<text  x="659.29" y="1647.5" ></text>
</g>
<g >
<title>duckdb::PhysicalInsert::GetLocalSinkState (37,453,127 samples, 0.07%)</title><rect x="107.2" y="1797" width="0.9" height="15.0" fill="rgb(205,66,8)" rx="2" ry="2" />
<text  x="110.20" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_default (44,818,956 samples, 0.09%)</title><rect x="325.3" y="1413" width="1.1" height="15.0" fill="rgb(230,208,1)" rx="2" ry="2" />
<text  x="328.34" y="1423.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::pac_alloc_real (6,930,954 samples, 0.01%)</title><rect x="103.2" y="1253" width="0.2" height="15.0" fill="rgb(208,41,42)" rx="2" ry="2" />
<text  x="106.22" y="1263.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionRootInfo&gt;::operator (10,927,743 samples, 0.02%)</title><rect x="500.0" y="1333" width="0.3" height="15.0" fill="rgb(207,69,35)" rx="2" ry="2" />
<text  x="503.03" y="1343.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (7,133,081 samples, 0.01%)</title><rect x="944.0" y="1653" width="0.2" height="15.0" fill="rgb(240,19,11)" rx="2" ry="2" />
<text  x="947.01" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalDummyScan, std::default_delete&lt;duckdb::PhysicalDummyScan&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PhysicalDummyScan&gt;, void&gt; (5,399,549 samples, 0.01%)</title><rect x="908.6" y="1733" width="0.1" height="15.0" fill="rgb(229,212,21)" rx="2" ry="2" />
<text  x="911.61" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (279,901,192 samples, 0.55%)</title><rect x="872.8" y="1557" width="6.5" height="15.0" fill="rgb(247,64,12)" rx="2" ry="2" />
<text  x="875.82" y="1567.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::unique_ptr (9,847,623 samples, 0.02%)</title><rect x="809.4" y="1765" width="0.2" height="15.0" fill="rgb(227,43,16)" rx="2" ry="2" />
<text  x="812.35" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::ColumnBinding, std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt;, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt;, std::__detail::_Select1st, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (4,656,233 samples, 0.01%)</title><rect x="727.5" y="1605" width="0.2" height="15.0" fill="rgb(233,199,3)" rx="2" ry="2" />
<text  x="730.55" y="1615.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_alloc_small_hard (5,382,374 samples, 0.01%)</title><rect x="103.4" y="1349" width="0.2" height="15.0" fill="rgb(236,68,47)" rx="2" ry="2" />
<text  x="106.43" y="1359.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VisitReplace (39,168,220 samples, 0.08%)</title><rect x="844.7" y="1733" width="0.9" height="15.0" fill="rgb(236,40,4)" rx="2" ry="2" />
<text  x="847.66" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_malloc_hard (132,052,097 samples, 0.26%)</title><rect x="875.0" y="1397" width="3.1" height="15.0" fill="rgb(220,74,14)" rx="2" ry="2" />
<text  x="878.01" y="1407.5" ></text>
</g>
<g >
<title>duckdb::CommitState::CommitEntry&lt;true&gt; (2,733,710,143 samples, 5.33%)</title><rect x="254.5" y="1765" width="62.9" height="15.0" fill="rgb(239,84,36)" rx="2" ry="2" />
<text  x="257.50" y="1775.5" >duckdb..</text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::GlobalSourceState, std::default_delete&lt;duckdb::GlobalSourceState&gt;, true&gt;::operator= (5,239,000 samples, 0.01%)</title><rect x="400.0" y="1845" width="0.2" height="15.0" fill="rgb(234,164,7)" rx="2" ry="2" />
<text  x="403.04" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::ColumnData&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::ColumnData&gt; &gt; &gt;::_M_check_len (7,285,688 samples, 0.01%)</title><rect x="456.3" y="1669" width="0.2" height="15.0" fill="rgb(209,4,43)" rx="2" ry="2" />
<text  x="459.28" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnScanState*, duckdb::ColumnScanState&gt; (27,609,916 samples, 0.05%)</title><rect x="287.9" y="1573" width="0.6" height="15.0" fill="rgb(250,57,11)" rx="2" ry="2" />
<text  x="290.88" y="1583.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::Expression&gt;, duckdb::CSENode, duckdb::ExpressionHashFunction&lt;duckdb::Expression&gt;, duckdb::ExpressionEquality&lt;duckdb::Expression&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Expression&gt; const, duckdb::CSENode&gt; &gt; &gt;::~unordered_map (8,415,664 samples, 0.02%)</title><rect x="728.5" y="1717" width="0.2" height="15.0" fill="rgb(235,166,7)" rx="2" ry="2" />
<text  x="731.52" y="1727.5" ></text>
</g>
<g >
<title>activate_task (7,762,127 samples, 0.02%)</title><rect x="93.6" y="1525" width="0.2" height="15.0" fill="rgb(238,18,42)" rx="2" ry="2" />
<text  x="96.63" y="1535.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::SwizzleMetaData, true&gt;::vector (4,441,549 samples, 0.01%)</title><rect x="882.9" y="1701" width="0.1" height="15.0" fill="rgb(233,34,35)" rx="2" ry="2" />
<text  x="885.93" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::InitializeChunkState (70,567,995 samples, 0.14%)</title><rect x="470.8" y="1749" width="1.6" height="15.0" fill="rgb(243,186,46)" rx="2" ry="2" />
<text  x="473.82" y="1759.5" ></text>
</g>
<g >
<title>std::numeric_limits&lt;unsigned int&gt;::max (5,991,671 samples, 0.01%)</title><rect x="211.2" y="1525" width="0.2" height="15.0" fill="rgb(217,15,53)" rx="2" ry="2" />
<text  x="214.22" y="1535.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RenderTree, unsigned long&amp;, unsigned long&amp;&gt; (12,807,490 samples, 0.02%)</title><rect x="835.6" y="1813" width="0.3" height="15.0" fill="rgb(238,7,41)" rx="2" ry="2" />
<text  x="838.62" y="1823.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::Append (159,559,796 samples, 0.31%)</title><rect x="460.2" y="1765" width="3.6" height="15.0" fill="rgb(224,123,17)" rx="2" ry="2" />
<text  x="463.15" y="1775.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CatalogEntry, std::default_delete&lt;duckdb::CatalogEntry&gt; &gt;::~unique_ptr (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1205" width="0.3" height="15.0" fill="rgb(229,0,8)" rx="2" ry="2" />
<text  x="1120.47" y="1215.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (93,195,743 samples, 0.18%)</title><rect x="217.3" y="1589" width="2.2" height="15.0" fill="rgb(222,130,7)" rx="2" ry="2" />
<text  x="220.33" y="1599.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, duckdb::OperatorInformation, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt; &gt;::operator[] (4,722,686 samples, 0.01%)</title><rect x="105.8" y="1733" width="0.1" height="15.0" fill="rgb(223,93,12)" rx="2" ry="2" />
<text  x="108.81" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::ExpressionExecutor (53,592,637 samples, 0.10%)</title><rect x="489.8" y="1781" width="1.2" height="15.0" fill="rgb(249,29,49)" rx="2" ry="2" />
<text  x="492.81" y="1791.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::LogicalType const*, std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt; &gt;, duckdb::LogicalType*&gt; (7,900,321 samples, 0.02%)</title><rect x="908.8" y="1685" width="0.2" height="15.0" fill="rgb(243,27,44)" rx="2" ry="2" />
<text  x="911.84" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;::unique_ptr&lt;duckdb::PhysicalInsert, std::default_delete&lt;std::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt; &gt; &gt;, void&gt; (8,022,172 samples, 0.02%)</title><rect x="858.8" y="1829" width="0.1" height="15.0" fill="rgb(234,102,23)" rx="2" ry="2" />
<text  x="861.75" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_alloc_event (16,137,862 samples, 0.03%)</title><rect x="438.3" y="1461" width="0.4" height="15.0" fill="rgb(230,125,52)" rx="2" ry="2" />
<text  x="441.32" y="1471.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (4,565,869 samples, 0.01%)</title><rect x="848.9" y="1765" width="0.1" height="15.0" fill="rgb(245,23,34)" rx="2" ry="2" />
<text  x="851.85" y="1775.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned long const*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, unsigned long*&gt; (4,525,027 samples, 0.01%)</title><rect x="302.1" y="1621" width="0.1" height="15.0" fill="rgb(213,138,48)" rx="2" ry="2" />
<text  x="305.09" y="1631.5" ></text>
</g>
<g >
<title>duckdb::PendingQueryResult::CheckExecutableInternal (74,850,773 samples, 0.15%)</title><rect x="513.5" y="1925" width="1.8" height="15.0" fill="rgb(206,214,40)" rx="2" ry="2" />
<text  x="516.54" y="1935.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LocalStorage, std::default_delete&lt;duckdb::LocalStorage&gt; &gt;::~unique_ptr (17,922,399 samples, 0.03%)</title><rect x="327.1" y="1605" width="0.4" height="15.0" fill="rgb(241,212,10)" rx="2" ry="2" />
<text  x="330.08" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt; &gt; &gt;::~vector (11,896,480 samples, 0.02%)</title><rect x="1089.4" y="1749" width="0.3" height="15.0" fill="rgb(234,180,34)" rx="2" ry="2" />
<text  x="1092.42" y="1759.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::RowGroupSegmentTree&gt;::~shared_ptr (361,441,674 samples, 0.70%)</title><rect x="237.2" y="1541" width="8.3" height="15.0" fill="rgb(232,171,52)" rx="2" ry="2" />
<text  x="240.18" y="1551.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::StringValueInfo, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (8,012,990 samples, 0.02%)</title><rect x="1119.9" y="1909" width="0.2" height="15.0" fill="rgb(231,107,2)" rx="2" ry="2" />
<text  x="1122.91" y="1919.5" ></text>
</g>
<g >
<title>duckdb::DataTable::InitializeAppend (178,593,681 samples, 0.35%)</title><rect x="194.9" y="1765" width="4.1" height="15.0" fill="rgb(228,38,30)" rx="2" ry="2" />
<text  x="197.93" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (6,105,032 samples, 0.01%)</title><rect x="833.2" y="1669" width="0.1" height="15.0" fill="rgb(220,135,7)" rx="2" ry="2" />
<text  x="836.20" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ConstantFoldingExpressionMatcher, std::default_delete&lt;duckdb::ConstantFoldingExpressionMatcher&gt; &gt;::release (6,633,740 samples, 0.01%)</title><rect x="795.9" y="1813" width="0.1" height="15.0" fill="rgb(233,44,45)" rx="2" ry="2" />
<text  x="798.88" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_range_initialize&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; (5,006,713 samples, 0.01%)</title><rect x="944.1" y="1637" width="0.1" height="15.0" fill="rgb(236,45,14)" rx="2" ry="2" />
<text  x="947.06" y="1647.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Task&gt;::operator= (5,117,388 samples, 0.01%)</title><rect x="505.2" y="1829" width="0.1" height="15.0" fill="rgb(206,221,40)" rx="2" ry="2" />
<text  x="508.22" y="1839.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (71,332,395 samples, 0.14%)</title><rect x="217.6" y="1509" width="1.7" height="15.0" fill="rgb(216,166,11)" rx="2" ry="2" />
<text  x="220.63" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (25,169,256 samples, 0.05%)</title><rect x="923.3" y="1845" width="0.6" height="15.0" fill="rgb(249,179,54)" rx="2" ry="2" />
<text  x="926.31" y="1855.5" ></text>
</g>
<g >
<title>std::_Deque_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_initialize_map (8,303,514 samples, 0.02%)</title><rect x="404.4" y="1797" width="0.2" height="15.0" fill="rgb(242,45,42)" rx="2" ry="2" />
<text  x="407.41" y="1807.5" ></text>
</g>
<g >
<title>duckdb::AttachedDatabase::IsSystem (5,074,361 samples, 0.01%)</title><rect x="319.3" y="1813" width="0.1" height="15.0" fill="rgb(214,0,18)" rx="2" ry="2" />
<text  x="322.30" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::operator= (6,772,806 samples, 0.01%)</title><rect x="635.5" y="1701" width="0.2" height="15.0" fill="rgb(206,153,14)" rx="2" ry="2" />
<text  x="638.54" y="1711.5" ></text>
</g>
<g >
<title>std::_Bvector_base&lt;std::allocator&lt;bool&gt; &gt;::_Bvector_base (5,973,809 samples, 0.01%)</title><rect x="1056.6" y="1781" width="0.1" height="15.0" fill="rgb(240,56,30)" rx="2" ry="2" />
<text  x="1059.56" y="1791.5" ></text>
</g>
<g >
<title>duckdb::FieldReader::ReadRequired&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (15,070,888 samples, 0.03%)</title><rect x="585.6" y="1829" width="0.4" height="15.0" fill="rgb(216,84,30)" rx="2" ry="2" />
<text  x="588.64" y="1839.5" ></text>
</g>
<g >
<title>std::tuple&lt;duckdb::Rule*, std::default_delete&lt;duckdb::Rule&gt; &gt;::tuple&lt;duckdb::Rule*&amp;, std::default_delete&lt;duckdb::Rule&gt;, true&gt; (6,038,517 samples, 0.01%)</title><rect x="827.2" y="1749" width="0.2" height="15.0" fill="rgb(216,109,33)" rx="2" ry="2" />
<text  x="830.24" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (28,023,258 samples, 0.05%)</title><rect x="315.3" y="1637" width="0.6" height="15.0" fill="rgb(217,228,54)" rx="2" ry="2" />
<text  x="318.29" y="1647.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::LocalTableStorage&gt;::construct&lt;duckdb::LocalTableStorage, duckdb::DataTable&amp;&gt; (22,050,138 samples, 0.04%)</title><rect x="102.1" y="1589" width="0.5" height="15.0" fill="rgb(231,4,35)" rx="2" ry="2" />
<text  x="105.12" y="1599.5" ></text>
</g>
<g >
<title>duckdb::Value::CastAs (12,793,686 samples, 0.02%)</title><rect x="1120.7" y="1957" width="0.3" height="15.0" fill="rgb(224,146,48)" rx="2" ry="2" />
<text  x="1123.75" y="1967.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (16,623,276 samples, 0.03%)</title><rect x="970.5" y="1717" width="0.4" height="15.0" fill="rgb(244,100,2)" rx="2" ry="2" />
<text  x="973.51" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;unsigned long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt; &gt; (272,643,091 samples, 0.53%)</title><rect x="689.2" y="1781" width="6.2" height="15.0" fill="rgb(241,133,3)" rx="2" ry="2" />
<text  x="692.17" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::operator= (4,412,650 samples, 0.01%)</title><rect x="621.3" y="1717" width="0.1" height="15.0" fill="rgb(240,124,23)" rx="2" ry="2" />
<text  x="624.34" y="1727.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ColumnRefExpression, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (7,258,926 samples, 0.01%)</title><rect x="953.7" y="1589" width="0.1" height="15.0" fill="rgb(254,222,37)" rx="2" ry="2" />
<text  x="956.67" y="1599.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (19,332,947 samples, 0.04%)</title><rect x="911.6" y="1685" width="0.5" height="15.0" fill="rgb(221,162,19)" rx="2" ry="2" />
<text  x="914.62" y="1695.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::shared_ptr&lt;unsigned long&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::shared_ptr&lt;unsigned long&gt; &gt; &gt; &gt;::operator= (9,237,322 samples, 0.02%)</title><rect x="985.7" y="1669" width="0.2" height="15.0" fill="rgb(219,150,30)" rx="2" ry="2" />
<text  x="988.71" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::push_back (6,466,172 samples, 0.01%)</title><rect x="948.7" y="1717" width="0.2" height="15.0" fill="rgb(218,138,47)" rx="2" ry="2" />
<text  x="951.74" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (4,989,315 samples, 0.01%)</title><rect x="218.3" y="1381" width="0.1" height="15.0" fill="rgb(247,151,27)" rx="2" ry="2" />
<text  x="221.33" y="1391.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::Binder, std::allocator&lt;duckdb::Binder&gt;,  (5,311,023 samples, 0.01%)</title><rect x="1016.1" y="1749" width="0.1" height="15.0" fill="rgb(232,226,3)" rx="2" ry="2" />
<text  x="1019.05" y="1759.5" ></text>
</g>
<g >
<title>duckdb::EntryIndex::~EntryIndex (13,077,913 samples, 0.03%)</title><rect x="1117.5" y="933" width="0.3" height="15.0" fill="rgb(216,166,15)" rx="2" ry="2" />
<text  x="1120.49" y="943.5" ></text>
</g>
<g >
<title>duckdb::Catalog::GetSystemCatalog (10,337,901 samples, 0.02%)</title><rect x="542.8" y="1877" width="0.3" height="15.0" fill="rgb(248,50,10)" rx="2" ry="2" />
<text  x="545.83" y="1887.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (27,099,394 samples, 0.05%)</title><rect x="352.4" y="1781" width="0.6" height="15.0" fill="rgb(212,221,30)" rx="2" ry="2" />
<text  x="355.40" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (35,484,180 samples, 0.07%)</title><rect x="441.1" y="1589" width="0.8" height="15.0" fill="rgb(231,120,39)" rx="2" ry="2" />
<text  x="444.12" y="1599.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_move_assign (5,952,695 samples, 0.01%)</title><rect x="386.0" y="1845" width="0.1" height="15.0" fill="rgb(240,79,26)" rx="2" ry="2" />
<text  x="389.01" y="1855.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataRow::GetValue (17,491,239 samples, 0.03%)</title><rect x="1119.8" y="1989" width="0.4" height="15.0" fill="rgb(235,142,12)" rx="2" ry="2" />
<text  x="1122.80" y="1999.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::HTTPState&gt; &gt;::construct&lt;duckdb::HTTPState&gt; (6,506,338 samples, 0.01%)</title><rect x="359.5" y="1797" width="0.1" height="15.0" fill="rgb(217,146,49)" rx="2" ry="2" />
<text  x="362.46" y="1807.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ExpressionExecutorState&gt; (9,364,590 samples, 0.02%)</title><rect x="490.2" y="1749" width="0.3" height="15.0" fill="rgb(229,224,27)" rx="2" ry="2" />
<text  x="493.24" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt; &gt; (24,579,506 samples, 0.05%)</title><rect x="610.4" y="1653" width="0.5" height="15.0" fill="rgb(225,91,47)" rx="2" ry="2" />
<text  x="613.35" y="1663.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (358,821,631 samples, 0.70%)</title><rect x="422.8" y="1685" width="8.3" height="15.0" fill="rgb(245,163,30)" rx="2" ry="2" />
<text  x="425.80" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::TypeMatcher, std::default_delete&lt;duckdb::TypeMatcher&gt; &gt;::operator= (4,564,366 samples, 0.01%)</title><rect x="816.2" y="1829" width="0.1" height="15.0" fill="rgb(225,5,4)" rx="2" ry="2" />
<text  x="819.16" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorChildBuffer&gt;::construct&lt;duckdb::VectorChildBuffer, duckdb::Vector&gt; (20,348,603 samples, 0.04%)</title><rect x="294.7" y="1541" width="0.5" height="15.0" fill="rgb(249,15,54)" rx="2" ry="2" />
<text  x="297.75" y="1551.5" ></text>
</g>
<g >
<title>duckdb::ValidityScanPartial (11,236,058 samples, 0.02%)</title><rect x="215.7" y="1589" width="0.2" height="15.0" fill="rgb(216,101,37)" rx="2" ry="2" />
<text  x="218.69" y="1599.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_debug (5,626,052 samples, 0.01%)</title><rect x="218.9" y="1333" width="0.1" height="15.0" fill="rgb(206,85,26)" rx="2" ry="2" />
<text  x="221.86" y="1343.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (6,891,866 samples, 0.01%)</title><rect x="849.6" y="1781" width="0.1" height="15.0" fill="rgb(220,158,0)" rx="2" ry="2" />
<text  x="852.56" y="1791.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::BoundColumnRefExpression, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, duckdb::LogicalType&amp;, duckdb::ColumnBinding, unsigned long&amp;&gt; (20,958,657 samples, 0.04%)</title><rect x="587.0" y="1829" width="0.5" height="15.0" fill="rgb(206,169,4)" rx="2" ry="2" />
<text  x="590.03" y="1839.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::RowGroupSegmentTree&gt;::construct&lt;duckdb::RowGroupSegmentTree, duckdb::RowGroupCollection&amp;&gt; (7,242,415 samples, 0.01%)</title><rect x="429.5" y="1349" width="0.2" height="15.0" fill="rgb(224,61,20)" rx="2" ry="2" />
<text  x="432.51" y="1359.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindImpl (12,511,067 samples, 0.02%)</title><rect x="14.7" y="1989" width="0.3" height="15.0" fill="rgb(218,190,13)" rx="2" ry="2" />
<text  x="17.68" y="1999.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::LocalTableStorage, std::allocator&lt;duckdb::LocalTableStorage&gt;,  (353,134,668 samples, 0.69%)</title><rect x="422.9" y="1669" width="8.1" height="15.0" fill="rgb(240,7,32)" rx="2" ry="2" />
<text  x="425.87" y="1679.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (93,025,424 samples, 0.18%)</title><rect x="239.1" y="741" width="2.1" height="15.0" fill="rgb(247,192,43)" rx="2" ry="2" />
<text  x="242.10" y="751.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (7,374,976 samples, 0.01%)</title><rect x="729.9" y="1685" width="0.1" height="15.0" fill="rgb(240,6,34)" rx="2" ry="2" />
<text  x="732.87" y="1695.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::EntryValue, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt; &gt;::erase (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1365" width="0.3" height="15.0" fill="rgb(208,184,36)" rx="2" ry="2" />
<text  x="1120.47" y="1375.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::BlockHandle&gt;::construct&lt;duckdb::BlockHandle, duckdb::BlockManager&amp;, long, duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;, bool, unsigned long&amp;, duckdb::TempBufferPoolReservation&gt; (5,798,335 samples, 0.01%)</title><rect x="103.7" y="1493" width="0.2" height="15.0" fill="rgb(244,62,34)" rx="2" ry="2" />
<text  x="106.74" y="1503.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::operator= (19,327,164 samples, 0.04%)</title><rect x="1034.3" y="1861" width="0.4" height="15.0" fill="rgb(208,94,20)" rx="2" ry="2" />
<text  x="1037.29" y="1871.5" ></text>
</g>
<g >
<title>__count_memcg_events (10,222,701 samples, 0.02%)</title><rect x="162.7" y="1941" width="0.2" height="15.0" fill="rgb(205,126,20)" rx="2" ry="2" />
<text  x="165.71" y="1951.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;, unsigned long, duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;, duckdb::ExpressionEquality&lt;duckdb::ParsedExpression&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt; &gt; &gt;::find (22,505,787 samples, 0.04%)</title><rect x="956.4" y="1685" width="0.5" height="15.0" fill="rgb(222,133,25)" rx="2" ry="2" />
<text  x="959.37" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (24,619,006 samples, 0.05%)</title><rect x="292.0" y="1605" width="0.6" height="15.0" fill="rgb(226,14,22)" rx="2" ry="2" />
<text  x="295.04" y="1615.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (163,378,508 samples, 0.32%)</title><rect x="1170.4" y="2021" width="3.8" height="15.0" fill="rgb(224,204,41)" rx="2" ry="2" />
<text  x="1173.39" y="2031.5" ></text>
</g>
<g >
<title>filemap_fault (8,693,598 samples, 0.02%)</title><rect x="72.9" y="1829" width="0.2" height="15.0" fill="rgb(210,225,28)" rx="2" ry="2" />
<text  x="75.91" y="1839.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (95,111,371 samples, 0.19%)</title><rect x="492.4" y="1685" width="2.2" height="15.0" fill="rgb(223,217,28)" rx="2" ry="2" />
<text  x="495.37" y="1695.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::ChunkMetaData&gt;::construct&lt;duckdb::ChunkMetaData, duckdb::ChunkMetaData&gt; (11,355,270 samples, 0.02%)</title><rect x="383.9" y="1829" width="0.2" height="15.0" fill="rgb(210,39,41)" rx="2" ry="2" />
<text  x="386.88" y="1839.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::InClauseSimplificationRule, duckdb::ExpressionRewriter&amp;&gt; (43,848,382 samples, 0.09%)</title><rect x="810.1" y="1877" width="1.0" height="15.0" fill="rgb(205,123,47)" rx="2" ry="2" />
<text  x="813.11" y="1887.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt; &gt; (14,626,886 samples, 0.03%)</title><rect x="500.0" y="1381" width="0.3" height="15.0" fill="rgb(218,172,20)" rx="2" ry="2" />
<text  x="502.99" y="1391.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnDataCollection, std::default_delete&lt;duckdb::ColumnDataCollection&gt; &gt;::~unique_ptr (132,966,399 samples, 0.26%)</title><rect x="1121.9" y="1909" width="3.1" height="15.0" fill="rgb(223,7,19)" rx="2" ry="2" />
<text  x="1124.90" y="1919.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc (10,568,837 samples, 0.02%)</title><rect x="334.0" y="1301" width="0.2" height="15.0" fill="rgb(210,138,30)" rx="2" ry="2" />
<text  x="336.99" y="1311.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::AllSourcesSupportBatchIndex (46,755,049 samples, 0.09%)</title><rect x="853.1" y="1813" width="1.0" height="15.0" fill="rgb(246,213,22)" rx="2" ry="2" />
<text  x="856.06" y="1823.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (8,487,663 samples, 0.02%)</title><rect x="779.6" y="1813" width="0.2" height="15.0" fill="rgb(225,112,50)" rx="2" ry="2" />
<text  x="782.57" y="1823.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (32,181,323 samples, 0.06%)</title><rect x="244.4" y="1173" width="0.7" height="15.0" fill="rgb(208,68,48)" rx="2" ry="2" />
<text  x="247.41" y="1183.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BoundColumnRefExpression*, std::allocator&lt;duckdb::BoundColumnRefExpression*&gt; &gt;::_M_realloc_insert&lt;duckdb::BoundColumnRefExpression*&gt; (15,533,202 samples, 0.03%)</title><rect x="764.1" y="1637" width="0.3" height="15.0" fill="rgb(207,177,27)" rx="2" ry="2" />
<text  x="767.07" y="1647.5" ></text>
</g>
<g >
<title>main (40,811,330,597 samples, 79.57%)</title><rect x="186.5" y="2021" width="938.9" height="15.0" fill="rgb(222,175,5)" rx="2" ry="2" />
<text  x="189.49" y="2031.5" >main</text>
</g>
<g >
<title>duckdb::RowGroupCollection::Checkpoint (68,998,908 samples, 0.13%)</title><rect x="1117.8" y="1205" width="1.6" height="15.0" fill="rgb(240,103,11)" rx="2" ry="2" />
<text  x="1120.83" y="1215.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::pair&lt;unsigned long, unsigned long&gt;*, std::pair&lt;unsigned long, unsigned long&gt;*, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (63,199,921 samples, 0.12%)</title><rect x="609.9" y="1685" width="1.4" height="15.0" fill="rgb(208,25,23)" rx="2" ry="2" />
<text  x="612.87" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (55,344,123 samples, 0.11%)</title><rect x="379.9" y="1765" width="1.3" height="15.0" fill="rgb(248,212,17)" rx="2" ry="2" />
<text  x="382.94" y="1775.5" ></text>
</g>
<g >
<title>duckdb::CatalogTransaction::CatalogTransaction (180,873,920 samples, 0.35%)</title><rect x="988.6" y="1701" width="4.2" height="15.0" fill="rgb(223,68,20)" rx="2" ry="2" />
<text  x="991.65" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt; &gt; &gt;::_S_relocate (10,293,878 samples, 0.02%)</title><rect x="1064.9" y="1765" width="0.2" height="15.0" fill="rgb(217,209,47)" rx="2" ry="2" />
<text  x="1067.86" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (5,993,015 samples, 0.01%)</title><rect x="352.7" y="1653" width="0.1" height="15.0" fill="rgb(209,123,49)" rx="2" ry="2" />
<text  x="355.69" y="1663.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (7,078,962 samples, 0.01%)</title><rect x="1081.1" y="1589" width="0.1" height="15.0" fill="rgb(236,118,42)" rx="2" ry="2" />
<text  x="1084.08" y="1599.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBoxContent (770,940,707 samples, 1.50%)</title><rect x="600.3" y="1797" width="17.8" height="15.0" fill="rgb(212,186,49)" rx="2" ry="2" />
<text  x="603.35" y="1807.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt; &gt;::operator[] (33,015,725 samples, 0.06%)</title><rect x="927.6" y="1701" width="0.8" height="15.0" fill="rgb(227,20,4)" rx="2" ry="2" />
<text  x="930.63" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ColumnRefExpression::Hash (12,320,083 samples, 0.02%)</title><rect x="967.9" y="1685" width="0.3" height="15.0" fill="rgb(223,221,28)" rx="2" ry="2" />
<text  x="970.88" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocatorData::ArenaAllocatorData (5,512,757 samples, 0.01%)</title><rect x="997.5" y="1589" width="0.1" height="15.0" fill="rgb(249,43,49)" rx="2" ry="2" />
<text  x="1000.46" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="597" width="0.1" height="15.0" fill="rgb(225,151,44)" rx="2" ry="2" />
<text  x="14.25" y="607.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_next_grapheme (22,624,506 samples, 0.04%)</title><rect x="1071.4" y="1717" width="0.5" height="15.0" fill="rgb(228,75,54)" rx="2" ry="2" />
<text  x="1074.36" y="1727.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ColumnDataCollection&gt;::operator (131,667,414 samples, 0.26%)</title><rect x="1121.9" y="1893" width="3.0" height="15.0" fill="rgb(248,68,7)" rx="2" ry="2" />
<text  x="1124.90" y="1903.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Vector&gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (23,669,119 samples, 0.05%)</title><rect x="893.4" y="1701" width="0.5" height="15.0" fill="rgb(242,91,18)" rx="2" ry="2" />
<text  x="896.40" y="1711.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (17,786,042 samples, 0.03%)</title><rect x="726.8" y="1621" width="0.5" height="15.0" fill="rgb(252,157,52)" rx="2" ry="2" />
<text  x="729.85" y="1631.5" ></text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (52,475,591 samples, 0.10%)</title><rect x="145.5" y="1989" width="1.2" height="15.0" fill="rgb(206,155,2)" rx="2" ry="2" />
<text  x="148.48" y="1999.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ConstantFoldingRule, std::default_delete&lt;duckdb::ConstantFoldingRule&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConstantFoldingRule&gt;, void&gt; (7,828,936 samples, 0.02%)</title><rect x="796.2" y="1861" width="0.1" height="15.0" fill="rgb(236,111,53)" rx="2" ry="2" />
<text  x="799.16" y="1871.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::~unordered_set (6,307,107 samples, 0.01%)</title><rect x="780.6" y="1845" width="0.2" height="15.0" fill="rgb(254,183,51)" rx="2" ry="2" />
<text  x="783.63" y="1855.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;duckdb::CompressionType, std::pair&lt;duckdb::CompressionType const, std::map&lt;duckdb::PhysicalType, duckdb::CompressionFunction, std::less&lt;duckdb::PhysicalType&gt;, std::allocator&lt;std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;duckdb::CompressionType const, std::map&lt;duckdb::PhysicalType, duckdb::CompressionFunction, std::less&lt;duckdb::PhysicalType&gt;, std::allocator&lt;std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt; &gt; &gt; &gt; &gt;, std::less&lt;duckdb::CompressionType&gt;, std::allocator&lt;std::pair&lt;duckdb::CompressionType const, std::map&lt;duckdb::PhysicalType, duckdb::CompressionFunction, std::less&lt;duckdb::PhysicalType&gt;, std::allocator&lt;std::pair&lt;duckdb::PhysicalType const, duckdb::CompressionFunction&gt; &gt; &gt; &gt; &gt; &gt;::_M_lower_bound (4,982,577 samples, 0.01%)</title><rect x="435.2" y="1605" width="0.1" height="15.0" fill="rgb(251,36,40)" rx="2" ry="2" />
<text  x="438.17" y="1615.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::NextGraphemeCluster (98,980,860 samples, 0.19%)</title><rect x="557.9" y="1781" width="2.3" height="15.0" fill="rgb(240,16,41)" rx="2" ry="2" />
<text  x="560.89" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (17,340,175 samples, 0.03%)</title><rect x="735.5" y="1781" width="0.4" height="15.0" fill="rgb(213,85,47)" rx="2" ry="2" />
<text  x="738.50" y="1791.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~unordered_set (4,512,659 samples, 0.01%)</title><rect x="831.5" y="1509" width="0.1" height="15.0" fill="rgb(208,92,23)" rx="2" ry="2" />
<text  x="834.46" y="1519.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (7,399,510 samples, 0.01%)</title><rect x="716.2" y="1845" width="0.2" height="15.0" fill="rgb(214,121,17)" rx="2" ry="2" />
<text  x="719.19" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_check_len (55,191,501 samples, 0.11%)</title><rect x="608.3" y="1733" width="1.2" height="15.0" fill="rgb(211,75,0)" rx="2" ry="2" />
<text  x="611.28" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (6,511,303 samples, 0.01%)</title><rect x="887.4" y="1653" width="0.2" height="15.0" fill="rgb(217,97,38)" rx="2" ry="2" />
<text  x="890.43" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PendingQueryResult, std::default_delete&lt;duckdb::PendingQueryResult&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::PendingQueryResult&gt;, void&gt; (5,168,748 samples, 0.01%)</title><rect x="1101.8" y="1861" width="0.1" height="15.0" fill="rgb(242,27,27)" rx="2" ry="2" />
<text  x="1104.77" y="1871.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, std::shared_ptr&lt;duckdb::BoundParameterData&gt; &gt;, std::allocator&lt;std::pair&lt;unsigned long const, std::shared_ptr&lt;duckdb::BoundParameterData&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (4,603,887 samples, 0.01%)</title><rect x="641.9" y="1829" width="0.1" height="15.0" fill="rgb(229,51,37)" rx="2" ry="2" />
<text  x="644.93" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CatalogSet, std::default_delete&lt;duckdb::CatalogSet&gt; &gt;::~unique_ptr (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1781" width="1.9" height="15.0" fill="rgb(212,118,33)" rx="2" ry="2" />
<text  x="1120.81" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::vector (19,423,478 samples, 0.04%)</title><rect x="1056.5" y="1797" width="0.5" height="15.0" fill="rgb(218,31,6)" rx="2" ry="2" />
<text  x="1059.54" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::Append (24,047,575 samples, 0.05%)</title><rect x="229.9" y="1573" width="0.6" height="15.0" fill="rgb(227,78,19)" rx="2" ry="2" />
<text  x="232.93" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt; &gt;::reset (50,963,107 samples, 0.10%)</title><rect x="242.5" y="613" width="1.2" height="15.0" fill="rgb(211,34,7)" rx="2" ry="2" />
<text  x="245.53" y="623.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::PipelineEvent, std::allocator&lt;duckdb::PipelineEvent&gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (29,731,632 samples, 0.06%)</title><rect x="1049.8" y="1797" width="0.7" height="15.0" fill="rgb(224,204,54)" rx="2" ry="2" />
<text  x="1052.84" y="1807.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::BoundUnnestNode, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BoundUnnestNode&gt; &gt; &gt;::~unordered_map (6,500,857 samples, 0.01%)</title><rect x="981.3" y="1717" width="0.2" height="15.0" fill="rgb(254,130,17)" rx="2" ry="2" />
<text  x="984.35" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::ReadVectorInternal (115,905,279 samples, 0.23%)</title><rect x="472.7" y="1749" width="2.6" height="15.0" fill="rgb(213,173,14)" rx="2" ry="2" />
<text  x="475.66" y="1759.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Verify (54,018,373 samples, 0.11%)</title><rect x="296.0" y="1717" width="1.3" height="15.0" fill="rgb(227,196,41)" rx="2" ry="2" />
<text  x="299.04" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt; &gt; &gt;::push_back (23,957,087 samples, 0.05%)</title><rect x="983.7" y="1813" width="0.6" height="15.0" fill="rgb(244,164,4)" rx="2" ry="2" />
<text  x="986.73" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::iallocztm (6,511,288 samples, 0.01%)</title><rect x="367.4" y="1525" width="0.1" height="15.0" fill="rgb(220,225,29)" rx="2" ry="2" />
<text  x="370.36" y="1535.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (6,932,278 samples, 0.01%)</title><rect x="367.6" y="1509" width="0.2" height="15.0" fill="rgb(226,196,19)" rx="2" ry="2" />
<text  x="370.62" y="1519.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; (8,452,843 samples, 0.02%)</title><rect x="999.7" y="1621" width="0.2" height="15.0" fill="rgb(227,68,20)" rx="2" ry="2" />
<text  x="1002.74" y="1631.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (5,591,374 samples, 0.01%)</title><rect x="1114.8" y="1653" width="0.2" height="15.0" fill="rgb(224,74,18)" rx="2" ry="2" />
<text  x="1117.83" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (6,207,624 samples, 0.01%)</title><rect x="1100.3" y="1813" width="0.1" height="15.0" fill="rgb(248,154,52)" rx="2" ry="2" />
<text  x="1103.30" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_alloc_ctx_lookup (5,470,378 samples, 0.01%)</title><rect x="221.9" y="1269" width="0.1" height="15.0" fill="rgb(243,180,42)" rx="2" ry="2" />
<text  x="224.90" y="1279.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::IsEmpty (10,223,781 samples, 0.02%)</title><rect x="197.4" y="1685" width="0.3" height="15.0" fill="rgb(248,97,51)" rx="2" ry="2" />
<text  x="200.44" y="1695.5" ></text>
</g>
<g >
<title>std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;::pair&lt;duckdb::ColumnBinding const&amp;&gt; (6,873,578 samples, 0.01%)</title><rect x="763.6" y="1589" width="0.1" height="15.0" fill="rgb(207,227,41)" rx="2" ry="2" />
<text  x="766.56" y="1599.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::DatabaseInstance&gt;::destroy&lt;duckdb::DatabaseInstance&gt; (100,574,591 samples, 0.20%)</title><rect x="1117.4" y="1893" width="2.3" height="15.0" fill="rgb(249,227,10)" rx="2" ry="2" />
<text  x="1120.43" y="1903.5" ></text>
</g>
<g >
<title>duckdb::TaskScheduler::GetScheduler (4,464,889 samples, 0.01%)</title><rect x="854.2" y="1797" width="0.1" height="15.0" fill="rgb(241,169,33)" rx="2" ry="2" />
<text  x="857.21" y="1807.5" ></text>
</g>
<g >
<title>duckdb::StringScanState::~StringScanState (4,401,856 samples, 0.01%)</title><rect x="287.7" y="1541" width="0.1" height="15.0" fill="rgb(230,11,54)" rx="2" ry="2" />
<text  x="290.69" y="1551.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (16,179,233 samples, 0.03%)</title><rect x="364.8" y="1813" width="0.4" height="15.0" fill="rgb(207,97,46)" rx="2" ry="2" />
<text  x="367.82" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::extent_deactivate_locked (32,631,803 samples, 0.06%)</title><rect x="346.9" y="661" width="0.8" height="15.0" fill="rgb(213,2,14)" rx="2" ry="2" />
<text  x="349.92" y="671.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DataChunk, std::default_delete&lt;duckdb::DataChunk&gt; &gt;::~unique_ptr (185,017,973 samples, 0.36%)</title><rect x="390.2" y="1909" width="4.3" height="15.0" fill="rgb(239,154,42)" rx="2" ry="2" />
<text  x="393.24" y="1919.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long&gt; (6,646,783 samples, 0.01%)</title><rect x="632.0" y="1701" width="0.2" height="15.0" fill="rgb(225,60,54)" rx="2" ry="2" />
<text  x="635.00" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundQueryNode, std::default_delete&lt;duckdb::BoundQueryNode&gt; &gt;::~unique_ptr (78,346,799 samples, 0.15%)</title><rect x="979.7" y="1781" width="1.8" height="15.0" fill="rgb(212,36,33)" rx="2" ry="2" />
<text  x="982.75" y="1791.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ValidityScanState, std::default_delete&lt;duckdb::ValidityScanState&gt; &gt;::__uniq_ptr_impl (5,558,129 samples, 0.01%)</title><rect x="214.3" y="1541" width="0.1" height="15.0" fill="rgb(207,91,12)" rx="2" ry="2" />
<text  x="217.29" y="1551.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::SelectionData&gt;::destroy&lt;duckdb::SelectionData&gt; (4,569,833 samples, 0.01%)</title><rect x="292.3" y="1397" width="0.1" height="15.0" fill="rgb(214,204,42)" rx="2" ry="2" />
<text  x="295.31" y="1407.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCheckpointer::Checkpoint (66,413,236 samples, 0.13%)</title><rect x="1117.9" y="1125" width="1.5" height="15.0" fill="rgb(254,131,18)" rx="2" ry="2" />
<text  x="1120.85" y="1135.5" ></text>
</g>
<g >
<title>sd_setup_read_write_cmnd (5,349,299 samples, 0.01%)</title><rect x="250.4" y="1365" width="0.1" height="15.0" fill="rgb(224,18,8)" rx="2" ry="2" />
<text  x="253.39" y="1375.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_choose_impl (6,525,978 samples, 0.01%)</title><rect x="107.4" y="1317" width="0.2" height="15.0" fill="rgb(245,164,4)" rx="2" ry="2" />
<text  x="110.43" y="1327.5" ></text>
</g>
<g >
<title>page_fault (11,012,581 samples, 0.02%)</title><rect x="67.5" y="2005" width="0.3" height="15.0" fill="rgb(242,124,40)" rx="2" ry="2" />
<text  x="70.54" y="2015.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::ReplaceBinding, true&gt;::vector (4,427,112 samples, 0.01%)</title><rect x="769.2" y="1781" width="0.1" height="15.0" fill="rgb(217,45,52)" rx="2" ry="2" />
<text  x="772.19" y="1791.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (6,583,287 samples, 0.01%)</title><rect x="895.4" y="1573" width="0.1" height="15.0" fill="rgb(242,40,32)" rx="2" ry="2" />
<text  x="898.35" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_dalloc_large (5,143,430 samples, 0.01%)</title><rect x="239.8" y="437" width="0.1" height="15.0" fill="rgb(230,224,47)" rx="2" ry="2" />
<text  x="242.82" y="447.5" ></text>
</g>
<g >
<title>enqueue_entity (6,530,058 samples, 0.01%)</title><rect x="93.6" y="1493" width="0.2" height="15.0" fill="rgb(237,155,4)" rx="2" ry="2" />
<text  x="96.63" y="1503.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc (46,298,498 samples, 0.09%)</title><rect x="487.0" y="1477" width="1.1" height="15.0" fill="rgb(232,51,1)" rx="2" ry="2" />
<text  x="490.03" y="1487.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (60,646,982 samples, 0.12%)</title><rect x="595.0" y="1733" width="1.4" height="15.0" fill="rgb(253,193,31)" rx="2" ry="2" />
<text  x="598.03" y="1743.5" ></text>
</g>
<g >
<title>[unknown] (9,228,683 samples, 0.02%)</title><rect x="34.6" y="2005" width="0.2" height="15.0" fill="rgb(224,118,33)" rx="2" ry="2" />
<text  x="37.59" y="2015.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (8,312,583 samples, 0.02%)</title><rect x="817.9" y="1797" width="0.2" height="15.0" fill="rgb(247,183,45)" rx="2" ry="2" />
<text  x="820.89" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Connection::Query (27,914,223 samples, 0.05%)</title><rect x="1108.6" y="1941" width="0.7" height="15.0" fill="rgb(252,47,52)" rx="2" ry="2" />
<text  x="1111.62" y="1951.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;::operator= (6,597,267 samples, 0.01%)</title><rect x="1105.2" y="1893" width="0.2" height="15.0" fill="rgb(213,5,2)" rx="2" ry="2" />
<text  x="1108.23" y="1903.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::vector (6,632,126 samples, 0.01%)</title><rect x="615.3" y="1781" width="0.1" height="15.0" fill="rgb(229,202,7)" rx="2" ry="2" />
<text  x="618.25" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::HTTPState,  (18,843,445 samples, 0.04%)</title><rect x="359.8" y="1877" width="0.4" height="15.0" fill="rgb(213,103,3)" rx="2" ry="2" />
<text  x="362.77" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_M_allocate_buckets (11,470,897 samples, 0.02%)</title><rect x="666.7" y="1669" width="0.3" height="15.0" fill="rgb(207,179,11)" rx="2" ry="2" />
<text  x="669.73" y="1679.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (60,367,821 samples, 0.12%)</title><rect x="297.4" y="1525" width="1.4" height="15.0" fill="rgb(233,133,29)" rx="2" ry="2" />
<text  x="300.37" y="1535.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CompressionAppendState, std::default_delete&lt;duckdb::CompressionAppendState&gt; &gt;::~unique_ptr (14,975,772 samples, 0.03%)</title><rect x="339.2" y="1381" width="0.3" height="15.0" fill="rgb(230,227,7)" rx="2" ry="2" />
<text  x="342.20" y="1391.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (117,415,303 samples, 0.23%)</title><rect x="1016.0" y="1781" width="2.7" height="15.0" fill="rgb(225,17,43)" rx="2" ry="2" />
<text  x="1018.97" y="1791.5" ></text>
</g>
<g >
<title>duckdb::make_unsafe_uniq_array&lt;duckdb::ColumnScanState&gt; (25,318,807 samples, 0.05%)</title><rect x="224.1" y="1701" width="0.5" height="15.0" fill="rgb(226,191,15)" rx="2" ry="2" />
<text  x="227.05" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt;::_M_default_append (20,482,519 samples, 0.04%)</title><rect x="639.9" y="1733" width="0.5" height="15.0" fill="rgb(208,3,17)" rx="2" ry="2" />
<text  x="642.89" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;::unique_ptr (8,452,843 samples, 0.02%)</title><rect x="999.7" y="1605" width="0.2" height="15.0" fill="rgb(216,107,16)" rx="2" ry="2" />
<text  x="1002.74" y="1615.5" ></text>
</g>
<g >
<title>std::distance&lt;char const*&gt; (4,451,400 samples, 0.01%)</title><rect x="600.0" y="1765" width="0.1" height="15.0" fill="rgb(207,109,38)" rx="2" ry="2" />
<text  x="603.03" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (4,900,080 samples, 0.01%)</title><rect x="108.7" y="1685" width="0.1" height="15.0" fill="rgb(243,206,10)" rx="2" ry="2" />
<text  x="111.70" y="1695.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::reference_wrapper&lt;duckdb::CommonTableExpressionInfo&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::reference_wrapper&lt;duckdb::CommonTableExpressionInfo&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (4,487,951 samples, 0.01%)</title><rect x="1018.1" y="1685" width="0.1" height="15.0" fill="rgb(207,195,35)" rx="2" ry="2" />
<text  x="1021.07" y="1695.5" ></text>
</g>
<g >
<title>duckdb::ColumnList::ColumnListIterator::ColumnLogicalIteratorInternal::operator* (12,093,044 samples, 0.02%)</title><rect x="1010.9" y="1829" width="0.3" height="15.0" fill="rgb(249,16,22)" rx="2" ry="2" />
<text  x="1013.88" y="1839.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (5,626,052 samples, 0.01%)</title><rect x="218.9" y="1349" width="0.1" height="15.0" fill="rgb(243,114,50)" rx="2" ry="2" />
<text  x="221.86" y="1359.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LogicalType, true&gt;::vector (9,257,903 samples, 0.02%)</title><rect x="388.4" y="1893" width="0.2" height="15.0" fill="rgb(219,183,35)" rx="2" ry="2" />
<text  x="391.42" y="1903.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::ReadVectorInternal (11,230,523 samples, 0.02%)</title><rect x="106.1" y="1701" width="0.3" height="15.0" fill="rgb(222,78,25)" rx="2" ry="2" />
<text  x="109.15" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::InClauseSimplificationRule, std::default_delete&lt;duckdb::InClauseSimplificationRule&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::InClauseSimplificationRule&gt;, void&gt; (7,966,385 samples, 0.02%)</title><rect x="810.9" y="1845" width="0.2" height="15.0" fill="rgb(212,6,45)" rx="2" ry="2" />
<text  x="813.93" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BlockMetaData, std::allocator&lt;duckdb::BlockMetaData&gt; &gt;::emplace_back&lt;duckdb::BlockMetaData&gt; (10,954,664 samples, 0.02%)</title><rect x="381.5" y="1797" width="0.2" height="15.0" fill="rgb(215,87,38)" rx="2" ry="2" />
<text  x="384.48" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocate (16,672,128 samples, 0.03%)</title><rect x="107.3" y="1541" width="0.4" height="15.0" fill="rgb(238,79,3)" rx="2" ry="2" />
<text  x="110.29" y="1551.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::AllocatedData, std::allocator&lt;duckdb::AllocatedData&gt; &gt;::_M_realloc_insert&lt;duckdb::AllocatedData&gt; (20,103,365 samples, 0.04%)</title><rect x="382.2" y="1797" width="0.5" height="15.0" fill="rgb(208,65,49)" rx="2" ry="2" />
<text  x="385.21" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::unique_ptr (14,906,928 samples, 0.03%)</title><rect x="1035.4" y="1893" width="0.3" height="15.0" fill="rgb(218,39,10)" rx="2" ry="2" />
<text  x="1038.40" y="1903.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::operator= (4,739,804 samples, 0.01%)</title><rect x="785.4" y="1829" width="0.1" height="15.0" fill="rgb(230,109,40)" rx="2" ry="2" />
<text  x="788.43" y="1839.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (5,454,061 samples, 0.01%)</title><rect x="639.4" y="1669" width="0.1" height="15.0" fill="rgb(241,80,26)" rx="2" ry="2" />
<text  x="642.37" y="1679.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalExpressionGet, std::default_delete&lt;duckdb::LogicalExpressionGet&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::LogicalExpressionGet&gt;, void&gt; (6,470,479 samples, 0.01%)</title><rect x="975.6" y="1701" width="0.1" height="15.0" fill="rgb(222,113,16)" rx="2" ry="2" />
<text  x="978.56" y="1711.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;duckdb::OptimizerType, duckdb::OptimizerType, std::_Identity&lt;duckdb::OptimizerType&gt;, std::less&lt;duckdb::OptimizerType&gt;, std::allocator&lt;duckdb::OptimizerType&gt; &gt;::end (4,497,708 samples, 0.01%)</title><rect x="773.9" y="1829" width="0.1" height="15.0" fill="rgb(229,126,37)" rx="2" ry="2" />
<text  x="776.85" y="1839.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (15,684,574 samples, 0.03%)</title><rect x="293.9" y="1589" width="0.4" height="15.0" fill="rgb(230,150,1)" rx="2" ry="2" />
<text  x="296.94" y="1599.5" ></text>
</g>
<g >
<title>duckdb::TemplatedComputeHashes&lt;duckdb::string_t&gt; (5,234,587 samples, 0.01%)</title><rect x="229.1" y="1573" width="0.1" height="15.0" fill="rgb(221,152,12)" rx="2" ry="2" />
<text  x="232.08" y="1583.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_gc_event_handler (13,632,425 samples, 0.03%)</title><rect x="493.7" y="1429" width="0.3" height="15.0" fill="rgb(245,99,53)" rx="2" ry="2" />
<text  x="496.70" y="1439.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::JoinRelationSet*, std::pair&lt;duckdb::JoinRelationSet* const, duckdb::unique_ptr&lt;duckdb::JoinNode, std::default_delete&lt;duckdb::JoinNode&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;duckdb::JoinRelationSet* const, duckdb::unique_ptr&lt;duckdb::JoinNode, std::default_delete&lt;duckdb::JoinNode&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::JoinRelationSet*&gt;, std::hash&lt;duckdb::JoinRelationSet*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (5,501,514 samples, 0.01%)</title><rect x="757.2" y="1749" width="0.1" height="15.0" fill="rgb(254,40,2)" rx="2" ry="2" />
<text  x="760.19" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundQueryNode, std::default_delete&lt;duckdb::BoundQueryNode&gt; &gt;::operator= (14,079,143 samples, 0.03%)</title><rect x="972.9" y="1765" width="0.3" height="15.0" fill="rgb(224,220,0)" rx="2" ry="2" />
<text  x="975.87" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; (8,866,616 samples, 0.02%)</title><rect x="490.7" y="1717" width="0.2" height="15.0" fill="rgb(245,80,1)" rx="2" ry="2" />
<text  x="493.67" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (50,041,640 samples, 0.10%)</title><rect x="401.2" y="1557" width="1.1" height="15.0" fill="rgb(205,13,12)" rx="2" ry="2" />
<text  x="404.15" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt;, std::__detail::_Identity, duckdb::ColumnBindingEquality, duckdb::ColumnBindingHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::insert (27,780,128 samples, 0.05%)</title><rect x="725.3" y="1621" width="0.6" height="15.0" fill="rgb(224,88,49)" rx="2" ry="2" />
<text  x="728.28" y="1631.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ColumnDataAllocator&gt;::shared_ptr&lt;std::allocator&lt;duckdb::ColumnDataAllocator&gt;, duckdb::Allocator&amp;&gt; (16,994,253 samples, 0.03%)</title><rect x="386.7" y="1861" width="0.3" height="15.0" fill="rgb(243,133,41)" rx="2" ry="2" />
<text  x="389.66" y="1871.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::PhysicalOperator&gt; (15,198,316 samples, 0.03%)</title><rect x="833.9" y="1813" width="0.4" height="15.0" fill="rgb(252,216,45)" rx="2" ry="2" />
<text  x="836.94" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;::unique_ptr (50,158,728 samples, 0.10%)</title><rect x="770.6" y="1813" width="1.1" height="15.0" fill="rgb(206,145,52)" rx="2" ry="2" />
<text  x="773.55" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants_impl (10,516,937 samples, 0.02%)</title><rect x="891.1" y="1381" width="0.3" height="15.0" fill="rgb(252,86,29)" rx="2" ry="2" />
<text  x="894.13" y="1391.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::PhysicalOperator (18,237,019 samples, 0.04%)</title><rect x="907.9" y="1717" width="0.4" height="15.0" fill="rgb(243,78,35)" rx="2" ry="2" />
<text  x="910.90" y="1727.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_next_grapheme (24,116,336 samples, 0.05%)</title><rect x="625.8" y="1733" width="0.6" height="15.0" fill="rgb(231,219,10)" rx="2" ry="2" />
<text  x="628.84" y="1743.5" ></text>
</g>
<g >
<title>duckdb::LocalStorage::InitializeAppend (140,521,606 samples, 0.27%)</title><rect x="102.0" y="1733" width="3.3" height="15.0" fill="rgb(237,202,37)" rx="2" ry="2" />
<text  x="105.02" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::~vector (23,416,250 samples, 0.05%)</title><rect x="653.6" y="1765" width="0.5" height="15.0" fill="rgb(253,195,22)" rx="2" ry="2" />
<text  x="656.58" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;duckdb::ColumnBinding, true&gt; &gt; &gt;::_M_deallocate_nodes (5,808,604 samples, 0.01%)</title><rect x="724.9" y="1685" width="0.1" height="15.0" fill="rgb(253,72,31)" rx="2" ry="2" />
<text  x="727.90" y="1695.5" ></text>
</g>
<g >
<title>duckdb::InsertGlobalState::~InsertGlobalState (68,344,415 samples, 0.13%)</title><rect x="338.2" y="1541" width="1.6" height="15.0" fill="rgb(224,70,35)" rx="2" ry="2" />
<text  x="341.22" y="1551.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::LogicalOperator&gt;::operator (16,146,964 samples, 0.03%)</title><rect x="1036.4" y="1477" width="0.4" height="15.0" fill="rgb(219,29,35)" rx="2" ry="2" />
<text  x="1039.42" y="1487.5" ></text>
</g>
<g >
<title>duckdb::QueryResult::~QueryResult (21,839,662 samples, 0.04%)</title><rect x="1121.4" y="1925" width="0.5" height="15.0" fill="rgb(246,87,35)" rx="2" ry="2" />
<text  x="1124.40" y="1935.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetEntry (88,057,313 samples, 0.17%)</title><rect x="1042.7" y="1877" width="2.0" height="15.0" fill="rgb(247,202,20)" rx="2" ry="2" />
<text  x="1045.65" y="1887.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;::unique_ptr (5,195,144 samples, 0.01%)</title><rect x="536.1" y="1685" width="0.1" height="15.0" fill="rgb(249,195,29)" rx="2" ry="2" />
<text  x="539.06" y="1695.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::deallocate (9,975,103 samples, 0.02%)</title><rect x="670.3" y="1685" width="0.2" height="15.0" fill="rgb(242,183,18)" rx="2" ry="2" />
<text  x="673.31" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;*, std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, void, bool&gt; (4,569,177 samples, 0.01%)</title><rect x="635.7" y="1701" width="0.1" height="15.0" fill="rgb(211,206,45)" rx="2" ry="2" />
<text  x="638.71" y="1711.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::DatabaseManager, std::default_delete&lt;duckdb::DatabaseManager&gt; &gt;::_M_ptr (4,355,234 samples, 0.01%)</title><rect x="1042.5" y="1813" width="0.1" height="15.0" fill="rgb(211,142,29)" rx="2" ry="2" />
<text  x="1045.52" y="1823.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (87,948,078 samples, 0.17%)</title><rect x="436.9" y="1557" width="2.1" height="15.0" fill="rgb(250,79,16)" rx="2" ry="2" />
<text  x="439.93" y="1567.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;duckdb::BoundColumnRefExpression&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BoundColumnRefExpression&gt;, void&gt; (5,699,976 samples, 0.01%)</title><rect x="951.9" y="1589" width="0.1" height="15.0" fill="rgb(248,31,10)" rx="2" ry="2" />
<text  x="954.91" y="1599.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::RenderWidth (4,567,557 samples, 0.01%)</title><rect x="614.8" y="1781" width="0.1" height="15.0" fill="rgb(253,40,44)" rx="2" ry="2" />
<text  x="617.81" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;::construct&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, unsigned long&amp;&gt; (14,615,356 samples, 0.03%)</title><rect x="473.9" y="1557" width="0.3" height="15.0" fill="rgb(244,140,1)" rx="2" ry="2" />
<text  x="476.87" y="1567.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::SetNode (9,793,114 samples, 0.02%)</title><rect x="621.3" y="1749" width="0.2" height="15.0" fill="rgb(232,129,5)" rx="2" ry="2" />
<text  x="624.29" y="1759.5" ></text>
</g>
<g >
<title>duckdb::RowGroup::Append (6,336,979 samples, 0.01%)</title><rect x="105.4" y="1701" width="0.1" height="15.0" fill="rgb(228,1,40)" rx="2" ry="2" />
<text  x="108.39" y="1711.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringAppendBase (22,885,180 samples, 0.04%)</title><rect x="461.7" y="1637" width="0.5" height="15.0" fill="rgb(248,62,48)" rx="2" ry="2" />
<text  x="464.71" y="1647.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::BaseStatistics (23,235,536 samples, 0.05%)</title><rect x="442.2" y="1653" width="0.6" height="15.0" fill="rgb(232,218,50)" rx="2" ry="2" />
<text  x="445.23" y="1663.5" ></text>
</g>
<g >
<title>__blk_mq_delay_run_hw_queue (41,232,781 samples, 0.08%)</title><rect x="249.7" y="1493" width="0.9" height="15.0" fill="rgb(254,54,14)" rx="2" ry="2" />
<text  x="252.67" y="1503.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SQLStatement, std::default_delete&lt;duckdb::SQLStatement&gt; &gt;::unique_ptr (8,594,516 samples, 0.02%)</title><rect x="539.8" y="1813" width="0.2" height="15.0" fill="rgb(244,161,38)" rx="2" ry="2" />
<text  x="542.78" y="1823.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderNode (8,448,014 samples, 0.02%)</title><rect x="595.9" y="1669" width="0.2" height="15.0" fill="rgb(228,148,21)" rx="2" ry="2" />
<text  x="598.90" y="1679.5" ></text>
</g>
<g >
<title>duckdb::Event::Event (8,385,507 samples, 0.02%)</title><rect x="1051.5" y="1653" width="0.2" height="15.0" fill="rgb(254,99,45)" rx="2" ry="2" />
<text  x="1054.54" y="1663.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_ctx_get (5,815,681 samples, 0.01%)</title><rect x="438.5" y="1397" width="0.1" height="15.0" fill="rgb(253,34,21)" rx="2" ry="2" />
<text  x="441.47" y="1407.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::push_back (37,127,700 samples, 0.07%)</title><rect x="817.7" y="1845" width="0.8" height="15.0" fill="rgb(205,206,47)" rx="2" ry="2" />
<text  x="820.66" y="1855.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::PhysicalColumnDataScanState&gt; (13,456,097 samples, 0.03%)</title><rect x="91.8" y="1701" width="0.3" height="15.0" fill="rgb(221,191,29)" rx="2" ry="2" />
<text  x="94.84" y="1711.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (87,730,273 samples, 0.17%)</title><rect x="333.4" y="1541" width="2.0" height="15.0" fill="rgb(229,115,9)" rx="2" ry="2" />
<text  x="336.43" y="1551.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Event&gt; &gt; &gt;::_M_realloc_insert&lt;std::weak_ptr&lt;duckdb::Event&gt; &gt; (21,373,254 samples, 0.04%)</title><rect x="1047.3" y="1765" width="0.5" height="15.0" fill="rgb(235,198,17)" rx="2" ry="2" />
<text  x="1050.34" y="1775.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::~AllocatedData (5,862,485 samples, 0.01%)</title><rect x="108.5" y="1509" width="0.2" height="15.0" fill="rgb(227,8,19)" rx="2" ry="2" />
<text  x="111.53" y="1519.5" ></text>
</g>
<g >
<title>duckdb::PhysicalColumnDataScan::GetData (22,057,061 samples, 0.04%)</title><rect x="105.9" y="1765" width="0.6" height="15.0" fill="rgb(244,7,54)" rx="2" ry="2" />
<text  x="108.95" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorBuffer&gt; &gt;::destroy&lt;duckdb::VectorBuffer&gt; (4,379,137 samples, 0.01%)</title><rect x="895.6" y="1573" width="0.1" height="15.0" fill="rgb(246,5,16)" rx="2" ry="2" />
<text  x="898.64" y="1583.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::insert (194,382,021 samples, 0.38%)</title><rect x="664.8" y="1781" width="4.4" height="15.0" fill="rgb(242,181,23)" rx="2" ry="2" />
<text  x="667.77" y="1791.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (5,323,827 samples, 0.01%)</title><rect x="728.7" y="1701" width="0.2" height="15.0" fill="rgb(207,89,19)" rx="2" ry="2" />
<text  x="731.75" y="1711.5" ></text>
</g>
<g >
<title>std::function&lt;void  (18,914,338 samples, 0.04%)</title><rect x="546.7" y="1765" width="0.5" height="15.0" fill="rgb(229,67,53)" rx="2" ry="2" />
<text  x="549.75" y="1775.5" ></text>
</g>
<g >
<title>duckdb::BufferedFileWriter::GetFileSize (25,505,333 samples, 0.05%)</title><rect x="190.5" y="1781" width="0.6" height="15.0" fill="rgb(237,185,50)" rx="2" ry="2" />
<text  x="193.51" y="1791.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::RowGroup, duckdb::RowGroupCollection&amp;, unsigned long&amp;, int&gt; (31,383,425 samples, 0.06%)</title><rect x="457.5" y="1733" width="0.7" height="15.0" fill="rgb(252,65,12)" rx="2" ry="2" />
<text  x="460.47" y="1743.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::PreparedStatementData, std::allocator&lt;duckdb::PreparedStatementData&gt;,  (617,798,355 samples, 1.20%)</title><rect x="337.3" y="1749" width="14.2" height="15.0" fill="rgb(250,172,21)" rx="2" ry="2" />
<text  x="340.33" y="1759.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Free (74,177,449 samples, 0.14%)</title><rect x="481.8" y="1445" width="1.7" height="15.0" fill="rgb(245,84,1)" rx="2" ry="2" />
<text  x="484.78" y="1455.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::vector (4,602,740 samples, 0.01%)</title><rect x="853.2" y="1765" width="0.1" height="15.0" fill="rgb(230,226,54)" rx="2" ry="2" />
<text  x="856.18" y="1775.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::Build (166,653,289 samples, 0.32%)</title><rect x="1079.1" y="1861" width="3.8" height="15.0" fill="rgb(239,84,54)" rx="2" ry="2" />
<text  x="1082.11" y="1871.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::RelationsToTDom, true&gt;::~vector (7,127,676 samples, 0.01%)</title><rect x="755.8" y="1749" width="0.2" height="15.0" fill="rgb(208,16,40)" rx="2" ry="2" />
<text  x="758.84" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (6,056,586 samples, 0.01%)</title><rect x="757.9" y="1749" width="0.1" height="15.0" fill="rgb(247,222,26)" rx="2" ry="2" />
<text  x="760.86" y="1759.5" ></text>
</g>
<g >
<title>duckdb::CaseSimplificationRule::CaseSimplificationRule (30,126,130 samples, 0.06%)</title><rect x="790.5" y="1861" width="0.7" height="15.0" fill="rgb(238,70,12)" rx="2" ry="2" />
<text  x="793.47" y="1871.5" ></text>
</g>
<g >
<title>duckdb::StatementProperties::operator= (20,088,677 samples, 0.04%)</title><rect x="1034.3" y="1893" width="0.4" height="15.0" fill="rgb(216,23,18)" rx="2" ry="2" />
<text  x="1037.28" y="1903.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::_M_check_len (7,467,979 samples, 0.01%)</title><rect x="894.5" y="1701" width="0.2" height="15.0" fill="rgb(220,119,41)" rx="2" ry="2" />
<text  x="897.50" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ConstantExpression, std::default_delete&lt;duckdb::ConstantExpression&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConstantExpression&gt;, void&gt; (9,599,219 samples, 0.02%)</title><rect x="528.9" y="1653" width="0.3" height="15.0" fill="rgb(228,28,15)" rx="2" ry="2" />
<text  x="531.94" y="1663.5" ></text>
</g>
<g >
<title>std::initializer_list&lt;unsigned long&gt;::begin (5,307,700 samples, 0.01%)</title><rect x="650.5" y="1733" width="0.2" height="15.0" fill="rgb(225,79,33)" rx="2" ry="2" />
<text  x="653.53" y="1743.5" ></text>
</g>
<g >
<title>duckdb::SelCache::SelCache (4,610,182 samples, 0.01%)</title><rect x="293.1" y="1701" width="0.1" height="15.0" fill="rgb(231,211,29)" rx="2" ry="2" />
<text  x="296.11" y="1711.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;duckdb::AttachedDatabase*, duckdb::Transaction*, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt; &gt;::find (9,335,494 samples, 0.02%)</title><rect x="421.9" y="1685" width="0.2" height="15.0" fill="rgb(245,11,29)" rx="2" ry="2" />
<text  x="424.93" y="1695.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (6,996,651 samples, 0.01%)</title><rect x="777.0" y="1701" width="0.2" height="15.0" fill="rgb(240,202,27)" rx="2" ry="2" />
<text  x="780.01" y="1711.5" ></text>
</g>
<g >
<title>duckdb::Binder::BindModifierTypes (5,879,395 samples, 0.01%)</title><rect x="942.1" y="1749" width="0.1" height="15.0" fill="rgb(242,83,45)" rx="2" ry="2" />
<text  x="945.09" y="1759.5" ></text>
</g>
<g >
<title>duckdb::RenderTree::HasNode (20,133,670 samples, 0.04%)</title><rect x="555.2" y="1797" width="0.4" height="15.0" fill="rgb(239,27,21)" rx="2" ry="2" />
<text  x="558.18" y="1807.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve (6,945,605 samples, 0.01%)</title><rect x="1184.6" y="2037" width="0.1" height="15.0" fill="rgb(238,217,8)" rx="2" ry="2" />
<text  x="1187.56" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt; &gt;::_M_deallocate_node (49,593,671 samples, 0.10%)</title><rect x="861.5" y="1685" width="1.2" height="15.0" fill="rgb(230,10,7)" rx="2" ry="2" />
<text  x="864.52" y="1695.5" ></text>
</g>
<g >
<title>duckdb::AttachedDatabase::IsSystem (5,192,141 samples, 0.01%)</title><rect x="1098.5" y="1877" width="0.1" height="15.0" fill="rgb(234,100,21)" rx="2" ry="2" />
<text  x="1101.46" y="1887.5" ></text>
</g>
<g >
<title>duckdb::GroupByNode::GroupByNode (6,710,336 samples, 0.01%)</title><rect x="532.5" y="1733" width="0.2" height="15.0" fill="rgb(230,36,5)" rx="2" ry="2" />
<text  x="535.50" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Transformer::Transformer (14,625,777 samples, 0.03%)</title><rect x="540.3" y="1925" width="0.3" height="15.0" fill="rgb(218,41,6)" rx="2" ry="2" />
<text  x="543.29" y="1935.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (31,747,656 samples, 0.06%)</title><rect x="357.5" y="1733" width="0.7" height="15.0" fill="rgb(220,57,11)" rx="2" ry="2" />
<text  x="360.48" y="1743.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::optional_ptr&lt;duckdb::DataTable&gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::optional_ptr&lt;duckdb::DataTable&gt; &gt; &gt; &gt;::begin (5,188,560 samples, 0.01%)</title><rect x="322.1" y="1781" width="0.1" height="15.0" fill="rgb(211,198,31)" rx="2" ry="2" />
<text  x="325.11" y="1791.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateExpression (25,203,499 samples, 0.05%)</title><rect x="766.2" y="1701" width="0.6" height="15.0" fill="rgb(250,127,4)" rx="2" ry="2" />
<text  x="769.17" y="1711.5" ></text>
</g>
<g >
<title>duckdb::LocalTableStorage::LocalTableStorage (332,383,371 samples, 0.65%)</title><rect x="423.1" y="1621" width="7.7" height="15.0" fill="rgb(225,226,19)" rx="2" ry="2" />
<text  x="426.13" y="1631.5" ></text>
</g>
<g >
<title>duckdb::unsafe_get_property (4,587,499 samples, 0.01%)</title><rect x="626.6" y="1717" width="0.1" height="15.0" fill="rgb(241,162,8)" rx="2" ry="2" />
<text  x="629.61" y="1727.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::HTTPState, std::allocator&lt;duckdb::HTTPState&gt;,  (5,197,397 samples, 0.01%)</title><rect x="516.9" y="1845" width="0.1" height="15.0" fill="rgb(250,171,20)" rx="2" ry="2" />
<text  x="519.90" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnScanState, std::allocator&lt;duckdb::ColumnScanState&gt; &gt;::resize (19,566,926 samples, 0.04%)</title><rect x="223.6" y="1685" width="0.5" height="15.0" fill="rgb(221,167,16)" rx="2" ry="2" />
<text  x="226.60" y="1695.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::QueryProfiler&gt;::~shared_ptr (27,099,394 samples, 0.05%)</title><rect x="352.4" y="1813" width="0.6" height="15.0" fill="rgb(237,55,43)" rx="2" ry="2" />
<text  x="355.40" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnScanState, std::allocator&lt;duckdb::ColumnScanState&gt; &gt;::_M_default_append (18,008,603 samples, 0.04%)</title><rect x="223.6" y="1669" width="0.4" height="15.0" fill="rgb(246,40,34)" rx="2" ry="2" />
<text  x="226.60" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc (13,709,604 samples, 0.03%)</title><rect x="482.1" y="1365" width="0.3" height="15.0" fill="rgb(227,124,7)" rx="2" ry="2" />
<text  x="485.08" y="1375.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::IntegerTypeMatcher&gt; (13,074,189 samples, 0.03%)</title><rect x="784.7" y="1845" width="0.3" height="15.0" fill="rgb(247,129,5)" rx="2" ry="2" />
<text  x="787.72" y="1855.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (9,230,395 samples, 0.02%)</title><rect x="621.8" y="1669" width="0.2" height="15.0" fill="rgb(205,210,43)" rx="2" ry="2" />
<text  x="624.77" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ColumnRefExpression::ColumnRefExpression (4,927,870 samples, 0.01%)</title><rect x="943.8" y="1669" width="0.1" height="15.0" fill="rgb(213,218,15)" rx="2" ry="2" />
<text  x="946.83" y="1679.5" ></text>
</g>
<g >
<title>[unknown] (5,780,606 samples, 0.01%)</title><rect x="11.3" y="53" width="0.1" height="15.0" fill="rgb(229,20,9)" rx="2" ry="2" />
<text  x="14.25" y="63.5" ></text>
</g>
<g >
<title>duckdb::BindContext::CreateColumnReference (59,363,764 samples, 0.12%)</title><rect x="953.2" y="1621" width="1.4" height="15.0" fill="rgb(239,193,41)" rx="2" ry="2" />
<text  x="956.19" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (10,384,743 samples, 0.02%)</title><rect x="613.6" y="1749" width="0.2" height="15.0" fill="rgb(211,6,17)" rx="2" ry="2" />
<text  x="616.60" y="1759.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::CatalogLookup, true&gt;::~vector (7,053,736 samples, 0.01%)</title><rect x="1009.5" y="1781" width="0.2" height="15.0" fill="rgb(228,42,32)" rx="2" ry="2" />
<text  x="1012.51" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (9,290,846 samples, 0.02%)</title><rect x="467.3" y="1749" width="0.2" height="15.0" fill="rgb(209,184,48)" rx="2" ry="2" />
<text  x="470.32" y="1759.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::~VectorCache (88,046,952 samples, 0.17%)</title><rect x="895.9" y="1669" width="2.1" height="15.0" fill="rgb(246,86,48)" rx="2" ry="2" />
<text  x="898.93" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ValidityColumnData::ValidityColumnData (7,808,044 samples, 0.02%)</title><rect x="455.0" y="1525" width="0.1" height="15.0" fill="rgb(215,200,26)" rx="2" ry="2" />
<text  x="457.96" y="1535.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, std::shared_ptr&lt;duckdb::BoundParameterData&gt;, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, std::shared_ptr&lt;duckdb::BoundParameterData&gt; &gt; &gt; &gt;::operator= (6,764,624 samples, 0.01%)</title><rect x="1041.8" y="1893" width="0.1" height="15.0" fill="rgb(225,103,2)" rx="2" ry="2" />
<text  x="1044.75" y="1903.5" ></text>
</g>
<g >
<title>duckdb::AttachedDatabase::Initialize (328,878,641 samples, 0.64%)</title><rect x="1109.6" y="1957" width="7.6" height="15.0" fill="rgb(244,13,51)" rx="2" ry="2" />
<text  x="1112.63" y="1967.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::StringValueInfo, std::allocator&lt;duckdb::StringValueInfo&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (7,214,141 samples, 0.01%)</title><rect x="1119.9" y="1893" width="0.2" height="15.0" fill="rgb(248,43,31)" rx="2" ry="2" />
<text  x="1122.91" y="1903.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::operator= (10,320,189 samples, 0.02%)</title><rect x="965.9" y="1749" width="0.3" height="15.0" fill="rgb(224,119,53)" rx="2" ry="2" />
<text  x="968.92" y="1759.5" ></text>
</g>
<g >
<title>duckdb::DataTable::VerifyAppendConstraints (15,200,120 samples, 0.03%)</title><rect x="464.2" y="1781" width="0.4" height="15.0" fill="rgb(209,113,28)" rx="2" ry="2" />
<text  x="467.21" y="1791.5" ></text>
</g>
<g >
<title>__asan::RZSize2Log (53,004,585 samples, 0.10%)</title><rect x="181.7" y="2037" width="1.2" height="15.0" fill="rgb(219,167,19)" rx="2" ry="2" />
<text  x="184.68" y="2047.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnDataCollection, std::default_delete&lt;duckdb::ColumnDataCollection&gt;, true&gt;::~unique_ptr (132,966,399 samples, 0.26%)</title><rect x="1121.9" y="1925" width="3.1" height="15.0" fill="rgb(234,127,51)" rx="2" ry="2" />
<text  x="1124.90" y="1935.5" ></text>
</g>
<g >
<title>duckdb::ThreadContext::~ThreadContext (43,834,538 samples, 0.09%)</title><rect x="499.6" y="1797" width="1.0" height="15.0" fill="rgb(240,6,45)" rx="2" ry="2" />
<text  x="502.63" y="1807.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::LocalTableStorage&gt; &gt;::construct&lt;duckdb::LocalTableStorage, duckdb::DataTable&amp;&gt; (346,858,115 samples, 0.68%)</title><rect x="423.0" y="1653" width="8.0" height="15.0" fill="rgb(218,60,7)" rx="2" ry="2" />
<text  x="426.01" y="1663.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;, true&gt;::operator[] (4,355,968 samples, 0.01%)</title><rect x="1075.2" y="1749" width="0.1" height="15.0" fill="rgb(228,101,41)" rx="2" ry="2" />
<text  x="1078.24" y="1759.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocate (63,473,631 samples, 0.12%)</title><rect x="192.7" y="1701" width="1.5" height="15.0" fill="rgb(223,121,13)" rx="2" ry="2" />
<text  x="195.70" y="1711.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long, std::deque&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;::stack&lt;std::deque&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;, void&gt; (8,981,929 samples, 0.02%)</title><rect x="404.4" y="1845" width="0.2" height="15.0" fill="rgb(242,31,39)" rx="2" ry="2" />
<text  x="407.41" y="1855.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;duckdb::Pipeline*, std::hash&lt;duckdb::Pipeline*&gt;, std::equal_to&lt;duckdb::Pipeline*&gt;, std::allocator&lt;duckdb::Pipeline*&gt; &gt;::~unordered_set (7,295,777 samples, 0.01%)</title><rect x="1096.9" y="1733" width="0.2" height="15.0" fill="rgb(230,137,22)" rx="2" ry="2" />
<text  x="1099.93" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ConcurrentQueue::Enqueue (40,860,516 samples, 0.08%)</title><rect x="1058.3" y="1781" width="0.9" height="15.0" fill="rgb(218,124,9)" rx="2" ry="2" />
<text  x="1061.28" y="1791.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::~CatalogSet (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1749" width="1.9" height="15.0" fill="rgb(252,40,49)" rx="2" ry="2" />
<text  x="1120.81" y="1759.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::~FunctionExpressionMatcher (29,609,709 samples, 0.06%)</title><rect x="829.6" y="1621" width="0.7" height="15.0" fill="rgb(247,1,13)" rx="2" ry="2" />
<text  x="832.58" y="1631.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalExpressionScan, std::default_delete&lt;duckdb::PhysicalExpressionScan&gt; &gt;::get (8,525,893 samples, 0.02%)</title><rect x="914.9" y="1765" width="0.2" height="15.0" fill="rgb(240,90,41)" rx="2" ry="2" />
<text  x="917.88" y="1775.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;duckdb::OptimizerType, duckdb::OptimizerType, std::_Identity&lt;duckdb::OptimizerType&gt;, std::less&lt;duckdb::OptimizerType&gt;, std::allocator&lt;duckdb::OptimizerType&gt; &gt;::end (4,531,392 samples, 0.01%)</title><rect x="721.9" y="1861" width="0.1" height="15.0" fill="rgb(210,162,39)" rx="2" ry="2" />
<text  x="724.92" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1045" width="0.1" height="15.0" fill="rgb(239,98,43)" rx="2" ry="2" />
<text  x="14.25" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (53,111,241 samples, 0.10%)</title><rect x="1024.4" y="1829" width="1.2" height="15.0" fill="rgb(208,191,33)" rx="2" ry="2" />
<text  x="1027.42" y="1839.5" ></text>
</g>
<g >
<title>std::function&lt;void  (66,812,290 samples, 0.13%)</title><rect x="741.3" y="1733" width="1.5" height="15.0" fill="rgb(236,82,53)" rx="2" ry="2" />
<text  x="744.29" y="1743.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (128,847,909 samples, 0.25%)</title><rect x="889.8" y="1637" width="2.9" height="15.0" fill="rgb(207,156,11)" rx="2" ry="2" />
<text  x="892.77" y="1647.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (6,016,944 samples, 0.01%)</title><rect x="569.4" y="1637" width="0.1" height="15.0" fill="rgb(226,119,50)" rx="2" ry="2" />
<text  x="572.36" y="1647.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (149,710,253 samples, 0.29%)</title><rect x="492.2" y="1797" width="3.4" height="15.0" fill="rgb(238,130,50)" rx="2" ry="2" />
<text  x="495.20" y="1807.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::BoundColumnRefExpression&gt; &gt; (5,784,625 samples, 0.01%)</title><rect x="952.2" y="1589" width="0.2" height="15.0" fill="rgb(232,132,54)" rx="2" ry="2" />
<text  x="955.22" y="1599.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::ColumnDataCollectionSegment (71,621,474 samples, 0.14%)</title><rect x="376.7" y="1877" width="1.7" height="15.0" fill="rgb(226,84,3)" rx="2" ry="2" />
<text  x="379.71" y="1887.5" ></text>
</g>
<g >
<title>duckdb::DistinctStatistics::DistinctStatistics (21,233,706 samples, 0.04%)</title><rect x="426.5" y="1397" width="0.5" height="15.0" fill="rgb(253,179,24)" rx="2" ry="2" />
<text  x="429.47" y="1407.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~vector (23,416,250 samples, 0.05%)</title><rect x="653.6" y="1749" width="0.5" height="15.0" fill="rgb(243,202,5)" rx="2" ry="2" />
<text  x="656.58" y="1759.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt; const&amp;, std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::operator= (9,672,073 samples, 0.02%)</title><rect x="1034.4" y="1829" width="0.2" height="15.0" fill="rgb(227,154,44)" rx="2" ry="2" />
<text  x="1037.41" y="1839.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1461" width="0.1" height="15.0" fill="rgb(248,9,28)" rx="2" ry="2" />
<text  x="14.25" y="1471.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::push_back (13,662,748 samples, 0.03%)</title><rect x="375.5" y="1893" width="0.3" height="15.0" fill="rgb(247,191,21)" rx="2" ry="2" />
<text  x="378.53" y="1903.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::End (15,280,989 samples, 0.03%)</title><rect x="703.5" y="1845" width="0.3" height="15.0" fill="rgb(252,128,39)" rx="2" ry="2" />
<text  x="706.47" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Allocator::FreeData (68,075,544 samples, 0.13%)</title><rect x="1123.2" y="1605" width="1.5" height="15.0" fill="rgb(213,98,17)" rx="2" ry="2" />
<text  x="1126.15" y="1615.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt; &gt; (27,413,982 samples, 0.05%)</title><rect x="569.2" y="1669" width="0.6" height="15.0" fill="rgb(225,124,18)" rx="2" ry="2" />
<text  x="572.17" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;::operator= (10,690,959 samples, 0.02%)</title><rect x="439.2" y="1637" width="0.2" height="15.0" fill="rgb(227,108,40)" rx="2" ry="2" />
<text  x="442.20" y="1647.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringAppendBase (15,420,429 samples, 0.03%)</title><rect x="230.0" y="1541" width="0.4" height="15.0" fill="rgb(229,133,54)" rx="2" ry="2" />
<text  x="233.03" y="1551.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (4,777,117 samples, 0.01%)</title><rect x="356.2" y="1333" width="0.1" height="15.0" fill="rgb(242,116,49)" rx="2" ry="2" />
<text  x="359.15" y="1343.5" ></text>
</g>
<g >
<title>duckdb::ArgMinFun::GetFunctions (11,183,472 samples, 0.02%)</title><rect x="1112.4" y="1909" width="0.3" height="15.0" fill="rgb(250,213,41)" rx="2" ry="2" />
<text  x="1115.42" y="1919.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::_M_check_len (7,602,911 samples, 0.01%)</title><rect x="969.3" y="1717" width="0.2" height="15.0" fill="rgb(215,91,12)" rx="2" ry="2" />
<text  x="972.28" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ColumnLifetimeAnalyzer::VisitOperator (108,526,647 samples, 0.21%)</title><rect x="723.9" y="1813" width="2.5" height="15.0" fill="rgb(254,11,51)" rx="2" ry="2" />
<text  x="726.89" y="1823.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (85,524,217 samples, 0.17%)</title><rect x="486.6" y="1717" width="2.0" height="15.0" fill="rgb(253,161,22)" rx="2" ry="2" />
<text  x="489.62" y="1727.5" ></text>
</g>
<g >
<title>duckdb::CommonSubExpressionOptimizer::ExtractCommonSubExpresions (49,065,074 samples, 0.10%)</title><rect x="728.0" y="1749" width="1.2" height="15.0" fill="rgb(241,99,40)" rx="2" ry="2" />
<text  x="731.05" y="1759.5" ></text>
</g>
<g >
<title>std::pair&lt;duckdb::ColumnBinding const, duckdb::vector&lt;duckdb::BoundColumnRefExpression*, true&gt; &gt;::pair&lt;duckdb::ColumnBinding const&amp;, 0ul&gt; (5,268,228 samples, 0.01%)</title><rect x="763.6" y="1573" width="0.1" height="15.0" fill="rgb(223,95,23)" rx="2" ry="2" />
<text  x="766.60" y="1583.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int*, std::default_delete&lt;unsigned int []&gt; &gt; (140,885,816 samples, 0.27%)</title><rect x="207.3" y="1461" width="3.3" height="15.0" fill="rgb(228,116,44)" rx="2" ry="2" />
<text  x="210.33" y="1471.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::LogicalOperator&gt;::operator (32,386,303 samples, 0.06%)</title><rect x="1036.1" y="1669" width="0.7" height="15.0" fill="rgb(214,57,39)" rx="2" ry="2" />
<text  x="1039.09" y="1679.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::ColumnDataAllocator, std::allocator&lt;duckdb::ColumnDataAllocator&gt;,  (15,590,251 samples, 0.03%)</title><rect x="98.2" y="1669" width="0.4" height="15.0" fill="rgb(206,110,1)" rx="2" ry="2" />
<text  x="101.19" y="1679.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::ColumnRefExpression&gt; &gt; (5,145,371 samples, 0.01%)</title><rect x="944.5" y="1669" width="0.1" height="15.0" fill="rgb(219,124,28)" rx="2" ry="2" />
<text  x="947.49" y="1679.5" ></text>
</g>
<g >
<title>std::locale::locale (4,929,865 samples, 0.01%)</title><rect x="24.1" y="2005" width="0.1" height="15.0" fill="rgb(209,215,19)" rx="2" ry="2" />
<text  x="27.12" y="2015.5" ></text>
</g>
<g >
<title>duckdb::ChunkMetaData::ChunkMetaData (11,355,270 samples, 0.02%)</title><rect x="383.9" y="1813" width="0.2" height="15.0" fill="rgb(228,121,46)" rx="2" ry="2" />
<text  x="386.88" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformSelectInternal (431,830,851 samples, 0.84%)</title><rect x="526.4" y="1781" width="9.9" height="15.0" fill="rgb(252,227,26)" rx="2" ry="2" />
<text  x="529.40" y="1791.5" ></text>
</g>
<g >
<title>__interceptor_strcmp (10,744,085 samples, 0.02%)</title><rect x="186.2" y="2021" width="0.2" height="15.0" fill="rgb(238,142,39)" rx="2" ry="2" />
<text  x="189.20" y="2031.5" ></text>
</g>
<g >
<title>__asan::AsanTSDGet (9,495,562 samples, 0.02%)</title><rect x="12.6" y="1989" width="0.2" height="15.0" fill="rgb(243,184,29)" rx="2" ry="2" />
<text  x="15.58" y="1999.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::PendingQueryResult, std::shared_ptr&lt;duckdb::ClientContext&gt;, duckdb::PreparedStatementData&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;, bool&amp;&gt; (93,448,150 samples, 0.18%)</title><rect x="1100.1" y="1893" width="2.1" height="15.0" fill="rgb(251,31,40)" rx="2" ry="2" />
<text  x="1103.08" y="1903.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (452,680,833 samples, 0.88%)</title><rect x="256.3" y="1573" width="10.4" height="15.0" fill="rgb(208,66,28)" rx="2" ry="2" />
<text  x="259.26" y="1583.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VectorCacheBuffer&gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (6,547,473 samples, 0.01%)</title><rect x="108.5" y="1541" width="0.2" height="15.0" fill="rgb(247,154,17)" rx="2" ry="2" />
<text  x="111.53" y="1551.5" ></text>
</g>
<g >
<title>std::function&lt;void  (41,965,517 samples, 0.08%)</title><rect x="781.6" y="1877" width="0.9" height="15.0" fill="rgb(223,147,49)" rx="2" ry="2" />
<text  x="784.55" y="1887.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::Query (11,184,926 samples, 0.02%)</title><rect x="1109.3" y="1925" width="0.2" height="15.0" fill="rgb(226,30,47)" rx="2" ry="2" />
<text  x="1112.26" y="1935.5" ></text>
</g>
<g >
<title>duckdb::AttachedDatabase::~AttachedDatabase (15,089,061 samples, 0.03%)</title><rect x="1117.5" y="1749" width="0.3" height="15.0" fill="rgb(215,111,31)" rx="2" ry="2" />
<text  x="1120.47" y="1759.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Free (43,487,466 samples, 0.08%)</title><rect x="242.6" y="533" width="1.0" height="15.0" fill="rgb(226,106,4)" rx="2" ry="2" />
<text  x="245.62" y="543.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnScanState [], std::default_delete&lt;duckdb::ColumnScanState&gt;, false&gt;::unique_ptr&lt;duckdb::ColumnScanState*, std::default_delete&lt;duckdb::ColumnScanState []&gt;, void, bool&gt; (5,828,121 samples, 0.01%)</title><rect x="224.5" y="1685" width="0.1" height="15.0" fill="rgb(212,195,12)" rx="2" ry="2" />
<text  x="227.47" y="1695.5" ></text>
</g>
<g >
<title>find_vma (26,483,217 samples, 0.05%)</title><rect x="161.9" y="1957" width="0.6" height="15.0" fill="rgb(207,209,30)" rx="2" ry="2" />
<text  x="164.94" y="1967.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::~unique_ptr (9,691,001 samples, 0.02%)</title><rect x="641.0" y="1701" width="0.3" height="15.0" fill="rgb(223,26,9)" rx="2" ry="2" />
<text  x="644.04" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BoundParameterData, std::allocator&lt;duckdb::BoundParameterData&gt; &gt;::~vector (5,230,035 samples, 0.01%)</title><rect x="1030.1" y="1861" width="0.1" height="15.0" fill="rgb(248,158,35)" rx="2" ry="2" />
<text  x="1033.11" y="1871.5" ></text>
</g>
<g >
<title>duckdb::LocalTableStorage::LocalTableStorage (22,050,138 samples, 0.04%)</title><rect x="102.1" y="1573" width="0.5" height="15.0" fill="rgb(212,78,19)" rx="2" ry="2" />
<text  x="105.12" y="1583.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (6,990,720 samples, 0.01%)</title><rect x="777.7" y="1781" width="0.1" height="15.0" fill="rgb(235,19,46)" rx="2" ry="2" />
<text  x="780.66" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::Value&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::Value&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_Hashtable (7,263,577 samples, 0.01%)</title><rect x="373.3" y="1877" width="0.1" height="15.0" fill="rgb(216,13,53)" rx="2" ry="2" />
<text  x="376.28" y="1887.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (23,663,510 samples, 0.05%)</title><rect x="380.6" y="1685" width="0.5" height="15.0" fill="rgb(219,119,50)" rx="2" ry="2" />
<text  x="383.59" y="1695.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (4,352,239 samples, 0.01%)</title><rect x="329.0" y="1813" width="0.1" height="15.0" fill="rgb(246,214,13)" rx="2" ry="2" />
<text  x="331.99" y="1823.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::Initialize (27,466,025 samples, 0.05%)</title><rect x="473.7" y="1701" width="0.6" height="15.0" fill="rgb(235,206,1)" rx="2" ry="2" />
<text  x="476.68" y="1711.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (18,580,050 samples, 0.04%)</title><rect x="94.0" y="1637" width="0.4" height="15.0" fill="rgb(232,107,36)" rx="2" ry="2" />
<text  x="96.97" y="1647.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt;::~unique_ptr (6,888,226 samples, 0.01%)</title><rect x="226.6" y="1621" width="0.2" height="15.0" fill="rgb(218,223,15)" rx="2" ry="2" />
<text  x="229.60" y="1631.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (156,606,329 samples, 0.31%)</title><rect x="1170.5" y="1957" width="3.6" height="15.0" fill="rgb(247,0,2)" rx="2" ry="2" />
<text  x="1173.52" y="1967.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (77,659,988 samples, 0.15%)</title><rect x="683.7" y="1797" width="1.7" height="15.0" fill="rgb(242,157,36)" rx="2" ry="2" />
<text  x="686.65" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionState, std::default_delete&lt;duckdb::ExpressionState&gt; &gt;::~unique_ptr (19,898,594 samples, 0.04%)</title><rect x="484.1" y="1557" width="0.4" height="15.0" fill="rgb(228,152,20)" rx="2" ry="2" />
<text  x="487.06" y="1567.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;::unique_ptr (33,542,740 samples, 0.07%)</title><rect x="827.0" y="1797" width="0.8" height="15.0" fill="rgb(251,102,10)" rx="2" ry="2" />
<text  x="830.04" y="1807.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long, unsigned long&gt;::pair&lt;unsigned long&amp;, unsigned long&amp;, true&gt; (6,985,888 samples, 0.01%)</title><rect x="566.6" y="1717" width="0.1" height="15.0" fill="rgb(240,187,21)" rx="2" ry="2" />
<text  x="569.59" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1669" width="0.1" height="15.0" fill="rgb(253,59,32)" rx="2" ry="2" />
<text  x="14.25" y="1679.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;duckdb::string_t, duckdb::StringHash, duckdb::StringEquality, std::allocator&lt;duckdb::string_t&gt; &gt;::insert (7,433,804 samples, 0.01%)</title><rect x="1117.9" y="965" width="0.2" height="15.0" fill="rgb(243,218,26)" rx="2" ry="2" />
<text  x="1120.91" y="975.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr (4,508,118 samples, 0.01%)</title><rect x="820.1" y="1749" width="0.1" height="15.0" fill="rgb(209,60,48)" rx="2" ry="2" />
<text  x="823.12" y="1759.5" ></text>
</g>
<g >
<title>duckdb::WriteAheadLog::GetWALSize (6,405,362 samples, 0.01%)</title><rect x="253.0" y="1765" width="0.1" height="15.0" fill="rgb(253,163,50)" rx="2" ry="2" />
<text  x="255.98" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (57,396,453 samples, 0.11%)</title><rect x="498.1" y="1589" width="1.3" height="15.0" fill="rgb(244,13,40)" rx="2" ry="2" />
<text  x="501.08" y="1599.5" ></text>
</g>
<g >
<title>duckdb::Binding::~Binding (22,370,165 samples, 0.04%)</title><rect x="1016.8" y="1509" width="0.5" height="15.0" fill="rgb(214,63,0)" rx="2" ry="2" />
<text  x="1019.75" y="1519.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::VectorCache&gt; (88,723,502 samples, 0.17%)</title><rect x="895.9" y="1685" width="2.1" height="15.0" fill="rgb(239,65,33)" rx="2" ry="2" />
<text  x="898.91" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RegexOptimizationRule, std::default_delete&lt;duckdb::RegexOptimizationRule&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::RegexOptimizationRule&gt;, void&gt; (6,330,101 samples, 0.01%)</title><rect x="820.5" y="1861" width="0.2" height="15.0" fill="rgb(233,192,8)" rx="2" ry="2" />
<text  x="823.53" y="1871.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::SampleOptions, std::default_delete&lt;duckdb::SampleOptions&gt; &gt;::_M_ptr (4,577,732 samples, 0.01%)</title><rect x="535.0" y="1701" width="0.1" height="15.0" fill="rgb(246,62,9)" rx="2" ry="2" />
<text  x="537.96" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::push_back (12,266,558 samples, 0.02%)</title><rect x="489.5" y="1749" width="0.3" height="15.0" fill="rgb(224,7,41)" rx="2" ry="2" />
<text  x="492.49" y="1759.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long&gt;::deallocate (23,632,182 samples, 0.05%)</title><rect x="46.7" y="2021" width="0.5" height="15.0" fill="rgb(222,67,38)" rx="2" ry="2" />
<text  x="49.67" y="2031.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_deallocate (6,186,019 samples, 0.01%)</title><rect x="673.9" y="1749" width="0.1" height="15.0" fill="rgb(229,220,31)" rx="2" ry="2" />
<text  x="676.85" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ColumnData::ScanCommitted (870,806,659 samples, 1.70%)</title><rect x="267.1" y="1653" width="20.0" height="15.0" fill="rgb(247,29,24)" rx="2" ry="2" />
<text  x="270.09" y="1663.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAllocator::~ColumnDataAllocator (77,253,830 samples, 0.15%)</title><rect x="1123.1" y="1749" width="1.8" height="15.0" fill="rgb(240,101,33)" rx="2" ry="2" />
<text  x="1126.11" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long const, duckdb::BufferHandle&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (6,731,967 samples, 0.01%)</title><rect x="887.9" y="1685" width="0.1" height="15.0" fill="rgb(248,105,11)" rx="2" ry="2" />
<text  x="890.88" y="1695.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::ExecutePull (215,403,335 samples, 0.42%)</title><rect x="360.6" y="1893" width="4.9" height="15.0" fill="rgb(249,213,18)" rx="2" ry="2" />
<text  x="363.58" y="1903.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (6,714,627 samples, 0.01%)</title><rect x="597.2" y="1765" width="0.2" height="15.0" fill="rgb(233,99,41)" rx="2" ry="2" />
<text  x="600.24" y="1775.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt; (40,812,385 samples, 0.08%)</title><rect x="610.2" y="1669" width="0.9" height="15.0" fill="rgb(224,20,24)" rx="2" ry="2" />
<text  x="613.18" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueryResult, std::default_delete&lt;duckdb::QueryResult&gt;, true&gt;::unique_ptr (5,401,197 samples, 0.01%)</title><rect x="395.0" y="1925" width="0.1" height="15.0" fill="rgb(252,185,29)" rx="2" ry="2" />
<text  x="398.01" y="1935.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; &gt;::construct&lt;duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt;, duckdb::optional_ptr&lt;duckdb::AttachedDatabase&gt; &gt; (4,918,753 samples, 0.01%)</title><rect x="1001.3" y="1637" width="0.1" height="15.0" fill="rgb(210,81,36)" rx="2" ry="2" />
<text  x="1004.28" y="1647.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="485" width="0.1" height="15.0" fill="rgb(220,193,46)" rx="2" ry="2" />
<text  x="14.25" y="495.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="533" width="0.1" height="15.0" fill="rgb(210,125,19)" rx="2" ry="2" />
<text  x="14.25" y="543.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ProducerToken, std::default_delete&lt;duckdb::ProducerToken&gt; &gt;::operator= (9,432,137 samples, 0.02%)</title><rect x="1091.8" y="1845" width="0.2" height="15.0" fill="rgb(245,41,22)" rx="2" ry="2" />
<text  x="1094.81" y="1855.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (6,093,470 samples, 0.01%)</title><rect x="849.6" y="1749" width="0.1" height="15.0" fill="rgb(226,2,0)" rx="2" ry="2" />
<text  x="852.56" y="1759.5" ></text>
</g>
<g >
<title>duckdb::RowGroupCollection::InitializeAppend (1,160,922,529 samples, 2.26%)</title><rect x="432.5" y="1765" width="26.7" height="15.0" fill="rgb(233,94,40)" rx="2" ry="2" />
<text  x="435.46" y="1775.5" >d..</text>
</g>
<g >
<title>duckdb::StarExpression::StarExpression (5,179,053 samples, 0.01%)</title><rect x="947.2" y="1685" width="0.2" height="15.0" fill="rgb(224,28,33)" rx="2" ry="2" />
<text  x="950.23" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Vector::Verify (8,823,658 samples, 0.02%)</title><rect x="361.2" y="1829" width="0.2" height="15.0" fill="rgb(231,180,53)" rx="2" ry="2" />
<text  x="364.19" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::push_back (12,744,879 samples, 0.02%)</title><rect x="855.9" y="1781" width="0.3" height="15.0" fill="rgb(213,188,54)" rx="2" ry="2" />
<text  x="858.93" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Executor::InitializeInternal (2,260,473,198 samples, 4.41%)</title><rect x="1045.4" y="1877" width="52.0" height="15.0" fill="rgb(240,191,3)" rx="2" ry="2" />
<text  x="1048.39" y="1887.5" >duckd..</text>
</g>
<g >
<title>duckdb::BuiltinFunctions::RegisterSQLiteFunctions (13,519,695 samples, 0.03%)</title><rect x="1111.0" y="1909" width="0.3" height="15.0" fill="rgb(252,106,35)" rx="2" ry="2" />
<text  x="1113.95" y="1919.5" ></text>
</g>
<g >
<title>__vfs_write (55,813,649 samples, 0.11%)</title><rect x="247.5" y="1621" width="1.3" height="15.0" fill="rgb(249,159,40)" rx="2" ry="2" />
<text  x="250.51" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorInfo, std::default_delete&lt;duckdb::ExpressionExecutorInfo&gt;, true&gt; &gt; &gt;::operator= (7,240,888 samples, 0.01%)</title><rect x="466.4" y="1749" width="0.2" height="15.0" fill="rgb(205,116,42)" rx="2" ry="2" />
<text  x="469.45" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt;::push_back (150,227,850 samples, 0.29%)</title><rect x="825.5" y="1877" width="3.5" height="15.0" fill="rgb(237,194,51)" rx="2" ry="2" />
<text  x="828.51" y="1887.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (30,105,302 samples, 0.06%)</title><rect x="809.1" y="1829" width="0.7" height="15.0" fill="rgb(223,177,10)" rx="2" ry="2" />
<text  x="812.14" y="1839.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (35,762,469 samples, 0.07%)</title><rect x="709.3" y="1765" width="0.8" height="15.0" fill="rgb(227,47,32)" rx="2" ry="2" />
<text  x="712.26" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::~unique_ptr (11,567,442 samples, 0.02%)</title><rect x="581.7" y="1717" width="0.3" height="15.0" fill="rgb(230,101,30)" rx="2" ry="2" />
<text  x="584.69" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::StorageLockKey, std::default_delete&lt;duckdb::StorageLockKey&gt; &gt;::release (9,277,672 samples, 0.02%)</title><rect x="451.6" y="1589" width="0.2" height="15.0" fill="rgb(212,2,50)" rx="2" ry="2" />
<text  x="454.57" y="1599.5" ></text>
</g>
<g >
<title>duckdb::BlockManager::UnregisterBlock (8,075,854 samples, 0.02%)</title><rect x="242.0" y="629" width="0.2" height="15.0" fill="rgb(244,99,24)" rx="2" ry="2" />
<text  x="244.97" y="639.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::Bind[abi:cxx11] (97,929,472 samples, 0.19%)</title><rect x="933.5" y="1717" width="2.2" height="15.0" fill="rgb(229,178,47)" rx="2" ry="2" />
<text  x="936.46" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::AdaptiveFilter, std::default_delete&lt;duckdb::AdaptiveFilter&gt;, true&gt;::~unique_ptr (4,554,311 samples, 0.01%)</title><rect x="227.5" y="1717" width="0.1" height="15.0" fill="rgb(252,41,5)" rx="2" ry="2" />
<text  x="230.48" y="1727.5" ></text>
</g>
<g >
<title>duckdb::LogicalExpressionGet::GetName[abi:cxx11] (6,549,096 samples, 0.01%)</title><rect x="622.3" y="1733" width="0.2" height="15.0" fill="rgb(245,149,47)" rx="2" ry="2" />
<text  x="625.31" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Binder::MoveCorrelatedExpressions (4,533,654 samples, 0.01%)</title><rect x="986.3" y="1829" width="0.1" height="15.0" fill="rgb(252,159,23)" rx="2" ry="2" />
<text  x="989.30" y="1839.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;,  (26,270,411 samples, 0.05%)</title><rect x="363.0" y="1669" width="0.6" height="15.0" fill="rgb(212,143,30)" rx="2" ry="2" />
<text  x="365.98" y="1679.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::~unordered_set (83,441,402 samples, 0.16%)</title><rect x="669.3" y="1781" width="1.9" height="15.0" fill="rgb(209,70,5)" rx="2" ry="2" />
<text  x="672.31" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt; &gt;::~unique_ptr (97,116,425 samples, 0.19%)</title><rect x="241.7" y="805" width="2.2" height="15.0" fill="rgb(254,165,42)" rx="2" ry="2" />
<text  x="244.69" y="815.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned int*, false&gt;::_M_head (15,376,500 samples, 0.03%)</title><rect x="265.4" y="1397" width="0.4" height="15.0" fill="rgb(218,39,30)" rx="2" ry="2" />
<text  x="268.43" y="1407.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::~ExpressionExecutor (37,167,503 samples, 0.07%)</title><rect x="906.4" y="1765" width="0.9" height="15.0" fill="rgb(205,104,10)" rx="2" ry="2" />
<text  x="909.41" y="1775.5" ></text>
</g>
<g >
<title>duckdb::SelectStatement::~SelectStatement (28,970,549 samples, 0.06%)</title><rect x="1038.3" y="1765" width="0.7" height="15.0" fill="rgb(238,61,35)" rx="2" ry="2" />
<text  x="1041.33" y="1775.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (220,355,102 samples, 0.43%)</title><rect x="547.5" y="1797" width="5.1" height="15.0" fill="rgb(212,119,52)" rx="2" ry="2" />
<text  x="550.49" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ColumnAppendState [], std::default_delete&lt;duckdb::ColumnAppendState []&gt; &gt;::operator= (7,386,431 samples, 0.01%)</title><rect x="452.5" y="1717" width="0.2" height="15.0" fill="rgb(206,123,6)" rx="2" ry="2" />
<text  x="455.53" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Transaction::Transaction (14,030,614 samples, 0.03%)</title><rect x="996.4" y="1637" width="0.3" height="15.0" fill="rgb(249,185,10)" rx="2" ry="2" />
<text  x="999.40" y="1647.5" ></text>
</g>
<g >
<title>duckdb::ExecutorTask::~ExecutorTask (8,803,823 samples, 0.02%)</title><rect x="144.7" y="1733" width="0.2" height="15.0" fill="rgb(233,38,53)" rx="2" ry="2" />
<text  x="147.75" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ColumnLifetimeAnalyzer::StandardVisitOperator (104,732,223 samples, 0.20%)</title><rect x="724.0" y="1797" width="2.4" height="15.0" fill="rgb(206,85,51)" rx="2" ry="2" />
<text  x="726.97" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Vector::~Vector (65,319,458 samples, 0.13%)</title><rect x="497.9" y="1685" width="1.5" height="15.0" fill="rgb(251,110,11)" rx="2" ry="2" />
<text  x="500.94" y="1695.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ColumnDataAllocator,  (364,194,645 samples, 0.71%)</title><rect x="341.8" y="1333" width="8.4" height="15.0" fill="rgb(228,125,53)" rx="2" ry="2" />
<text  x="344.79" y="1343.5" ></text>
</g>
<g >
<title>[unknown] (5,096,954 samples, 0.01%)</title><rect x="89.6" y="2005" width="0.2" height="15.0" fill="rgb(246,158,8)" rx="2" ry="2" />
<text  x="92.64" y="2015.5" ></text>
</g>
<g >
<title>duckdb::ConstantFoldingRule::ConstantFoldingRule (80,868,585 samples, 0.16%)</title><rect x="794.2" y="1861" width="1.9" height="15.0" fill="rgb(209,21,45)" rx="2" ry="2" />
<text  x="797.25" y="1871.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::GetPipelines (15,749,811 samples, 0.03%)</title><rect x="1048.3" y="1813" width="0.4" height="15.0" fill="rgb(211,45,1)" rx="2" ry="2" />
<text  x="1051.35" y="1823.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::StandardColumnData, std::allocator&lt;duckdb::StandardColumnData&gt;,  (271,345,203 samples, 0.53%)</title><rect x="237.9" y="1061" width="6.3" height="15.0" fill="rgb(214,135,0)" rx="2" ry="2" />
<text  x="240.93" y="1071.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_init_locked (5,894,702 samples, 0.01%)</title><rect x="107.4" y="1285" width="0.2" height="15.0" fill="rgb(243,80,43)" rx="2" ry="2" />
<text  x="110.43" y="1295.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt;, true&gt;::~unique_ptr (24,634,660 samples, 0.05%)</title><rect x="581.5" y="1829" width="0.5" height="15.0" fill="rgb(216,17,42)" rx="2" ry="2" />
<text  x="584.47" y="1839.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::~LogicalOperator (40,514,406 samples, 0.08%)</title><rect x="1035.9" y="1813" width="1.0" height="15.0" fill="rgb(222,126,39)" rx="2" ry="2" />
<text  x="1038.93" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::AllocatorDebugInfo, std::default_delete&lt;duckdb::AllocatorDebugInfo&gt;, true&gt;::operator= (6,051,968 samples, 0.01%)</title><rect x="989.5" y="1541" width="0.1" height="15.0" fill="rgb(210,166,30)" rx="2" ry="2" />
<text  x="992.46" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (36,888,513 samples, 0.07%)</title><rect x="718.1" y="1765" width="0.8" height="15.0" fill="rgb(214,100,34)" rx="2" ry="2" />
<text  x="721.07" y="1775.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::GetData (22,684,377 samples, 0.04%)</title><rect x="105.9" y="1781" width="0.6" height="15.0" fill="rgb(217,154,42)" rx="2" ry="2" />
<text  x="108.94" y="1791.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (4,420,897 samples, 0.01%)</title><rect x="319.5" y="1797" width="0.1" height="15.0" fill="rgb(222,2,42)" rx="2" ry="2" />
<text  x="322.50" y="1807.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (6,596,308 samples, 0.01%)</title><rect x="729.9" y="1653" width="0.1" height="15.0" fill="rgb(247,140,16)" rx="2" ry="2" />
<text  x="732.89" y="1663.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_S_check_init_len (10,122,180 samples, 0.02%)</title><rect x="685.1" y="1749" width="0.3" height="15.0" fill="rgb(239,71,10)" rx="2" ry="2" />
<text  x="688.12" y="1759.5" ></text>
</g>
<g >
<title>__nptl_deallocate_tsd.part.0 (15,562,518 samples, 0.03%)</title><rect x="19.4" y="2005" width="0.3" height="15.0" fill="rgb(219,227,44)" rx="2" ry="2" />
<text  x="22.38" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::_M_realloc_insert&lt;duckdb::VectorCache&gt; (7,520,022 samples, 0.01%)</title><rect x="495.5" y="1749" width="0.1" height="15.0" fill="rgb(212,113,16)" rx="2" ry="2" />
<text  x="498.45" y="1759.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_next_event_compute (5,183,563 samples, 0.01%)</title><rect x="891.2" y="1365" width="0.2" height="15.0" fill="rgb(209,76,31)" rx="2" ry="2" />
<text  x="894.25" y="1375.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::construct&lt;duckdb::VectorCacheBuffer, duckdb::Allocator&amp;, duckdb::LogicalType const&amp;, unsigned long&amp;&gt; (126,539,881 samples, 0.25%)</title><rect x="889.8" y="1621" width="2.9" height="15.0" fill="rgb(205,91,20)" rx="2" ry="2" />
<text  x="892.82" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (291,217,690 samples, 0.57%)</title><rect x="704.8" y="1829" width="6.7" height="15.0" fill="rgb(249,29,35)" rx="2" ry="2" />
<text  x="707.85" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::IntegerTypeMatcher, std::default_delete&lt;duckdb::IntegerTypeMatcher&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::IntegerTypeMatcher&gt;, void&gt; (8,526,987 samples, 0.02%)</title><rect x="784.8" y="1813" width="0.2" height="15.0" fill="rgb(222,229,43)" rx="2" ry="2" />
<text  x="787.80" y="1823.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocate (74,030,775 samples, 0.14%)</title><rect x="492.6" y="1605" width="1.7" height="15.0" fill="rgb(231,34,6)" rx="2" ry="2" />
<text  x="495.60" y="1615.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocator (26,101,289 samples, 0.05%)</title><rect x="866.8" y="1685" width="0.6" height="15.0" fill="rgb(246,49,28)" rx="2" ry="2" />
<text  x="869.78" y="1695.5" ></text>
</g>
<g >
<title>do_futex (17,788,829 samples, 0.03%)</title><rect x="94.0" y="1589" width="0.4" height="15.0" fill="rgb(246,7,39)" rx="2" ry="2" />
<text  x="96.99" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::SingleJoinRelation&gt;, void&gt; (5,051,856 samples, 0.01%)</title><rect x="758.1" y="1749" width="0.1" height="15.0" fill="rgb(234,104,39)" rx="2" ry="2" />
<text  x="761.06" y="1759.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::Render (1,546,697,089 samples, 3.02%)</title><rect x="546.5" y="1845" width="35.5" height="15.0" fill="rgb(251,200,51)" rx="2" ry="2" />
<text  x="549.45" y="1855.5" >duc..</text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt; &gt;::unique_ptr&lt;duckdb::ConstantExpression, std::default_delete&lt;duckdb::ConstantExpression&gt;, void&gt; (12,419,293 samples, 0.02%)</title><rect x="529.5" y="1685" width="0.3" height="15.0" fill="rgb(234,151,21)" rx="2" ry="2" />
<text  x="532.49" y="1695.5" ></text>
</g>
<g >
<title>__pagevec_release (6,495,296 samples, 0.01%)</title><rect x="251.4" y="1557" width="0.2" height="15.0" fill="rgb(226,85,27)" rx="2" ry="2" />
<text  x="254.44" y="1567.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_dalloc_event (5,320,210 samples, 0.01%)</title><rect x="298.1" y="1349" width="0.1" height="15.0" fill="rgb(208,57,20)" rx="2" ry="2" />
<text  x="301.06" y="1359.5" ></text>
</g>
<g >
<title>MemcmpInterceptorCommon (4,382,479 samples, 0.01%)</title><rect x="184.4" y="2021" width="0.1" height="15.0" fill="rgb(208,138,20)" rx="2" ry="2" />
<text  x="187.43" y="2031.5" ></text>
</g>
<g >
<title>try_to_wake_up (14,000,900 samples, 0.03%)</title><rect x="93.6" y="1557" width="0.3" height="15.0" fill="rgb(225,87,3)" rx="2" ry="2" />
<text  x="96.57" y="1567.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ChunkMetaData, std::allocator&lt;duckdb::ChunkMetaData&gt; &gt;::push_back (34,286,563 samples, 0.07%)</title><rect x="885.1" y="1749" width="0.8" height="15.0" fill="rgb(239,21,18)" rx="2" ry="2" />
<text  x="888.14" y="1759.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::~unique_ptr (7,018,053 samples, 0.01%)</title><rect x="824.8" y="1861" width="0.2" height="15.0" fill="rgb(252,202,3)" rx="2" ry="2" />
<text  x="827.84" y="1871.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorCacheBuffer, std::allocator&lt;duckdb::VectorCacheBuffer&gt;,  (18,120,938 samples, 0.04%)</title><rect x="107.3" y="1605" width="0.4" height="15.0" fill="rgb(218,48,20)" rx="2" ry="2" />
<text  x="110.29" y="1615.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::VersionNode&gt;::destroy&lt;duckdb::VersionNode&gt; (21,019,013 samples, 0.04%)</title><rect x="244.5" y="1125" width="0.5" height="15.0" fill="rgb(211,225,51)" rx="2" ry="2" />
<text  x="247.55" y="1135.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ProducerToken&gt;::operator (4,944,534 samples, 0.01%)</title><rect x="336.5" y="1717" width="0.1" height="15.0" fill="rgb(210,169,18)" rx="2" ry="2" />
<text  x="339.52" y="1727.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::GetSegment (12,504,277 samples, 0.02%)</title><rect x="254.8" y="1701" width="0.2" height="15.0" fill="rgb(249,196,9)" rx="2" ry="2" />
<text  x="257.76" y="1711.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VersionNode&gt;::shared_ptr&lt;std::allocator&lt;duckdb::VersionNode&gt;&gt; (29,202,935 samples, 0.06%)</title><rect x="415.4" y="1653" width="0.7" height="15.0" fill="rgb(214,70,19)" rx="2" ry="2" />
<text  x="418.39" y="1663.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (63,760,479 samples, 0.12%)</title><rect x="1186.4" y="2021" width="1.5" height="15.0" fill="rgb(232,179,50)" rx="2" ry="2" />
<text  x="1189.38" y="2031.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorCacheBuffer&gt; &gt;::destroy&lt;duckdb::VectorCacheBuffer&gt; (138,608,353 samples, 0.27%)</title><rect x="390.8" y="1669" width="3.2" height="15.0" fill="rgb(226,161,39)" rx="2" ry="2" />
<text  x="393.79" y="1679.5" ></text>
</g>
<g >
<title>duckdb::StringUtil::Lower (9,387,906 samples, 0.02%)</title><rect x="994.8" y="1733" width="0.2" height="15.0" fill="rgb(230,83,12)" rx="2" ry="2" />
<text  x="997.83" y="1743.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::~unique_ptr (6,105,032 samples, 0.01%)</title><rect x="833.2" y="1653" width="0.1" height="15.0" fill="rgb(213,29,15)" rx="2" ry="2" />
<text  x="836.20" y="1663.5" ></text>
</g>
<g >
<title>find_vma (27,276,766 samples, 0.05%)</title><rect x="1135.5" y="1957" width="0.6" height="15.0" fill="rgb(210,57,19)" rx="2" ry="2" />
<text  x="1138.50" y="1967.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, std::reference_wrapper&lt;duckdb::QueryProfiler::TreeNode&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::emplace&lt;std::pair&lt;duckdb::PhysicalOperator const&amp;, duckdb::QueryProfiler::TreeNode&amp;&gt; &gt; (7,316,646 samples, 0.01%)</title><rect x="1086.4" y="1797" width="0.2" height="15.0" fill="rgb(236,78,32)" rx="2" ry="2" />
<text  x="1089.43" y="1807.5" ></text>
</g>
<g >
<title>duckdb::ColumnSegment::ScanPartial (34,032,387 samples, 0.07%)</title><rect x="215.2" y="1605" width="0.7" height="15.0" fill="rgb(236,144,50)" rx="2" ry="2" />
<text  x="218.17" y="1615.5" ></text>
</g>
<g >
<title>do_page_fault (12,829,787 samples, 0.03%)</title><rect x="413.5" y="1621" width="0.3" height="15.0" fill="rgb(247,98,11)" rx="2" ry="2" />
<text  x="416.47" y="1631.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, unsigned long&gt; &gt; &gt;::~unordered_map (13,809,188 samples, 0.03%)</title><rect x="757.4" y="1765" width="0.4" height="15.0" fill="rgb(244,171,34)" rx="2" ry="2" />
<text  x="760.44" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="1317" width="0.1" height="15.0" fill="rgb(207,15,19)" rx="2" ry="2" />
<text  x="14.25" y="1327.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::LogicalOperator&gt; (11,471,342 samples, 0.02%)</title><rect x="546.9" y="1653" width="0.3" height="15.0" fill="rgb(224,127,20)" rx="2" ry="2" />
<text  x="549.89" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;unsigned long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt; &gt; (29,609,075 samples, 0.06%)</title><rect x="776.9" y="1749" width="0.6" height="15.0" fill="rgb(206,118,29)" rx="2" ry="2" />
<text  x="779.85" y="1759.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ArenaAllocatorData, duckdb::ArenaAllocator&amp;&gt; (4,860,289 samples, 0.01%)</title><rect x="989.7" y="1557" width="0.2" height="15.0" fill="rgb(221,201,3)" rx="2" ry="2" />
<text  x="992.74" y="1567.5" ></text>
</g>
<g >
<title>duckdb::Executor::SchedulePipeline (366,429,248 samples, 0.71%)</title><rect x="1046.0" y="1829" width="8.4" height="15.0" fill="rgb(237,212,8)" rx="2" ry="2" />
<text  x="1048.96" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::BaseStatistics (9,442,393 samples, 0.02%)</title><rect x="442.9" y="1637" width="0.2" height="15.0" fill="rgb(247,75,10)" rx="2" ry="2" />
<text  x="445.89" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::push_back (10,931,249 samples, 0.02%)</title><rect x="403.4" y="1797" width="0.3" height="15.0" fill="rgb(249,117,21)" rx="2" ry="2" />
<text  x="406.44" y="1807.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceHashFunction&lt;duckdb::UsingColumnSet&gt;, duckdb::ReferenceEquality&lt;duckdb::UsingColumnSet&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::UsingColumnSet&gt; &gt; &gt;::~unordered_set (4,966,039 samples, 0.01%)</title><rect x="945.3" y="1701" width="0.1" height="15.0" fill="rgb(216,198,7)" rx="2" ry="2" />
<text  x="948.31" y="1711.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::AllocatorDebugInfo, std::default_delete&lt;duckdb::AllocatorDebugInfo&gt; &gt;::operator= (4,921,105 samples, 0.01%)</title><rect x="996.9" y="1573" width="0.1" height="15.0" fill="rgb(231,75,53)" rx="2" ry="2" />
<text  x="999.92" y="1583.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateNode (11,815,557 samples, 0.02%)</title><rect x="1067.2" y="1637" width="0.3" height="15.0" fill="rgb(218,123,51)" rx="2" ry="2" />
<text  x="1070.22" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;unsigned int [], std::default_delete&lt;unsigned int&gt;, false&gt;::AssertNotNull (46,751,419 samples, 0.09%)</title><rect x="304.8" y="1525" width="1.0" height="15.0" fill="rgb(228,171,42)" rx="2" ry="2" />
<text  x="307.75" y="1535.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::RenderTree&gt;::operator (7,293,118 samples, 0.01%)</title><rect x="841.2" y="1813" width="0.2" height="15.0" fill="rgb(210,151,11)" rx="2" ry="2" />
<text  x="844.24" y="1823.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::RenderBottomLayer (18,685,504 samples, 0.04%)</title><rect x="836.2" y="1829" width="0.4" height="15.0" fill="rgb(234,79,52)" rx="2" ry="2" />
<text  x="839.16" y="1839.5" ></text>
</g>
<g >
<title>duckdb::HyperLogLog::ProcessEntries (12,358,547 samples, 0.02%)</title><rect x="460.5" y="1701" width="0.3" height="15.0" fill="rgb(246,159,0)" rx="2" ry="2" />
<text  x="463.52" y="1711.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::unordered_set (17,255,423 samples, 0.03%)</title><rect x="388.9" y="1893" width="0.3" height="15.0" fill="rgb(226,218,0)" rx="2" ry="2" />
<text  x="391.85" y="1903.5" ></text>
</g>
<g >
<title>duckdb::Event::~Event (5,143,733 samples, 0.01%)</title><rect x="355.9" y="1621" width="0.1" height="15.0" fill="rgb(229,61,17)" rx="2" ry="2" />
<text  x="358.92" y="1631.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::BuildPipelines (154,675,725 samples, 0.30%)</title><rect x="1079.2" y="1845" width="3.5" height="15.0" fill="rgb(227,204,54)" rx="2" ry="2" />
<text  x="1082.18" y="1855.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;unsigned long const*, unsigned long*&gt; (21,878,928 samples, 0.04%)</title><rect x="684.5" y="1733" width="0.5" height="15.0" fill="rgb(241,214,5)" rx="2" ry="2" />
<text  x="687.50" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::~unique_ptr (9,060,847 samples, 0.02%)</title><rect x="633.7" y="1685" width="0.2" height="15.0" fill="rgb(226,57,38)" rx="2" ry="2" />
<text  x="636.67" y="1695.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (7,363,698 samples, 0.01%)</title><rect x="774.4" y="1861" width="0.2" height="15.0" fill="rgb(214,51,6)" rx="2" ry="2" />
<text  x="777.42" y="1871.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::MetaPipeline (28,379,265 samples, 0.06%)</title><rect x="1081.0" y="1685" width="0.6" height="15.0" fill="rgb(236,155,3)" rx="2" ry="2" />
<text  x="1083.99" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Event::CompleteDependency (211,475,696 samples, 0.41%)</title><rect x="91.4" y="1797" width="4.9" height="15.0" fill="rgb(213,229,32)" rx="2" ry="2" />
<text  x="94.44" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::DuckTransaction&gt;, void&gt; (5,574,022 samples, 0.01%)</title><rect x="999.2" y="1637" width="0.2" height="15.0" fill="rgb(213,65,32)" rx="2" ry="2" />
<text  x="1002.25" y="1647.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::VectorCache*, duckdb::VectorCache&gt; (91,769,310 samples, 0.18%)</title><rect x="895.9" y="1733" width="2.1" height="15.0" fill="rgb(244,218,27)" rx="2" ry="2" />
<text  x="898.87" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocate (63,137,759 samples, 0.12%)</title><rect x="379.9" y="1829" width="1.4" height="15.0" fill="rgb(254,222,54)" rx="2" ry="2" />
<text  x="382.89" y="1839.5" ></text>
</g>
<g >
<title>std::thread::_M_start_thread (4,754,155 samples, 0.01%)</title><rect x="1117.2" y="1925" width="0.1" height="15.0" fill="rgb(221,206,27)" rx="2" ry="2" />
<text  x="1120.21" y="1935.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; (24,872,293 samples, 0.05%)</title><rect x="378.9" y="1893" width="0.5" height="15.0" fill="rgb(247,34,22)" rx="2" ry="2" />
<text  x="381.86" y="1903.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (97,081,972 samples, 0.19%)</title><rect x="481.5" y="1589" width="2.2" height="15.0" fill="rgb(228,23,37)" rx="2" ry="2" />
<text  x="484.51" y="1599.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Reset (19,594,520 samples, 0.04%)</title><rect x="894.8" y="1781" width="0.5" height="15.0" fill="rgb(222,154,53)" rx="2" ry="2" />
<text  x="897.81" y="1791.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt;::deallocate (56,063,754 samples, 0.11%)</title><rect x="44.1" y="2021" width="1.3" height="15.0" fill="rgb(210,127,12)" rx="2" ry="2" />
<text  x="47.13" y="2031.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::AllocatedData&gt; (68,624,384 samples, 0.13%)</title><rect x="1123.1" y="1653" width="1.6" height="15.0" fill="rgb(240,101,24)" rx="2" ry="2" />
<text  x="1126.14" y="1663.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::Initialize (35,184,208 samples, 0.07%)</title><rect x="903.4" y="1733" width="0.8" height="15.0" fill="rgb(246,98,27)" rx="2" ry="2" />
<text  x="906.43" y="1743.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::large_malloc (10,601,018 samples, 0.02%)</title><rect x="103.2" y="1349" width="0.2" height="15.0" fill="rgb(209,162,28)" rx="2" ry="2" />
<text  x="106.17" y="1359.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocator::ArenaAllocator (54,061,853 samples, 0.11%)</title><rect x="866.8" y="1701" width="1.2" height="15.0" fill="rgb(248,10,49)" rx="2" ry="2" />
<text  x="869.78" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ProducerToken, std::default_delete&lt;duckdb::ProducerToken&gt;, true&gt;::operator* (20,868,718 samples, 0.04%)</title><rect x="507.9" y="1893" width="0.5" height="15.0" fill="rgb(205,7,54)" rx="2" ry="2" />
<text  x="510.89" y="1903.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ProducerToken, duckdb::TaskScheduler&amp;, duckdb::unique_ptr&lt;duckdb::QueueProducerToken, std::default_delete&lt;duckdb::QueueProducerToken&gt;, true&gt; &gt; (21,028,650 samples, 0.04%)</title><rect x="1090.5" y="1845" width="0.5" height="15.0" fill="rgb(229,132,52)" rx="2" ry="2" />
<text  x="1093.52" y="1855.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::DataChunk (4,970,887 samples, 0.01%)</title><rect x="372.1" y="1877" width="0.1" height="15.0" fill="rgb(247,49,10)" rx="2" ry="2" />
<text  x="375.05" y="1887.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Initialize (11,811,247 samples, 0.02%)</title><rect x="108.1" y="1781" width="0.2" height="15.0" fill="rgb(214,161,44)" rx="2" ry="2" />
<text  x="111.06" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionState, std::default_delete&lt;duckdb::ExpressionState&gt; &gt;::~unique_ptr (18,231,006 samples, 0.04%)</title><rect x="906.7" y="1573" width="0.4" height="15.0" fill="rgb(247,115,34)" rx="2" ry="2" />
<text  x="909.68" y="1583.5" ></text>
</g>
<g >
<title>duckdb::DatabaseManager::Get (6,605,458 samples, 0.01%)</title><rect x="1042.5" y="1877" width="0.1" height="15.0" fill="rgb(253,163,49)" rx="2" ry="2" />
<text  x="1045.47" y="1887.5" ></text>
</g>
<g >
<title>duckdb::CaseInsensitiveStringHashFunction::operator (5,624,414 samples, 0.01%)</title><rect x="1003.0" y="1653" width="0.2" height="15.0" fill="rgb(214,106,50)" rx="2" ry="2" />
<text  x="1006.03" y="1663.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::VectorBuffer, unsigned long&gt; (39,097,795 samples, 0.08%)</title><rect x="901.3" y="1621" width="0.9" height="15.0" fill="rgb(244,21,26)" rx="2" ry="2" />
<text  x="904.27" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::max_size (4,594,090 samples, 0.01%)</title><rect x="789.8" y="1781" width="0.1" height="15.0" fill="rgb(214,92,54)" rx="2" ry="2" />
<text  x="792.77" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::ColumnDataAllocator,  (22,132,858 samples, 0.04%)</title><rect x="338.6" y="1477" width="0.5" height="15.0" fill="rgb(243,183,39)" rx="2" ry="2" />
<text  x="341.55" y="1487.5" ></text>
</g>
<g >
<title>__sanitizer::BufferedStackTrace::UnwindFast (8,145,604 samples, 0.02%)</title><rect x="38.4" y="1989" width="0.2" height="15.0" fill="rgb(221,146,38)" rx="2" ry="2" />
<text  x="41.42" y="1999.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::ExpressionMatcher&gt;::operator (6,516,403 samples, 0.01%)</title><rect x="832.1" y="1461" width="0.2" height="15.0" fill="rgb(231,141,18)" rx="2" ry="2" />
<text  x="835.14" y="1471.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperator (64,967,114 samples, 0.13%)</title><rect x="726.4" y="1797" width="1.5" height="15.0" fill="rgb(208,102,13)" rx="2" ry="2" />
<text  x="729.45" y="1807.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::Elapsed (4,570,192 samples, 0.01%)</title><rect x="645.1" y="1861" width="0.1" height="15.0" fill="rgb(234,224,48)" rx="2" ry="2" />
<text  x="648.12" y="1871.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long, duckdb::EntryValue, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt; &gt;::erase (11,724,519 samples, 0.02%)</title><rect x="1117.5" y="917" width="0.3" height="15.0" fill="rgb(226,119,3)" rx="2" ry="2" />
<text  x="1120.50" y="927.5" ></text>
</g>
<g >
<title>duckdb::CompressionAppendState::~CompressionAppendState (12,930,727 samples, 0.03%)</title><rect x="339.3" y="1333" width="0.2" height="15.0" fill="rgb(224,184,39)" rx="2" ry="2" />
<text  x="342.25" y="1343.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::thread_dalloc_event (35,990,754 samples, 0.07%)</title><rect x="348.7" y="821" width="0.8" height="15.0" fill="rgb(253,70,22)" rx="2" ry="2" />
<text  x="351.65" y="831.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformExpression (7,179,202 samples, 0.01%)</title><rect x="526.8" y="1765" width="0.2" height="15.0" fill="rgb(236,55,31)" rx="2" ry="2" />
<text  x="529.82" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (5,401,353 samples, 0.01%)</title><rect x="688.3" y="1781" width="0.1" height="15.0" fill="rgb(237,117,50)" rx="2" ry="2" />
<text  x="691.29" y="1791.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; (13,474,003 samples, 0.03%)</title><rect x="631.1" y="1733" width="0.3" height="15.0" fill="rgb(225,68,22)" rx="2" ry="2" />
<text  x="634.11" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::PendingStatementInternal (17,549,745 samples, 0.03%)</title><rect x="1108.9" y="1861" width="0.4" height="15.0" fill="rgb(219,89,32)" rx="2" ry="2" />
<text  x="1111.86" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (4,790,808 samples, 0.01%)</title><rect x="694.7" y="1765" width="0.1" height="15.0" fill="rgb(218,32,52)" rx="2" ry="2" />
<text  x="697.72" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (48,416,949 samples, 0.09%)</title><rect x="43.0" y="2005" width="1.1" height="15.0" fill="rgb(253,186,40)" rx="2" ry="2" />
<text  x="46.02" y="2015.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (5,199,193 samples, 0.01%)</title><rect x="955.1" y="1525" width="0.1" height="15.0" fill="rgb(206,138,26)" rx="2" ry="2" />
<text  x="958.07" y="1535.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::reference_wrapper&lt;duckdb::CatalogEntry&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::CatalogEntry&gt; &gt;, std::__detail::_Identity, duckdb::CatalogEntryEquality, duckdb::CatalogEntryHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert_unique_node (20,177,300 samples, 0.04%)</title><rect x="851.7" y="1781" width="0.4" height="15.0" fill="rgb(243,182,23)" rx="2" ry="2" />
<text  x="854.66" y="1791.5" ></text>
</g>
<g >
<title>duckdb::Rule::~Rule (33,106,038 samples, 0.06%)</title><rect x="829.5" y="1685" width="0.8" height="15.0" fill="rgb(221,55,37)" rx="2" ry="2" />
<text  x="832.53" y="1695.5" ></text>
</g>
<g >
<title>duckdb::InsertLocalState::InsertLocalState (222,855,430 samples, 0.43%)</title><rect x="486.3" y="1797" width="5.1" height="15.0" fill="rgb(216,45,42)" rx="2" ry="2" />
<text  x="489.26" y="1807.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::SegmentNode&lt;duckdb::ColumnSegment&gt;, true&gt;::vector (4,664,042 samples, 0.01%)</title><rect x="453.5" y="1477" width="0.1" height="15.0" fill="rgb(253,178,18)" rx="2" ry="2" />
<text  x="456.51" y="1487.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (18,108,426 samples, 0.04%)</title><rect x="849.0" y="1781" width="0.5" height="15.0" fill="rgb(221,123,33)" rx="2" ry="2" />
<text  x="852.04" y="1791.5" ></text>
</g>
<g >
<title>duckdb::FunctionExpressionMatcher::Match (9,680,680 samples, 0.02%)</title><rect x="739.3" y="1621" width="0.2" height="15.0" fill="rgb(235,125,52)" rx="2" ry="2" />
<text  x="742.32" y="1631.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (29,087,369 samples, 0.06%)</title><rect x="1040.6" y="1829" width="0.7" height="15.0" fill="rgb(250,7,32)" rx="2" ry="2" />
<text  x="1043.63" y="1839.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_assign_elements&lt;std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt; const&amp;, std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::operator= (15,446,260 samples, 0.03%)</title><rect x="1026.0" y="1813" width="0.4" height="15.0" fill="rgb(248,209,54)" rx="2" ry="2" />
<text  x="1029.02" y="1823.5" ></text>
</g>
<g >
<title>duckdb::PendingQueryResult::ExecuteInternal (14,309,230,536 samples, 27.90%)</title><rect x="187.0" y="1957" width="329.2" height="15.0" fill="rgb(244,115,33)" rx="2" ry="2" />
<text  x="189.97" y="1967.5" >duckdb::PendingQueryResult::ExecuteInternal</text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::VersionNode, std::allocator&lt;duckdb::VersionNode&gt;&gt; (29,202,935 samples, 0.06%)</title><rect x="415.4" y="1669" width="0.7" height="15.0" fill="rgb(224,112,40)" rx="2" ry="2" />
<text  x="418.39" y="1679.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundReferenceExpression, std::default_delete&lt;duckdb::BoundReferenceExpression&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BoundReferenceExpression&gt;, void&gt; (4,512,442 samples, 0.01%)</title><rect x="845.0" y="1701" width="0.1" height="15.0" fill="rgb(207,70,51)" rx="2" ry="2" />
<text  x="847.96" y="1711.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::ReadVector (11,892,612 samples, 0.02%)</title><rect x="106.1" y="1717" width="0.3" height="15.0" fill="rgb(246,145,3)" rx="2" ry="2" />
<text  x="109.15" y="1727.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, true&gt;::~vector (4,474,710 samples, 0.01%)</title><rect x="853.3" y="1781" width="0.1" height="15.0" fill="rgb(215,153,9)" rx="2" ry="2" />
<text  x="856.29" y="1791.5" ></text>
</g>
<g >
<title>duckdb::make_uniq_base&lt;duckdb::LogicalOperator, duckdb::LogicalDummyScan, unsigned long&gt; (13,779,799 samples, 0.03%)</title><rect x="976.1" y="1733" width="0.3" height="15.0" fill="rgb(229,62,37)" rx="2" ry="2" />
<text  x="979.10" y="1743.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::SegmentIterationHelper::begin (5,867,810 samples, 0.01%)</title><rect x="417.7" y="1685" width="0.1" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="420.67" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;::operator (7,878,757 samples, 0.02%)</title><rect x="469.3" y="1765" width="0.2" height="15.0" fill="rgb(215,202,44)" rx="2" ry="2" />
<text  x="472.33" y="1775.5" ></text>
</g>
<g >
<title>duckdb::BoundStatement::~BoundStatement (10,100,107 samples, 0.02%)</title><rect x="987.1" y="1829" width="0.2" height="15.0" fill="rgb(205,97,14)" rx="2" ry="2" />
<text  x="990.06" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CatalogSet, std::default_delete&lt;duckdb::CatalogSet&gt;, true&gt;::~unique_ptr (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1637" width="0.3" height="15.0" fill="rgb(221,96,1)" rx="2" ry="2" />
<text  x="1120.47" y="1647.5" ></text>
</g>
<g >
<title>duckdb::BufferManager::GetBufferManager (7,078,605 samples, 0.01%)</title><rect x="434.5" y="1669" width="0.1" height="15.0" fill="rgb(218,227,36)" rx="2" ry="2" />
<text  x="437.46" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*&gt; (12,157,926 samples, 0.02%)</title><rect x="615.4" y="1717" width="0.3" height="15.0" fill="rgb(214,98,2)" rx="2" ry="2" />
<text  x="618.44" y="1727.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::BlockHandle&gt;::~shared_ptr (93,797,993 samples, 0.18%)</title><rect x="239.1" y="773" width="2.1" height="15.0" fill="rgb(254,115,25)" rx="2" ry="2" />
<text  x="242.08" y="783.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::Vector&gt;::construct&lt;duckdb::Vector, duckdb::VectorCache&amp;&gt; (30,147,401 samples, 0.06%)</title><rect x="370.0" y="1797" width="0.7" height="15.0" fill="rgb(222,180,14)" rx="2" ry="2" />
<text  x="372.99" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_default (44,550,333 samples, 0.09%)</title><rect x="896.3" y="1445" width="1.0" height="15.0" fill="rgb(228,48,13)" rx="2" ry="2" />
<text  x="899.29" y="1455.5" ></text>
</g>
<g >
<title>duckdb::FunctionSet&lt;duckdb::ScalarFunction&gt;::FunctionSet (5,596,943 samples, 0.01%)</title><rect x="1116.8" y="1893" width="0.1" height="15.0" fill="rgb(224,8,25)" rx="2" ry="2" />
<text  x="1119.78" y="1903.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*, duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;*, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt; (5,465,339 samples, 0.01%)</title><rect x="818.3" y="1749" width="0.1" height="15.0" fill="rgb(238,82,4)" rx="2" ry="2" />
<text  x="821.26" y="1759.5" ></text>
</g>
<g >
<title>duckdb::BindContext::CreateColumnReference (59,363,764 samples, 0.12%)</title><rect x="953.2" y="1637" width="1.4" height="15.0" fill="rgb(211,2,14)" rx="2" ry="2" />
<text  x="956.19" y="1647.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::PhysicalOperator (10,416,414 samples, 0.02%)</title><rect x="855.4" y="1797" width="0.2" height="15.0" fill="rgb(252,29,31)" rx="2" ry="2" />
<text  x="858.39" y="1807.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ColumnSegment, duckdb::DatabaseInstance&amp;, std::shared_ptr&lt;duckdb::BlockHandle&gt;, duckdb::LogicalType const&amp;, duckdb::ColumnSegmentType, unsigned long&amp;, int, duckdb::CompressionFunction&amp;, duckdb::BaseStatistics, int, int, unsigned long&amp;&gt; (191,211,911 samples, 0.37%)</title><rect x="442.1" y="1669" width="4.4" height="15.0" fill="rgb(242,166,5)" rx="2" ry="2" />
<text  x="445.11" y="1679.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::__uniq_ptr_impl (4,631,030 samples, 0.01%)</title><rect x="1068.4" y="1685" width="0.2" height="15.0" fill="rgb(234,110,6)" rx="2" ry="2" />
<text  x="1071.45" y="1695.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnAppendState*, duckdb::ColumnAppendState&gt; (5,351,059 samples, 0.01%)</title><rect x="339.6" y="1365" width="0.1" height="15.0" fill="rgb(224,165,26)" rx="2" ry="2" />
<text  x="342.62" y="1375.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (31,179,601 samples, 0.06%)</title><rect x="1093.9" y="1637" width="0.7" height="15.0" fill="rgb(210,14,26)" rx="2" ry="2" />
<text  x="1096.86" y="1647.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BoundColumnRefExpression, std::default_delete&lt;duckdb::BoundColumnRefExpression&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BoundColumnRefExpression&gt;, void&gt; (4,637,931 samples, 0.01%)</title><rect x="583.3" y="1813" width="0.1" height="15.0" fill="rgb(216,173,38)" rx="2" ry="2" />
<text  x="586.28" y="1823.5" ></text>
</g>
<g >
<title>[unknown] (4,676,894 samples, 0.01%)</title><rect x="76.6" y="2005" width="0.1" height="15.0" fill="rgb(239,1,34)" rx="2" ry="2" />
<text  x="79.63" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; const, duckdb::OperatorInformation&gt; &gt;, std::__detail::_Select1st, duckdb::ReferenceEquality&lt;duckdb::PhysicalOperator const&gt;, duckdb::ReferenceHashFunction&lt;duckdb::PhysicalOperator const&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (20,478,460 samples, 0.04%)</title><rect x="362.0" y="1797" width="0.5" height="15.0" fill="rgb(246,224,14)" rx="2" ry="2" />
<text  x="365.04" y="1807.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (4,804,476 samples, 0.01%)</title><rect x="939.0" y="1685" width="0.1" height="15.0" fill="rgb(249,107,26)" rx="2" ry="2" />
<text  x="942.00" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::operator= (6,065,555 samples, 0.01%)</title><rect x="1039.4" y="1877" width="0.2" height="15.0" fill="rgb(242,191,54)" rx="2" ry="2" />
<text  x="1042.43" y="1887.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::deallocate (6,819,859 samples, 0.01%)</title><rect x="662.6" y="1717" width="0.1" height="15.0" fill="rgb(214,170,11)" rx="2" ry="2" />
<text  x="665.57" y="1727.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;duckdb::AttachedDatabase*, std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt;, std::allocator&lt;std::pair&lt;duckdb::AttachedDatabase* const, duckdb::Transaction*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;duckdb::AttachedDatabase*&gt;, std::hash&lt;duckdb::AttachedDatabase*&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (5,792,127 samples, 0.01%)</title><rect x="422.0" y="1653" width="0.1" height="15.0" fill="rgb(244,213,32)" rx="2" ry="2" />
<text  x="424.98" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryNode, std::default_delete&lt;duckdb::QueryNode&gt; &gt;::operator= (5,995,993 samples, 0.01%)</title><rect x="536.9" y="1781" width="0.1" height="15.0" fill="rgb(243,24,24)" rx="2" ry="2" />
<text  x="539.86" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt;::~unique_ptr (28,130,425 samples, 0.05%)</title><rect x="1016.7" y="1557" width="0.6" height="15.0" fill="rgb(232,36,14)" rx="2" ry="2" />
<text  x="1019.67" y="1567.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::PipelineInitializeEvent&gt;::shared_ptr&lt;std::allocator&lt;duckdb::PipelineInitializeEvent&gt;, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (39,169,451 samples, 0.08%)</title><rect x="1051.2" y="1781" width="0.9" height="15.0" fill="rgb(227,139,4)" rx="2" ry="2" />
<text  x="1054.22" y="1791.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorChildBuffer,  (37,796,825 samples, 0.07%)</title><rect x="294.5" y="1605" width="0.9" height="15.0" fill="rgb(229,85,3)" rx="2" ry="2" />
<text  x="297.54" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::_Hashtable_alloc (4,402,060 samples, 0.01%)</title><rect x="695.9" y="1781" width="0.1" height="15.0" fill="rgb(246,222,52)" rx="2" ry="2" />
<text  x="698.86" y="1791.5" ></text>
</g>
<g >
<title>schedule (15,877,356 samples, 0.03%)</title><rect x="505.7" y="1717" width="0.4" height="15.0" fill="rgb(205,69,4)" rx="2" ry="2" />
<text  x="508.70" y="1727.5" ></text>
</g>
<g >
<title>duckdb::ArenaAllocator::~ArenaAllocator (7,884,719 samples, 0.02%)</title><rect x="1122.2" y="1685" width="0.2" height="15.0" fill="rgb(211,225,36)" rx="2" ry="2" />
<text  x="1125.21" y="1695.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::FileBuffer, std::default_delete&lt;duckdb::FileBuffer&gt;, true&gt;::operator= (5,152,919 samples, 0.01%)</title><rect x="879.5" y="1621" width="0.1" height="15.0" fill="rgb(243,130,20)" rx="2" ry="2" />
<text  x="882.52" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (6,845,641 samples, 0.01%)</title><rect x="726.6" y="1637" width="0.1" height="15.0" fill="rgb(238,144,40)" rx="2" ry="2" />
<text  x="729.56" y="1647.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RowGroup, std::default_delete&lt;duckdb::RowGroup&gt;, true&gt;::unique_ptr (13,918,905 samples, 0.03%)</title><rect x="458.3" y="1733" width="0.3" height="15.0" fill="rgb(213,167,40)" rx="2" ry="2" />
<text  x="461.26" y="1743.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt;, true&gt;::unique_ptr&lt;duckdb::ValidityScanState, std::default_delete&lt;std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt; &gt;, void&gt; (6,796,668 samples, 0.01%)</title><rect x="214.5" y="1589" width="0.1" height="15.0" fill="rgb(233,88,50)" rx="2" ry="2" />
<text  x="217.45" y="1599.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::DeleteTemporaryFile (12,238,335 samples, 0.02%)</title><rect x="342.2" y="965" width="0.3" height="15.0" fill="rgb(241,145,37)" rx="2" ry="2" />
<text  x="345.19" y="975.5" ></text>
</g>
<g >
<title>duckdb::StringHeap::~StringHeap (7,884,719 samples, 0.02%)</title><rect x="1122.2" y="1701" width="0.2" height="15.0" fill="rgb(216,211,12)" rx="2" ry="2" />
<text  x="1125.21" y="1711.5" ></text>
</g>
<g >
<title>duckdb::Binder::PushExpressionBinder (28,142,735 samples, 0.05%)</title><rect x="936.2" y="1701" width="0.6" height="15.0" fill="rgb(250,169,35)" rx="2" ry="2" />
<text  x="939.17" y="1711.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::~unordered_set (4,595,566 samples, 0.01%)</title><rect x="869.8" y="1733" width="0.1" height="15.0" fill="rgb(226,185,48)" rx="2" ry="2" />
<text  x="872.81" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_check_len (7,545,844 samples, 0.01%)</title><rect x="789.7" y="1797" width="0.2" height="15.0" fill="rgb(226,208,0)" rx="2" ry="2" />
<text  x="792.70" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::weak_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::weak_ptr&lt;duckdb::Event&gt; &gt; &gt;::_S_relocate (4,476,288 samples, 0.01%)</title><rect x="1047.7" y="1749" width="0.1" height="15.0" fill="rgb(233,218,22)" rx="2" ry="2" />
<text  x="1050.71" y="1759.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::ProducerToken, std::default_delete&lt;duckdb::ProducerToken&gt; &gt;::_M_ptr (10,247,015 samples, 0.02%)</title><rect x="508.1" y="1861" width="0.2" height="15.0" fill="rgb(232,41,31)" rx="2" ry="2" />
<text  x="511.10" y="1871.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_body (44,433,284 samples, 0.09%)</title><rect x="401.2" y="1509" width="1.0" height="15.0" fill="rgb(238,152,45)" rx="2" ry="2" />
<text  x="404.20" y="1519.5" ></text>
</g>
<g >
<title>duckdb::LogicalExpressionGet::LogicalExpressionGet (8,974,894 samples, 0.02%)</title><rect x="975.3" y="1717" width="0.3" height="15.0" fill="rgb(230,73,52)" rx="2" ry="2" />
<text  x="978.35" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::IsValid (5,128,106 samples, 0.01%)</title><rect x="573.5" y="1781" width="0.1" height="15.0" fill="rgb(208,160,52)" rx="2" ry="2" />
<text  x="576.49" y="1791.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (5,947,700 samples, 0.01%)</title><rect x="252.1" y="1573" width="0.2" height="15.0" fill="rgb(218,55,9)" rx="2" ry="2" />
<text  x="255.13" y="1583.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::ColumnSegment, false&gt;::Verify (17,706,574 samples, 0.03%)</title><rect x="417.1" y="1621" width="0.4" height="15.0" fill="rgb(223,161,45)" rx="2" ry="2" />
<text  x="420.08" y="1631.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueryNode, std::default_delete&lt;duckdb::QueryNode&gt; &gt;::~unique_ptr (23,863,335 samples, 0.05%)</title><rect x="1038.5" y="1717" width="0.5" height="15.0" fill="rgb(219,67,1)" rx="2" ry="2" />
<text  x="1041.45" y="1727.5" ></text>
</g>
<g >
<title>duckdb::make_buffer&lt;duckdb::VectorChildBuffer, duckdb::Vector&gt; (46,573,417 samples, 0.09%)</title><rect x="294.4" y="1669" width="1.0" height="15.0" fill="rgb(212,185,51)" rx="2" ry="2" />
<text  x="297.35" y="1679.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::SplitStringBuffer (18,516,951 samples, 0.04%)</title><rect x="613.4" y="1765" width="0.4" height="15.0" fill="rgb(248,197,2)" rx="2" ry="2" />
<text  x="616.41" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CatalogEntry, std::default_delete&lt;duckdb::CatalogEntry&gt;, true&gt;::~unique_ptr (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1381" width="1.9" height="15.0" fill="rgb(207,83,22)" rx="2" ry="2" />
<text  x="1120.81" y="1391.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt;::~unique_ptr (5,167,275 samples, 0.01%)</title><rect x="832.9" y="1397" width="0.1" height="15.0" fill="rgb(222,109,38)" rx="2" ry="2" />
<text  x="835.92" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1669" width="1.9" height="15.0" fill="rgb(211,127,21)" rx="2" ry="2" />
<text  x="1120.81" y="1679.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (9,916,935 samples, 0.02%)</title><rect x="831.9" y="1509" width="0.2" height="15.0" fill="rgb(253,67,17)" rx="2" ry="2" />
<text  x="834.87" y="1519.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt; &gt; &gt;::~vector (12,165,082 samples, 0.02%)</title><rect x="758.5" y="1765" width="0.3" height="15.0" fill="rgb(229,108,15)" rx="2" ry="2" />
<text  x="761.55" y="1775.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;unsigned int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned int, false&gt; &gt; &gt; &gt; (4,452,910 samples, 0.01%)</title><rect x="863.8" y="1669" width="0.1" height="15.0" fill="rgb(232,88,18)" rx="2" ry="2" />
<text  x="866.81" y="1679.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::InterruptDoneSignalState, std::allocator&lt;duckdb::InterruptDoneSignalState&gt;,  (8,305,325 samples, 0.02%)</title><rect x="364.9" y="1797" width="0.2" height="15.0" fill="rgb(253,141,29)" rx="2" ry="2" />
<text  x="367.90" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt;, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; &gt;::_M_realloc_insert&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator const&gt; &gt; (9,913,838 samples, 0.02%)</title><rect x="850.3" y="1813" width="0.2" height="15.0" fill="rgb(247,79,47)" rx="2" ry="2" />
<text  x="853.25" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::SingleJoinRelation, std::default_delete&lt;duckdb::SingleJoinRelation&gt;, true&gt; &gt; &gt;::push_back (10,078,404 samples, 0.02%)</title><rect x="759.5" y="1781" width="0.2" height="15.0" fill="rgb(250,35,0)" rx="2" ry="2" />
<text  x="762.46" y="1791.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::EnumerateExpressions (4,696,078 samples, 0.01%)</title><rect x="743.2" y="1781" width="0.1" height="15.0" fill="rgb(228,44,13)" rx="2" ry="2" />
<text  x="746.20" y="1791.5" ></text>
</g>
<g >
<title>mpage_submit_page (15,401,717 samples, 0.03%)</title><rect x="251.6" y="1541" width="0.3" height="15.0" fill="rgb(254,85,53)" rx="2" ry="2" />
<text  x="254.59" y="1551.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::InsertLocalState, std::default_delete&lt;duckdb::InsertLocalState&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::InsertLocalState&gt;, void&gt; (7,423,169 samples, 0.01%)</title><rect x="491.5" y="1797" width="0.1" height="15.0" fill="rgb(215,130,54)" rx="2" ry="2" />
<text  x="494.45" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;duckdb::Pipeline&amp;, duckdb::PipelineEventStack&gt; &gt; (4,420,240 samples, 0.01%)</title><rect x="1053.0" y="1765" width="0.1" height="15.0" fill="rgb(211,32,38)" rx="2" ry="2" />
<text  x="1055.97" y="1775.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::Verify (4,254,196,480 samples, 8.29%)</title><rect x="546.1" y="1893" width="97.8" height="15.0" fill="rgb(226,181,0)" rx="2" ry="2" />
<text  x="549.05" y="1903.5" >duckdb::Log..</text>
</g>
<g >
<title>duckdb::PhysicalPlanGenerator::CreatePlan (3,602,071,901 samples, 7.02%)</title><rect x="841.5" y="1893" width="82.8" height="15.0" fill="rgb(209,217,12)" rx="2" ry="2" />
<text  x="844.48" y="1903.5" >duckdb::P..</text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (21,489,252 samples, 0.04%)</title><rect x="970.4" y="1749" width="0.5" height="15.0" fill="rgb(242,62,22)" rx="2" ry="2" />
<text  x="973.45" y="1759.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (9,633,683 samples, 0.02%)</title><rect x="86.3" y="2005" width="0.3" height="15.0" fill="rgb(220,208,1)" rx="2" ry="2" />
<text  x="89.34" y="2015.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::StartOperator (4,733,249 samples, 0.01%)</title><rect x="364.3" y="1861" width="0.1" height="15.0" fill="rgb(237,196,11)" rx="2" ry="2" />
<text  x="367.31" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::OrderByNode, std::allocator&lt;duckdb::OrderByNode&gt; &gt;::~vector (5,473,347 samples, 0.01%)</title><rect x="527.3" y="1733" width="0.1" height="15.0" fill="rgb(253,211,20)" rx="2" ry="2" />
<text  x="530.28" y="1743.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (73,175,041 samples, 0.14%)</title><rect x="400.8" y="1701" width="1.7" height="15.0" fill="rgb(239,143,4)" rx="2" ry="2" />
<text  x="403.81" y="1711.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::LHSBinding, true&gt;::~vector (8,445,475 samples, 0.02%)</title><rect x="769.9" y="1797" width="0.2" height="15.0" fill="rgb(224,167,6)" rx="2" ry="2" />
<text  x="772.91" y="1807.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::QueryProfiler::TreeNode&gt; (4,609,831 samples, 0.01%)</title><rect x="1086.2" y="1813" width="0.1" height="15.0" fill="rgb(234,74,52)" rx="2" ry="2" />
<text  x="1089.20" y="1823.5" ></text>
</g>
<g >
<title>duckdb::StatementProperties::~StatementProperties (12,119,369 samples, 0.02%)</title><rect x="337.6" y="1685" width="0.3" height="15.0" fill="rgb(222,217,13)" rx="2" ry="2" />
<text  x="340.65" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Utf8Proc::RenderWidth (16,301,727 samples, 0.03%)</title><rect x="1071.9" y="1733" width="0.4" height="15.0" fill="rgb(243,220,47)" rx="2" ry="2" />
<text  x="1074.88" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ExpressionBinder::~ExpressionBinder (10,251,893 samples, 0.02%)</title><rect x="962.9" y="1717" width="0.3" height="15.0" fill="rgb(233,72,26)" rx="2" ry="2" />
<text  x="965.93" y="1727.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::begin (5,066,403 samples, 0.01%)</title><rect x="663.4" y="1781" width="0.1" height="15.0" fill="rgb(253,199,6)" rx="2" ry="2" />
<text  x="666.41" y="1791.5" ></text>
</g>
<g >
<title>duckdb::JoinRelationSetManager::JoinRelationTreeNode::~JoinRelationTreeNode (5,180,331 samples, 0.01%)</title><rect x="756.2" y="1749" width="0.1" height="15.0" fill="rgb(210,220,53)" rx="2" ry="2" />
<text  x="759.18" y="1759.5" ></text>
</g>
<g >
<title>duckdb::UndoBuffer::Cleanup (57,720,239 samples, 0.11%)</title><rect x="321.0" y="1797" width="1.3" height="15.0" fill="rgb(230,1,21)" rx="2" ry="2" />
<text  x="323.97" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Transaction::Get (254,729,497 samples, 0.50%)</title><rect x="995.9" y="1717" width="5.8" height="15.0" fill="rgb(212,31,10)" rx="2" ry="2" />
<text  x="998.87" y="1727.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PhysicalColumnDataScanState, std::default_delete&lt;duckdb::PhysicalColumnDataScanState&gt; &gt;::get (4,734,621 samples, 0.01%)</title><rect x="92.4" y="1653" width="0.1" height="15.0" fill="rgb(248,162,5)" rx="2" ry="2" />
<text  x="95.40" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;unsigned long, false&gt; &gt; &gt;::operator (6,273,113 samples, 0.01%)</title><rect x="777.2" y="1733" width="0.2" height="15.0" fill="rgb(231,55,19)" rx="2" ry="2" />
<text  x="780.23" y="1743.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::RowGroupCollection&gt;::~shared_ptr (418,582,452 samples, 0.82%)</title><rect x="235.9" y="1669" width="9.7" height="15.0" fill="rgb(240,140,20)" rx="2" ry="2" />
<text  x="238.93" y="1679.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (20,365,838 samples, 0.04%)</title><rect x="654.6" y="1749" width="0.4" height="15.0" fill="rgb(213,188,16)" rx="2" ry="2" />
<text  x="657.57" y="1759.5" ></text>
</g>
<g >
<title>duckdb::TableIndexList::TableIndexList (4,921,505 samples, 0.01%)</title><rect x="428.2" y="1605" width="0.1" height="15.0" fill="rgb(209,223,46)" rx="2" ry="2" />
<text  x="431.19" y="1615.5" ></text>
</g>
<g >
<title>dequeue_task_fair (5,279,532 samples, 0.01%)</title><rect x="249.3" y="1509" width="0.1" height="15.0" fill="rgb(223,78,42)" rx="2" ry="2" />
<text  x="252.32" y="1519.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::StorageCommitState, std::default_delete&lt;duckdb::StorageCommitState&gt;, true&gt;::~unique_ptr (14,895,397 samples, 0.03%)</title><rect x="318.3" y="1813" width="0.3" height="15.0" fill="rgb(245,155,51)" rx="2" ry="2" />
<text  x="321.28" y="1823.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,828,367 samples, 0.02%)</title><rect x="573.2" y="1749" width="0.3" height="15.0" fill="rgb(222,118,42)" rx="2" ry="2" />
<text  x="576.24" y="1759.5" ></text>
</g>
<g >
<title>__interceptor_memcmp (8,897,024 samples, 0.02%)</title><rect x="184.4" y="2037" width="0.2" height="15.0" fill="rgb(225,215,23)" rx="2" ry="2" />
<text  x="187.41" y="2047.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (5,758,005 samples, 0.01%)</title><rect x="981.9" y="1765" width="0.1" height="15.0" fill="rgb(253,117,48)" rx="2" ry="2" />
<text  x="984.89" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unsafe_get_property (6,450,446 samples, 0.01%)</title><rect x="1072.1" y="1701" width="0.2" height="15.0" fill="rgb(248,95,26)" rx="2" ry="2" />
<text  x="1075.11" y="1711.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt;, true&gt; &gt; &gt; (18,420,116 samples, 0.04%)</title><rect x="828.3" y="1765" width="0.4" height="15.0" fill="rgb(244,134,28)" rx="2" ry="2" />
<text  x="831.26" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LocalStorage, std::default_delete&lt;duckdb::LocalStorage&gt;, true&gt;::~unique_ptr (21,710,295 samples, 0.04%)</title><rect x="327.0" y="1621" width="0.5" height="15.0" fill="rgb(207,190,41)" rx="2" ry="2" />
<text  x="330.00" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_do_relocate (38,516,707 samples, 0.08%)</title><rect x="629.3" y="1701" width="0.9" height="15.0" fill="rgb(218,40,25)" rx="2" ry="2" />
<text  x="632.28" y="1711.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::ColumnDataAllocator&gt; &gt;::construct&lt;duckdb::ColumnDataAllocator, duckdb::ClientContext&amp;, duckdb::ColumnDataAllocatorType&amp;&gt; (13,669,257 samples, 0.03%)</title><rect x="911.7" y="1653" width="0.3" height="15.0" fill="rgb(226,68,19)" rx="2" ry="2" />
<text  x="914.67" y="1663.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt; &gt;::operator= (4,528,800 samples, 0.01%)</title><rect x="977.6" y="1733" width="0.1" height="15.0" fill="rgb(214,221,47)" rx="2" ry="2" />
<text  x="980.64" y="1743.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ColumnRefExpression, duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; const&amp;&gt; (21,322,268 samples, 0.04%)</title><rect x="946.0" y="1685" width="0.5" height="15.0" fill="rgb(242,134,40)" rx="2" ry="2" />
<text  x="949.02" y="1695.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::ExpressionEquality&lt;duckdb::ParsedExpression&gt;, duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (7,247,413 samples, 0.01%)</title><rect x="967.6" y="1701" width="0.1" height="15.0" fill="rgb(233,191,23)" rx="2" ry="2" />
<text  x="970.56" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BoundTableRef, std::default_delete&lt;duckdb::BoundTableRef&gt;, true&gt;::unique_ptr&lt;duckdb::BoundExpressionListRef, std::default_delete&lt;std::unique_ptr&lt;duckdb::BoundTableRef, std::default_delete&lt;duckdb::BoundTableRef&gt; &gt; &gt;, void&gt; (7,875,343 samples, 0.02%)</title><rect x="938.3" y="1733" width="0.2" height="15.0" fill="rgb(235,214,46)" rx="2" ry="2" />
<text  x="941.30" y="1743.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;*, duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt; (26,824,257 samples, 0.05%)</title><rect x="915.8" y="1669" width="0.6" height="15.0" fill="rgb(215,102,13)" rx="2" ry="2" />
<text  x="918.81" y="1679.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (86,303,696 samples, 0.17%)</title><rect x="1177.7" y="1877" width="2.0" height="15.0" fill="rgb(240,115,18)" rx="2" ry="2" />
<text  x="1180.74" y="1887.5" ></text>
</g>
<g >
<title>do_anonymous_page (172,027,959 samples, 0.34%)</title><rect x="1136.8" y="1925" width="4.0" height="15.0" fill="rgb(243,41,49)" rx="2" ry="2" />
<text  x="1139.83" y="1935.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::operator= (10,924,700 samples, 0.02%)</title><rect x="1026.8" y="1861" width="0.3" height="15.0" fill="rgb(245,23,37)" rx="2" ry="2" />
<text  x="1029.81" y="1871.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;duckdb::BufferEvictionNode, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::enqueue&lt; (5,002,891 samples, 0.01%)</title><rect x="862.1" y="1525" width="0.1" height="15.0" fill="rgb(243,52,18)" rx="2" ry="2" />
<text  x="865.06" y="1535.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_codepoint (11,935,115 samples, 0.02%)</title><rect x="602.9" y="1749" width="0.3" height="15.0" fill="rgb(253,48,30)" rx="2" ry="2" />
<text  x="605.90" y="1759.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::QueryProfiler,  (27,099,394 samples, 0.05%)</title><rect x="352.4" y="1797" width="0.6" height="15.0" fill="rgb(209,189,7)" rx="2" ry="2" />
<text  x="355.40" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::LocalSinkState, std::default_delete&lt;duckdb::LocalSinkState&gt; &gt;::unique_ptr&lt;duckdb::InsertLocalState, std::default_delete&lt;duckdb::InsertLocalState&gt;, void&gt; (7,609,818 samples, 0.01%)</title><rect x="491.7" y="1797" width="0.1" height="15.0" fill="rgb(251,152,19)" rx="2" ry="2" />
<text  x="494.67" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt; &gt;::unique_ptr (4,485,597 samples, 0.01%)</title><rect x="806.4" y="1749" width="0.1" height="15.0" fill="rgb(215,5,22)" rx="2" ry="2" />
<text  x="809.40" y="1759.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (13,062,906 samples, 0.03%)</title><rect x="1139.4" y="1909" width="0.3" height="15.0" fill="rgb(219,100,26)" rx="2" ry="2" />
<text  x="1142.38" y="1919.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::ColumnDataCollectionSegment, std::shared_ptr&lt;duckdb::ColumnDataAllocator&gt;&amp;, duckdb::vector&lt;duckdb::LogicalType, true&gt;&amp;&gt; (94,165,619 samples, 0.18%)</title><rect x="866.7" y="1749" width="2.1" height="15.0" fill="rgb(242,104,3)" rx="2" ry="2" />
<text  x="869.68" y="1759.5" ></text>
</g>
<g >
<title>duckdb::OperatorProfiler::AddTiming (27,848,625 samples, 0.05%)</title><rect x="420.2" y="1797" width="0.7" height="15.0" fill="rgb(228,163,46)" rx="2" ry="2" />
<text  x="423.24" y="1807.5" ></text>
</g>
<g >
<title>duckdb::Rule::~Rule (12,115,192 samples, 0.02%)</title><rect x="832.5" y="1685" width="0.3" height="15.0" fill="rgb(229,67,38)" rx="2" ry="2" />
<text  x="835.54" y="1695.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (22,690,782 samples, 0.04%)</title><rect x="73.1" y="1845" width="0.6" height="15.0" fill="rgb(242,124,2)" rx="2" ry="2" />
<text  x="76.14" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Vector::Vector (8,723,570 samples, 0.02%)</title><rect x="293.6" y="1669" width="0.2" height="15.0" fill="rgb(211,147,16)" rx="2" ry="2" />
<text  x="296.55" y="1679.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::_M_check_len (4,408,924 samples, 0.01%)</title><rect x="530.5" y="1685" width="0.1" height="15.0" fill="rgb(253,186,7)" rx="2" ry="2" />
<text  x="533.51" y="1695.5" ></text>
</g>
<g >
<title>duckdb::FilterCombiner::FilterCombiner (13,706,779 samples, 0.03%)</title><rect x="744.8" y="1797" width="0.3" height="15.0" fill="rgb(235,223,21)" rx="2" ry="2" />
<text  x="747.82" y="1807.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::CompressionAppendState&gt;::operator (14,321,275 samples, 0.03%)</title><rect x="339.2" y="1365" width="0.3" height="15.0" fill="rgb(254,177,24)" rx="2" ry="2" />
<text  x="342.22" y="1375.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_move_assign (5,043,106 samples, 0.01%)</title><rect x="966.0" y="1717" width="0.1" height="15.0" fill="rgb(247,12,46)" rx="2" ry="2" />
<text  x="969.03" y="1727.5" ></text>
</g>
<g >
<title>[unknown] (53,293,339 samples, 0.10%)</title><rect x="39.8" y="2005" width="1.2" height="15.0" fill="rgb(216,81,22)" rx="2" ry="2" />
<text  x="42.77" y="2015.5" ></text>
</g>
<g >
<title>duckdb::PragmaFunctions::RegisterFunction (9,585,929 samples, 0.02%)</title><rect x="1110.4" y="1877" width="0.3" height="15.0" fill="rgb(217,46,13)" rx="2" ry="2" />
<text  x="1113.44" y="1887.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BufferedSerializer, std::default_delete&lt;duckdb::BufferedSerializer&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::BufferedSerializer&gt;, void&gt; (4,451,645 samples, 0.01%)</title><rect x="313.7" y="1573" width="0.1" height="15.0" fill="rgb(230,65,12)" rx="2" ry="2" />
<text  x="316.67" y="1583.5" ></text>
</g>
<g >
<title>duckdb::UndoBuffer::IterateEntries&lt;duckdb::UndoBuffer::Commit (2,742,851,586 samples, 5.35%)</title><rect x="254.3" y="1797" width="63.1" height="15.0" fill="rgb(240,19,46)" rx="2" ry="2" />
<text  x="257.33" y="1807.5" >duckdb..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt;::construct&lt;duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;, duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt; &gt; (5,821,708 samples, 0.01%)</title><rect x="490.7" y="1685" width="0.1" height="15.0" fill="rgb(210,107,52)" rx="2" ry="2" />
<text  x="493.67" y="1695.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_fetch_min (4,486,530 samples, 0.01%)</title><rect x="222.4" y="1381" width="0.1" height="15.0" fill="rgb(236,74,51)" rx="2" ry="2" />
<text  x="225.38" y="1391.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long&amp;&gt; (6,129,569 samples, 0.01%)</title><rect x="564.6" y="1765" width="0.1" height="15.0" fill="rgb(220,109,17)" rx="2" ry="2" />
<text  x="567.56" y="1775.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*, unsigned long&gt; (9,115,055 samples, 0.02%)</title><rect x="1076.1" y="1701" width="0.2" height="15.0" fill="rgb(213,54,3)" rx="2" ry="2" />
<text  x="1079.10" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnAppendState, std::allocator&lt;duckdb::ColumnAppendState&gt; &gt;::~vector (9,526,286 samples, 0.02%)</title><rect x="234.1" y="1669" width="0.2" height="15.0" fill="rgb(245,124,18)" rx="2" ry="2" />
<text  x="237.05" y="1679.5" ></text>
</g>
<g >
<title>__asan::GetCurrentThreadStats (18,789,349 samples, 0.04%)</title><rect x="32.4" y="2021" width="0.5" height="15.0" fill="rgb(244,81,3)" rx="2" ry="2" />
<text  x="35.43" y="2031.5" ></text>
</g>
<g >
<title>duckdb::InsertStatement::GetValuesList (30,663,466 samples, 0.06%)</title><rect x="1011.3" y="1829" width="0.7" height="15.0" fill="rgb(217,126,42)" rx="2" ry="2" />
<text  x="1014.32" y="1839.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::QueueProducerToken, std::default_delete&lt;duckdb::QueueProducerToken&gt; &gt;::_M_ptr (11,597,375 samples, 0.02%)</title><rect x="503.9" y="1829" width="0.3" height="15.0" fill="rgb(217,38,49)" rx="2" ry="2" />
<text  x="506.88" y="1839.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::unordered_map&lt;duckdb::ColumnBinding, duckdb::ColumnBinding, duckdb::ColumnBindingHashFunction, duckdb::ColumnBindingEquality, std::allocator&lt;std::pair&lt;duckdb::ColumnBinding const, duckdb::ColumnBinding&gt; &gt; &gt;*&gt; (7,582,109 samples, 0.01%)</title><rect x="758.6" y="1717" width="0.2" height="15.0" fill="rgb(244,162,4)" rx="2" ry="2" />
<text  x="761.60" y="1727.5" ></text>
</g>
<g >
<title>duckdb::PipelineExecutor::GetData (75,467,537 samples, 0.15%)</title><rect x="362.6" y="1861" width="1.7" height="15.0" fill="rgb(213,95,36)" rx="2" ry="2" />
<text  x="365.57" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, unsigned long, std::__detail::_Identity, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (4,538,512 samples, 0.01%)</title><rect x="675.5" y="1749" width="0.1" height="15.0" fill="rgb(218,64,42)" rx="2" ry="2" />
<text  x="678.52" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ColumnStatistics::~ColumnStatistics (16,080,392 samples, 0.03%)</title><rect x="236.4" y="1317" width="0.4" height="15.0" fill="rgb(226,76,54)" rx="2" ry="2" />
<text  x="239.44" y="1327.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator= (4,831,989 samples, 0.01%)</title><rect x="468.7" y="1749" width="0.1" height="15.0" fill="rgb(231,67,26)" rx="2" ry="2" />
<text  x="471.71" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::LocalSinkState, std::default_delete&lt;duckdb::LocalSinkState&gt;, true&gt;::operator= (14,221,320 samples, 0.03%)</title><rect x="496.1" y="1829" width="0.4" height="15.0" fill="rgb(233,166,18)" rx="2" ry="2" />
<text  x="499.14" y="1839.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::StarExpression, std::default_delete&lt;duckdb::StarExpression&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::StarExpression&gt;, void&gt; (4,782,985 samples, 0.01%)</title><rect x="533.4" y="1749" width="0.1" height="15.0" fill="rgb(226,88,29)" rx="2" ry="2" />
<text  x="536.38" y="1759.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::ColumnScanState*&gt; (19,774,355 samples, 0.04%)</title><rect x="226.8" y="1589" width="0.4" height="15.0" fill="rgb(207,221,53)" rx="2" ry="2" />
<text  x="229.78" y="1599.5" ></text>
</g>
<g >
<title>duckdb::LogicalDummyScan::LogicalDummyScan (7,085,606 samples, 0.01%)</title><rect x="976.1" y="1717" width="0.2" height="15.0" fill="rgb(222,40,6)" rx="2" ry="2" />
<text  x="979.10" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::VectorCache, std::allocator&lt;duckdb::VectorCache&gt; &gt;::push_back (24,387,257 samples, 0.05%)</title><rect x="894.2" y="1749" width="0.5" height="15.0" fill="rgb(249,115,6)" rx="2" ry="2" />
<text  x="897.18" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (14,432,492 samples, 0.03%)</title><rect x="1117.5" y="1509" width="0.3" height="15.0" fill="rgb(209,106,51)" rx="2" ry="2" />
<text  x="1120.47" y="1519.5" ></text>
</g>
<g >
<title>duckdb::EnumComparisonRule::~EnumComparisonRule (15,936,810 samples, 0.03%)</title><rect x="831.7" y="1701" width="0.4" height="15.0" fill="rgb(214,22,5)" rx="2" ry="2" />
<text  x="834.74" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionExecutorState, std::default_delete&lt;duckdb::ExpressionExecutorState&gt;, true&gt;::~unique_ptr (21,088,921 samples, 0.04%)</title><rect x="906.6" y="1653" width="0.5" height="15.0" fill="rgb(244,108,25)" rx="2" ry="2" />
<text  x="909.65" y="1663.5" ></text>
</g>
<g >
<title>duckdb::SegmentTree&lt;duckdb::RowGroup, true&gt;::GetRootSegment (8,250,188 samples, 0.02%)</title><rect x="226.0" y="1717" width="0.2" height="15.0" fill="rgb(222,224,8)" rx="2" ry="2" />
<text  x="229.01" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Allocator::AllocateData (72,457,629 samples, 0.14%)</title><rect x="492.6" y="1589" width="1.7" height="15.0" fill="rgb(222,108,12)" rx="2" ry="2" />
<text  x="495.60" y="1599.5" ></text>
</g>
<g >
<title>duckdb::ClientContext::GetExecutor (11,561,160 samples, 0.02%)</title><rect x="374.2" y="1925" width="0.3" height="15.0" fill="rgb(226,200,2)" rx="2" ry="2" />
<text  x="377.23" y="1935.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::GetMetaPipelines (7,522,667 samples, 0.01%)</title><rect x="1082.9" y="1861" width="0.2" height="15.0" fill="rgb(226,196,39)" rx="2" ry="2" />
<text  x="1085.95" y="1871.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_salloc (6,865,883 samples, 0.01%)</title><rect x="890.9" y="1429" width="0.2" height="15.0" fill="rgb(224,85,27)" rx="2" ry="2" />
<text  x="893.90" y="1439.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;,  (9,514,777 samples, 0.02%)</title><rect x="481.1" y="1573" width="0.3" height="15.0" fill="rgb(212,159,52)" rx="2" ry="2" />
<text  x="484.14" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics []&gt; &gt;::unique_ptr (17,510,352 samples, 0.03%)</title><rect x="424.3" y="1493" width="0.4" height="15.0" fill="rgb(247,128,48)" rx="2" ry="2" />
<text  x="427.28" y="1503.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::malloc_default (15,871,986 samples, 0.03%)</title><rect x="107.3" y="1461" width="0.4" height="15.0" fill="rgb(207,201,29)" rx="2" ry="2" />
<text  x="110.29" y="1471.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::UpdateStringStats (6,673,323 samples, 0.01%)</title><rect x="462.1" y="1621" width="0.1" height="15.0" fill="rgb(228,78,20)" rx="2" ry="2" />
<text  x="465.07" y="1631.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::LocalSinkState&gt;::operator (11,191,624 samples, 0.02%)</title><rect x="106.8" y="1749" width="0.3" height="15.0" fill="rgb(210,26,22)" rx="2" ry="2" />
<text  x="109.84" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (20,623,375 samples, 0.04%)</title><rect x="572.4" y="1765" width="0.5" height="15.0" fill="rgb(207,228,38)" rx="2" ry="2" />
<text  x="575.45" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::PipelineInitializeEvent&gt; &gt;::construct&lt;duckdb::PipelineInitializeEvent, std::shared_ptr&lt;duckdb::Pipeline&gt;&amp;&gt; (15,447,681 samples, 0.03%)</title><rect x="1051.5" y="1717" width="0.3" height="15.0" fill="rgb(213,201,43)" rx="2" ry="2" />
<text  x="1054.47" y="1727.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderNode (10,647,283 samples, 0.02%)</title><rect x="596.8" y="1749" width="0.3" height="15.0" fill="rgb(223,141,18)" rx="2" ry="2" />
<text  x="599.81" y="1759.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::SelectStatement&gt; (12,669,937 samples, 0.02%)</title><rect x="536.5" y="1797" width="0.3" height="15.0" fill="rgb(252,82,46)" rx="2" ry="2" />
<text  x="539.54" y="1807.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderNode (4,550,647 samples, 0.01%)</title><rect x="835.1" y="1781" width="0.1" height="15.0" fill="rgb(215,99,43)" rx="2" ry="2" />
<text  x="838.08" y="1791.5" ></text>
</g>
<g >
<title>duckdb::TableScanState::~TableScanState (51,068,647 samples, 0.10%)</title><rect x="226.5" y="1733" width="1.2" height="15.0" fill="rgb(219,12,51)" rx="2" ry="2" />
<text  x="229.53" y="1743.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::QueryProfiler::TreeNode, std::default_delete&lt;duckdb::QueryProfiler::TreeNode&gt;, true&gt;, true&gt;::~vector (11,896,480 samples, 0.02%)</title><rect x="1089.4" y="1765" width="0.3" height="15.0" fill="rgb(209,91,30)" rx="2" ry="2" />
<text  x="1092.42" y="1775.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;::~unique_ptr (4,926,487 samples, 0.01%)</title><rect x="831.2" y="1669" width="0.1" height="15.0" fill="rgb(215,95,3)" rx="2" ry="2" />
<text  x="834.22" y="1679.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VersionNode&gt;::operator= (5,664,043 samples, 0.01%)</title><rect x="416.1" y="1685" width="0.1" height="15.0" fill="rgb(243,198,6)" rx="2" ry="2" />
<text  x="419.10" y="1695.5" ></text>
</g>
<g >
<title>duckdb::Event::SetTasks (58,391,559 samples, 0.11%)</title><rect x="93.2" y="1733" width="1.3" height="15.0" fill="rgb(211,47,51)" rx="2" ry="2" />
<text  x="96.16" y="1743.5" ></text>
</g>
<g >
<title>get_page_from_freelist (5,183,865 samples, 0.01%)</title><rect x="56.1" y="1861" width="0.1" height="15.0" fill="rgb(214,16,18)" rx="2" ry="2" />
<text  x="59.13" y="1871.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::CaseExpressionMatcher&gt; (10,058,543 samples, 0.02%)</title><rect x="790.6" y="1845" width="0.3" height="15.0" fill="rgb(254,129,26)" rx="2" ry="2" />
<text  x="793.62" y="1855.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::RowGroupSegmentTree&gt; &gt;::destroy&lt;duckdb::RowGroupSegmentTree&gt; (350,274,486 samples, 0.68%)</title><rect x="237.4" y="1461" width="8.1" height="15.0" fill="rgb(220,147,38)" rx="2" ry="2" />
<text  x="240.40" y="1471.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SampleOptions, std::default_delete&lt;duckdb::SampleOptions&gt; &gt;::release (6,681,832 samples, 0.01%)</title><rect x="534.9" y="1733" width="0.2" height="15.0" fill="rgb(231,188,46)" rx="2" ry="2" />
<text  x="537.91" y="1743.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::WriteData (6,460,862 samples, 0.01%)</title><rect x="590.4" y="1813" width="0.2" height="15.0" fill="rgb(244,98,13)" rx="2" ry="2" />
<text  x="593.43" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ChunkMetaData::ChunkMetaData (18,289,562 samples, 0.04%)</title><rect x="885.3" y="1669" width="0.5" height="15.0" fill="rgb(248,68,44)" rx="2" ry="2" />
<text  x="888.33" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ColumnAppendState::~ColumnAppendState (24,815,850 samples, 0.05%)</title><rect x="339.2" y="1413" width="0.6" height="15.0" fill="rgb(208,131,15)" rx="2" ry="2" />
<text  x="342.19" y="1423.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; &gt; &gt; &gt; (35,984,319 samples, 0.07%)</title><rect x="788.2" y="1781" width="0.8" height="15.0" fill="rgb(233,20,51)" rx="2" ry="2" />
<text  x="791.17" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (18,023,981 samples, 0.04%)</title><rect x="1016.9" y="1461" width="0.4" height="15.0" fill="rgb(217,9,27)" rx="2" ry="2" />
<text  x="1019.85" y="1471.5" ></text>
</g>
<g >
<title>duckdb::Event::CompleteDependency (44,956,083 samples, 0.09%)</title><rect x="100.7" y="1797" width="1.0" height="15.0" fill="rgb(208,154,4)" rx="2" ry="2" />
<text  x="103.67" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::reference_wrapper&lt;duckdb::SchemaCatalogEntry&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (5,530,693 samples, 0.01%)</title><rect x="1008.3" y="1717" width="0.2" height="15.0" fill="rgb(219,148,54)" rx="2" ry="2" />
<text  x="1011.33" y="1727.5" ></text>
</g>
<g >
<title>duckdb::UncompressedStringStorage::StringAppend (30,709,803 samples, 0.06%)</title><rect x="461.6" y="1653" width="0.7" height="15.0" fill="rgb(229,185,30)" rx="2" ry="2" />
<text  x="464.59" y="1663.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (9,931,588 samples, 0.02%)</title><rect x="724.5" y="1653" width="0.2" height="15.0" fill="rgb(233,219,7)" rx="2" ry="2" />
<text  x="727.50" y="1663.5" ></text>
</g>
<g >
<title>duckdb::DuckTransaction::AutomaticCheckpoint (87,093,425 samples, 0.17%)</title><rect x="189.5" y="1829" width="2.0" height="15.0" fill="rgb(234,24,28)" rx="2" ry="2" />
<text  x="192.51" y="1839.5" ></text>
</g>
<g >
<title>duckdb::BuiltinFunctions::RegisterNestedFunctions (7,189,173 samples, 0.01%)</title><rect x="1109.9" y="1909" width="0.2" height="15.0" fill="rgb(243,225,10)" rx="2" ry="2" />
<text  x="1112.89" y="1919.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::CatalogEntry, std::default_delete&lt;duckdb::CatalogEntry&gt; &gt;::~unique_ptr (9,284,106 samples, 0.02%)</title><rect x="1117.6" y="757" width="0.2" height="15.0" fill="rgb(239,48,43)" rx="2" ry="2" />
<text  x="1120.55" y="767.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::VectorCache (90,487,587 samples, 0.18%)</title><rect x="486.6" y="1749" width="2.1" height="15.0" fill="rgb(210,84,42)" rx="2" ry="2" />
<text  x="489.62" y="1759.5" ></text>
</g>
<g >
<title>duckdb::StringUtil::Lower (9,647,901 samples, 0.02%)</title><rect x="1044.7" y="1877" width="0.2" height="15.0" fill="rgb(229,74,32)" rx="2" ry="2" />
<text  x="1047.68" y="1887.5" ></text>
</g>
<g >
<title>duckdb::AllocatedData::Reset (64,354,442 samples, 0.13%)</title><rect x="896.2" y="1509" width="1.5" height="15.0" fill="rgb(238,204,52)" rx="2" ry="2" />
<text  x="899.22" y="1519.5" ></text>
</g>
<g >
<title>std::function&lt;void  (4,715,471 samples, 0.01%)</title><rect x="1119.2" y="1077" width="0.1" height="15.0" fill="rgb(232,62,49)" rx="2" ry="2" />
<text  x="1122.18" y="1087.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt; &gt; (20,764,405 samples, 0.04%)</title><rect x="379.0" y="1877" width="0.4" height="15.0" fill="rgb(245,80,30)" rx="2" ry="2" />
<text  x="381.96" y="1887.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt;, false&gt;::operator= (10,310,976 samples, 0.02%)</title><rect x="989.9" y="1557" width="0.2" height="15.0" fill="rgb(229,154,48)" rx="2" ry="2" />
<text  x="992.89" y="1567.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (20,998,725 samples, 0.04%)</title><rect x="775.9" y="1749" width="0.5" height="15.0" fill="rgb(222,163,19)" rx="2" ry="2" />
<text  x="778.94" y="1759.5" ></text>
</g>
<g >
<title>duckdb::ExpressionRewriter::ApplyRules (73,325,768 samples, 0.14%)</title><rect x="738.8" y="1637" width="1.7" height="15.0" fill="rgb(225,83,14)" rx="2" ry="2" />
<text  x="741.82" y="1647.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperator::ResolveOperatorTypes (32,587,635 samples, 0.06%)</title><rect x="847.3" y="1829" width="0.8" height="15.0" fill="rgb(212,47,11)" rx="2" ry="2" />
<text  x="850.31" y="1839.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::weak_ptr&lt;duckdb::Pipeline&gt;*&gt; (5,095,671 samples, 0.01%)</title><rect x="356.4" y="1429" width="0.2" height="15.0" fill="rgb(212,21,0)" rx="2" ry="2" />
<text  x="359.45" y="1439.5" ></text>
</g>
<g >
<title>duckdb::DatabaseInstance::GetBufferManager (4,437,830 samples, 0.01%)</title><rect x="267.4" y="1557" width="0.1" height="15.0" fill="rgb(225,33,51)" rx="2" ry="2" />
<text  x="270.36" y="1567.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalIndex, std::allocator&lt;duckdb::LogicalIndex&gt; &gt;::_M_check_len (9,768,353 samples, 0.02%)</title><rect x="1020.1" y="1781" width="0.2" height="15.0" fill="rgb(221,135,6)" rx="2" ry="2" />
<text  x="1023.08" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ActiveQueryContext, std::default_delete&lt;duckdb::ActiveQueryContext&gt; &gt;::operator bool (13,970,453 samples, 0.03%)</title><rect x="514.5" y="1893" width="0.3" height="15.0" fill="rgb(248,8,48)" rx="2" ry="2" />
<text  x="517.50" y="1903.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CompressedSegmentState, std::default_delete&lt;duckdb::CompressedSegmentState&gt;, true&gt;::unique_ptr&lt;duckdb::UncompressedStringSegmentState, std::default_delete&lt;std::unique_ptr&lt;duckdb::CompressedSegmentState, std::default_delete&lt;duckdb::CompressedSegmentState&gt; &gt; &gt;, void&gt; (7,614,401 samples, 0.01%)</title><rect x="444.4" y="1621" width="0.2" height="15.0" fill="rgb(233,80,10)" rx="2" ry="2" />
<text  x="447.42" y="1631.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::SampleOptions, std::default_delete&lt;duckdb::SampleOptions&gt;, true&gt;::operator= (4,379,674 samples, 0.01%)</title><rect x="941.1" y="1749" width="0.1" height="15.0" fill="rgb(227,125,32)" rx="2" ry="2" />
<text  x="944.08" y="1759.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnBinding, std::allocator&lt;duckdb::ColumnBinding&gt; &gt;::operator= (4,966,941 samples, 0.01%)</title><rect x="844.4" y="1781" width="0.1" height="15.0" fill="rgb(212,104,28)" rx="2" ry="2" />
<text  x="847.43" y="1791.5" ></text>
</g>
<g >
<title>__interceptor_strlen (7,946,526 samples, 0.02%)</title><rect x="18.5" y="2005" width="0.2" height="15.0" fill="rgb(214,153,37)" rx="2" ry="2" />
<text  x="21.53" y="2015.5" ></text>
</g>
<g >
<title>duckdb::SelectionVector::Initialize (459,356,352 samples, 0.90%)</title><rect x="256.2" y="1653" width="10.6" height="15.0" fill="rgb(247,98,43)" rx="2" ry="2" />
<text  x="259.23" y="1663.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (97,081,972 samples, 0.19%)</title><rect x="481.5" y="1605" width="2.2" height="15.0" fill="rgb(233,63,49)" rx="2" ry="2" />
<text  x="484.51" y="1615.5" ></text>
</g>
<g >
<title>duckdb_libpgquery::base_yyparse (256,077,787 samples, 0.50%)</title><rect x="518.2" y="1877" width="5.9" height="15.0" fill="rgb(229,203,16)" rx="2" ry="2" />
<text  x="521.20" y="1887.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::isalloc (5,762,851 samples, 0.01%)</title><rect x="218.3" y="1397" width="0.2" height="15.0" fill="rgb(227,150,5)" rx="2" ry="2" />
<text  x="221.33" y="1407.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt;::unique_ptr (8,939,927 samples, 0.02%)</title><rect x="835.2" y="1797" width="0.2" height="15.0" fill="rgb(248,23,48)" rx="2" ry="2" />
<text  x="838.21" y="1807.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::BufferedSerializer&gt; (18,667,387 samples, 0.04%)</title><rect x="313.4" y="1605" width="0.4" height="15.0" fill="rgb(233,210,10)" rx="2" ry="2" />
<text  x="316.36" y="1615.5" ></text>
</g>
<g >
<title>duckdb::TreeChildrenIterator::Iterate&lt;duckdb::LogicalOperator&gt; (35,237,715 samples, 0.07%)</title><rect x="548.4" y="1621" width="0.8" height="15.0" fill="rgb(242,122,6)" rx="2" ry="2" />
<text  x="551.40" y="1631.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PendingQueryResult, std::default_delete&lt;duckdb::PendingQueryResult&gt; &gt;::~unique_ptr (26,260,742 samples, 0.05%)</title><rect x="1106.8" y="1957" width="0.6" height="15.0" fill="rgb(239,169,46)" rx="2" ry="2" />
<text  x="1109.79" y="1967.5" ></text>
</g>
<g >
<title>duckdb::Binder::HasMatchingBinding (37,888,601 samples, 0.07%)</title><rect x="959.8" y="1669" width="0.9" height="15.0" fill="rgb(219,30,54)" rx="2" ry="2" />
<text  x="962.79" y="1679.5" ></text>
</g>
<g >
<title>duckdb::ConstantExpressionMatcher::~ConstantExpressionMatcher (4,541,661 samples, 0.01%)</title><rect x="830.0" y="1445" width="0.1" height="15.0" fill="rgb(228,124,36)" rx="2" ry="2" />
<text  x="832.99" y="1455.5" ></text>
</g>
<g >
<title>duckdb::BaseProfiler&lt;std::chrono::_V2::system_clock&gt;::Elapsed (6,666,918 samples, 0.01%)</title><rect x="1024.0" y="1845" width="0.1" height="15.0" fill="rgb(246,51,35)" rx="2" ry="2" />
<text  x="1026.98" y="1855.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;bool, true&gt;::vector (20,023,705 samples, 0.04%)</title><rect x="1056.5" y="1813" width="0.5" height="15.0" fill="rgb(242,1,31)" rx="2" ry="2" />
<text  x="1059.53" y="1823.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (147,317,760 samples, 0.29%)</title><rect x="312.9" y="1701" width="3.3" height="15.0" fill="rgb(254,162,47)" rx="2" ry="2" />
<text  x="315.86" y="1711.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::JoinRelationSet, std::default_delete&lt;duckdb::JoinRelationSet&gt;, true&gt;::unique_ptr (4,616,807 samples, 0.01%)</title><rect x="752.2" y="1765" width="0.1" height="15.0" fill="rgb(245,77,7)" rx="2" ry="2" />
<text  x="755.20" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator= (8,225,424 samples, 0.02%)</title><rect x="301.7" y="1669" width="0.2" height="15.0" fill="rgb(243,99,23)" rx="2" ry="2" />
<text  x="304.71" y="1679.5" ></text>
</g>
<g >
<title>duckdb::LogicalType::Serialize (64,804,368 samples, 0.13%)</title><rect x="313.1" y="1637" width="1.5" height="15.0" fill="rgb(206,222,5)" rx="2" ry="2" />
<text  x="316.12" y="1647.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::~vector (10,493,887 samples, 0.02%)</title><rect x="631.1" y="1669" width="0.3" height="15.0" fill="rgb(253,147,48)" rx="2" ry="2" />
<text  x="634.14" y="1679.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt; &gt;::find (17,554,903 samples, 0.03%)</title><rect x="959.8" y="1637" width="0.4" height="15.0" fill="rgb(243,127,52)" rx="2" ry="2" />
<text  x="962.84" y="1647.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::RowGroupSegmentTree, std::allocator&lt;duckdb::RowGroupSegmentTree&gt;,  (15,517,805 samples, 0.03%)</title><rect x="429.3" y="1381" width="0.4" height="15.0" fill="rgb(208,187,12)" rx="2" ry="2" />
<text  x="432.34" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::ExpressionEquality&lt;duckdb::ParsedExpression&gt;, duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (58,172,572 samples, 0.11%)</title><rect x="967.3" y="1733" width="1.4" height="15.0" fill="rgb(215,27,27)" rx="2" ry="2" />
<text  x="970.33" y="1743.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (7,109,792 samples, 0.01%)</title><rect x="484.9" y="1733" width="0.1" height="15.0" fill="rgb(213,39,48)" rx="2" ry="2" />
<text  x="487.86" y="1743.5" ></text>
</g>
<g >
<title>std::locale::operator= (7,556,168 samples, 0.01%)</title><rect x="24.2" y="2005" width="0.2" height="15.0" fill="rgb(253,216,26)" rx="2" ry="2" />
<text  x="27.23" y="2015.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Expression const*, std::allocator&lt;duckdb::Expression const*&gt; &gt;::_M_realloc_insert&lt;duckdb::Expression const*&gt; (17,028,676 samples, 0.03%)</title><rect x="904.9" y="1701" width="0.4" height="15.0" fill="rgb(251,92,26)" rx="2" ry="2" />
<text  x="907.89" y="1711.5" ></text>
</g>
<g >
<title>__cxxabiv1::__vmi_class_type_info::__do_dyncast (8,161,968 samples, 0.02%)</title><rect x="183.9" y="2037" width="0.2" height="15.0" fill="rgb(227,111,49)" rx="2" ry="2" />
<text  x="186.88" y="2047.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::BaseStatistics, std::default_delete&lt;duckdb::BaseStatistics&gt; &gt;::~unique_ptr (10,525,439 samples, 0.02%)</title><rect x="642.8" y="1749" width="0.2" height="15.0" fill="rgb(223,85,37)" rx="2" ry="2" />
<text  x="645.76" y="1759.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorChildBuffer&gt; &gt;::construct&lt;duckdb::VectorChildBuffer, duckdb::Vector&gt; (22,643,579 samples, 0.04%)</title><rect x="294.7" y="1557" width="0.5" height="15.0" fill="rgb(254,194,2)" rx="2" ry="2" />
<text  x="297.73" y="1567.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_assert_invariants (13,814,631 samples, 0.03%)</title><rect x="438.3" y="1429" width="0.4" height="15.0" fill="rgb(245,142,50)" rx="2" ry="2" />
<text  x="441.34" y="1439.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::RenderTree, std::default_delete&lt;duckdb::RenderTree&gt;, true&gt;::operator* (5,964,704 samples, 0.01%)</title><rect x="553.6" y="1797" width="0.2" height="15.0" fill="rgb(243,195,38)" rx="2" ry="2" />
<text  x="556.64" y="1807.5" ></text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::operator= (16,989,275 samples, 0.03%)</title><rect x="101.0" y="1621" width="0.4" height="15.0" fill="rgb(249,1,43)" rx="2" ry="2" />
<text  x="103.98" y="1631.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::extent_recycle (80,014,975 samples, 0.16%)</title><rect x="875.9" y="1253" width="1.8" height="15.0" fill="rgb(244,127,21)" rx="2" ry="2" />
<text  x="878.89" y="1263.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (56,109,684 samples, 0.11%)</title><rect x="379.9" y="1797" width="1.3" height="15.0" fill="rgb(224,227,10)" rx="2" ry="2" />
<text  x="382.94" y="1807.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt; &gt;::~unique_ptr (5,991,158 samples, 0.01%)</title><rect x="641.1" y="1653" width="0.1" height="15.0" fill="rgb(228,99,41)" rx="2" ry="2" />
<text  x="644.07" y="1663.5" ></text>
</g>
<g >
<title>duckdb::ColumnBindingResolver::VerifyInternal (133,780,353 samples, 0.26%)</title><rect x="775.5" y="1813" width="3.1" height="15.0" fill="rgb(207,179,44)" rx="2" ry="2" />
<text  x="778.55" y="1823.5" ></text>
</g>
<g >
<title>std::function&lt;void  (5,895,417 samples, 0.01%)</title><rect x="549.7" y="1621" width="0.1" height="15.0" fill="rgb(228,4,6)" rx="2" ry="2" />
<text  x="552.67" y="1631.5" ></text>
</g>
<g >
<title>duckdb::EntryIndex::GetEntry (13,705,788 samples, 0.03%)</title><rect x="993.9" y="1701" width="0.3" height="15.0" fill="rgb(232,133,49)" rx="2" ry="2" />
<text  x="996.90" y="1711.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::Binder, std::allocator&lt;duckdb::Binder&gt;,  (71,471,583 samples, 0.14%)</title><rect x="1030.4" y="1813" width="1.7" height="15.0" fill="rgb(215,143,8)" rx="2" ry="2" />
<text  x="1033.43" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (31,927,738 samples, 0.06%)</title><rect x="1016.7" y="1621" width="0.7" height="15.0" fill="rgb(210,59,7)" rx="2" ry="2" />
<text  x="1019.65" y="1631.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::PhysicalExpressionScan, std::default_delete&lt;duckdb::PhysicalExpressionScan&gt;, true&gt;::operator (11,328,555 samples, 0.02%)</title><rect x="914.8" y="1781" width="0.3" height="15.0" fill="rgb(206,58,50)" rx="2" ry="2" />
<text  x="917.81" y="1791.5" ></text>
</g>
<g >
<title>duckdb::ChunkManagementState::~ChunkManagementState (54,595,442 samples, 0.11%)</title><rect x="861.4" y="1765" width="1.3" height="15.0" fill="rgb(217,27,12)" rx="2" ry="2" />
<text  x="864.40" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::push_back (14,716,934 samples, 0.03%)</title><rect x="423.4" y="1589" width="0.3" height="15.0" fill="rgb(219,200,24)" rx="2" ry="2" />
<text  x="426.38" y="1599.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (23,637,570 samples, 0.05%)</title><rect x="103.0" y="1509" width="0.6" height="15.0" fill="rgb(226,84,41)" rx="2" ry="2" />
<text  x="106.04" y="1519.5" ></text>
</g>
<g >
<title>do_page_fault (256,208,384 samples, 0.50%)</title><rect x="1135.2" y="2005" width="5.9" height="15.0" fill="rgb(252,143,45)" rx="2" ry="2" />
<text  x="1138.23" y="2015.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocator (25,354,918 samples, 0.05%)</title><rect x="376.8" y="1829" width="0.5" height="15.0" fill="rgb(252,191,23)" rx="2" ry="2" />
<text  x="379.76" y="1839.5" ></text>
</g>
<g >
<title>std::function&lt;void  (148,906,454 samples, 0.29%)</title><rect x="312.8" y="1717" width="3.4" height="15.0" fill="rgb(209,190,29)" rx="2" ry="2" />
<text  x="315.82" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::empty (19,859,845 samples, 0.04%)</title><rect x="720.3" y="1845" width="0.5" height="15.0" fill="rgb(218,82,10)" rx="2" ry="2" />
<text  x="723.35" y="1855.5" ></text>
</g>
<g >
<title>duckdb::TableIndexList::Empty (5,709,906 samples, 0.01%)</title><rect x="459.9" y="1749" width="0.1" height="15.0" fill="rgb(223,198,35)" rx="2" ry="2" />
<text  x="462.91" y="1759.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::CompressionAppendState, std::default_delete&lt;duckdb::CompressionAppendState&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::CompressionAppendState&gt;, void&gt; (4,830,195 samples, 0.01%)</title><rect x="449.4" y="1653" width="0.2" height="15.0" fill="rgb(207,43,14)" rx="2" ry="2" />
<text  x="452.45" y="1663.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorExpressions (14,700,155 samples, 0.03%)</title><rect x="724.4" y="1717" width="0.4" height="15.0" fill="rgb(214,63,40)" rx="2" ry="2" />
<text  x="727.43" y="1727.5" ></text>
</g>
<g >
<title>duckdb::DuckDBAssertInternal (9,827,103 samples, 0.02%)</title><rect x="683.3" y="1813" width="0.2" height="15.0" fill="rgb(208,122,18)" rx="2" ry="2" />
<text  x="686.32" y="1823.5" ></text>
</g>
<g >
<title>duckdb::FunctionSet&lt;duckdb::ScalarFunction&gt;::FunctionSet (7,974,797 samples, 0.02%)</title><rect x="1114.8" y="1813" width="0.2" height="15.0" fill="rgb(230,20,7)" rx="2" ry="2" />
<text  x="1117.77" y="1823.5" ></text>
</g>
<g >
<title>duckdb::DuckTransaction::Cleanup (63,474,895 samples, 0.12%)</title><rect x="320.8" y="1813" width="1.5" height="15.0" fill="rgb(209,169,8)" rx="2" ry="2" />
<text  x="323.84" y="1823.5" ></text>
</g>
<g >
<title>lru_add_drain_cpu (22,045,551 samples, 0.04%)</title><rect x="1172.3" y="1861" width="0.5" height="15.0" fill="rgb(244,25,54)" rx="2" ry="2" />
<text  x="1175.31" y="1871.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Verify (7,671,240 samples, 0.01%)</title><rect x="465.8" y="1813" width="0.2" height="15.0" fill="rgb(229,112,2)" rx="2" ry="2" />
<text  x="468.83" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt;, false&gt;::operator= (8,820,707 samples, 0.02%)</title><rect x="867.5" y="1685" width="0.2" height="15.0" fill="rgb(207,104,52)" rx="2" ry="2" />
<text  x="870.54" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; &gt;::push_back (6,146,923 samples, 0.01%)</title><rect x="991.0" y="1621" width="0.1" height="15.0" fill="rgb(236,131,50)" rx="2" ry="2" />
<text  x="993.99" y="1631.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpressionChildren (6,949,835 samples, 0.01%)</title><rect x="729.5" y="1589" width="0.1" height="15.0" fill="rgb(233,114,7)" rx="2" ry="2" />
<text  x="732.46" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::FunctionMatcher, std::default_delete&lt;duckdb::FunctionMatcher&gt; &gt;::operator= (6,171,318 samples, 0.01%)</title><rect x="797.5" y="1829" width="0.1" height="15.0" fill="rgb(245,71,46)" rx="2" ry="2" />
<text  x="800.50" y="1839.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Executor, std::default_delete&lt;duckdb::Executor&gt; &gt;::operator= (8,140,614 samples, 0.02%)</title><rect x="1102.5" y="1877" width="0.2" height="15.0" fill="rgb(230,72,15)" rx="2" ry="2" />
<text  x="1105.46" y="1887.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TableRef, std::default_delete&lt;duckdb::TableRef&gt;, true&gt;::unique_ptr (5,235,309 samples, 0.01%)</title><rect x="537.5" y="1797" width="0.1" height="15.0" fill="rgb(208,180,20)" rx="2" ry="2" />
<text  x="540.49" y="1807.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::je_malloc (55,226,204 samples, 0.11%)</title><rect x="486.9" y="1525" width="1.3" height="15.0" fill="rgb(216,96,34)" rx="2" ry="2" />
<text  x="489.92" y="1535.5" ></text>
</g>
<g >
<title>duckdb::Binder::Bind (4,168,100,343 samples, 8.13%)</title><rect x="925.6" y="1845" width="95.9" height="15.0" fill="rgb(238,160,17)" rx="2" ry="2" />
<text  x="928.58" y="1855.5" >duckdb::Bin..</text>
</g>
<g >
<title>duckdb::ColumnDataCollectionSegment::ReadVector (126,681,688 samples, 0.25%)</title><rect x="472.5" y="1765" width="2.9" height="15.0" fill="rgb(233,172,38)" rx="2" ry="2" />
<text  x="475.49" y="1775.5" ></text>
</g>
<g >
<title>duckdb::QueryProfiler::TreeNode::~TreeNode (12,691,553 samples, 0.02%)</title><rect x="1089.4" y="1781" width="0.3" height="15.0" fill="rgb(236,158,19)" rx="2" ry="2" />
<text  x="1092.40" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_S_relocate (16,669,453 samples, 0.03%)</title><rect x="638.3" y="1701" width="0.4" height="15.0" fill="rgb(253,186,16)" rx="2" ry="2" />
<text  x="641.29" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringEquality, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6,982,455 samples, 0.01%)</title><rect x="1043.9" y="1781" width="0.1" height="15.0" fill="rgb(219,18,39)" rx="2" ry="2" />
<text  x="1046.85" y="1791.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (274,386,534 samples, 0.53%)</title><rect x="237.9" y="1077" width="6.3" height="15.0" fill="rgb(207,2,46)" rx="2" ry="2" />
<text  x="240.90" y="1087.5" ></text>
</g>
<g >
<title>duckdb::utf8proc_get_property (5,108,588 samples, 0.01%)</title><rect x="626.3" y="1717" width="0.1" height="15.0" fill="rgb(251,202,37)" rx="2" ry="2" />
<text  x="629.28" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::DuckTransaction, std::default_delete&lt;duckdb::DuckTransaction&gt;, true&gt; &gt; (14,089,399 samples, 0.03%)</title><rect x="328.1" y="1797" width="0.3" height="15.0" fill="rgb(215,45,54)" rx="2" ry="2" />
<text  x="331.09" y="1807.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, true&gt;::operator= (6,394,231 samples, 0.01%)</title><rect x="1068.6" y="1717" width="0.1" height="15.0" fill="rgb(210,42,49)" rx="2" ry="2" />
<text  x="1071.55" y="1727.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt; (35,327,256 samples, 0.07%)</title><rect x="939.7" y="1717" width="0.8" height="15.0" fill="rgb(229,225,50)" rx="2" ry="2" />
<text  x="942.65" y="1727.5" ></text>
</g>
<g >
<title>__asan::QuickCheckForUnpoisonedRegion (6,115,828 samples, 0.01%)</title><rect x="24.5" y="1989" width="0.2" height="15.0" fill="rgb(245,116,46)" rx="2" ry="2" />
<text  x="27.54" y="1999.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::unique_ptr&lt;duckdb::LogicalOperator, std::default_delete&lt;duckdb::LogicalOperator&gt;, true&gt;*&gt; (34,419,631 samples, 0.07%)</title><rect x="1036.1" y="1733" width="0.7" height="15.0" fill="rgb(224,225,7)" rx="2" ry="2" />
<text  x="1039.06" y="1743.5" ></text>
</g>
<g >
<title>duckdb::CommonSubExpressionOptimizer::VisitOperator (95,219,503 samples, 0.19%)</title><rect x="728.0" y="1813" width="2.2" height="15.0" fill="rgb(214,206,12)" rx="2" ry="2" />
<text  x="731.00" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::PipelineExecutor, std::default_delete&lt;duckdb::PipelineExecutor&gt; &gt;::reset (157,427,366 samples, 0.31%)</title><rect x="497.9" y="1845" width="3.6" height="15.0" fill="rgb(241,55,3)" rx="2" ry="2" />
<text  x="500.91" y="1855.5" ></text>
</g>
<g >
<title>duckdb::BlockMetaData::~BlockMetaData (348,066,787 samples, 0.68%)</title><rect x="342.0" y="1125" width="8.0" height="15.0" fill="rgb(218,136,0)" rx="2" ry="2" />
<text  x="345.02" y="1135.5" ></text>
</g>
<g >
<title>duckdb::ArenaChunk::ArenaChunk (73,028,486 samples, 0.14%)</title><rect x="192.6" y="1717" width="1.7" height="15.0" fill="rgb(248,56,54)" rx="2" ry="2" />
<text  x="195.61" y="1727.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector&gt; (62,565,454 samples, 0.12%)</title><rect x="297.3" y="1621" width="1.5" height="15.0" fill="rgb(224,18,5)" rx="2" ry="2" />
<text  x="300.32" y="1631.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::LocalSourceState&gt; (8,171,513 samples, 0.02%)</title><rect x="491.9" y="1813" width="0.2" height="15.0" fill="rgb(219,185,15)" rx="2" ry="2" />
<text  x="494.86" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ArenaChunk, std::default_delete&lt;duckdb::ArenaChunk&gt; &gt;::get (4,373,379 samples, 0.01%)</title><rect x="194.6" y="1717" width="0.1" height="15.0" fill="rgb(232,185,16)" rx="2" ry="2" />
<text  x="197.64" y="1727.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::BoundConstantExpression&gt; &gt; (4,400,381 samples, 0.01%)</title><rect x="983.4" y="1781" width="0.1" height="15.0" fill="rgb(221,213,54)" rx="2" ry="2" />
<text  x="986.37" y="1791.5" ></text>
</g>
<g >
<title>duckdb::SelectionVector::~SelectionVector (8,011,328 samples, 0.02%)</title><rect x="296.8" y="1669" width="0.2" height="15.0" fill="rgb(240,146,38)" rx="2" ry="2" />
<text  x="299.84" y="1679.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long, unsigned long&gt;, unsigned long&amp;, unsigned long&amp;&gt; (4,558,234 samples, 0.01%)</title><rect x="637.6" y="1717" width="0.1" height="15.0" fill="rgb(209,79,1)" rx="2" ry="2" />
<text  x="640.61" y="1727.5" ></text>
</g>
<g >
<title>duckdb::Allocator::~Allocator (6,538,466 samples, 0.01%)</title><rect x="1122.2" y="1669" width="0.2" height="15.0" fill="rgb(219,88,40)" rx="2" ry="2" />
<text  x="1125.21" y="1679.5" ></text>
</g>
<g >
<title>duckdb::PhysicalOperator::~PhysicalOperator (23,450,748 samples, 0.05%)</title><rect x="915.2" y="1701" width="0.6" height="15.0" fill="rgb(242,29,17)" rx="2" ry="2" />
<text  x="918.22" y="1711.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (40,858,724 samples, 0.08%)</title><rect x="289.4" y="1477" width="0.9" height="15.0" fill="rgb(226,149,38)" rx="2" ry="2" />
<text  x="292.36" y="1487.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (8,523,641 samples, 0.02%)</title><rect x="1106.9" y="1845" width="0.2" height="15.0" fill="rgb(221,201,46)" rx="2" ry="2" />
<text  x="1109.92" y="1855.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt; &gt;::construct&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt;, unsigned long&amp;&gt; (14,615,356 samples, 0.03%)</title><rect x="473.9" y="1573" width="0.3" height="15.0" fill="rgb(232,58,1)" rx="2" ry="2" />
<text  x="476.87" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::StorageLockKey, std::default_delete&lt;duckdb::StorageLockKey&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::StorageLockKey, std::default_delete&lt;duckdb::StorageLockKey&gt;, true&gt; &gt; &gt;::~vector (5,873,807 samples, 0.01%)</title><rect x="288.8" y="1685" width="0.1" height="15.0" fill="rgb(222,95,19)" rx="2" ry="2" />
<text  x="291.76" y="1695.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::LocalTableStorage, std::allocator&lt;duckdb::LocalTableStorage&gt;, duckdb::DataTable&amp;&gt; (25,727,938 samples, 0.05%)</title><rect x="102.1" y="1685" width="0.6" height="15.0" fill="rgb(237,23,28)" rx="2" ry="2" />
<text  x="105.07" y="1695.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::SelectionData, std::allocator&lt;duckdb::SelectionData&gt;,  (9,044,685 samples, 0.02%)</title><rect x="266.8" y="1589" width="0.2" height="15.0" fill="rgb(210,229,2)" rx="2" ry="2" />
<text  x="269.83" y="1599.5" ></text>
</g>
<g >
<title>duckdb::MetaPipeline::GetPipelines (79,662,408 samples, 0.16%)</title><rect x="1083.1" y="1861" width="1.9" height="15.0" fill="rgb(250,174,35)" rx="2" ry="2" />
<text  x="1086.12" y="1871.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::PhysicalOperator, std::default_delete&lt;duckdb::PhysicalOperator&gt;, true&gt; &gt; (24,252,320 samples, 0.05%)</title><rect x="917.6" y="1765" width="0.5" height="15.0" fill="rgb(242,187,41)" rx="2" ry="2" />
<text  x="920.55" y="1775.5" ></text>
</g>
<g >
<title>duckdb::Executor::ScheduleEventsInternal (713,323,172 samples, 1.39%)</title><rect x="1045.8" y="1845" width="16.4" height="15.0" fill="rgb(239,61,14)" rx="2" ry="2" />
<text  x="1048.78" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::BlockMetaData, std::allocator&lt;duckdb::BlockMetaData&gt; &gt;::_M_check_len (6,267,974 samples, 0.01%)</title><rect x="882.3" y="1621" width="0.1" height="15.0" fill="rgb(218,149,53)" rx="2" ry="2" />
<text  x="885.29" y="1631.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;::shared_ptr&lt;std::allocator&lt;duckdb::TemplatedValidityData&lt;unsigned long&gt; &gt;, unsigned long&amp;&gt; (32,776,980 samples, 0.06%)</title><rect x="362.9" y="1717" width="0.8" height="15.0" fill="rgb(215,209,34)" rx="2" ry="2" />
<text  x="365.92" y="1727.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (19,973,043 samples, 0.04%)</title><rect x="93.9" y="1685" width="0.5" height="15.0" fill="rgb(208,107,36)" rx="2" ry="2" />
<text  x="96.94" y="1695.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::PhysicalOperator&gt;::operator (4,625,487 samples, 0.01%)</title><rect x="915.5" y="1557" width="0.1" height="15.0" fill="rgb(205,47,23)" rx="2" ry="2" />
<text  x="918.54" y="1567.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::LikeOptimizationRule, duckdb::ExpressionRewriter&amp;&gt; (123,225,454 samples, 0.24%)</title><rect x="811.1" y="1877" width="2.8" height="15.0" fill="rgb(240,1,40)" rx="2" ry="2" />
<text  x="814.11" y="1887.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="293" width="0.1" height="15.0" fill="rgb(218,197,30)" rx="2" ry="2" />
<text  x="14.25" y="303.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::~unordered_set (59,265,785 samples, 0.12%)</title><rect x="696.2" y="1813" width="1.4" height="15.0" fill="rgb(219,29,16)" rx="2" ry="2" />
<text  x="699.22" y="1823.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Allocate (271,404,830 samples, 0.53%)</title><rect x="872.9" y="1541" width="6.2" height="15.0" fill="rgb(250,108,14)" rx="2" ry="2" />
<text  x="875.85" y="1551.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ConstantExpressionMatcher, std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ConstantExpressionMatcher&gt;, void&gt; (4,586,508 samples, 0.01%)</title><rect x="796.6" y="1813" width="0.1" height="15.0" fill="rgb(244,97,27)" rx="2" ry="2" />
<text  x="799.55" y="1823.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueueProducerToken, std::default_delete&lt;duckdb::QueueProducerToken&gt;, true&gt;::unique_ptr (15,307,163 samples, 0.03%)</title><rect x="1090.6" y="1829" width="0.4" height="15.0" fill="rgb(209,38,19)" rx="2" ry="2" />
<text  x="1093.62" y="1839.5" ></text>
</g>
<g >
<title>duckdb_moodycamel::ConcurrentQueue&lt;std::shared_ptr&lt;duckdb::Task&gt;, duckdb_moodycamel::ConcurrentQueueDefaultTraits&gt;::recycle_or_create_producer (4,435,652 samples, 0.01%)</title><rect x="1091.1" y="1781" width="0.1" height="15.0" fill="rgb(243,7,12)" rx="2" ry="2" />
<text  x="1094.05" y="1791.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::SwizzleMetaData, true&gt;::vector (7,624,630 samples, 0.01%)</title><rect x="383.3" y="1781" width="0.2" height="15.0" fill="rgb(229,184,23)" rx="2" ry="2" />
<text  x="386.34" y="1791.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::Rule, std::default_delete&lt;duckdb::Rule&gt; &gt;::__uniq_ptr_impl&lt;std::default_delete&lt;duckdb::Rule&gt; &gt; (11,697,391 samples, 0.02%)</title><rect x="826.1" y="1781" width="0.3" height="15.0" fill="rgb(249,52,35)" rx="2" ry="2" />
<text  x="829.11" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionRootInfo, std::default_delete&lt;duckdb::ExpressionRootInfo&gt;, true&gt; &gt; &gt;::_M_check_len (5,124,168 samples, 0.01%)</title><rect x="479.3" y="1717" width="0.1" height="15.0" fill="rgb(249,145,8)" rx="2" ry="2" />
<text  x="482.28" y="1727.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::PropagateStatistics (5,186,796 samples, 0.01%)</title><rect x="766.8" y="1669" width="0.1" height="15.0" fill="rgb(247,70,0)" rx="2" ry="2" />
<text  x="769.80" y="1679.5" ></text>
</g>
<g >
<title>duckdb::DuckCatalog::~DuckCatalog (15,089,061 samples, 0.03%)</title><rect x="1117.5" y="1653" width="0.3" height="15.0" fill="rgb(253,71,12)" rx="2" ry="2" />
<text  x="1120.47" y="1663.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::clear (4,498,107 samples, 0.01%)</title><rect x="1121.5" y="1845" width="0.1" height="15.0" fill="rgb(238,139,53)" rx="2" ry="2" />
<text  x="1124.53" y="1855.5" ></text>
</g>
<g >
<title>std::make_shared&lt;duckdb::ColumnDataAllocator, duckdb::Allocator&amp;&gt; (19,184,218 samples, 0.04%)</title><rect x="386.6" y="1893" width="0.4" height="15.0" fill="rgb(219,190,44)" rx="2" ry="2" />
<text  x="389.61" y="1903.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::emap_try_acquire_edata_neighbor (9,352,517 samples, 0.02%)</title><rect x="347.7" y="629" width="0.3" height="15.0" fill="rgb(246,16,0)" rx="2" ry="2" />
<text  x="350.74" y="639.5" ></text>
</g>
<g >
<title>__asan::Allocator::Deallocate (119,893,016 samples, 0.23%)</title><rect x="169.3" y="2037" width="2.8" height="15.0" fill="rgb(237,18,20)" rx="2" ry="2" />
<text  x="172.30" y="2047.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::QueueProducerToken, std::default_delete&lt;duckdb::QueueProducerToken&gt;, true&gt;::~unique_ptr (4,944,534 samples, 0.01%)</title><rect x="336.5" y="1685" width="0.1" height="15.0" fill="rgb(213,16,45)" rx="2" ry="2" />
<text  x="339.52" y="1695.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned long const*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, unsigned long*&gt; (5,302,993 samples, 0.01%)</title><rect x="302.1" y="1637" width="0.1" height="15.0" fill="rgb(208,80,14)" rx="2" ry="2" />
<text  x="305.07" y="1647.5" ></text>
</g>
<g >
<title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (19,468,463 samples, 0.04%)</title><rect x="716.6" y="1845" width="0.5" height="15.0" fill="rgb(236,90,8)" rx="2" ry="2" />
<text  x="719.65" y="1855.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::Expression&gt;::operator (6,746,690 samples, 0.01%)</title><rect x="350.6" y="1477" width="0.1" height="15.0" fill="rgb(248,145,43)" rx="2" ry="2" />
<text  x="353.58" y="1487.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::vector (9,287,116 samples, 0.02%)</title><rect x="944.0" y="1669" width="0.2" height="15.0" fill="rgb(206,209,26)" rx="2" ry="2" />
<text  x="946.96" y="1679.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::pai_alloc (6,930,954 samples, 0.01%)</title><rect x="103.2" y="1285" width="0.2" height="15.0" fill="rgb(213,65,16)" rx="2" ry="2" />
<text  x="106.22" y="1295.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::~_Hashtable (7,857,556 samples, 0.02%)</title><rect x="1029.9" y="1845" width="0.1" height="15.0" fill="rgb(219,193,16)" rx="2" ry="2" />
<text  x="1032.86" y="1855.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (7,528,616 samples, 0.01%)</title><rect x="1039.6" y="1877" width="0.2" height="15.0" fill="rgb(212,84,8)" rx="2" ry="2" />
<text  x="1042.64" y="1887.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::ColumnDataCollectionSegment, std::default_delete&lt;duckdb::ColumnDataCollectionSegment&gt;, true&gt;, true&gt;::back (4,612,953 samples, 0.01%)</title><rect x="866.2" y="1765" width="0.1" height="15.0" fill="rgb(215,228,2)" rx="2" ry="2" />
<text  x="869.20" y="1775.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::VectorMetaData&gt; &gt;::construct&lt;duckdb::VectorMetaData, duckdb::VectorMetaData const&amp;&gt; (14,623,711 samples, 0.03%)</title><rect x="884.4" y="1685" width="0.4" height="15.0" fill="rgb(249,208,40)" rx="2" ry="2" />
<text  x="887.42" y="1695.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperatorChildren (307,554,503 samples, 0.60%)</title><rect x="736.1" y="1797" width="7.1" height="15.0" fill="rgb(246,150,17)" rx="2" ry="2" />
<text  x="739.13" y="1807.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::Task,  (6,052,039 samples, 0.01%)</title><rect x="109.8" y="1781" width="0.1" height="15.0" fill="rgb(244,31,38)" rx="2" ry="2" />
<text  x="112.75" y="1791.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::~unique_ptr (7,258,009 samples, 0.01%)</title><rect x="1036.2" y="1493" width="0.2" height="15.0" fill="rgb(212,86,48)" rx="2" ry="2" />
<text  x="1039.22" y="1503.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tsd_do_data_cleanup (14,514,945 samples, 0.03%)</title><rect x="19.4" y="1957" width="0.3" height="15.0" fill="rgb(221,83,49)" rx="2" ry="2" />
<text  x="22.41" y="1967.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_S_relocate (4,731,089 samples, 0.01%)</title><rect x="789.9" y="1797" width="0.1" height="15.0" fill="rgb(221,145,31)" rx="2" ry="2" />
<text  x="792.89" y="1807.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::AllocatedData, std::allocator&lt;duckdb::AllocatedData&gt; &gt;::_M_check_len (4,423,451 samples, 0.01%)</title><rect x="382.5" y="1781" width="0.1" height="15.0" fill="rgb(249,214,2)" rx="2" ry="2" />
<text  x="385.52" y="1791.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt;, std::allocator&lt;duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt;, true&gt;, true&gt; &gt; &gt;::_M_check_len (8,432,329 samples, 0.02%)</title><rect x="940.1" y="1685" width="0.2" height="15.0" fill="rgb(212,140,12)" rx="2" ry="2" />
<text  x="943.14" y="1695.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::ColumnStatistics&gt;::shared_ptr&lt;std::allocator&lt;duckdb::ColumnStatistics&gt;, duckdb::BaseStatistics&gt; (5,544,701 samples, 0.01%)</title><rect x="102.3" y="1477" width="0.1" height="15.0" fill="rgb(218,140,27)" rx="2" ry="2" />
<text  x="105.28" y="1487.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::push_back (16,272,063 samples, 0.03%)</title><rect x="1056.1" y="1797" width="0.4" height="15.0" fill="rgb(240,59,33)" rx="2" ry="2" />
<text  x="1059.14" y="1807.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (4,672,483 samples, 0.01%)</title><rect x="673.6" y="1797" width="0.1" height="15.0" fill="rgb(253,30,42)" rx="2" ry="2" />
<text  x="676.57" y="1807.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::ColumnStatistics, std::allocator&lt;duckdb::ColumnStatistics&gt;, duckdb::BaseStatistics&gt; (5,544,701 samples, 0.01%)</title><rect x="102.3" y="1493" width="0.1" height="15.0" fill="rgb(243,199,18)" rx="2" ry="2" />
<text  x="105.28" y="1503.5" ></text>
</g>
<g >
<title>duckdb::BindContext::AddBinding (83,078,713 samples, 0.16%)</title><rect x="927.0" y="1717" width="2.0" height="15.0" fill="rgb(239,169,38)" rx="2" ry="2" />
<text  x="930.04" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::BaseStatistics [], std::default_delete&lt;duckdb::BaseStatistics&gt;, false&gt;::unique_ptr (5,279,202 samples, 0.01%)</title><rect x="454.0" y="1429" width="0.1" height="15.0" fill="rgb(213,75,23)" rx="2" ry="2" />
<text  x="456.96" y="1439.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::push_back (38,300,140 samples, 0.07%)</title><rect x="529.9" y="1733" width="0.9" height="15.0" fill="rgb(254,175,13)" rx="2" ry="2" />
<text  x="532.89" y="1743.5" ></text>
</g>
<g >
<title>duckdb::ActiveQueryContext::ActiveQueryContext (8,858,313 samples, 0.02%)</title><rect x="543.9" y="1877" width="0.2" height="15.0" fill="rgb(241,58,37)" rx="2" ry="2" />
<text  x="546.91" y="1887.5" ></text>
</g>
<g >
<title>duckdb::Binding::TryGetBindingIndex (5,630,462 samples, 0.01%)</title><rect x="953.5" y="1573" width="0.1" height="15.0" fill="rgb(248,25,2)" rx="2" ry="2" />
<text  x="956.51" y="1583.5" ></text>
</g>
<g >
<title>duckdb::JEMallocExtension::Free (55,364,133 samples, 0.11%)</title><rect x="325.3" y="1445" width="1.3" height="15.0" fill="rgb(211,165,43)" rx="2" ry="2" />
<text  x="328.32" y="1455.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TableRef, std::default_delete&lt;duckdb::TableRef&gt;, true&gt;::operator= (17,639,432 samples, 0.03%)</title><rect x="535.3" y="1765" width="0.4" height="15.0" fill="rgb(221,87,14)" rx="2" ry="2" />
<text  x="538.28" y="1775.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitExpression (40,472,268 samples, 0.08%)</title><rect x="725.2" y="1669" width="0.9" height="15.0" fill="rgb(217,66,23)" rx="2" ry="2" />
<text  x="728.18" y="1679.5" ></text>
</g>
<g >
<title>duckdb::BoundCastExpression::AddCastToType (50,193,682 samples, 0.10%)</title><rect x="932.2" y="1717" width="1.2" height="15.0" fill="rgb(217,28,53)" rx="2" ry="2" />
<text  x="935.20" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_metadata_read (4,790,841 samples, 0.01%)</title><rect x="367.7" y="1493" width="0.1" height="15.0" fill="rgb(232,88,29)" rx="2" ry="2" />
<text  x="370.65" y="1503.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (14,108,079 samples, 0.03%)</title><rect x="1032.6" y="1829" width="0.3" height="15.0" fill="rgb(209,125,18)" rx="2" ry="2" />
<text  x="1035.60" y="1839.5" ></text>
</g>
<g >
<title>duckdb::FieldWriter::WriteSerializable&lt;duckdb::LogicalType&gt; (70,339,877 samples, 0.14%)</title><rect x="590.6" y="1829" width="1.6" height="15.0" fill="rgb(234,48,5)" rx="2" ry="2" />
<text  x="593.58" y="1839.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (7,370,743 samples, 0.01%)</title><rect x="516.6" y="1861" width="0.2" height="15.0" fill="rgb(210,18,50)" rx="2" ry="2" />
<text  x="519.59" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt;, std::__detail::_Select1st, duckdb::CaseInsensitiveStringHashFunction, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (5,695,546 samples, 0.01%)</title><rect x="960.1" y="1605" width="0.1" height="15.0" fill="rgb(226,62,6)" rx="2" ry="2" />
<text  x="963.11" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ColumnAppendState, std::allocator&lt;duckdb::ColumnAppendState&gt; &gt;::push_back (23,978,012 samples, 0.05%)</title><rect x="197.8" y="1701" width="0.6" height="15.0" fill="rgb(208,217,18)" rx="2" ry="2" />
<text  x="200.82" y="1711.5" ></text>
</g>
<g >
<title>std::_Function_handler&lt;void  (7,762,951 samples, 0.02%)</title><rect x="735.2" y="1701" width="0.2" height="15.0" fill="rgb(246,117,9)" rx="2" ry="2" />
<text  x="738.17" y="1711.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::HTTPState, std::allocator&lt;duckdb::HTTPState&gt;,  (4,802,694 samples, 0.01%)</title><rect x="516.6" y="1845" width="0.1" height="15.0" fill="rgb(218,214,21)" rx="2" ry="2" />
<text  x="519.62" y="1855.5" ></text>
</g>
<g >
<title>duckdb::Transformer::TransformValue (58,235,093 samples, 0.11%)</title><rect x="528.0" y="1701" width="1.4" height="15.0" fill="rgb(248,140,6)" rx="2" ry="2" />
<text  x="531.04" y="1711.5" ></text>
</g>
<g >
<title>duckdb::TableStatistics::InitializeEmpty (177,250,242 samples, 0.35%)</title><rect x="423.9" y="1589" width="4.0" height="15.0" fill="rgb(223,169,49)" rx="2" ry="2" />
<text  x="426.87" y="1599.5" ></text>
</g>
<g >
<title>duckdb::LogicalOperatorVisitor::VisitOperator (27,904,260 samples, 0.05%)</title><rect x="848.8" y="1813" width="0.7" height="15.0" fill="rgb(223,34,19)" rx="2" ry="2" />
<text  x="851.84" y="1823.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;duckdb::ColumnDataAllocator, std::allocator&lt;duckdb::ColumnDataAllocator&gt;, duckdb::Allocator&amp;&gt; (17,768,521 samples, 0.03%)</title><rect x="386.6" y="1877" width="0.4" height="15.0" fill="rgb(237,60,27)" rx="2" ry="2" />
<text  x="389.64" y="1887.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt;::allocate (6,166,714 samples, 0.01%)</title><rect x="35.7" y="2021" width="0.2" height="15.0" fill="rgb(216,64,0)" rx="2" ry="2" />
<text  x="38.74" y="2031.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (7,410,280 samples, 0.01%)</title><rect x="947.9" y="1701" width="0.1" height="15.0" fill="rgb(236,1,24)" rx="2" ry="2" />
<text  x="950.87" y="1711.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, std::pair&lt;unsigned long const, duckdb::EntryValue&gt;, std::allocator&lt;std::pair&lt;unsigned long const, duckdb::EntryValue&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1509" width="1.9" height="15.0" fill="rgb(233,207,49)" rx="2" ry="2" />
<text  x="1120.81" y="1519.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::VectorBuffer&gt;::~shared_ptr (5,646,698 samples, 0.01%)</title><rect x="106.9" y="1573" width="0.1" height="15.0" fill="rgb(231,65,45)" rx="2" ry="2" />
<text  x="109.87" y="1583.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::PipelineCompleteEvent, std::allocator&lt;duckdb::PipelineCompleteEvent&gt;,  (10,871,487 samples, 0.02%)</title><rect x="355.2" y="1701" width="0.2" height="15.0" fill="rgb(232,41,34)" rx="2" ry="2" />
<text  x="358.17" y="1711.5" ></text>
</g>
<g >
<title>duckdb::MaterializedQueryResult::MaterializedQueryResult (53,564,527 samples, 0.10%)</title><rect x="387.6" y="1909" width="1.3" height="15.0" fill="rgb(226,109,37)" rx="2" ry="2" />
<text  x="390.62" y="1919.5" ></text>
</g>
<g >
<title>duckdb::DataChunk::Reset (49,778,133 samples, 0.10%)</title><rect x="291.9" y="1717" width="1.2" height="15.0" fill="rgb(219,6,6)" rx="2" ry="2" />
<text  x="294.92" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::rtree_metadata_read (4,827,982 samples, 0.01%)</title><rect x="438.2" y="1413" width="0.1" height="15.0" fill="rgb(254,85,6)" rx="2" ry="2" />
<text  x="441.19" y="1423.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::QueueProducerToken, std::default_delete&lt;duckdb::QueueProducerToken&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::QueueProducerToken&gt;, void&gt; (5,203,305 samples, 0.01%)</title><rect x="1091.2" y="1813" width="0.1" height="15.0" fill="rgb(215,45,28)" rx="2" ry="2" />
<text  x="1094.22" y="1823.5" ></text>
</g>
<g >
<title>duckdb::ColumnDataAppendState::~ColumnDataAppendState (58,152,120 samples, 0.11%)</title><rect x="861.4" y="1781" width="1.3" height="15.0" fill="rgb(251,97,44)" rx="2" ry="2" />
<text  x="864.40" y="1791.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::TableStatisticsLock, std::default_delete&lt;duckdb::TableStatisticsLock&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::TableStatisticsLock&gt;, void&gt; (9,306,826 samples, 0.02%)</title><rect x="463.3" y="1717" width="0.2" height="15.0" fill="rgb(215,58,11)" rx="2" ry="2" />
<text  x="466.25" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::imalloc_fastpath (64,799,383 samples, 0.13%)</title><rect x="217.7" y="1461" width="1.5" height="15.0" fill="rgb(225,127,7)" rx="2" ry="2" />
<text  x="220.68" y="1471.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::Vector, std::allocator&lt;duckdb::Vector&gt; &gt;::~vector (7,242,694 samples, 0.01%)</title><rect x="108.5" y="1733" width="0.2" height="15.0" fill="rgb(238,117,16)" rx="2" ry="2" />
<text  x="111.52" y="1743.5" ></text>
</g>
<g >
<title>duckdb::TemplatedValidityMask&lt;unsigned long&gt;::GetValidityEntry (15,352,100 samples, 0.03%)</title><rect x="285.6" y="1525" width="0.3" height="15.0" fill="rgb(220,21,47)" rx="2" ry="2" />
<text  x="288.59" y="1535.5" ></text>
</g>
<g >
<title>duckdb::BasePipelineEvent::~BasePipelineEvent (19,076,455 samples, 0.04%)</title><rect x="356.8" y="1637" width="0.4" height="15.0" fill="rgb(205,17,9)" rx="2" ry="2" />
<text  x="359.77" y="1647.5" ></text>
</g>
<g >
<title>duckdb::TableScanState::Initialize (8,225,424 samples, 0.02%)</title><rect x="301.7" y="1701" width="0.2" height="15.0" fill="rgb(212,50,44)" rx="2" ry="2" />
<text  x="304.71" y="1711.5" ></text>
</g>
<g >
<title>duckdb::StatisticsPropagator::StatisticsPropagator (4,560,069 samples, 0.01%)</title><rect x="768.1" y="1813" width="0.1" height="15.0" fill="rgb(212,28,4)" rx="2" ry="2" />
<text  x="771.08" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::MappingValue, std::default_delete&lt;duckdb::MappingValue&gt;, true&gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (84,075,778 samples, 0.16%)</title><rect x="1117.8" y="1685" width="1.9" height="15.0" fill="rgb(245,83,26)" rx="2" ry="2" />
<text  x="1120.81" y="1695.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::ChunkMetaData, std::allocator&lt;duckdb::ChunkMetaData&gt; &gt;::_M_check_len (7,797,539 samples, 0.02%)</title><rect x="384.1" y="1845" width="0.2" height="15.0" fill="rgb(205,223,35)" rx="2" ry="2" />
<text  x="387.14" y="1855.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ConcurrentQueue, std::default_delete&lt;duckdb::ConcurrentQueue&gt;, true&gt;::operator (30,898,596 samples, 0.06%)</title><rect x="506.6" y="1877" width="0.7" height="15.0" fill="rgb(224,222,30)" rx="2" ry="2" />
<text  x="509.59" y="1887.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::Expression&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::Expression&gt; const, duckdb::CSENode&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Expression&gt; const, duckdb::CSENode&gt; &gt;, std::__detail::_Select1st, duckdb::ExpressionEquality&lt;duckdb::Expression&gt;, duckdb::ExpressionHashFunction&lt;duckdb::Expression&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (8,415,664 samples, 0.02%)</title><rect x="728.5" y="1701" width="0.2" height="15.0" fill="rgb(241,144,51)" rx="2" ry="2" />
<text  x="731.52" y="1711.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::shared_ptr&lt;duckdb::MetaPipeline&gt;, true&gt;::~vector (13,628,570 samples, 0.03%)</title><rect x="1092.1" y="1861" width="0.3" height="15.0" fill="rgb(252,53,14)" rx="2" ry="2" />
<text  x="1095.11" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Binder::Bind (601,705,744 samples, 1.17%)</title><rect x="926.7" y="1749" width="13.8" height="15.0" fill="rgb(246,106,8)" rx="2" ry="2" />
<text  x="929.69" y="1759.5" ></text>
</g>
<g >
<title>duckdb::CardinalityEstimator::~CardinalityEstimator (14,624,350 samples, 0.03%)</title><rect x="755.8" y="1765" width="0.4" height="15.0" fill="rgb(225,87,44)" rx="2" ry="2" />
<text  x="758.83" y="1775.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (11,012,755 samples, 0.02%)</title><rect x="614.4" y="1765" width="0.3" height="15.0" fill="rgb(214,55,34)" rx="2" ry="2" />
<text  x="617.44" y="1775.5" ></text>
</g>
<g >
<title>[unknown] (6,560,428 samples, 0.01%)</title><rect x="11.3" y="997" width="0.1" height="15.0" fill="rgb(239,128,26)" rx="2" ry="2" />
<text  x="14.25" y="1007.5" ></text>
</g>
<g >
<title>std::function&lt;void  (12,551,523 samples, 0.02%)</title><rect x="1117.9" y="1061" width="0.3" height="15.0" fill="rgb(209,113,2)" rx="2" ry="2" />
<text  x="1120.90" y="1071.5" ></text>
</g>
<g >
<title>duckdb::LogicalInsert::~LogicalInsert (63,556,725 samples, 0.12%)</title><rect x="1035.9" y="1829" width="1.5" height="15.0" fill="rgb(229,192,35)" rx="2" ry="2" />
<text  x="1038.90" y="1839.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::unique_ptr&lt;duckdb::FilterInfo, std::default_delete&lt;duckdb::FilterInfo&gt;, true&gt;, true&gt;::~vector (5,948,403 samples, 0.01%)</title><rect x="756.8" y="1765" width="0.1" height="15.0" fill="rgb(225,104,48)" rx="2" ry="2" />
<text  x="759.76" y="1775.5" ></text>
</g>
<g >
<title>virtual thunk to std::__cxx11::basic_ostringstream&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_ostringstream (89,852,445 samples, 0.18%)</title><rect x="145.3" y="2021" width="2.1" height="15.0" fill="rgb(244,48,32)" rx="2" ry="2" />
<text  x="148.34" y="2031.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (4,677,740 samples, 0.01%)</title><rect x="645.0" y="1861" width="0.1" height="15.0" fill="rgb(228,187,8)" rx="2" ry="2" />
<text  x="648.00" y="1871.5" ></text>
</g>
<g >
<title>duckdb::Allocator::Allocate (107,570,346 samples, 0.21%)</title><rect x="890.0" y="1573" width="2.5" height="15.0" fill="rgb(223,86,17)" rx="2" ry="2" />
<text  x="893.00" y="1583.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (22,280,028 samples, 0.04%)</title><rect x="144.5" y="1813" width="0.5" height="15.0" fill="rgb(252,117,23)" rx="2" ry="2" />
<text  x="147.51" y="1823.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;duckdb::Vector*&gt; (76,191,275 samples, 0.15%)</title><rect x="221.2" y="1669" width="1.8" height="15.0" fill="rgb(246,179,13)" rx="2" ry="2" />
<text  x="224.21" y="1679.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;duckdb::AllocatedData, true&gt;::back (5,928,563 samples, 0.01%)</title><rect x="381.7" y="1829" width="0.2" height="15.0" fill="rgb(209,35,44)" rx="2" ry="2" />
<text  x="384.75" y="1839.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Unpin (31,061,225 samples, 0.06%)</title><rect x="469.9" y="1621" width="0.7" height="15.0" fill="rgb(209,78,6)" rx="2" ry="2" />
<text  x="472.91" y="1631.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_cache_bin_fill_small (5,382,374 samples, 0.01%)</title><rect x="103.4" y="1333" width="0.2" height="15.0" fill="rgb(252,3,41)" rx="2" ry="2" />
<text  x="106.43" y="1343.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (6,311,701 samples, 0.01%)</title><rect x="678.4" y="1701" width="0.2" height="15.0" fill="rgb(239,169,9)" rx="2" ry="2" />
<text  x="681.41" y="1711.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::BlockHandle, std::allocator&lt;duckdb::BlockHandle&gt;,  (90,681,651 samples, 0.18%)</title><rect x="239.1" y="709" width="2.1" height="15.0" fill="rgb(237,191,30)" rx="2" ry="2" />
<text  x="242.14" y="719.5" ></text>
</g>
<g >
<title>duckdb::make_uniq&lt;duckdb::HyperLogLog&gt; (19,851,800 samples, 0.04%)</title><rect x="426.5" y="1381" width="0.4" height="15.0" fill="rgb(227,79,18)" rx="2" ry="2" />
<text  x="429.47" y="1391.5" ></text>
</g>
<g >
<title>duckdb::grapheme_break_extended (22,044,237 samples, 0.04%)</title><rect x="601.5" y="1733" width="0.5" height="15.0" fill="rgb(217,219,1)" rx="2" ry="2" />
<text  x="604.49" y="1743.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;duckdb::BlockHandle&gt; &gt;::destroy&lt;duckdb::BlockHandle&gt; (341,372,223 samples, 0.67%)</title><rect x="342.2" y="1029" width="7.8" height="15.0" fill="rgb(241,160,40)" rx="2" ry="2" />
<text  x="345.16" y="1039.5" ></text>
</g>
<g >
<title>__handle_mm_fault (76,783,035 samples, 0.15%)</title><rect x="72.4" y="1893" width="1.7" height="15.0" fill="rgb(243,15,44)" rx="2" ry="2" />
<text  x="75.36" y="1903.5" ></text>
</g>
<g >
<title>duckdb::Binder::HasActiveBinder (7,005,846 samples, 0.01%)</title><rect x="937.2" y="1701" width="0.2" height="15.0" fill="rgb(219,185,2)" rx="2" ry="2" />
<text  x="940.19" y="1711.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::shared_ptr&lt;duckdb::Pipeline&gt;*&gt; (33,837,151 samples, 0.07%)</title><rect x="357.5" y="1813" width="0.7" height="15.0" fill="rgb(228,57,29)" rx="2" ry="2" />
<text  x="360.45" y="1823.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;duckdb::Binder&gt;::shared_ptr&lt;std::allocator&lt;duckdb::Binder&gt;, bool, duckdb::ClientContext&amp;, std::shared_ptr&lt;duckdb::Binder&gt;, bool&amp;&gt; (63,684,217 samples, 0.12%)</title><rect x="984.8" y="1781" width="1.5" height="15.0" fill="rgb(231,58,19)" rx="2" ry="2" />
<text  x="987.81" y="1791.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_Hashtable (5,041,124 samples, 0.01%)</title><rect x="388.9" y="1845" width="0.1" height="15.0" fill="rgb(214,31,8)" rx="2" ry="2" />
<text  x="391.92" y="1855.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; [], std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::unique_ptr&lt;duckdb::RenderTreeNode, std::default_delete&lt;duckdb::RenderTreeNode&gt;, true&gt; []&gt;, void&gt; (6,780,668 samples, 0.01%)</title><rect x="623.4" y="1717" width="0.2" height="15.0" fill="rgb(236,167,37)" rx="2" ry="2" />
<text  x="626.43" y="1727.5" ></text>
</g>
<g >
<title>duckdb::TableIndexList::Scan&lt;duckdb::LocalTableStorage::LocalTableStorage (6,027,110 samples, 0.01%)</title><rect x="428.0" y="1605" width="0.2" height="15.0" fill="rgb(207,165,28)" rx="2" ry="2" />
<text  x="431.05" y="1615.5" ></text>
</g>
<g >
<title>duckdb::StandardBufferManager::Allocate (440,861,820 samples, 0.86%)</title><rect x="871.9" y="1669" width="10.1" height="15.0" fill="rgb(239,200,15)" rx="2" ry="2" />
<text  x="874.86" y="1679.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (34,808,786 samples, 0.07%)</title><rect x="294.6" y="1589" width="0.8" height="15.0" fill="rgb(211,207,17)" rx="2" ry="2" />
<text  x="297.57" y="1599.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnRefExpression, std::default_delete&lt;duckdb::ColumnRefExpression&gt;, true&gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ColumnRefExpression&gt;, void&gt; (7,227,789 samples, 0.01%)</title><rect x="958.8" y="1637" width="0.2" height="15.0" fill="rgb(215,154,7)" rx="2" ry="2" />
<text  x="961.79" y="1647.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;duckdb::ScalarFunction const*, std::vector&lt;duckdb::ScalarFunction, std::allocator&lt;duckdb::ScalarFunction&gt; &gt; &gt;, duckdb::ScalarFunction*&gt; (6,378,611 samples, 0.01%)</title><rect x="1114.8" y="1749" width="0.2" height="15.0" fill="rgb(234,56,8)" rx="2" ry="2" />
<text  x="1117.81" y="1759.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (6,177,346 samples, 0.01%)</title><rect x="996.5" y="1573" width="0.1" height="15.0" fill="rgb(212,42,5)" rx="2" ry="2" />
<text  x="999.48" y="1583.5" ></text>
</g>
<g >
<title>duckdb::ExpressionExecutor::InitializeState (22,180,515 samples, 0.04%)</title><rect x="903.5" y="1701" width="0.5" height="15.0" fill="rgb(231,142,25)" rx="2" ry="2" />
<text  x="906.53" y="1711.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::~vector (5,344,498 samples, 0.01%)</title><rect x="573.6" y="1781" width="0.2" height="15.0" fill="rgb(218,101,36)" rx="2" ry="2" />
<text  x="576.65" y="1791.5" ></text>
</g>
<g >
<title>duckdb::BufferHandle::~BufferHandle (38,081,983 samples, 0.07%)</title><rect x="469.9" y="1653" width="0.8" height="15.0" fill="rgb(223,141,23)" rx="2" ry="2" />
<text  x="472.86" y="1663.5" ></text>
</g>
<g >
<title>duckdb::Connection::BeginTransaction (27,914,223 samples, 0.05%)</title><rect x="1108.6" y="1957" width="0.7" height="15.0" fill="rgb(244,131,51)" rx="2" ry="2" />
<text  x="1111.62" y="1967.5" ></text>
</g>
<g >
<title>__wake_up (5,947,700 samples, 0.01%)</title><rect x="252.1" y="1589" width="0.2" height="15.0" fill="rgb(247,17,24)" rx="2" ry="2" />
<text  x="255.13" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::ArithmeticSimplificationRule, std::default_delete&lt;duckdb::ArithmeticSimplificationRule&gt; &gt;::unique_ptr&lt;std::default_delete&lt;duckdb::ArithmeticSimplificationRule&gt;, void&gt; (8,603,023 samples, 0.02%)</title><rect x="790.1" y="1845" width="0.2" height="15.0" fill="rgb(230,65,40)" rx="2" ry="2" />
<text  x="793.11" y="1855.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorBuffer,  (24,619,006 samples, 0.05%)</title><rect x="292.0" y="1621" width="0.6" height="15.0" fill="rgb(251,13,38)" rx="2" ry="2" />
<text  x="295.04" y="1631.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end (5,473,940 samples, 0.01%)</title><rect x="720.8" y="1845" width="0.1" height="15.0" fill="rgb(237,168,20)" rx="2" ry="2" />
<text  x="723.81" y="1855.5" ></text>
</g>
<g >
<title>duckdb::PendingQueryResult::ExecuteInternal (7,167,095 samples, 0.01%)</title><rect x="1108.6" y="1893" width="0.2" height="15.0" fill="rgb(217,159,22)" rx="2" ry="2" />
<text  x="1111.62" y="1903.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt;, duckdb::PipelineEventStack, duckdb::ReferenceHashFunction&lt;duckdb::Pipeline&gt;, duckdb::ReferenceEquality&lt;duckdb::Pipeline&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::Pipeline&gt; const, duckdb::PipelineEventStack&gt; &gt; &gt;::insert&lt;std::pair&lt;duckdb::Pipeline&amp;, duckdb::PipelineEventStack&gt; &gt; (48,989,224 samples, 0.10%)</title><rect x="1052.3" y="1813" width="1.1" height="15.0" fill="rgb(217,107,49)" rx="2" ry="2" />
<text  x="1055.31" y="1823.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::tcache_gc_dalloc_event_handler (7,940,976 samples, 0.02%)</title><rect x="482.9" y="1333" width="0.1" height="15.0" fill="rgb(227,119,9)" rx="2" ry="2" />
<text  x="485.86" y="1343.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::_M_realloc_insert&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (14,300,959 samples, 0.03%)</title><rect x="813.4" y="1813" width="0.3" height="15.0" fill="rgb(214,22,50)" rx="2" ry="2" />
<text  x="816.37" y="1823.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__detail::_Node_iterator&lt;unsigned long, true, false&gt;, bool&gt;::pair&lt;std::__detail::_Node_iterator&lt;unsigned long, true, false&gt;, bool, true&gt; (8,272,126 samples, 0.02%)</title><rect x="668.8" y="1733" width="0.2" height="15.0" fill="rgb(240,91,38)" rx="2" ry="2" />
<text  x="671.81" y="1743.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Task&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Task&gt; &gt; &gt;::push_back (7,139,531 samples, 0.01%)</title><rect x="95.9" y="1733" width="0.2" height="15.0" fill="rgb(233,197,12)" rx="2" ry="2" />
<text  x="98.92" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Binder::Binder (40,007,779 samples, 0.08%)</title><rect x="1028.1" y="1733" width="0.9" height="15.0" fill="rgb(236,55,26)" rx="2" ry="2" />
<text  x="1031.13" y="1743.5" ></text>
</g>
<g >
<title>duckdb::TreeRenderer::CreateRenderTreeRecursive&lt;duckdb::LogicalOperator&gt; (28,326,721 samples, 0.06%)</title><rect x="548.5" y="1557" width="0.7" height="15.0" fill="rgb(215,129,2)" rx="2" ry="2" />
<text  x="551.54" y="1567.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (80,484,345 samples, 0.16%)</title><rect x="920.5" y="1861" width="1.8" height="15.0" fill="rgb(226,47,51)" rx="2" ry="2" />
<text  x="923.48" y="1871.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ExpressionInfo, std::default_delete&lt;duckdb::ExpressionInfo&gt;, true&gt;::operator (5,011,984 samples, 0.01%)</title><rect x="478.1" y="1733" width="0.1" height="15.0" fill="rgb(206,174,36)" rx="2" ry="2" />
<text  x="481.05" y="1743.5" ></text>
</g>
<g >
<title>duckdb::Vector::ResetFromCache (13,926,958 samples, 0.03%)</title><rect x="291.0" y="1605" width="0.3" height="15.0" fill="rgb(206,21,19)" rx="2" ry="2" />
<text  x="294.01" y="1615.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::_M_check_len (10,133,437 samples, 0.02%)</title><rect x="638.1" y="1701" width="0.2" height="15.0" fill="rgb(234,185,54)" rx="2" ry="2" />
<text  x="641.06" y="1711.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;*, std::reference_wrapper&lt;duckdb::PhysicalOperator&gt;*, std::allocator&lt;std::reference_wrapper&lt;duckdb::PhysicalOperator&gt; &gt; &gt; (8,958,300 samples, 0.02%)</title><rect x="1064.9" y="1733" width="0.2" height="15.0" fill="rgb(231,213,37)" rx="2" ry="2" />
<text  x="1067.89" y="1743.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::SelectionData,  (6,729,392 samples, 0.01%)</title><rect x="211.6" y="1637" width="0.2" height="15.0" fill="rgb(237,202,37)" rx="2" ry="2" />
<text  x="214.63" y="1647.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; (12,976,396 samples, 0.03%)</title><rect x="793.8" y="1829" width="0.3" height="15.0" fill="rgb(215,26,43)" rx="2" ry="2" />
<text  x="796.75" y="1839.5" ></text>
</g>
<g >
<title>std::vector&lt;std::shared_ptr&lt;duckdb::Event&gt;, std::allocator&lt;std::shared_ptr&lt;duckdb::Event&gt; &gt; &gt;::push_back (38,082,063 samples, 0.07%)</title><rect x="1053.5" y="1813" width="0.8" height="15.0" fill="rgb(231,84,2)" rx="2" ry="2" />
<text  x="1056.45" y="1823.5" ></text>
</g>
<g >
<title>duckdb::GetTreeWidthHeight&lt;duckdb::PipelineRenderNode&gt; (9,941,976 samples, 0.02%)</title><rect x="1066.5" y="1749" width="0.3" height="15.0" fill="rgb(245,16,46)" rx="2" ry="2" />
<text  x="1069.55" y="1759.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt;, duckdb::CaseInsensitiveStringHashFunction, duckdb::CaseInsensitiveStringEquality, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, duckdb::unique_ptr&lt;duckdb::Binding, std::default_delete&lt;duckdb::Binding&gt;, true&gt; &gt; &gt; &gt;::find (11,138,555 samples, 0.02%)</title><rect x="953.3" y="1573" width="0.2" height="15.0" fill="rgb(249,143,50)" rx="2" ry="2" />
<text  x="956.25" y="1583.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::VectorCacheBuffer,  (6,842,132 samples, 0.01%)</title><rect x="108.1" y="1669" width="0.2" height="15.0" fill="rgb(212,170,23)" rx="2" ry="2" />
<text  x="111.09" y="1679.5" ></text>
</g>
<g >
<title>do_syscall_64 (163,378,508 samples, 0.32%)</title><rect x="1170.4" y="2005" width="3.8" height="15.0" fill="rgb(229,65,51)" rx="2" ry="2" />
<text  x="1173.39" y="2015.5" ></text>
</g>
<g >
<title>std::__uniq_ptr_impl&lt;duckdb::TypeMatcherId, std::default_delete&lt;duckdb::TypeMatcherId&gt; &gt;::__uniq_ptr_impl (7,851,075 samples, 0.02%)</title><rect x="803.8" y="1797" width="0.2" height="15.0" fill="rgb(248,131,18)" rx="2" ry="2" />
<text  x="806.84" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (28,010,999 samples, 0.05%)</title><rect x="779.9" y="1813" width="0.6" height="15.0" fill="rgb(216,57,41)" rx="2" ry="2" />
<text  x="782.90" y="1823.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::Expression, std::default_delete&lt;duckdb::Expression&gt; &gt;::unique_ptr (5,063,644 samples, 0.01%)</title><rect x="951.2" y="1589" width="0.1" height="15.0" fill="rgb(213,108,44)" rx="2" ry="2" />
<text  x="954.21" y="1599.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::StorageCommitState, std::default_delete&lt;duckdb::StorageCommitState&gt; &gt;::operator= (15,293,123 samples, 0.03%)</title><rect x="317.8" y="1797" width="0.3" height="15.0" fill="rgb(241,98,51)" rx="2" ry="2" />
<text  x="320.78" y="1807.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt;, std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt;, std::allocator&lt;std::pair&lt;std::reference_wrapper&lt;duckdb::ParsedExpression&gt; const, unsigned long&gt; &gt;, std::__detail::_Select1st, duckdb::ExpressionEquality&lt;duckdb::ParsedExpression&gt;, duckdb::ExpressionHashFunction&lt;duckdb::ParsedExpression&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (5,787,701 samples, 0.01%)</title><rect x="968.8" y="1717" width="0.2" height="15.0" fill="rgb(243,28,50)" rx="2" ry="2" />
<text  x="971.83" y="1727.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::MetaTransaction, std::default_delete&lt;duckdb::MetaTransaction&gt;, true&gt;::unique_ptr (11,036,837 samples, 0.02%)</title><rect x="331.7" y="1861" width="0.2" height="15.0" fill="rgb(246,178,2)" rx="2" ry="2" />
<text  x="334.65" y="1871.5" ></text>
</g>
<g >
<title>[unknown] (5,874,673 samples, 0.01%)</title><rect x="33.6" y="2005" width="0.1" height="15.0" fill="rgb(238,103,29)" rx="2" ry="2" />
<text  x="36.60" y="2015.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long, unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; &gt;::~_Vector_base (10,026,885 samples, 0.02%)</title><rect x="562.1" y="1749" width="0.3" height="15.0" fill="rgb(233,50,9)" rx="2" ry="2" />
<text  x="565.14" y="1759.5" ></text>
</g>
<g >
<title>duckdb::CatalogSet::GetEntryForTransaction (6,936,357 samples, 0.01%)</title><rect x="1002.3" y="1717" width="0.1" height="15.0" fill="rgb(223,202,28)" rx="2" ry="2" />
<text  x="1005.26" y="1727.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::te_event_advance (17,356,743 samples, 0.03%)</title><rect x="367.8" y="1525" width="0.4" height="15.0" fill="rgb(207,94,38)" rx="2" ry="2" />
<text  x="370.80" y="1535.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::pac_alloc_impl (6,930,954 samples, 0.01%)</title><rect x="103.2" y="1269" width="0.2" height="15.0" fill="rgb(236,18,2)" rx="2" ry="2" />
<text  x="106.22" y="1279.5" ></text>
</g>
<g >
<title>duckdb::Binding::TryGetBindingIndex (12,350,845 samples, 0.02%)</title><rect x="960.2" y="1637" width="0.3" height="15.0" fill="rgb(205,109,5)" rx="2" ry="2" />
<text  x="963.24" y="1647.5" ></text>
</g>
<g >
<title>duckdb::VectorMetaData::VectorMetaData (14,623,711 samples, 0.03%)</title><rect x="884.4" y="1653" width="0.4" height="15.0" fill="rgb(254,81,10)" rx="2" ry="2" />
<text  x="887.42" y="1663.5" ></text>
</g>
<g >
<title>duckdb::unique_ptr&lt;duckdb::ColumnSegment, std::default_delete&lt;duckdb::ColumnSegment&gt;, true&gt;::operator (7,150,180 samples, 0.01%)</title><rect x="300.3" y="1573" width="0.1" height="15.0" fill="rgb(220,95,49)" rx="2" ry="2" />
<text  x="303.27" y="1583.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::RowGroup, std::default_delete&lt;duckdb::RowGroup&gt; &gt;::~unique_ptr (335,529,369 samples, 0.65%)</title><rect x="237.5" y="1269" width="7.8" height="15.0" fill="rgb(235,66,3)" rx="2" ry="2" />
<text  x="240.54" y="1279.5" ></text>
</g>
<g >
<title>duckdb::VectorCache::ResetFromCache (11,574,680 samples, 0.02%)</title><rect x="219.8" y="1605" width="0.3" height="15.0" fill="rgb(216,27,15)" rx="2" ry="2" />
<text  x="222.80" y="1615.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;duckdb::BlockHandle,  (39,909,879 samples, 0.08%)</title><rect x="880.8" y="1589" width="0.9" height="15.0" fill="rgb(245,102,1)" rx="2" ry="2" />
<text  x="883.82" y="1599.5" ></text>
</g>
<g >
<title>duckdb::BaseStatistics::BaseStatistics (34,209,647 samples, 0.07%)</title><rect x="423.9" y="1541" width="0.8" height="15.0" fill="rgb(221,174,52)" rx="2" ry="2" />
<text  x="426.93" y="1551.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;*&gt; (4,961,795 samples, 0.01%)</title><rect x="839.6" y="1749" width="0.2" height="15.0" fill="rgb(210,141,50)" rx="2" ry="2" />
<text  x="842.64" y="1759.5" ></text>
</g>
<g >
<title>page_fault (6,434,550 samples, 0.01%)</title><rect x="1174.2" y="2021" width="0.2" height="15.0" fill="rgb(206,159,25)" rx="2" ry="2" />
<text  x="1177.23" y="2031.5" ></text>
</g>
<g >
<title>std::default_delete&lt;duckdb::LogicalOperator&gt;::operator (8,939,247 samples, 0.02%)</title><rect x="1036.5" y="1285" width="0.2" height="15.0" fill="rgb(219,52,12)" rx="2" ry="2" />
<text  x="1039.47" y="1295.5" ></text>
</g>
<g >
<title>std::_Construct&lt;duckdb::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;&gt; (10,817,000 samples, 0.02%)</title><rect x="617.1" y="1701" width="0.2" height="15.0" fill="rgb(250,137,29)" rx="2" ry="2" />
<text  x="620.08" y="1711.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::LogicalType, std::allocator&lt;duckdb::LogicalType&gt; &gt;::~vector (5,039,178 samples, 0.01%)</title><rect x="312.5" y="1701" width="0.2" height="15.0" fill="rgb(227,184,38)" rx="2" ry="2" />
<text  x="315.54" y="1711.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::free_default (64,058,668 samples, 0.12%)</title><rect x="481.8" y="1413" width="1.5" height="15.0" fill="rgb(215,134,43)" rx="2" ry="2" />
<text  x="484.82" y="1423.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ExpressionMatcher, std::default_delete&lt;duckdb::ExpressionMatcher&gt;, true&gt; &gt; &gt;::push_back (31,677,808 samples, 0.06%)</title><rect x="809.1" y="1845" width="0.7" height="15.0" fill="rgb(238,83,13)" rx="2" ry="2" />
<text  x="812.10" y="1855.5" ></text>
</g>
<g >
<title>duckdb_jemalloc::arena_dalloc_large (6,479,729 samples, 0.01%)</title><rect x="297.8" y="1317" width="0.1" height="15.0" fill="rgb(253,63,54)" rx="2" ry="2" />
<text  x="300.76" y="1327.5" ></text>
</g>
<g >
<title>duckdb::VectorBuffer::CreateConstantVector (42,889,268 samples, 0.08%)</title><rect x="901.2" y="1669" width="1.0" height="15.0" fill="rgb(251,11,25)" rx="2" ry="2" />
<text  x="904.22" y="1679.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;duckdb::VectorChildBuffer, std::allocator&lt;duckdb::VectorChildBuffer&gt;,  (26,488,769 samples, 0.05%)</title><rect x="294.6" y="1573" width="0.6" height="15.0" fill="rgb(229,47,3)" rx="2" ry="2" />
<text  x="297.64" y="1583.5" ></text>
</g>
<g >
<title>std::vector&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt;, std::allocator&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; &gt;::emplace_back&lt;duckdb::unique_ptr&lt;duckdb::ParsedExpression, std::default_delete&lt;duckdb::ParsedExpression&gt;, true&gt; &gt; (12,160,585 samples, 0.02%)</title><rect x="945.4" y="1685" width="0.3" height="15.0" fill="rgb(242,132,1)" rx="2" ry="2" />
<text  x="948.44" y="1695.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;duckdb::SegmentScanState, std::default_delete&lt;duckdb::SegmentScanState&gt; &gt;::~unique_ptr (15,011,749 samples, 0.03%)</title><rect x="226.8" y="1509" width="0.4" height="15.0" fill="rgb(252,75,19)" rx="2" ry="2" />
<text  x="229.84" y="1519.5" ></text>
</g>
<g >
<title>duckdb::vector&lt;unsigned long, true&gt;::vector (5,333,609 samples, 0.01%)</title><rect x="857.9" y="1813" width="0.2" height="15.0" fill="rgb(244,65,16)" rx="2" ry="2" />
<text  x="860.94" y="1823.5" ></text>
</g>
<g >
<title>duckdb::OptimizerTypeToString[abi:cxx11] (4,631,840 samples, 0.01%)</title><rect x="780.8" y="1877" width="0.1" height="15.0" fill="rgb(240,205,24)" rx="2" ry="2" />
<text  x="783.80" y="1887.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (9,969,447 samples, 0.02%)</title><rect x="709.6" y="1733" width="0.3" height="15.0" fill="rgb(207,94,9)" rx="2" ry="2" />
<text  x="712.64" y="1743.5" ></text>
</g>
</g>
</svg>
